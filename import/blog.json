[
  {
    "id": "1",
    "created": "2008-05-17 17:30:00",
    "updated": "2008-10-08 08:11:01",
    "created_by": "0",
    "ordering_count": null,
    "title": "First Post",
    "slug": "first-post",
    "category_id": "1",
    "attachment": "",
    "intro": "There are several reasons for starting this blog. Firstly as a way to keep track of all my tips, tutorials, code snippets and various web projects. I like to be active in the world of web development and have been knocking out sites and libraries for years.",
    "body": "<p>Secondly I wanted somewhere to document other technical projects. I am a great fan of the writers of <a title=\"Lifehacker\" href=\"http://lifehacker.com/\">Lifehacker</a>, who have inspired me to share some of my own suggestions.</p> \n<p>Finally, it will be a convenient place to dump my thoughts on PHP, MySQL, Apache, Javascript,  and the world of computers in general.</p> \n<p>So welcome, and thanks for reading. </p>",
    "created_on": "1211045400",
    "updated_on": "1223453461",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "2",
    "created": "2008-06-06 12:13:00",
    "updated": "2008-12-18 07:48:49",
    "created_by": "0",
    "ordering_count": null,
    "title": "Matchbox with modular routes in CodeIgniter",
    "slug": "Matchbox-with-modular-routes-in-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "Want to make your Matchbox modules totally self-reliant? That is no easy thing right now, but follow this simple hack to get your custom routes modularised.",
    "body": "I have seen a few people posting around the <a target=\"_blank\" title=\"CodeIgniter forums\" href=\"http://codeigniter.com/forums/\">CodeIgniter forums</a> looking for a way to add config items and routes into Matchbox and after a two-minute ponder I realised it was ridiculously simple. To get it working on your CodeIgniter setup. \n<ul style=\"padding-left: 1em;\"> \n  <li>Open up 'application/libraries/Router.php'. This is the Matchbox replacement router library and not your core CodeIgniter one.</li> \n  <li>Around line 126 add in the following:<br /><br /> <pre><blockquote>// Load module routes files.\n$modules = array();\nforeach ($this-&gt;_matchbox-&gt;directory_array() as $directory):\n            \n  foreach(glob(APPPATH.$directory.'/*', GLOB_ONLYDIR) as $module):\n  @include_once($module.'/config/routes.php');\n  endforeach;\n            \nendforeach;</blockquote></pre> </li> \n  <li>In each of your modules that you want to have routes, make a folder /config/ and  make   a new file routes.php.</li> \n  <li>Put your routes in!</li> \n</ul> \n<p>The routes work in exactly the same way, you are not required to do this for every module and it means you can put any module in or out of your installation without worrying about the main routes file.</p> \n<p>For those of you who don't like hacking libraries like this, have no fear, I have mentioned this to Matchbox creator Zacharias Knudsen and it will be included in the next release.</p>",
    "created_on": "1212754380",
    "updated_on": "1229586529",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "3",
    "created": "2008-10-02 07:14:00",
    "updated": "2010-02-23 15:41:28",
    "created_by": "0",
    "ordering_count": null,
    "title": "Deploying sites with SVN",
    "slug": "Deploying-sites-with-SVN",
    "category_id": "5",
    "attachment": "",
    "intro": "Ever got fed up with FTP uploading multiple sites and forgetting which files need to go where? Sure you could delete the whole thing and upload it all, but that way you have downtime. I found a solution recently that works perfectly and is quick as hell.",
    "body": "<p>I have a working copy on my dev site and the live site. live will be trunk, dev will be the branch I am working on or trunk depending on what I want to test on that enviroment.</p>\n<p>It might sound a little nuts, but having SVN working copy on your server means you can easily deploy the new version of the site. Commit your local changes to the repo, then just SSH in and update!</p>\n<p>This step-by-step guide will assume <a href=\"http://blog.andrewbeacock.com/2005/08/installing-subversion-svn-on-linux.html\">SVN binaries are already installed</a> and you have SSH access.</p>\n<p>1.) <a href=\"http://intranet.cs.man.ac.uk/software/cs-ssh/cs-ssh-ref.php\">Log in via Putty or Terminal</a>:</p>\n<p style=\"padding-left: 30px;\">ssh user@yoursite.com</p>\n<p>2.) Get to your public_web root. This will probably be something like /home/user/public_html/ but could vary.</p>\n<p style=\"padding-left: 30px;\">cd /home/user/public_html</p>\n<p>3.) Then simply check the repo out.</p>\n<p style=\"padding-left: 30px;\">svn co http://svn.whatever.com/repo/trunk .</p>\n<p>DONT forget the full stop as that says to use the current directory and not create a new sub-directory.</p>\n<p>4.) Do work.</p>\n<p>5.) Update your site:</p>\n<p style=\"padding-left: 30px;\">svn update</p>\n<p>And there you have it. Each update you make will be deployed to your site when you run the svn update, minimum fuss.</p>",
    "created_on": "1222931640",
    "updated_on": "1266939688",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "4",
    "created": "2008-10-01 15:16:00",
    "updated": "2008-10-08 08:14:53",
    "created_by": "0",
    "ordering_count": null,
    "title": "PhilSturgeon.co.uk now 100% more sexy",
    "slug": "philsturgeoncouk-now-100-more-sexy",
    "category_id": "3",
    "attachment": "",
    "intro": "It has been  a damn long time since my last post, but I have my reasons.\n\nNormally I mess around with random technologies teaching myself fun new things over command line or coding scripts that do useful things. For the last 4 or 5 months however I have been manically bashing out code for a CMS I am working on.\n\nThat CMS, is finally almost here.",
    "body": "I upgraded this site to use my CMS while bored at work (fully over the command line I might add, will post a few of the steps tomorrow) and now it's good to go.<br /><br />The current version of my CMS is v0.76 which has quite a long way to go. I also need to develop a theme as the current default leaves a lot to be desired. Expect to see regular updates, hopefully I can make it somewhere near as sexy as <a target=\"_blank\" title=\"DerekAllard.com\" href=\"http://derekallard.com/\">DerekAllard.com</a>.<br /><br />",
    "created_on": "1222874160",
    "updated_on": "1223453693",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "5",
    "created": "2008-10-08 08:16:00",
    "updated": "2008-10-08 08:23:09",
    "created_by": "0",
    "ordering_count": null,
    "title": "SSH anywhere on anything",
    "slug": "ssh-anywhere-on-anything",
    "category_id": "4",
    "attachment": "",
    "intro": "Notice you have a bug in your site but your at work with a proxy in place? On your friends computer who doesn't want you installing Putty? Have no fear, consoleFISH is here!",
    "body": "Using AJAX based <a title=\"consoleFISH\" href=\"https://www.serfish.com/console/\">consoleFISH</a> you can log into any server via SSH and have full access to your site over this funky emulated bash terminal. It's so effective I managed to fix the news admin panel for this site (so I could post this article) in less than a minute.<br /><br />It has a very new version of vim and colours files, text and syntax just like normal.<br /><br />The downsides however are quite large. There is a captcha that contains obscure badly displayed words that kicks in roughly every 45 seconds unless you 3 euro's a month. Then there's the tin-hat crowd who I am sure will not like the idea of sending ssh passwords (especially server root logins) to a third party.<br /><br />These downsides are for you to weigh up, but if you have no other way to access SSH, this could be a very handy tool.<br /><br />Let me know what scrapes this service has got you out of.<br />",
    "created_on": "1223453760",
    "updated_on": "1223454189",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "6",
    "created": "2008-10-07 08:58:00",
    "updated": "2008-10-08 08:15:36",
    "created_by": "0",
    "ordering_count": null,
    "title": "PHP Library for the Command Line",
    "slug": "php-library-for-the-command-line",
    "category_id": "4",
    "attachment": "",
    "intro": "Not looking forward to using a different language to get some command line work done? It could be worth it, but we don't all have the spare time to learn. Cut some time with this PHP class.",
    "body": "<p><a title=\"PHP Command Line Library demo thumbnail\" rel=\"lightbox\" class=\"float-left spacer-right\" href=\"/libraries/spaw2/uploads/default/images/php-cli.jpg\"><img border=\"0\" alt=\"PHP Command Line Library demo screenshot\" style=\"width: 233px; height: 162px;\" src=\"/libraries/spaw2/uploads/default/images/php-cli-thumb.jpg\"></a>Using my sexy new PHP CLI library you don't even to learn anything. It will be Ignited and posted properly when I get the chance, but for now take a look at the demo code and give it a try.</p> \n<p><a title=\"PHP Command Line Class\" target=\"_blank\" href=\"http://styledna.pastebin.com/f69855cc9\">Pastebin: PHP Command Line Class</a></p> <a title=\"PHP Command Line Library demo thumbnail\" rel=\"lightbox\" class=\"float-left spacer-right\" href=\"/libraries/spaw2/uploads/default/images/php-cli.jpg\"></a> \n<p>To get this working simply save the file in your web root and open up your command line tool of choice. In Windows that would be Run &gt; cmd [Enter] and on Mac you hit CMD + Space &gt; Terminal [Enter].</p> <br /> \n<p>Type in:</p> <blockquote>php /path/to/file.php</blockquote> \n<p>The path to your file may well be something like:</p> \n<ul> \n  <li>\"C:\\Program Files\\Apache Software Foundation\\Apache2.2\\htdocs\"<span style=\"font-style: italic;\"> (Windows Apache 2.2)</span><br /></li> \n  <li>/home/username/public_html/cli.php<span style=\"font-style: italic;\"> (Linux Apache)</span><br /></li> \n  <li>/Users/username/Sites/cli.php <span style=\"font-style: italic;\">(Mac Leopard Apache)</span></li> \n</ul> \n<p>Let me know what you think in the comments... in a few days when they work. :p</p>",
    "created_on": "1223369880",
    "updated_on": "1223453736",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "7",
    "created": "2008-10-13 17:26:00",
    "updated": "2009-01-28 22:42:52",
    "created_by": "0",
    "ordering_count": null,
    "title": "Version 0.8 of StyleDNA CMS hits the streets!",
    "slug": "Version-0.8-of-StyleDNA-CMS-hits-the-streets",
    "category_id": "11",
    "attachment": "",
    "intro": "This has been one of the most involving versions so far with the most change involved. It has been tricky to get done but im very proud of it!",
    "body": "<p>New in this version of the CMS is:</p> \n<ul> \n  <li>Permission system &#40;still got some work to do, but will restrict users by module/controller/method&#41;.</li> \n  <li>Re-organized navigation to get rid of tab clutter.</li> \n  <li>Fixed .htaccess to allow clean url's.</li> \n  <li>Added option to send activation emails or not.</li> \n  <li>Cleaned up lots of the CSS and stripped out unused code.<br /></li> \n  <li>Impoved news module.</li> \n  <li>Improved interface in most module admin sections.<br /></li> \n</ul> \n<p>There's a bunch of other changes I can't really remember, and many that aren't worth a mention. All-in-all this is a damn good release and im glad the CMS is getting so close to being complete.</p> \n<p>As always, the latest version is online on the <a title=\"demo site\" target=\"_blank\" href=\"http://demo.styledna.net/\">demo site</a>.<br /></p> \n<p>Special thanks to <a href=\"http://codeigniter.com/forums/member/44710/\">MrEnirO</a> as always for his huge contributions to this CMS.</p>",
    "created_on": "1223918760",
    "updated_on": "1233182572",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "8",
    "created": "2008-11-27 09:56:00",
    "updated": "2008-11-28 09:58:40",
    "created_by": "0",
    "ordering_count": null,
    "title": "Finally, my MSN Money UK sections go live!",
    "slug": "Finally-my-MSN-Money-UK-sections-go-live",
    "category_id": "1",
    "attachment": "",
    "intro": "The company I work for have a contract with MSN to create some new sections for MSN Money UK on the topics of Funds, Pensions and Currency services, and my task was to code them all...!",
    "body": "<p>Now normally when I do big jobs I like to use CodeIgniter but at work that is not an option. Instead I had to get these sections working using the same codebase as the rest of the company site on a subdomain, which was last done 2 or 3 years ago. It seems everyone who was around in the company then had either forgotten how, or had no idea!</p>\n\n<p>Well after weeks of struggling with Apache config files, CNAME rules, tricky redirects and seemingly never ending change requests, the sites are live!</p> \n<ul> \n  <li><strong><a target=\"_blank\" href=\"http://funds.money.uk.msn.com/\">MSN Money UK - Funds</a></strong></li> \n  <li><strong><a target=\"_blank\" href=\"http://pensions.money.uk.msn.com/\">MSN Money UK - Pensions</a></strong> </li> \n  <li><strong>MSN Money UK - Currency <em><small>Coming Soon</small></em></strong> </li> \n</ul> \n<p>Will be a nice bullet point to go on my CV methinks.</p>",
    "created_on": "1227779760",
    "updated_on": "1227866320",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "9",
    "created": "2008-11-28 11:12:00",
    "updated": "2008-11-28 11:25:42",
    "created_by": "0",
    "ordering_count": null,
    "title": "Creating proxies with Apache",
    "slug": "Creating-proxies-with-Apache",
    "category_id": "8",
    "attachment": "",
    "intro": "Setting up HTTP proxies in Apache can be handy for many reasons. If you have a server at home, stream media using something like Orb, watch your torrents downloading with a remote URL or do any other similar activities, you may be slightly fed up with having to keep track of all the different port nubmers they use.",
    "body": "<p>Other than just being easy to forget, these ports are often not open in office environments or internet cafe's. To get any page on any port displaying using nothing but a few lines of Apache config and your own VPS, follow these instructions.</p>\n\n<h3>Step #1 - Enable proxying in Apache</h3>\n<p>Enable the following modules by uncommenting the following lines:</p>\n\n<blockquote>\n<pre>\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_connect_module modules/mod_proxy_connect.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\n</pre>\n</blockquote>\n\n<h3>Step #2 - Add the virtual host entry</h3>\n<p>Now you need to work out where you want to put the virtual host entry that will handle this proxy. You can just throw it in your main Apache conf/httpd.conf, but if like me you like to keep the main config file clean, uncomment the 2nd line below and put your virtual host entry in apache/conf/extra/httpd-vhosts.conf.</p>\n\n<blockquote>\n<pre>\n# Virtual hosts\n#Include conf/extra/httpd-vhosts.conf\n</pre>\n</blockquote>\n\n<p>In this example I am setting up a virtual subdomain for example.com. Any URI you access on http://test.example.com/foo/bar.php will really be requesting http://example.com:8080/foo/bar.php.</p>\n\n<blockquote>\n<pre>\n&#60;VirtualHost test.example.com:80&#62;\n\n       ProxyRequests Off\n       \n       &#60;Proxy *&#62;\n               Order deny,allow\n               Allow from all\n       &#60;/Proxy&#62;\n\n       ProxyPass / http://example.com:8080/\n       ProxyPassReverse / http://example.com:8080/\n\n&#60;/VirtualHost&#62;\n</pre>\n</blockquote>\n\n\n<h3>Step #3 - Set up secure version (optional)</h3>\n\n<p>To get the same sub-domain working over https, you will need to make sure you have your server listening to port 443. To do this, uncomment the following line.</p> \n\n<blockquote>\n<pre>\n# Secure (SSL/TLS) connections\n#Include conf/extra/httpd-ssl.conf \n</pre>\n</blockquote>\n\n<p>Then add this virtual host entry in the same place as the last.</p>\n\n<blockquote>\n<pre>\n&#60;VirtualHost test.example.com:443&#62;\n\n       ProxyRequests Off\n       \n       &#60;Proxy *&#62;\n               Order deny,allow\n               Allow from all\n       &#60;/Proxy&#62;\n\n       ProxyPass / https://example.com:8080/\n       ProxyPassReverse / https://example.com:8080/\n\n&#60;/VirtualHost&#62;\n</pre>\n</blockquote>\n\n<h3>Step #4 - Restart Apache, Complete</h3>\n\n<p>Restart apache and try accessing your new subdomain.</p>\n\n<p>If all has gone well, I can access whatever script I may have running on 8080, over a network that will only accept normal web ports (80/443).</p>",
    "created_on": "1227870720",
    "updated_on": "1227871542",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "10",
    "created": "2008-12-11 14:46:00",
    "updated": "2009-01-28 22:42:23",
    "created_by": "0",
    "ordering_count": null,
    "title": "cURL 1 out on CodeIgniter",
    "slug": "cURL-1-out-on-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "That title may be misleading but I just couldn't help myself... Puns aside, I decided it was time to write a nice clean cURL library for CodeIgniter to help with your automated browsing and remote page requests.",
    "body": "<p>I noticed a support request for a cURL related question and decided it was time CI had its own cURL library. After a few hours of blind coding on a box with no cURL extension, I posted a solution that brilliantly enough worked first time (score!). When I got home the user posting the request pointed out that <a target=\"_blank\" href=\"http://alexpolski.com/\">Alex Poloski</a> had already <a target=\"_blank\" href=\"http://alexpolski.com/2008/04/13/curl-library-for-codeigniter/\">made one</a>.</p> \n<p>Ahh well, my wheel is better!</p> \n<p>To take a look at my new-fangled <a target=\"_blank\" href=\"http://codeigniter.com/wiki/Curl_library/\">cURL library</a> take a look at its page on the <a target=\"_blank\" href=\"http://codeigniter.com/wiki/\">CodeIgniter Wiki</a></p>",
    "created_on": "1229006760",
    "updated_on": "1233182543",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "13",
    "created": "2009-01-12 15:38:00",
    "updated": "2009-01-12 15:44:30",
    "created_by": "0",
    "ordering_count": null,
    "title": "New service launched, CodeIgniter Web Hosting",
    "slug": "New-service-launched-CodeIgniter-Web-Hosting",
    "category_id": "3",
    "attachment": "",
    "intro": "While there may be many hosting solutions out there, how many of them are designed for CodeIgniter developers? Now the users have one!",
    "body": "This\nhosting comes with the usual Linux, Apache, cPanel,\nPHP, MySQL, SSH, etc and CodeIgniter pre-installed in a shared\ndirectory so you do not have to manage uploads and updates.<br /><br />The real bonus is this hosting will have free \"as long as im\nawake\" support via SMS, e-mail, IM and phone. That is anything from\nset-up and configuration to tips and suggestions from known a\nwell-known CI user \"pyromaniac\".<br /><br />For more information, see \"<a href=\"/CodeIgniter-Hosting.html\">CodeIgniter Web Hosting</a>\".<br /><br />I'd love to hear thoughts and feedback to this idea in the comments, but please use the <a href=\"/contact.html\">contact form</a> to sign up for this service.<br /><a href=\"/CodeIgniter-Hosting.html\">&nbsp;</a>",
    "created_on": "1231774680",
    "updated_on": "1231775070",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "12",
    "created": "2009-01-12 08:24:00",
    "updated": "2009-01-12 15:12:37",
    "created_by": "0",
    "ordering_count": null,
    "title": "DateTime objects - Start month, end month, first Monday, etc",
    "slug": "DateTime-objects-Start-month-end-month-first-Monday-etc",
    "category_id": "2",
    "attachment": "",
    "intro": "Throw away strtotime and date() and check out PHP's funky DateTime objects for much greater control over your dates.",
    "body": "<p>I recently came across PHP's <a target=\"_blank\" href=\"http://uk3.php.net/manual/en/class.datetime.php\">DateTime</a> object and I'm loving it.</p> <code>// Calculate month and year to look for\n$month = !empty($_GET['month']) ? $_GET['month'] : date('m');\n$year = !empty($_GET['year']) ? $_GET['year'] : date('Y');\n\n// Start of the month\n$start_date = new DateTime($year.'-'.$month.'-01');\n\n// End of the month\n$end_date = new DateTime( $start_date-&gt;format('Y-m-d') );\n$end_date-&gt;modify('+1 month -1 day');\n\necho '  Start: '. $start_date-&gt;format('d m Y');\necho '<br /> End:  '. $end_date-&gt;format('d m Y');</code> \n<p>Working out the first Monday of the month is also quite easy, but has one slight complication. If Monday is on the 1st, the modifier \"first monday\" will look for the next Monday AFTER that, meaning the 8th.</p> <code>$first_monday = new DateTime( $start_date-&gt;format('Y-m-d') );\nif($first_monday-&gt;format('l') != 'Monday') $first_monday-&gt;modify('first monday');</code> \n<p>DateTime may have been around for a while now, but it's still not fully documented or even entirely complete on any of the PHP set-ups I have tried it on. Still waiting on DateTime::diff().</p>",
    "created_on": "1231748640",
    "updated_on": "1231773157",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "14",
    "created": "2009-01-13 09:23:00",
    "updated": "2009-01-28 22:42:15",
    "created_by": "0",
    "ordering_count": null,
    "title": "How to recover files in Eclipse",
    "slug": "How-to-recover-files-in-Eclipse",
    "category_id": "10",
    "attachment": "",
    "intro": "Accidentally deleted your working copy/local files and Ctrl + Z just won't get them back? Find out how to recover almost any file using Eclipse's built in history/version tracking feature.",
    "body": "I have just this minute recovered from a very foolish mistake. A corrupted working copy lead me to wipe my local files, resulting in the loss of several hours of very complicated work. <br /><br />Using a bit of common sense I managed to recover all of my files - all be it some 20 minute old versions - and get them back into my working copy.<br /><br /><span style=\"font-weight: bold;\">Step 1: </span>Straight after deleting the files, you will notice that Eclipse still thinks they are there. The easiest way (but not always helpful) is to right click on the parent folder of the files and hit \"Restore from Local History\". This did not find the files I was looking for, but is worth checking.<br /><br /><span style=\"font-weight: bold;\">Step 2: </span>Navigate to the file&#40;s&#41; you are looking for in the Navigator, right click and select Team &gt; Show Local History.<br /><br /><span style=\"font-weight: bold;\">Step 3: </span>Eclipse will show a list of revisions with date and time. Double-click the most recent revision before the delete, and you will be shown the file!<br /><br /><span style=\"font-weight: bold;\">Step 4: </span>Save this file somewhere very safe, and repeat process for all the other files you need.<br /><br />When you are done just grab yourself a new working copy and copy your backed up files back to their original locations!<br /><br />This can be slightly laborious if you have been modifying several files, but in many cases it will be MUCH quicker than re-writing all of your code.<span style=\"font-style: italic;\">&nbsp;</span><br /><br />",
    "created_on": "1231838580",
    "updated_on": "1233182535",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "15",
    "created": "2009-01-19 11:48:00",
    "updated": "2010-02-08 19:30:45",
    "created_by": "0",
    "ordering_count": null,
    "title": "How to: Clean username URL's in CodeIgniter",
    "slug": "How-to-Clean-username-URLs-in-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "The URI segment system in CodeIgniter is a very handy thing, but sometimes not flexible enough to handle <i>all</i> your URL needs in one go. To have URL's like http://example.com/username and still maintain normal URI segment structure, read on.",
    "body": "<p>When most people start work on this, they think about using routes. You <span style=\"text-decoration: underline;\"><em>could</em></span> do it this way, but then every time you enter a url such as http://example.com/controller then router would send the controller name off to check if it is a username. It's possible you could do a database check and send it back, but that is just annoying.</p>\n<p>Another way is hooks, but I am not a fan of over-using hooks as they can create invisible code which confuses other developers.</p>\n<p>The way I like to do this is to add a URL suffix in the config file &#40;meaning add .html or similar to the end of all your pages&#41; then anything with only 1 URI segment that does not have a suffix, is a username.</p>\n<p><strong>Step #1</strong> Edit <strong>application/config/config.php</strong> and set the following config setting:</p>\n<p><code class=\"php\">/* |-------------------------------------------------------------------------- | URL suffix |-------------------------------------------------------------------------- | | This option allows you to add a suffix to all URLs generated by CodeIgniter. | For more information please see the user guide: | | http://codeigniter.com/user_guide/general/urls.html */  $config['url_suffix'] = \".html\";</code></p>\n<p><strong>Step #2</strong> Add/edit your .htaccess file and add the highlighted rule:</p>\n<p><code>Options +FollowSymLinks RewriteEngine on   RewriteBase /  # -- Add this rule --- RewriteCond %{REQUEST_URI} ^/([a-zA-Z0-9_-]+)$ RewriteRule ^(.*)$ index.php/profiles/view/$1 [L] # End of rule   # Standard CodeIgniter rule RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L]</code></p>\n<p>That is basically a standard CI .htaccess with an extra rule in it. Any URI segment 1 with a-z, 0-9, - or _ in it which does <span style=\"text-decoration: underline;\"><em>not</em></span> have a URL suffix will go to a controller which will take the username and show the correct profile.</p>\n<p>If you have mod_proxy enabled you could even swap the flag [L] with [L,P] to make the URL stay as example.com/username.</p>",
    "created_on": "1232365680",
    "updated_on": "1265657445",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "16",
    "created": "2009-01-23 14:08:00",
    "updated": "2009-01-28 22:42:43",
    "created_by": "0",
    "ordering_count": null,
    "title": "Comments fixed!",
    "slug": "Comments-fixed",
    "category_id": "11",
    "attachment": "",
    "intro": "I noticed last night that comments once again have been broken, so stayed up late fixing them along with several other bugs in this CMS. Consider them fixed!",
    "body": "<p>The newest version of my CMS v0.8.8.2 has comments fixed along with improved news archive, user settings page, settings caching, etc. Please take a look around and let me know what else is broken so I can get it sorted for v1.0 which is looming on the horizon.</p>",
    "created_on": "1232719680",
    "updated_on": "1233182563",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "116",
    "created": "2012-01-02 21:18:00",
    "updated": "2012-01-02 23:53:31",
    "created_by": "2",
    "ordering_count": null,
    "title": "2012: The year of PHP cloud hosting",
    "slug": "2012-the-year-of-php-cloud-hosting",
    "category_id": "2",
    "attachment": "",
    "intro": "<p>\n\tCloud hosting is nothing new. Seeing as &quot;cloud&quot; is such a loosely used term some will consider their VPS solutions on Slicehost or Rackspace to be &quot;cloud hosting&quot;. Thats partially true, but this article covers how PHP is getting some serious attention in the PaaS (Platform as a Service)&nbsp;field. This year you will almost certainly find yourself making the decision wether or not to move some of your applications and services accross to the cloud, and this article can hopefully help you work out why and how.</p>",
    "body": "Cloud hosting is nothing new. Seeing as \"cloud\" is such a loosely used term some will consider their VPS solutions on Slicehost or Rackspace to be \"cloud hosting\". That is partially true, but this article covers how PHP is getting some serious attention in the PaaS (Platform as a Service) field. This year you will almost certainly find yourself making the decision wether or not to move some of your applications and services across to the cloud, and this article can hopefully help you work out why and how.\n\nThe two PaaS solutions in my toolkit right now are [PHP Fog](http://phpfog.com/) and [Pagoda Box](http://pagodabox.com/). I've been using the two systems for the last year since they were kind enough to let me into their private BETA. Currently in my mind there are no clear victors as they both work a little differently, but they both achieve the same goal: get your code running online quickly and securely.\n\n### That sounds quite a lot like Heroku?\n\nPrecisely. The Ruby community has had [Heroku](http://www.heroku.com/) since 2007 and they've been offering the same thing for quite some time. Heroku is a very simple service that is basically a Git repository that will deploy your code once you push to it and automatically handle any dependencies you might have such as Gems (think PEAR or PECL for the PHP's closest equivalent, but less clunky).\n\nRuby didn't just get one PaaS though, there are quite a few smaller companies and one large competitor [Engine Yard](http://www.engineyard.com/) which was founded even earlier in 2006.\n\n### So why is this new?\n\nWell this has not existed at a decent level in PHP for very long. The main reason for this is that for a long time PHP didn't really need it. If you look at Ruby it is much more low-level than PHP and it needs a little kick in the right direction to become a web-ready language. It needs WeBrick/Thin/Shotgun web-servers running to get it accepting HTTP requests and is in general designed more for long-life processes while PHP has always been more about distributed .php files running once on fire-and-forget mode using CGI or mod_php. In general Ruby systems take a bit more work to get running on the web, Heroku helps speed that all up.\n\nThat is still true, so why do we need PHP PaaS now?\n\n### Speedy Deployments\n\nIf you are still using FTP as your main method of deployment you really need to go and sit on the naughty step and have a think about your life. FTP is slow as balls, insecure and did I mention it was slow as balls? Version Control has come a long way in the last few years and [adoption of Git in the CodeIgniter community](/blog/2011/08/cicon2011-and-the-future-of-codeigniter) has meant that all my projects now use it.\n\nNow what happens when we want to deploy all of our well managed, feature branched, Git tracked code? Open FTP and drag files around? Pfft. Hit FTP Sync and hope I don't randomly delete content from the live site? No thank you. \n\nThere are some tools around such as [DeployHQ](http://deployhq.com/) which will take your Git repo and deploy changed files over FTP/SSH for you. Over the previous option this is at least a step in the right direction, but recently I've had a few nightmares. If you upgrade a site using DeployHQ and you for example upgrade a CMS which has renamed a integral folder, it will go and delete all those important files before it starts uploading the \"new\" files. Sure that might not that common, but definitely a potential concern.\n\nAnother option is to spend some time faffing about with the Ruby-based Capistrano? If you have been using Capistrano a while you'll probably have it down to a art form, but this is an extra thing to learn which is often beyond the means of some new users. Go back to the first time you tried to set it up. I've got to be honest, I've had less stressful experiences.\n\nPaaS services such as PHP Fog and Pagoda Box take care of all of this for you. Create your application and they give you a Git remote to push to.\n\nDeploying my sites has become as simple as running one command:\n\n<pre class=\"code\">\n$ git push production master\n</pre>\n\nI migrated [pyrocms.com](http://pyrocms.com) away from a VPS to Pagoda Box in about 10 minutes thanks to that simplicity. Yummy.\n\n### Security\n\nHosting code can be a dangerous game, with even companies like [Facebook screwing up](http://techcrunch.com/2007/08/11/facebook-source-code-leaked/) at times. Anyone can get a basic LAMP stack up but if you want it to be really secure what do you do? Teach yourself a whole bunch of sysadmin stuff and take on that role as well as being the developer? That's two jobs. If you're anything like me and already stuck with project management, book keeping and even [event management now](http://ciconf.com) the last thing you need is another hat to wear. \n\nIf you are running a company you'll probably end up hiring a guy (or a team of guys) just to look after your servers. Shoving it in the cloud takes care of that for you, and if you have any security leaks... hell you have somebody to sue for it.\n\n### Scaling\n\nNo more \"Slashdot-effect\" for you. You can easily control how much traffic your system is ready to handle, with some systems offering \"auto-scaling with daily budgets\", meaning you can pay for your average traffic then if you suddenly get a massive spike your instant instantly adapts to handle the new load.\n\nOn the whole with Pagoda Box I find that one instance can handle 1,000 users a day just fine. Once or twice I've dragged the slider to two instances just so I don't get that Pingdom email while I'm out with the girlfriend, just for safety of mind. Scaling of that ease is POWERFUL stuff.\n\n### Future\n\nA few months ago it seems pretty much every PaaS provider decided that they all had to do everything. While I'm still not sure if that is for the best, Heroku now handle Java, Python, Scala, Grails, Python/Django and I hear they have a PHP in private BETA - but don't quote me on that.\n\nEngine Yard made a similar move and snapped up [Orchestra.io](http://orchestra.io/) which is another PHP platform that's been around for a while. I had a Skype preview of that one back in its early days and it's another great contender.\n\nPHP Fog are going the other way and starting to offer other services, under their rebranded service [App Fog](http://appfog.com/).\n\nIf you're interesting in hearing more about how Cloud Hosting works, I've managed to get Pagoda Box to send their Chief Architect, Tyler Flint over to [CICONF 2012](http://ciconf.com/) in London this February.\n\nThe future is looking more and more like it's going to be cloud based and I am happy with that. The less time I have to spend working to achieve the same goals means more time and money can be spent doing something fun.",
    "created_on": "1325539080",
    "updated_on": "1325548411",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "ec51aed78a2f981849b0481833237c11",
    "type": "markdown",
    "parsed": "<p>Cloud hosting is nothing new. Seeing as \"cloud\" is such a loosely used term some will consider their VPS solutions on Slicehost or Rackspace to be \"cloud hosting\". That is partially true, but this article covers how PHP is getting some serious attention in the PaaS (Platform as a Service) field. This year you will almost certainly find yourself making the decision wether or not to move some of your applications and services across to the cloud, and this article can hopefully help you work out why and how.</p>\n\n<p>The two PaaS solutions in my toolkit right now are <a href=\"http://phpfog.com/\">PHP Fog</a> and <a href=\"http://pagodabox.com/\">Pagoda Box</a>. I've been using the two systems for the last year since they were kind enough to let me into their private BETA. Currently in my mind there are no clear victors as they both work a little differently, but they both achieve the same goal: get your code running online quickly and securely.</p>\n\n<h3>That sounds quite a lot like Heroku?</h3>\n\n<p>Precisely. The Ruby community has had <a href=\"http://www.heroku.com/\">Heroku</a> since 2007 and they've been offering the same thing for quite some time. Heroku is a very simple service that is basically a Git repository that will deploy your code once you push to it and automatically handle any dependencies you might have such as Gems (think PEAR or PECL for the PHP's closest equivalent, but less clunky).</p>\n\n<p>Ruby didn't just get one PaaS though, there are quite a few smaller companies and one large competitor <a href=\"http://www.engineyard.com/\">Engine Yard</a> which was founded even earlier in 2006.</p>\n\n<h3>So why is this new?</h3>\n\n<p>Well this has not existed at a decent level in PHP for very long. The main reason for this is that for a long time PHP didn't really need it. If you look at Ruby it is much more low-level than PHP and it needs a little kick in the right direction to become a web-ready language. It needs WeBrick/Thin/Shotgun web-servers running to get it accepting HTTP requests and is in general designed more for long-life processes while PHP has always been more about distributed .php files running once on fire-and-forget mode using CGI or mod_php. In general Ruby systems take a bit more work to get running on the web, Heroku helps speed that all up.</p>\n\n<p>That is still true, so why do we need PHP PaaS now?</p>\n\n<h3>Speedy Deployments</h3>\n\n<p>If you are still using FTP as your main method of deployment you really need to go and sit on the naughty step and have a think about your life. FTP is slow as balls, insecure and did I mention it was slow as balls? Version Control has come a long way in the last few years and <a href=\"/blog/2011/08/cicon2011-and-the-future-of-codeigniter\">adoption of Git in the CodeIgniter community</a> has meant that all my projects now use it.</p>\n\n<p>Now what happens when we want to deploy all of our well managed, feature branched, Git tracked code? Open FTP and drag files around? Pfft. Hit FTP Sync and hope I don't randomly delete content from the live site? No thank you. </p>\n\n<p>There are some tools around such as <a href=\"http://deployhq.com/\">DeployHQ</a> which will take your Git repo and deploy changed files over FTP/SSH for you. Over the previous option this is at least a step in the right direction, but recently I've had a few nightmares. If you upgrade a site using DeployHQ and you for example upgrade a CMS which has renamed a integral folder, it will go and delete all those important files before it starts uploading the \"new\" files. Sure that might not that common, but definitely a potential concern.</p>\n\n<p>Another option is to spend some time faffing about with the Ruby-based Capistrano? If you have been using Capistrano a while you'll probably have it down to a art form, but this is an extra thing to learn which is often beyond the means of some new users. Go back to the first time you tried to set it up. I've got to be honest, I've had less stressful experiences.</p>\n\n<p>PaaS services such as PHP Fog and Pagoda Box take care of all of this for you. Create your application and they give you a Git remote to push to.</p>\n\n<p>Deploying my sites has become as simple as running one command:</p>\n\n<pre class=\"code\">\n$ git push production master\n</pre>\n\n<p>I migrated <a href=\"http://pyrocms.com\">pyrocms.com</a> away from a VPS to Pagoda Box in about 10 minutes thanks to that simplicity. Yummy.</p>\n\n<h3>Security</h3>\n\n<p>Hosting code can be a dangerous game, with even companies like <a href=\"http://techcrunch.com/2007/08/11/facebook-source-code-leaked/\">Facebook screwing up</a> at times. Anyone can get a basic LAMP stack up but if you want it to be really secure what do you do? Teach yourself a whole bunch of sysadmin stuff and take on that role as well as being the developer? That's two jobs. If you're anything like me and already stuck with project management, book keeping and even <a href=\"http://ciconf.com\">event management now</a> the last thing you need is another hat to wear. </p>\n\n<p>If you are running a company you'll probably end up hiring a guy (or a team of guys) just to look after your servers. Shoving it in the cloud takes care of that for you, and if you have any security leaks... hell you have somebody to sue for it.</p>\n\n<h3>Scaling</h3>\n\n<p>No more \"Slashdot-effect\" for you. You can easily control how much traffic your system is ready to handle, with some systems offering \"auto-scaling with daily budgets\", meaning you can pay for your average traffic then if you suddenly get a massive spike your instant instantly adapts to handle the new load.</p>\n\n<p>On the whole with Pagoda Box I find that one instance can handle 1,000 users a day just fine. Once or twice I've dragged the slider to two instances just so I don't get that Pingdom email while I'm out with the girlfriend, just for safety of mind. Scaling of that ease is POWERFUL stuff.</p>\n\n<h3>Future</h3>\n\n<p>A few months ago it seems pretty much every PaaS provider decided that they all had to do everything. While I'm still not sure if that is for the best, Heroku now handle Java, Python, Scala, Grails, Python/Django and I hear they have a PHP in private BETA - but don't quote me on that.</p>\n\n<p>Engine Yard made a similar move and snapped up <a href=\"http://orchestra.io/\">Orchestra.io</a> which is another PHP platform that's been around for a while. I had a Skype preview of that one back in its early days and it's another great contender.</p>\n\n<p>PHP Fog are going the other way and starting to offer other services, under their rebranded service <a href=\"http://appfog.com/\">App Fog</a>.</p>\n\n<p>If you're interesting in hearing more about how Cloud Hosting works, I've managed to get Pagoda Box to send their Chief Architect, Tyler Flint over to <a href=\"http://ciconf.com/\">CICONF 2012</a> in London this February.</p>\n\n<p>The future is looking more and more like it's going to be cloud based and I am happy with that. The less time I have to spend working to achieve the same goals means more time and money can be spent doing something fun.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "18",
    "created": "2009-01-29 11:09:00",
    "updated": "2009-02-27 19:44:27",
    "created_by": "0",
    "ordering_count": null,
    "title": "How to: Support multiple production environments in CodeIgniter",
    "slug": "How-to-Support-multiple-production-environments-in-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "Maintaining different configurations for CodeIgniter across multiple environments can be a pain. Find out how to support multiple config settings and create a instance-wide flag to let you know which environment is being used.",
    "body": "<p>To get this working is very easy. Constants can be seen all the way through CodeIgniter and can be set almost anywhere. To keep things neat and logical we will put this code into <i>application/config/constants.php</i>.</p> \n<p>For a simple 2 environment switch you can use the following:</p> \n<p> <code class=\"php\">define('ENV', strpos($_SERVER['SERVER_NAME'], 'local') !== FALSE ? 'local' : 'live');</code>Or if you have more than the two environments:<code class=\"php\">if(strpos($_SERVER['SERVER_NAME'], 'local') !== FALSE) { \n  define('ENV', 'local');\n}\n\nelseif(strpos($_SERVER['SERVER_NAME'], 'dev.') === 0) { \n  define('ENV', 'dev');\n}\n\nelseif(strpos($_SERVER['SERVER_NAME'], 'qa.') === 0) {\n  define('ENV', 'qa');\n}\nelse { \n  define('ENV', 'live');\n}</code> </p> \n<p>That will match:<br /><br />http://localhost/ = <b>local</b><br />http://local.example.com/ = <b>local</b><br />http://dev.example.com/ = <b>dev</b><br />http://qa.example.com/ = <b>qa</b><br />http://example.com/ = <b>live</b> </p> \n<p>Now you can base your config on if(ENV == 'live'). This is helpful for setting the $active_group in database.php, runing caching for live only, displaying profiler and debug data for local/dev only and plenty more.</p>",
    "created_on": "1233227340",
    "updated_on": "1235763867",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "19",
    "created": "2009-02-06 18:46:00",
    "updated": "2009-02-06 19:02:43",
    "created_by": "0",
    "ordering_count": null,
    "title": "Watch CodeIgniter error's reported as they happen",
    "slug": "Watch-CodeIgniter-errors-reported-as-they-happen",
    "category_id": "3",
    "attachment": "",
    "intro": "How do you read your CodeIgniter error logs for your live site? Download them via FTP and open them up each time, scroll to the bottom and read? That sucks! Try tailing.",
    "body": "<p>If you have access to your web server via the command line, you can use a unix command called \"<em>tail</em>\". You can use this to watch changes in any text file as they happen, in this case, our CodeIgniter log.</p> \n<p><strong>Step #1:</strong> Make sure you have error reporting enabled in your application/config/config.php folder. For full error reporting, set the config item to 4 as below.</p> <code class=\"php\">$config['log_threshold'] = 4;</code> \n<p><strong>Step #2:</strong> Then set your CodeIgniter log to be writeable by the server (you have probably already done this, but let's just make sure).</p> <code>$ chmod 777 ./codeigniter/logs</code> \n<p><strong>Step #3:</strong> Now for the important one. This will show changes to the log file as they happen. Hit enter to add some clear space, and Ctrl + C to break out of the stream.</p> <code>$ tail -f ./codeigniter/logs/log-YYYY-MM-DD.php</code> \n<p>Now as you run each instance you will see a stream of debug and error messages. Setting to 4 might be a little too high in most cases, try turning it down a little.</p>",
    "created_on": "1233945960",
    "updated_on": "1233946963",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "20",
    "created": "2009-02-27 19:14:00",
    "updated": "2009-02-27 19:22:23",
    "created_by": "0",
    "ordering_count": null,
    "title": "How to: Install Transmission CLI to Ubuntu Server",
    "slug": "How-to-Install-Transmission-CLI-to-Ubuntu-Server",
    "category_id": "12",
    "attachment": "",
    "intro": "Learn how to set up the best BitTorrent client for your Ubuntu Server running on the command line. This guide will show you how to get a background daemon running on boot to download all your torrents without hogging your terminal like rTorrent, and enable the beautiful Clutch web interface.",
    "body": "<p>I made this guide as I had a little trouble finding all the correct informaiton required to get this set up. Some of it was scattered around the Transmission Wiki, some on random blogs and some was just missing. This guide will help compile everything into one place to hopefully save some of you a little time.</p>\n\n<p>\n The repositries we will be using are unofficial repositries maintained by \"kas\". The original post can be found <a href=\"http://forum.transmissionbt.com/viewtopic.php?f=13&t=5604\" target=\"_blank\">here</a>. \n This needs to be done so we can get the newest stable version of Transmission, as the newest version you can get from the Ubuntu Server 8.10 default list of repositries is 1.32 and sadly that version is no longer \n supported by the Transmission team.\n</p>\n\n<h3>Main setup</h3>\n\n<p>Adding the Unofficial Transmission repositry</p>\n\n <code class=\"unix\">\n $ sudo vim /etc/apt/sources.list\n </code>\n\n<p>Enter the two lines below that correspond to your Ubuntu Server version. Press A to start writing using vim.</p>\n    \n    <h4>Hardy Heron - 8.04</h4>\n    <blockquote>\n deb http://ppa.launchpad.net/transmissionbt/ubuntu hardy main\n deb-src http://ppa.launchpad.net/transmissionbt/ubuntu hardy main\n    </blockquote>\n    \n    <h4>Intrepid Ibex - 8.10</h4>\n    <blockquote>\n deb http://ppa.launchpad.net/transmissionbt/ubuntu intrepid main\n deb-src http://ppa.launchpad.net/transmissionbt/ubuntu intrepid main\n    </blockquote>\n    \n    <h4>Jaunty Jackalope - 9.04</h4>\n    <blockquote>\n deb http://ppa.launchpad.net/transmissionbt/ubuntu jaunty main\n deb-src http://ppa.launchpad.net/transmissionbt/ubuntu jaunty main\n    </blockquote>\n    \n<p>When you are done hit ESC then :wq and Enter to write and quit the file.</p>\n\n<p>Now you need to import the GPG signing key for the stable repository. Enter these two lines into the terminal:</p>\n\n <code class=\"unix\">\n $ gpg --keyserver keyserver.ubuntu.com --recv 976b5901365c5ca1\n $ gpg --export --armor 976b5901365c5ca1 | sudo apt-key add -\n </code>\n\n<p>Now that you have added these repositries we must update apt</p>\n\n <code class=\"unix\">\n $ sudo apt-get update\n </code>\n\n<p>Run the following code to install the transmission-cli package along with the transmission-common package which provides shared code between the CLI and GUI versions.</p>\n\n <code class=\"unix\">\n $ sudo apt-get install transmission-cli transmission-common\n </code>\n\n<p>After the scrolling madness you should be able to spot the following:</p>\n\n <blockquote>\n Setting up transmission-common (1.50-0ubuntu0~intrepid0) ...\n Setting up transmission-cli (1.50-0ubuntu0~intrepid0) ...\n    </blockquote>\n\n<p>This means you have the newest version (at time of writing this guide) so things are going correctly so far.</p>\n\n<p>Now, lets start setting it up. The Transmission developers reccomend we run transmission with it's own user for various security reasons, this also means we can put transmission configuration into its own home directory.</p>\n\n <code class=\"unix\">\n $ sudo adduser --disabled-password transmission\n $ sudo su transmission\n </code>\n\n<p>To create the settings file, we can start the daemon and tell it where to put the files. This command will run forever waiting for incoming connections, so as soon as it sits still press Ctrl + C to cancel out of it.</p>\n\n <code class=\"unix\">\n $ transmission-daemon -g /home/transmission/.config/transmission-daemon -f\n </code>\n\n<p>When you have canceled this process you will see it says - amoungst other things - the following text:</p>\n \n <blockquote>\n Saved \"/home/transmission/.config/transmission-daemon/settings.json\n    </blockquote>\n\n<p>Exit out of being the transmission user and return to your usual login.</p>\n\n <code class=\"unix\">\n $ exit\n </code>\n\n<p>Now you need to decide where you want to put your download files. Unlike rtorrent which I was previously using, transmission-cli is not able to use different directories for unfinished files and whatnot (without hackery). So instead create a single folder that will contain partial and complete downloads. This happens to be where I put mine:</p>\n\n <code class=\"unix\">\n $ sudo mkdir /mediaserver/torrents/Downloads\n $ sudo chmod 777 /mediaserver/torrents/Downloads\n </code>\n \n<p>Now we can change these settings using vim again. Most of these can be left alone, but if you want the web interface to work you will need to modify a few.</p>\n\n<p>Set the download-dir setting to the path you just created above:</p>\n\n <blockquote>\n \"download-dir\": \"\\/mediaserver\\/torrents\\/Downloads\",\n    </blockquote>\n\n<p>Now, if you are going to be using the web interface you will need to configure how you want access to work.</p>\n\n<p>Local network users only:</p>\n\n <blockquote>\n    \"rpc-whitelist\": \"127.0.0.*,192.168.*.*\",\n    \"rpc-whitelist-enabled\": 1,\n    </blockquote>\n\n<p>Log in from anywhere (with a password):</p>\n\n <blockquote>\n    \"rpc-authentication-required\": 1,\n    \"rpc-enabled\": 1,\n    \"rpc-password\": \"password01\",\n    \"rpc-port\": 9091,\n    \"rpc-username\": \"username\",\n    \"rpc-whitelist\": \"*\",                    \n    \"rpc-whitelist-enabled\": 0,\n    </blockquote>\n\n<p>Now that the transmission daemon is all configured it can be started.</p>\n\n <code class=\"unix\">\n $ transmission-daemon\n </code>\n\n<p>Check running by filtering the running process list for any process with the word \"transmission\" in it.</p>\n\n <code class=\"unix\">\n $ ps aux | grep transmission\n </code>\n\n<h3>Stopping/Restarting the daemon</h3>\n\n<p>If you need to stop transmission-daemon for any reason such as to edit the config files, the only method I have found (without adding in a custom start-script) is to kill it which seams a little mean.</p>\n\n <code class=\"unix\">\n $ ps aux | grep transmission\n </code>\n\n<p>This command once again checks for any transmission processes by matching the name. Look for the first number in the line that will look similar to the one below and use that number in the second command to kill it.</p>\n\n <blockquote>\n username  <strong>8785</strong>  0.1  0.5  15928  3052 ?        Ssl  16:43   0:00 transmission-daemon\n </blockquote>\n\n <code class=\"unix\">\n $ kill -9 <strong>8785</strong>\n </code>\n\n<p>Then you can edit it and start it up again with:</p>\n\n <code class=\"unix\">\n $ transmission-daemon\n </code>\n\n<h3>Testing</h3>\n\n<p>To trial run the torrents are working it is a good idea to use a heavily seeded torrent such as an ubuntu release. This is a random one I picked for my testing, use any torrent you like.</p>\n\n <code class=\"unix\">\n $ wget http://releases.ubuntu.com/8.10/ubuntu-8.10-desktop-amd64.iso.torrent\n $ transmission-remote --add ubuntu-8.10-desktop-amd64.iso.torrent\n $ sudo rm ubuntu-8.10-desktop-amd64.iso.torrent\n </code>\n\n<p>Now finally, if you are using the weub GUI you can access it using the server's IP address and the URL below:</p>\n\n <blockquote>http://server.ip.address:9091/transmission/web/</blockquote>\n \n<p><em>To mask this URL and port (e.g http://torrents.example.com/) check out my guide on <a href=\"/news/2008/11/Creating-proxies-with-Apache.html\">creating Apache proxies</a>.</em></p>\n\n<h3>Setting it to run on boot</h3>\n\n<p>So far we have a working torrent client that will run whenever we ask it, but that is probably not 100% useful for most media server users. If you want this to start on boot, the Transmission developers have provided\nus Debian/Ubuntu users with an init.d script to run. You can find the <a href=\"http://trac.transmissionbt.com/wiki/Scripts/initd\">Transmission init.d boot script here</a>, so copy the content of the script at the bottom, enter the command below, press \"a\" to start editing and paste it in.</p>\n\n <code class=\"unix\">\n $ sudo vim /etc/init.d/transmission-daemon\n </code>\n \n <blockquote>Press A to edit.<br/>\n Paste (different in all terminals, start with a right click and take it form there).<br/>\n Press Esc<br/>\n Type \":wq\" to write and quit\n </blockquote>\n \n<p>Now you need to give it permission to be executed as a script and add it to the boot up procedure.</p>\n\n <code class=\"unix\">\n $ chmod +x /etc/init.d/transmission-daemon\n $ sudo update-rc.d transmission-daemon start 51 S .\n </code>\n \n<p>Done! Restart your machine and test it out. I will be writing a follow up article on how to add some great extra features to this program shortly, so keep an eye on the RSS feed.</p>",
    "created_on": "1235762040",
    "updated_on": "1235762543",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "22",
    "created": "2009-03-31 10:44:00",
    "updated": "2009-05-07 09:45:05",
    "created_by": "0",
    "ordering_count": null,
    "title": "Getting on the GitHub bandwaggon",
    "slug": "Getting-on-the-GitHub-bandwaggon",
    "category_id": "13",
    "attachment": "",
    "intro": "I have finally joined GitHub and I am pretty happy about the decision. It seemed like a bit of a silly fad at the start but it is definitely more than that and for me, solved a few problems in one. Mainly, how to run multiple projects based on one code-base without being stuck in the same repo; I'm looking at you SVN.",
    "body": "<p>Whilst developing my recently nameless CMS  I have been maintaining several sites from within the same SVN repository so I can do simple upgrades between CMS versions. This is fine for philsturgeon.co.uk and the still unfinished <a target=\"_blank\" href=\"http://serverofdoom.co.uk/\">serverofdoom.co.uk</a>, but for client sites it is a nightmare.</p> <p>I have of course played with patch files but have had trouble with these between major CMS changes. Having to do all this over the command line due to the limitations of the SVN clients available on Mac OS X means they can be fiddly and un-reliable.for codebases where files may not be available and generally are not such a smooth way of handling upgrades.</p> <p>So after a long time of wondering but I have finally decided the answer to my prayers is <a target=\"_blank\" href=\"http://git-scm.com/\">Git</a> and the best provider for this to be <a target=\"_blank\" href=\"http://github.com/\">GitHub</a>. It's free for public work and only starts charging you when you want private projects and teams of collaborators.</p> <p>I will not go into massive detail explaining the benefits of Git over SVN in this post but from my research and basic usage I have noticed the following.</p> <ul> <li><strong>Merging across separate repositories</strong> - I can host my CMS in one, and philsturgeon.co.uk in another and still merge changes in.</li> <li><strong>Speed</strong> - works much quicker than SVN</li> <li><strong>Easier merging</strong> - Just enter the name of the branch you wish to merge to trunk and it does the rest.</li> <li><strong>Shorter commands</strong> - don't need to write out full URL's for simple stuff like branching and merging, it works it out for you based on branch names alone.</li> </ul> <p>As a downside, the only client I could find for Mac was <a target=\"_blank\" href=\"http://wiki.github.com/Caged/gitnub\">GitNub</a> which is a repository viewer only. At least there is an Eclipse plugin for cross-platform support. I willl write up how well that works out when I have got it set up.</p> <p>Until I get this CMS ready for the world and into a public repository on GitHub, you can check out a few of my CodeIgniter libraries on my <a target=\"_blank\" href=\"http://github.com/philsturgeon\">GitHub profile</a> and see what I'm up to.</p> <p>In the mean-time, if you are wondering about getting started with Git, check out GitHub's wonderful <a target=\"_blank\" href=\"http://github.com/guides/home\">list of guides</a> covering everything on how to get started, to how to become a pro.</p>",
    "created_on": "1238496240",
    "updated_on": "1241689505",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "23",
    "created": "2009-05-07 09:28:00",
    "updated": "2009-09-02 14:55:54",
    "created_by": "0",
    "ordering_count": null,
    "title": "PyroCMS - an open source CodeIgniter CMS",
    "slug": "PyroCMS-an-open-source-CodeIgniter-CMS",
    "category_id": "11",
    "attachment": "",
    "intro": "Finally my CMS is ready for the world. PyroCMS is a modular content management system built with CodeIgniter with speed and efficiency in mind.",
    "body": "<p><em><strong>Update 01/06/08:</strong> A newer version of PyroCMS <a title=\"Version 0.9.5 of PyroCMS (a CodeIgniter Content Management system) is now available\" href=\"http://github.com/philsturgeon/pyrocms/downloads\" target=\"_blank\">is now available</a> which fixes many bugs and issues of the version linked to in this article and greatly improves speed, stability and useability of the admin panel. There is also now a homepage which links to the demo and download details at <a title=\"PyroCMS website - A CodeIgniter CMS\" href=\"http://pyrocms.com/\" target=\"_blank\">pyrocms.com</a>.</em></p>\n<p>This CMS has been in development for a long time and is the main reason for my lack of posting recently. Since I decided this should be released open source I have been pouring all of my \"online time\" into getting this ready for the public.<br /><br />It has been through beta testing by several members of the CodeIgniter community who were all very helpful. Thanks to them I have been able to get it working on Windows, add Cyrillic character support and get the code running in any directory not just the web root.<br /><br />Version 0.9 was tagged last night, but was followed by an almost immediate v0.9.1 as I was a little too tired to remove debugging data before the final commit. Doh!<br /><br />Anyway, if you plan on starting a site or app soon and would like a quick-start, try going with PyroCMS. It has the following modules already and will have even more amazing features by v1.0 planned for next month.</p>\n<ul>\n<li>Categories</li>\n<li>Photo albums</li>\n<li>Products</li>\n<li>Suppliers</li>\n<li>Permissions</li>\n<li>Navigation</li>\n<li>Themes</li>\n<li>Settings</li>\n<li>News</li>\n<li>User management</li>\n<li>User control panel</li>\n<li>User profiles</li>\n<li>Pages</li>\n</ul>\n<p>It also has the foundation for multi-language support but many of the modules have not been converted to use language strings. This is one of several big features planned for v1.0.</p>\n<ul>\n<li>Full english lang-file support</li>\n<li>CMS installer</li>\n<li>Comments admin interface</li>\n<li>User specific permisisons</li>\n<li>Theme editor to allow editing copies of core views in the db</li>\n<li>Add / Remove modules interface</li>\n<li>Replace Spaw with TinyMCE /w TinyCIMM (Image upload/manage)</li>\n</ul>\n<p>To keep track of updates to PyroCMS there are several ways to do it. You can <a href=\"http://twitter.com/philsturgeon\" target=\"_blank\">follow me on twitter</a>, watch the <a href=\"http://github.com/philsturgeon/pyrocms\" target=\"_blank\">GitHub code repo</a> or watch the <a href=\"http://www.assembla.com/spaces/pyrocms\">Assembla space</a>.</p>\n<p>Please <a href=\"http://github.com/philsturgeon/pyrocms/zipball/v0.9.1\">download it</a> and break it if you can. If you have any ideas please <a href=\"contact\">e-mail me</a>, <a href=\"http://twitter.com/philsturgeon\" target=\"_blank\">tweet me</a> or post them as <a href=\"http://github.com/philsturgeon/pyrocms/issues\">GitHub issues</a>. I would love to include any good ideas you have.</p>",
    "created_on": "1241688480",
    "updated_on": "1251903354",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "24",
    "created": "2009-05-11 14:42:00",
    "updated": "2010-03-09 13:40:54",
    "created_by": "0",
    "ordering_count": null,
    "title": "Tips for a Subversion addict learning Git",
    "slug": "Tips-for-a-Subversion-addict-learning-Git",
    "category_id": "13",
    "attachment": "",
    "intro": "I have been using Subversion for years and have come to know it like the back of my hand. Recently I began using Git and it was a much trickier transition than I had expected. Now I have finally found my feet with the basics of Git I thought I should take the time to explain my main points of confusion during the learning stage and give you a few things to look out for.",
    "body": "<p>This post is a mixture of things learnt from IRC, educated guesses and the results of <em>many</em> hours of trial and error.</p>\n<h3>Local &amp; Remote repositories</h3>\n<p>In Subversion you have one repository which all of your code is submitted to directly when a commit is made. This is very different for Git and is what makes it a \"distributed\" version control system. A repository can be on a SSH server, GitHub, a local folder or network drive. Each repository is given a nickname, which is called a \"remote\".</p>\n<pre class=\"code terminal\">git remote add origin git@github.com:philsturgeon/pyrocms.git<br />git pull origin master </pre>\n<p>The name of this new remote repository is \"origin\", but it can be anything you like.</p>\n<p>The pull command fills your local repository with commits from the remote repository for the \"master\" branch, which is essentially the same as the Subversion \"trunk\".</p>\n<p>As I mentioned earlier, when you make a commit it doesn't actually send the changes anywhere. To do that you need to use git push.</p>\n<pre class=\"code terminal\">git push origin master</pre>\n<p>This just sends any commits on your local repo to the remote repo.</p>\n<p><strong>Summary of point:</strong> Subversion only has one repository, Git can have any number from 1 to... lots.</p>\n<h3>Local &amp; Remote branches</h3>\n<p>In Subversion seeing as you only have the one repo, all branches exist there and all your commits update that branch straight away. Git has branches stored in two places, local and remote. This idea confused the hell out of me when I first heard about it but after learning to understand point #1, this became very useful.</p>\n<p>Git allows you to create a local branch, check it out, work on it and commit to it all offline without contacting the remote repo. Eg:</p>\n<pre class=\"code terminal\">git branch ticket5<br />git checkout ticket5<br />git commit -a -m \"Commiting changes\"</pre>\n<p>Then when you are done, you may send all of your commits to the remote branch in 'origin' using push again.</p>\n<pre class=\"code terminal\">git push origin ticket5</pre>\n<p>This is what the guide meant when it said \"You will never directly modify a remote branch.\" because you don't, you work on a copy of that branch then send that copy to the repo when you are done.</p>\n<p><strong>Summary of point:</strong> You can commit, switch and merge branches offline then send it all off online.</p>\n<h3>Empty folders</h3>\n<p>Subversion can add a folder in the same was as you can add a file. Git has a known bug that simply ignores any folder with no files in it. No matter what you do, you cannot add or commit an empty folder. Always just add a index.html or another empty file if that folder needs to be there.</p>\n<p>The developers know about this, but to quote from the official <a href=\"http://git.or.cz/gitwiki/GitFaq\" target=\"_blank\">Git FAQ</a>:</p>\n<blockquote>\"...nobody competent enough to make the change to allow empty directories has cared enough about this situation to remedy it.\". Fair enough then.</blockquote>\n<p><strong>Summary of point:</strong> Make sure each directory has at least one file.</p>\n<h3>Do not rename</h3>\n<p>Just don't even bother trying, it seems to just break at random. It is better to copy the file&#40;s&#41;, set the new name and delete the old copy. My worse rename experience was renaming \"public_html\" to \"application\" in the PyroCMS repo. It added \"application\" but kept an empty directory structure of some of \"public_html\" and it was a nightmare to remove this ghost directory as it did not exist in local copies and could not be pulled or fetched.</p>\n<p><strong>Summary of point:</strong> Do not rename a thing, copy and delete.</p>\n<h3>Get a Mac or use Linux</h3>\n<p><span style=\"text-decoration: line-through;\">Seriously, do not try install Git on a Windows machine unless you are a masochist: it is NOT worth it. Use anything with a Unix shell and the install will be done in minutes.</span></p>\n<p><span style=\"text-decoration: line-through;\">That said, installing Git on CentOS 5 was an absolute nightmare for me as well.</span></p>\n<p>If you are using Windows, give <a title=\"Visual GUI for Windows & Git\" href=\"http://www.syntevo.com/smartgit/\" target=\"_blank\">SmartGit</a> a try. It actually makes the whole process rather painless.</p>\n<p><strong>Summary:</strong> Git is one confusion S.O.B when you first start using it, but it soon begins to make sense if you stick with it. Read the manuals, use the command line and try to stop thinking like a Subversion user. Ignore what you know about Subversion and learn Git like it is something brand new. If you can't forget about Subversion then head my advice here and save yourself the headaches I have suffered the last 2 weeks.</p>",
    "created_on": "1242052920",
    "updated_on": "1268142054",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "25",
    "created": "2009-05-17 19:26:00",
    "updated": "2010-02-08 19:29:45",
    "created_by": "0",
    "ordering_count": null,
    "title": "Access CodeIgniter helpers from Smarty templates",
    "slug": "Access-CodeIgniter-helpers-from-Smarty-templates",
    "category_id": "3",
    "attachment": "",
    "intro": "Smarty by default has lots of useful functions - or modifiers - to help you modify your Smarty variables. Using this modifier, you can access any CodeIgniter helper in your view files.",
    "body": "<p>This article assumes you already have Smarty parsing your CodeIgniter views. If you have not done this, you can <a href=\"http://devcha.blogspot.com/2007/12/smarty-as-template-engine-in-code.html\" target=\"_blank\">find out how to integrate Smarty with CodeIgniter here</a>.</p>\n<p>To access your CodeIgniter helpers from Smarty, all you need to do is make a new file in your \"smarty/plugins/\" directory called \"modifier.helper.php\" and paste in the following code:</p>\n<p><code class=\"php\">&lt;?php<br />/*<br />* Smarty plugin<br />* -------------------------------------------------------------<br />* File:&nbsp;&nbsp;&nbsp;&nbsp; modifier.helper.php<br />* Type:&nbsp;&nbsp;&nbsp;&nbsp; modifier<br />* Name:&nbsp;&nbsp;&nbsp;&nbsp; helper<br />* Purpose:&nbsp; Call CodeIgniter helpers from within Smarty.<br />* -------------------------------------------------------------<br />*/<br />function smarty_modifier_helper($string, $helper_file, $helper_func)<br />{<br />&nbsp;&nbsp;&nbsp; if (!function_exists(\"get_instance\")) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return \"Can't get CI instance\";<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; if (!function_exists($helper_func)) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $CI =&amp; get_instance();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $CI-&gt;load-&gt;helper($helper_file);<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; // Get all the params passed in as there might be a few<br />&nbsp;&nbsp;&nbsp; $params = func_get_args();<br /><br />&nbsp;&nbsp;&nbsp; // String provided should be the first param and we dont want helper file or helper func being passed<br />&nbsp;&nbsp;&nbsp; $params[0] = $string;<br />&nbsp;&nbsp;&nbsp; unset($params[1]);<br /><br />&nbsp;&nbsp;&nbsp; // Call the function with the params provided<br />&nbsp;&nbsp;&nbsp; return call_user_func_array($helper_func, array_values($params));<br />}<br />?&gt;<br /></code></p>\n<p>Save that and try it out in one of your Smarty controlled view files. For example:</p>\n<p><code class=\"html\">&lt;p&gt;Check out this amazing item &lt;em&gt;{$item.url|helper:'url':'anchor':$item.title:'class=\"more params\"'}&lt;/em&gt;.&lt;/p&gt;&nbsp;<code class=\"html\">&nbsp;</code> </code></p>\n<p>With Smarty modifiers, the item you are modifying is the first param. The modifier is called after a pipe character \"|\" and then more parameters are separated by \":\". With this specific modifier, you list the helper, then the helper function, then as many params afterwards as you like.</p>\n<p><strong><a href=\"http://www.smarty.net/manual/en/plugins.modifiers.php\" target=\"_blank\">More on Smarty modifiers</a></strong></p>",
    "created_on": "1242588360",
    "updated_on": "1265657385",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "26",
    "created": "2009-05-19 12:03:00",
    "updated": "2010-02-08 19:28:48",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter & Canonical links",
    "slug": "CodeIgniter-Canonical-links",
    "category_id": "3",
    "attachment": "",
    "intro": "I have recently starting using Google Analytic's to track this web-site and as such I have suddenly started to care about improving its SEO while creating Google Analytic friendly URL's.",
    "body": "<p>Due to CodeIgniter's URI flexibility people are able to access the same url in many ways which causes issues with both Google ranking, search results and Google Analytic.</p>\n<p><strong>Home page</strong></p>\n<blockquote>http://example.com/<br />http://example.com/home.html (managed view my page manager)</blockquote>\n<p>This makes working out who hit my homepage tricky as there are several pages all showing as home.</p>\n<p><strong>Multiple module/controller URI's</strong></p>\n<blockquote>http://example.com/news<br />http://example.com/news/<br />http://example.com/news.html</blockquote>\n<p>This has two problems. I cannot find out which section is most popular without using a calculator, and it breaks content drilldown.</p>\n<p><strong>Multiple page content</strong></p>\n<blockquote>\n<p>http://example.com/news/Article-name<br />http://example.com/news/2009/05/Article-name<br />http://example.com/news/Article-name.html<br />http://example.com/news/2009/05/Article-name.html</p>\n</blockquote>\n<p>This just confuses the search engines by having a whole bunch of pages with the same content, and again means tracking page views in Google Analytics is near impossible.</p>\n<p>Now, here are are two possibilities.</p>\n<h3>Method #1: Full parsed URL's</h3>\n<p>This method basically shows Google crawlers and Google Analytic the same URL; the URL that a user <em>should </em>be using to view this page.</p>\n<p><code class=\"php\">echo '&lt;link rel=\"canonical\" href=\"' . site_url( $this-&gt;uri-&gt;uri_string() ) . '\" /&gt;';</code></p>\n<p><strong>Pro's:</strong> This would make sure EVERY page had a correctly formed URL for the page no matter what URI they accessed the page from.</p>\n<p><strong>Con's:</strong> Content Drilldown in Google Analytic will not work if you use $config['url_suffix'] extensions. Doesn't take into account routed URL's so they will show seperatly.</p>\n<h3>Method #2: Routed URL's for Analytic, Parsed URL's for Robots</h3>\n<p>Well it seems to make Google search and Google Analytic happy we are going to need two different approaches. This method will insert the full correct URL if a robot comes to the site to crawl for links, and insert the link we'd like to see show in Google Analytic if it is a normal user.</p>\n<p><code class=\"php\">if ($this-&gt;agent-&gt;is_robot())<br /> \\{<br /> &nbsp;&nbsp;echo '&lt;link rel=\"canonical\" href=\"' . site_url( $this-&gt;uri-&gt;uri_string() ) .'\" /&gt;';<br /> }<br /> <br /><br /> else<br /> \\{<br /> &nbsp;&nbsp;echo '&lt;meta name=\"canonical\" content=\"'. base_url().implode('/', $this-&gt;uri-&gt;rsegment_array()) . '\" /&gt;';<br /> }</code></p>\n<p><strong>Pro's:</strong> The pro's of Method 1 but also uses will display the basic CodeIgniter URI even if the URL is masked behind a Route.</p>\n<p><strong>Con's: </strong>If you use routes for content drilldown such as \"news/2009/04/Article-name\" then it will show up as \"news/article/Articlename\". This may or may not be a bad thing.</p>\n<p><strong><em>Update:</em></strong><em> These first two methods require you to use <a href=\"http://erikvold.com/blog/index.cfm/2009/4/23/relcanonical-and-google-analytics\" target=\"_blank\">a piece of JavaScript</a> written by  <a href=\"http://erikvold.com/\" target=\"_blank\">Erik Vold</a> to enable Google Analytics to register canonical links. I had not realised Google Analytics would pay no attention to a canonical link until I showed this article to a member of the web marketing team at work. I have added this 3rd method to cover this.</em></p>\n<h3>Method #3: Routed URL's for Analytic, Parsed URL's for Robots (direct aproach)</h3>\n<p>As it turns out Google Analytic could not care less about your canonical links by default, we can give Google bots and Google Analytic two totally different values. We can set the current user-facing URI as a canoncal link in the HTML, then insert the fully routed URI segments straight to Google Analytic.</p>\n<p><code class=\"php\">echo '&lt;link rel=\"canonical\" href=\"' . site_url( $this-&gt;uri-&gt;uri_string() ) . '\" /&gt;';</code></p>\n<p><code class=\"php\"> &lt;script type=\"text/javascript\"&gt;<br /> try {<br /> var pageTracker = _gat._getTracker(\"UA-XXXXXXX-YY\");<br /> pageTracker._trackPageview(\"&lt;?=base_url().implode('/', $this-&gt;uri-&gt;rsegment_array();?&gt;\"));<br /> }<br /> catch(err){}<br /> &lt;/script&gt; </code></p>\n<p><strong>Pro's:</strong> Same as method #2 but doesn't require any extra JavaScript. You are simply passing a CodeIgniter value straight into code that is already there.</p>\n<p><strong>Con's: </strong>Effectively the same as method #2 here as well.</p>\n<p>I personally am a fan of <span style=\"text-decoration: line-through;\">method #2</span> method #3. Does anybody have any other funky methods for handling this?</p>\n<p>This is not the set-up that will work for everyone, as sometimes people want to have multiple URL's being tracked for a single content page. This happens quite a bit at work, but for my personal site and most of the sites using <a href=\"http://pyrocms.com/\">PyroCMS</a> I could see the advantages.</p>\n<p>As captcha's are still not working, please discuss this in the <a href=\"http://codeigniter.com/forums/viewthread/114862/\" target=\"_blank\">CodeIgniter post</a> I set up for this article.</p>",
    "created_on": "1242734580",
    "updated_on": "1265657328",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "98",
    "created": "2011-04-19 17:29:00",
    "updated": "2011-05-05 12:23:09",
    "created_by": "0",
    "ordering_count": null,
    "title": "The CodeIgniter Community goes on holiday to NYC",
    "slug": "the-codeigniter-community-goes-on-holiday-to-nyc",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tThe CodeIgniter Community has decided to have a little holiday this summer, and head to New York for not just a meet up, but the biggest gathering of CodeIgniter developers to ever happen. There will be talks from the CodeIgniter Reactor Engineers, the EllisLab teams themselves and people involved in Forrst, PyroCMS, PHPFog and all sorts of other exciting things. There will be masterclasses teaching you the basics if you are pretty new to CodeIgniter, or an advanced track showing you how to do some crazy stuff. Something for everyone!</p>",
    "body": "<p>\n\tThe CodeIgniter Community has decided to have a little holiday this summer, and head to New York for not just a meet up, but the biggest gathering of CodeIgniter developers to ever happen. The last event was in a pokey low budget venue in a rough part of Bristol UK, this event will be right bang smack in the middle of Manhatten, NY with a great venue and some amazing speakers.</p>\n<p>\n\tThere will be talks from the CodeIgniter Reactor Engineers, the EllisLab teams themselves and people involved in <a href=\"http://forrst.com\" target=\"_blank\">Forrst</a>, <a href=\"http://pyrocms.com\" target=\"_blank\">PyroCMS</a>, <a href=\"http://phpfog.com\" target=\"_blank\">PHPFog</a> and all sorts of other <a href=\"http://cicon2011.com/programme\">exciting things</a>. There will be masterclasses teaching you the basics if you are pretty new to CodeIgniter, or an advanced track showing you how to do some crazy stuff. Something for everyone!</p>\n<p>\n\tWe&#39;ve got a few of the top members of the CI community to say a few words about their experiences in CodeIgniter, how they got into it and why they are looking forward to the event this summer.</p>\n<p>\n\t<iframe frameborder=\"0\" height=\"450\" src=\"http://player.vimeo.com/video/22658588?title=0&amp;byline=0&amp;portrait=0\" width=\"640\"></iframe></p>\n<p>\n\tPersonally I can&#39;t wait. <a href=\"http://ciconus.eventbrite.com\" target=\"_blank\">Buy a ticket</a> and I&#39;ll see you all there. The first round is on me.</p>\n<p>\n\tFor more information on who is speaking check out the <a href=\"http://cicon2011.com\">CICON2011</a> website.</p>",
    "created_on": "1303234140",
    "updated_on": "1304598189",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "100",
    "created": "2011-05-12 22:17:00",
    "updated": "2011-05-12 23:55:36",
    "created_by": "0",
    "ordering_count": null,
    "title": "TravlrApp - An app for backpackers and web nomads",
    "slug": "travlrapp-an-app-for-backpackers-and-web-nomads",
    "category_id": "0",
    "attachment": "",
    "intro": "<p>\n\tThis summer I&#39;ll be travelling around U.S.A with nothing much more than a Greyhound coach pass, a laptop, a map and of course a smart-phone. On the way I&#39;ll be meeting developers, talking at a few offices offering Git/CodeIgniter/Fuel training and having several nerd-beers along the way. To help people see what I&#39;m up to and to help connect with people as I go I&#39;ve created a funky web-app: TravlrApp. It is a social networking site to help make travelling more social, more manageable and more open. &nbsp;Using services like Facebook, Twitter, Flickr and Instagram you can mark your activity on a map automatically and your friends can see what you&#39;ve been up to. Currently it is in private beta, but invites are available to anyone who subscribes on the homepage, and existing users have 10 invites.</p>",
    "body": "<p>\n\tThis summer I&#39;ll be travelling around U.S.A with nothing much more than a Greyhound coach pass, a laptop, a map and of course a smart-phone. I&#39;m going to coin a phrase here and call myself a &quot;web-nomad&quot;, which needs to be a t-shirt.</p>\n<p>\n\tOn the way I&#39;ll be meeting developers, talking at a few offices offering Git/CodeIgniter/Fuel training and having several nerd-beers along the way. To help people see what I&#39;m up to and to help connect with people as I go I&#39;ve created a funky web-app: <a href=\"http://travlrapp.com\" target=\"_blank\">TravlrApp</a>. It is a social networking site to help make travelling more social, more manageable and more open. Using services like Facebook, Twitter, Flickr and Instagram you can mark your activity on a map automatically and your friends can see what you&#39;ve been up to. What better way to keep a journal or a &quot;travel log&quot; in the 21st centry?</p>\n<p>\n\tThe idea came to me over a few weeks and is broken down into various sections:</p>\n<h3>\n\tPlanning</h3>\n<p>\n\tGoing traveling, I wanted to plan where I could visit, see how far they were apart from each other and throw in some vague dates so I could give rough estimates of when I would be in certain places. If you&#39;re going around America for 3 months, it&#39;s pretty hard to say when you&#39;ll be anywhere. I can say &quot;3 nights here&quot;, &quot;1 week here&quot;, &quot;leaving here on the 23rd&quot; etc all through a simple interface. I wanted to be able to plan in two stages.&nbsp;<img alt=\"Travlr - Friend Map\" class=\"pyro-image\" src=\"/uploads/default/files/Screen_shot_2011-05-13_at_00.04_.22_.png\" style=\"width: 400px; border-top-width: 10px; border-right-width: 10px; margin: 10px 0 10px 10px; float: right; \" />Stage 1 is &quot;I&#39;m going to this city for a few days&quot;, nice and vague. Stage 2 is &quot;I&#39;m staying in this town/address/whatever between date Y and date Z&quot;. Using this site I can do both stages and make things as exact as I want when I want.</p>\n<h3>\n\tSocial Mapping</h3>\n<p>\n\tIf I&#39;m wandering around America taking photos, Tweeting and doing all sorts of other stuff on the internet it would be great if that could all be aggregated into one source. Why should my paranoid mother have to check in 20 different places to see if I&#39;m alive and end up phoning me constantly when she forgets how Facebook works when she could just look at one page that has everything on there? Any user can log in and see &quot;Activity&quot; from their friends on their dashboard, along with a list of active friends and even a &quot;Friend Map&quot; which shows where your friends are.</p>\n<h3>\n\tShowing the trip off</h3>\n<p>\n\tWhy do something cool if you can&#39;t show it off? That seems to be the point of most new social media websites and it&#39;s a pretty valid motive. This is a little more cool than telling everybody you&#39;ve gone for a run, had a coffee or... GONE TO WORK! *shockedface* &lt;/gowalladig&gt;</p>\n<p>\n\tI&#39;ve created a really simple embedable version so trips can be shared:</p>\n<p>\n\t<iframe border=\"0\" height=\"500\" src=\"http://travlrapp.com/philsturgeon/usa-canada-2011?mode=embed\" width=\"860\"></iframe></p>\n<p>\n\tSee the full version&nbsp;<a href=\"http://travlrapp.com/philsturgeon/usa-canada-2011\" target=\"_blank\">here</a>.</p>\n<h3>\n\tWhat&#39;s next?</h3>\n<p>\n\tI have a whole bunch of evil plans for TravlrApp. I want to do a lot of work with Places and Checkins, but of course creating an API-agnostic abstraction layer for all the different &quot;Places&quot; data is a bitch. I have a plan, but it&#39;s going to take some time. I also have some pretty sweet ideas for &quot;collision detection&quot; of friends and some plans for monetisation and really useful, unobtrusive targeted advertisment. &quot;You&#39;re staying here for 4 nights but you haven&#39;t booked any accomodaiton, would you like to stay here with a 20% off discount?&quot; Bam! Everyone is happy.</p>\n<p>\n\tThese will all be part of Phase 2, right now Phase 1 is out there and available to anyone who gets an invite.</p>\n<p>\n\tThrow me a comment if you want an invitation code, I&#39;ll be sending out a batch tomorrow.</p>",
    "created_on": "1305238620",
    "updated_on": "1305244536",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "28",
    "created": "2009-05-22 09:58:00",
    "updated": "2009-06-15 23:44:00",
    "created_by": "0",
    "ordering_count": null,
    "title": "Build your own VPS in the cloud",
    "slug": "Build-your-own-VPS-in-the-cloud",
    "category_id": "12",
    "attachment": "",
    "intro": "After getting fed up with a clunky old VPS running a borked copy of CentOS 5 I decided I wanted more control, a better OS, cheaper running costs and better reliability. Watch my screencast on how to set up an Ubuntu 8.04 cloud web server to serve your content over the web.",
    "body": "<p>After getting fed up with a clunky old VPS running a borked copy of CentOS 5 I decided I wanted more control, a better OS, cheaper running costs and better reliability. Watch my screencast on how to set up an Ubuntu 8.04 cloud web server to serve your content over the web.</p>\n<p>I looked into a few options and decided on <a href=\"http://mosso.com\" target=\"_blank\">Mosso</a> to be my cloud server providers. This comes down to many reason: they are cheap, they are a Rackspace company so they are running <em><span style=\"text-decoration: underline;\">very</span></em> reliable hardware and they recently absorbed Slicehost, so you know their control panels are good.</p>\n<p>With my hosting providers found, I had to pick my software. I decided to use <a href=\"http://virtualmin.com\" target=\"_blank\">Virtualmin</a> as there is a free alternative that does basically everything you need from a VPS GUI and saves me the cost of paying for cPanel/WHM.</p>\n<p>This decision restricted my choice of Operating System a little, as sadly the newest version of Ubuntu that Virtualmin supports is 8.04 LTS. Thats good enough for me, and LTS means more applications will worry about supporting it.</p>\n<p>Anyhow, enough of that. Time to see my slightly drunken screencast in action.</p>\n<h3>Part 1</h3>\n<p>\n<object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"651\" height=\"362\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">\n<param name=\"src\" value=\"http://blip.tv/play/g7lmgYLRAJeDBA.m4v\" /><embed width=\"651\" height=\"362\" src=\"http://blip.tv/play/g7lmgYLRAJeDBA.m4v\" type=\"application/x-shockwave-flash\"></embed>\n</object>\n</p>\n<h3>Part 2</h3>\n<p>\n<object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"653\" height=\"364\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">\n<param name=\"src\" value=\"http://blip.tv/play/g7lmgYLRQZeDBA.m4v\" /><embed width=\"653\" height=\"364\" src=\"http://blip.tv/play/g7lmgYLRQZeDBA.m4v\" type=\"application/x-shockwave-flash\"></embed>\n</object>\n</p>",
    "created_on": "1242986280",
    "updated_on": "1245109440",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "29",
    "created": "2009-05-27 11:58:00",
    "updated": "2012-01-25 21:54:41",
    "created_by": "2",
    "ordering_count": null,
    "title": "How to: Develop a new module for PyroCMS",
    "slug": "How-to-Develop-a-new-module-for-PyroCMS",
    "category_id": "11",
    "attachment": "",
    "intro": "<p>\n\tI noticed a few people hitting this site after searching for &quot;add new module to pyrocms&quot;. Well, here is how.</p>",
    "body": "I've taken this article down as it was well out of date and seemed to be stealing the number #1 spot on Google for \"pyrocms create module\".\n\nYou should head to the for [PyroCMS Documentation](pyrocms.com/docs) on [creating a module for PyroCMS 2.0.x](http://www.pyrocms.com/docs/2.0/developers/creating-custom-modules)!",
    "created_on": "1243425480",
    "updated_on": "1327528481",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p>I've taken this article down as it was well out of date and seemed to be stealing the number #1 spot on Google for \"pyrocms create module\".</p>\n\n<p>You should head to the for <a href=\"pyrocms.com/docs\">PyroCMS Documentation</a> on <a href=\"http://www.pyrocms.com/docs/2.0/developers/creating-custom-modules\">creating a module for PyroCMS 2.0.x</a>!</p>\n",
    "preview_hash": ""
  },
  {
    "id": "117",
    "created": "2012-02-23 11:55:00",
    "updated": "2012-02-23 13:46:07",
    "created_by": "2",
    "ordering_count": null,
    "title": "My Thoughts on CICONF 2012 UK",
    "slug": "my-thoughts-on-ciconf-2012-uk",
    "category_id": "18",
    "attachment": "",
    "intro": "<p>\n\tIt&#39;s been a few days since CICONF and this is my first chance to get my thoughts together after a few busy days. In all I am extremely pleased with the event, and so far I have seen nothing but positive feedback on the hash-tag and not heard any complaints. Winner!&nbsp;</p>",
    "body": "<a href=\"https://plus.google.com/photos/102994780033050403765/albums/5711901094647873041\"><img src=\"https://lh5.googleusercontent.com/-pfVHRUS-quA/T0S_1ZZMvAI/AAAAAAAAAD4/pzDzX2dGATs/s858/_MG_1503.jpg\" width=\"250\" style=\"float:left; margin-right: 10px\"></a> It's been a few days since [CICONF](http://www.ciconf.com/) and this is my first chance to get my thoughts together after a few busy days. In all I am extremely pleased with the event, and so far I have seen nothing but positive feedback on the [#ciconf](https://twitter.com/#!/search?q=%23ciconf) hash-tag and not heard any complaints. Winner! \n\nThe first thing to point out is that this is only the third event I have had a hand in organising. The first was an assisting role in getting CICON2010 going but that was a terrible event. \n\nMy second event was [CICON2011](http://ciconf.com/) in New York, which was much much much better thanks to a great team: [Adam Fairholm](http://adamfairholm.com/) and [Kenny Katzguru](http://codefury.net/). These guys were relatively local and had great knowledge of the area. That combined with a wicked venue at New Work City made for a fun time for all. We learned a lot and those lessons helped me make CICONF UK 2012 even better!\n\n## Friday Night\n\nThis was pretty stressful, as we had 90ish attendees for the weekend but barely anyone showed up on time for the evening. Apparently this is pretty standard, but there was about 10 of us all drinking and chatting away until about 9. Suddenly things picked up with a stream of geeks joining us getting our numbers up to 30. This was enough to make the venue happy - especially with the Geordies raising our bar spend, but I still haven't heard back about my deposit. Meh.\n\n## Saturday\n\nWe had a few initial hiccups but things got going eventually. The trouble started when we got to the venue an hour before we were expecting people only to find the front door locked. After arguing with a Polish cleaner for a bit we eventually got in, but lost a lot of set-up time. That meant when everyone was arriving I was still trying to sort out all their lanyards. Great!\n\nThings got started and the speakers were spot on. Pascal chatted about paper, John told us gave us an introduction to PHPUnit and Nick gave people some ideas about how to make their API first and the application come second, instead of just using it as a marketing ploy. These were great talks but ran a little quick, so I pulled out my backup speaker: Mark Ryan! \n\nMark is a good friend from the [ignite100](http://ignite100.com/) start-up incubator who runs a newly funded start-up called [Blooie](http://blooie.com/). Thankfully people got why I wanted him to speak. His talk was essentially explaining to people how you can get from an idea to funding if you take on board a little help. Ignite100 is epic. Go do it.\n\n### Lunch\n\nBastards. I was so annoyed about this situation but it was truly my own fault for not knowing what questions to ask a venue. Now I do, but…\n\nWe had planned to bring in a boat-load of pizza after getting the costs covered with some sponsorship from [CampaignMonitor](http://campaignmonitor.com) (lovely guys) and Sunday was going to be Subway platters all round, but the venue told me on about Tuesday that we were not allowed to bring in food and we had to use their own chef. \n\nErf. The costs involved with getting a cup of tea in that place were pretty ridiculous, but having everyone fed and watered ended up costing 7 times what it should and the food was pretty pathetic. It stressed me out so much I started feeling sick. YAY EVENTS!\n\nSorry guys, I have really learned a lesson on that one.\n\n### Afternoon\n\nWe came back from lunch to an amazing talk. Tyler Flint is truly a brilliant speaker, who gave a very technical talk without trying to pimp his product - which as a sponsor he had every right to do. Pagoda Box is a service that has changed how I host sites forever and he explained how they ended up coming about, what problems they are here to fix, then in the end gave every CICONF attendee a special treat: we all had discount codes on our lanyard and that gave us special access to stuff that the rest of you wont get for a while. Ha. You should have come.\n\nAfter that we had some great talks by Harro Verton about ORMs which went down fairly well, but judging from a few tweets going around not everyone was convinced. Really guys, read [Misconceptions about ORMs](http://philsturgeon.co.uk/blog/2011/06/misconceptions-about-orms), it might help you see a different side.\n\nThen we finished up with \"the boy wonder\" [Jamie Rumbelow](http://jamierumbelow.net/) who was showing off some Rails-like conventions in CodeIgniter.\n\n### Evening\n\nEpic! I wanted to do something a little different from the usual \"stand around and talk about code\" and [Shealan Forshaw](http://www.shealanforshaw.com/) suggested a pretty quirky bowling alley. Live Jazz (ok nobody liked that), pizzas the size of drain covers, great beers and in all it was an awesome night. \n\n## Sunday\n\nWe started at 10am to give those with hangovers a fighting chance. That turned out to be a lot of them, but for once I wasn't amongst them. \n\nThe first talk was from Alexis Serneels about why he loves CodeIgniter and went on to explain how by spending a little time making a CMF that makes sense to you, you can build out client projects in next to not time.\n\nAlex Bilbie gave an amazing overview of MongoDB in general, correct use-cases, debunked a few myths and his detailed explanations even converted a few \"MySQL or die\" types to give it a try. I've seen people bang on about MongoDB for an hour before and I think last time it happened I fell asleep. This was very different.\n\n### Afternoon \n\nMy \"master-class\" was up next. I decided to walk people through \"an hour in the life of Phil\" and show how I use Git, Git Flow, PyroCMS and Pagoda Box to knock out sites. I'll admit I could have prepared better and the live coding was - as it always is - a little shaky, but planning a conference AND a talk is a bit much, especially while spending most of the month before it in Canada or freelancing like a maniac to avoid going broke after a long holiday. Ahh well, another lesson learned. I think people got something from it at least :)\n\nFinally to finish up we had more from Harro going more in depth about his own ORM showing off how a lot of it worked. I've used ORMs in Rails and FuelPHP but never really bothered in CodeIgniter, but after watching him go through things and show off some of the code I really do feel like my next project will be using DataMapper. Validation in the model is currently possible in CodeIgniter, but it's a bit shaky. DataMapper - even if it did nothing else - makes that very easy indeed.\n\n### Evening\n\nI wanted to avoid organising anything official in the evening as I expected most to be going home. In the end I pointed out a pub on a map and said \"I'll be there, and I know the Geordies will be too.\" Having this casual drinking option was perfect and we had a pretty good turnout - better than the Friday night - but I didn't have the stress of it being \"official\" so I could finally get stuck into some pints.\n\n### Summary\n\nIt was a really really good weekend. I am genuinely sad that I got to meet so many great people from the community that I know I won't see again for a long time. The PHPNE team were supportive the whole time and did a great job of keeping beers in my hand - but I get to see them again next PHPNE as that is my new local community. Others I will not see until CICONF 2012 US in San Francisco this August, or maybe even later.\n\nI learned a lot and feel like my next conferences will be even better. Right now I am not sure what my next UK conference will be. Instead of another CodeIgniter-centric conference I might do something a little different, which hopefully people will be excited about. I've mentioned my plans to a few and they're looking forward to WhateverCon 2013.",
    "created_on": "1329998100",
    "updated_on": "1330004767",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "e4b3e193f45e13d518a4dc35ad15b0cc",
    "type": "markdown",
    "parsed": "<p><a href=\"https://plus.google.com/photos/102994780033050403765/albums/5711901094647873041\"><img src=\"https://lh5.googleusercontent.com/-pfVHRUS-quA/T0S_1ZZMvAI/AAAAAAAAAD4/pzDzX2dGATs/s858/_MG_1503.jpg\" width=\"250\" style=\"float:left; margin-right: 10px\"></a> It's been a few days since <a href=\"http://www.ciconf.com/\">CICONF</a> and this is my first chance to get my thoughts together after a few busy days. In all I am extremely pleased with the event, and so far I have seen nothing but positive feedback on the <a href=\"https://twitter.com/#!/search?q=%23ciconf\">#ciconf</a> hash-tag and not heard any complaints. Winner! </p>\n\n<p>The first thing to point out is that this is only the third event I have had a hand in organising. The first was an assisting role in getting CICON2010 going but that was a terrible event. </p>\n\n<p>My second event was <a href=\"http://ciconf.com/\">CICON2011</a> in New York, which was much much much better thanks to a great team: <a href=\"http://adamfairholm.com/\">Adam Fairholm</a> and <a href=\"http://codefury.net/\">Kenny Katzguru</a>. These guys were relatively local and had great knowledge of the area. That combined with a wicked venue at New Work City made for a fun time for all. We learned a lot and those lessons helped me make CICONF UK 2012 even better!</p>\n\n<h2>Friday Night</h2>\n\n<p>This was pretty stressful, as we had 90ish attendees for the weekend but barely anyone showed up on time for the evening. Apparently this is pretty standard, but there was about 10 of us all drinking and chatting away until about 9. Suddenly things picked up with a stream of geeks joining us getting our numbers up to 30. This was enough to make the venue happy - especially with the Geordies raising our bar spend, but I still haven't heard back about my deposit. Meh.</p>\n\n<h2>Saturday</h2>\n\n<p>We had a few initial hiccups but things got going eventually. The trouble started when we got to the venue an hour before we were expecting people only to find the front door locked. After arguing with a Polish cleaner for a bit we eventually got in, but lost a lot of set-up time. That meant when everyone was arriving I was still trying to sort out all their lanyards. Great!</p>\n\n<p>Things got started and the speakers were spot on. Pascal chatted about paper, John told us gave us an introduction to PHPUnit and Nick gave people some ideas about how to make their API first and the application come second, instead of just using it as a marketing ploy. These were great talks but ran a little quick, so I pulled out my backup speaker: Mark Ryan! </p>\n\n<p>Mark is a good friend from the <a href=\"http://ignite100.com/\">ignite100</a> start-up incubator who runs a newly funded start-up called <a href=\"http://blooie.com/\">Blooie</a>. Thankfully people got why I wanted him to speak. His talk was essentially explaining to people how you can get from an idea to funding if you take on board a little help. Ignite100 is epic. Go do it.</p>\n\n<h3>Lunch</h3>\n\n<p>Bastards. I was so annoyed about this situation but it was truly my own fault for not knowing what questions to ask a venue. Now I do, but…</p>\n\n<p>We had planned to bring in a boat-load of pizza after getting the costs covered with some sponsorship from <a href=\"http://campaignmonitor.com\">CampaignMonitor</a> (lovely guys) and Sunday was going to be Subway platters all round, but the venue told me on about Tuesday that we were not allowed to bring in food and we had to use their own chef. </p>\n\n<p>Erf. The costs involved with getting a cup of tea in that place were pretty ridiculous, but having everyone fed and watered ended up costing 7 times what it should and the food was pretty pathetic. It stressed me out so much I started feeling sick. YAY EVENTS!</p>\n\n<p>Sorry guys, I have really learned a lesson on that one.</p>\n\n<h3>Afternoon</h3>\n\n<p>We came back from lunch to an amazing talk. Tyler Flint is truly a brilliant speaker, who gave a very technical talk without trying to pimp his product - which as a sponsor he had every right to do. Pagoda Box is a service that has changed how I host sites forever and he explained how they ended up coming about, what problems they are here to fix, then in the end gave every CICONF attendee a special treat: we all had discount codes on our lanyard and that gave us special access to stuff that the rest of you wont get for a while. Ha. You should have come.</p>\n\n<p>After that we had some great talks by Harro Verton about ORMs which went down fairly well, but judging from a few tweets going around not everyone was convinced. Really guys, read <a href=\"http://philsturgeon.co.uk/blog/2011/06/misconceptions-about-orms\">Misconceptions about ORMs</a>, it might help you see a different side.</p>\n\n<p>Then we finished up with \"the boy wonder\" <a href=\"http://jamierumbelow.net/\">Jamie Rumbelow</a> who was showing off some Rails-like conventions in CodeIgniter.</p>\n\n<h3>Evening</h3>\n\n<p>Epic! I wanted to do something a little different from the usual \"stand around and talk about code\" and <a href=\"http://www.shealanforshaw.com/\">Shealan Forshaw</a> suggested a pretty quirky bowling alley. Live Jazz (ok nobody liked that), pizzas the size of drain covers, great beers and in all it was an awesome night. </p>\n\n<h2>Sunday</h2>\n\n<p>We started at 10am to give those with hangovers a fighting chance. That turned out to be a lot of them, but for once I wasn't amongst them. </p>\n\n<p>The first talk was from Alexis Serneels about why he loves CodeIgniter and went on to explain how by spending a little time making a CMF that makes sense to you, you can build out client projects in next to not time.</p>\n\n<p>Alex Bilbie gave an amazing overview of MongoDB in general, correct use-cases, debunked a few myths and his detailed explanations even converted a few \"MySQL or die\" types to give it a try. I've seen people bang on about MongoDB for an hour before and I think last time it happened I fell asleep. This was very different.</p>\n\n<h3>Afternoon</h3>\n\n<p>My \"master-class\" was up next. I decided to walk people through \"an hour in the life of Phil\" and show how I use Git, Git Flow, PyroCMS and Pagoda Box to knock out sites. I'll admit I could have prepared better and the live coding was - as it always is - a little shaky, but planning a conference AND a talk is a bit much, especially while spending most of the month before it in Canada or freelancing like a maniac to avoid going broke after a long holiday. Ahh well, another lesson learned. I think people got something from it at least :)</p>\n\n<p>Finally to finish up we had more from Harro going more in depth about his own ORM showing off how a lot of it worked. I've used ORMs in Rails and FuelPHP but never really bothered in CodeIgniter, but after watching him go through things and show off some of the code I really do feel like my next project will be using DataMapper. Validation in the model is currently possible in CodeIgniter, but it's a bit shaky. DataMapper - even if it did nothing else - makes that very easy indeed.</p>\n\n<h3>Evening</h3>\n\n<p>I wanted to avoid organising anything official in the evening as I expected most to be going home. In the end I pointed out a pub on a map and said \"I'll be there, and I know the Geordies will be too.\" Having this casual drinking option was perfect and we had a pretty good turnout - better than the Friday night - but I didn't have the stress of it being \"official\" so I could finally get stuck into some pints.</p>\n\n<h3>Summary</h3>\n\n<p>It was a really really good weekend. I am genuinely sad that I got to meet so many great people from the community that I know I won't see again for a long time. The PHPNE team were supportive the whole time and did a great job of keeping beers in my hand - but I get to see them again next PHPNE as that is my new local community. Others I will not see until CICONF 2012 US in San Francisco this August, or maybe even later.</p>\n\n<p>I learned a lot and feel like my next conferences will be even better. Right now I am not sure what my next UK conference will be. Instead of another CodeIgniter-centric conference I might do something a little different, which hopefully people will be excited about. I've mentioned my plans to a few and they're looking forward to WhateverCon 2013.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "30",
    "created": "2009-05-28 13:19:00",
    "updated": "2009-07-02 11:33:48",
    "created_by": "0",
    "ordering_count": null,
    "title": "PyroCMS reaches v0.9.5",
    "slug": "PyroCMS-reaches-v0.9.5",
    "category_id": "11",
    "attachment": "",
    "intro": "PyroCMS reaches its nearly final stage. This release took care of many bugs known in v0.9.2 and has while it has not added in many amazing new features, it has improved the existing ones considerably.",
    "body": "<p>It has taken me several weeks but finally <span style=\"text-decoration: line-through;\">PyroCMS v0.9.5</span> <a title=\"Download PyroCMS v0.9.5.4 from GitHub\" href=\"http://github.com/philsturgeon/pyrocms/zipball/v0.9.5.3\">PyroCMS v0.9.5.4</a> has been released. This brings many new improvements and while it is still not perfect, I now squashed more bugs than I even care to count.</p>\n<h3>Cool new features</h3>\n<ul>\n<li>Implemented the jQuery plugin <a href=\"http://maxblog.me/ajaxify/\" target=\"_blank\">Ajaxify</a> for a large portion of the Admin Panel to give things a nice flare and speed navigation up.</li>\n<li>Replaced <a href=\"http://www.spaweditor.com/\" target=\"_blank\">Spaw 2</a> WYSIWYG with <a href=\"http://tinymce.moxiecode.com/\" target=\"_blank\">TinyMCE</a> and allowed basic WYSIWYG editing for smaller textareas.</li>\n<li>Meta data for Pages module, handled with a new jQuery UI tab.</li>\n<li>Auto-meta data for news and other modules.</li>\n<li>Added comments to galleries.</li>\n<li>Fixed captchas (they are still tricky as hell to read, but they work now).</li>\n<li>Settings now use jQuery UI tabs, looking snazzy.</li>\n<li>Added Twitter tab to settings page for easy Twitter integration.</li>\n</ul>\n<p>Again, while this may not be a major release it certainly felt like one. I may have introduced a few bugs here but they will be solved shortly.</p>\n<p>Also as a new direction I am focusing less on some of the modules like services, products, etc and moving my attention to pages, news, navigation and settings. I feel like these are the modules of core interest, and I will develop the rest as and when they are required by clients.</p>\n<p>As always, you can download PyroCMS from the <a href=\"http://github.com/philsturgeon/pyrocms/downloads\" target=\"_blank\">GitHub downloads</a> page.</p>",
    "created_on": "1243516740",
    "updated_on": "1246534428",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "31",
    "created": "2009-05-29 12:56:00",
    "updated": "2009-05-29 13:13:47",
    "created_by": "0",
    "ordering_count": null,
    "title": "Debugging ActiveRecord queries in CodeIgniter",
    "slug": "Debugging-ActiveRecord-queries-in-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "When you have an ActiveRecord call that just will not work, it can be a pain. To save asking questions on the CodeIgniter forums that you could answer yourself, try these steps.",
    "body": "<p>When you have an ActiveRecord call that just will not work, it can be a pain. Many developers seem to find an issue and instantly ask for help, which often takes a great deal longer than it would to work it out on your own.</p>\n<p>To save asking questions on the CodeIgniter forums that you could solve yourself, try these steps:</p>\n<p style=\"padding-left: 30px;\">1.) Output the final query and see if it looks right. Do this after your model call or within the model after $this-&gt;db-&gt;get().</p>\n<p style=\"padding-left: 30px;\"><code> // Clear any existing output (optional)<br /> ob_clean();<br /><br /> echo $this-&gt;db-&gt;last_query();<br /><br /> // Stop PHP from doing anything else (optional)<br /> exit(); </code></p>\n<p style=\"padding-left: 30px;\">2.) If it looks fine, try running it in phpMyAdmin or another GUI.</p>\n<p style=\"padding-left: 30px;\">3.) If it fails, you get an error message from MySQL server telling you what&rsquo;s wrong. It will make it pretty obvious what change needs to be made to get it working.</p>\n<p style=\"padding-left: 30px;\">4.) If it runs fine, then CodeIgniter is not running the query correctly. This could:</p>\n<p style=\"padding-left: 60px;\">a.) CodeIgniter is logged into MySQL with a different user who may not have the same permissions.</p>\n<p style=\"padding-left: 60px;\">b.) A condition is not being met in your model file or controller that is stopping the query from being run. Output values along the way.</p>\n<p>Debugging is a wonderful thing CodeIgniter fans, follow these steps and you'll solve any query issues you come accross.</p>",
    "created_on": "1243601760",
    "updated_on": "1243602827",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "32",
    "created": "2009-06-03 13:50:00",
    "updated": "2010-09-29 22:04:39",
    "created_by": "0",
    "ordering_count": null,
    "title": "REST implementation for CodeIgniter",
    "slug": "REST-implementation-for-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "There have been 1 or 2 RESTful implementations for CodeIgniter&nbsp; so far, but none of them have been flexible or clean enough. This is the first publicly available RESTful implementation for CodeIgniter.",
    "body": "<p>I have seen 1 or 2 RESTful implementations for CodeIgniter but the syntax and methodology for each of them left me feeling like it could be done better.</p>\n<p><strong>Firstly</strong>, REST is not something that can be put into a library. It is not a \"thing\" and cannot be treated as such.</p>\n<p><strong>Secondly</strong>, REST calls should not be mixed in with your normal controllers. It should be kept separate from your normal controllers as they are not the same. The default behavior should be slightly different as REST calls are not simple GET -&gt; output.</p>\n<p><strong>Thirdly</strong>, REST controllers need to remain flexible. For that reason the normal CodeIgniter URI segments are not enough. To keep the controllers flexible, associative URI segments should be enforced so any combination of parameters can be used.</p>\n<p><strong>Finally</strong>, REST controllers should be able to output the response in many number of formats. These formats should be specified by the requester and not set in stone within the code. This means a REST controller needs to detect the desired format in two different ways.</p>\n<ul class=\"spacer-left-dbl\">\n<li>via the <strong>$_SERVER['HTTP_ACCEPT']</strong> variable. This will allow cURL, telnet, etc to specify a method through standard HTTP headers. This is the recommended REST way.</li>\n<li>via the URL. This allows browsers and systems not using cURL, telnet, etc to make very basic requests to receive different formats.</li>\n<li>via the controller. Adding \"public $rest_format = 'json';\" will make that one controller default to json if nothing is provided by given via URL or HTTP_ACCEPT.</li>\n</ul>\n<p>It took a great deal more thought and consideration than it did actual implementation. Here is the code I have used to get my CodeIgniter RESTful implementation working, tested and complete.</p>\n<p><a title=\"CodeIgniter REST controller\" href=\"http://github.com/philsturgeon/codeigniter-restserver/raw/master/application/libraries/REST_Controller.php\" target=\"_blank\">application/libraries/REST_Controller.php</a> - This new controller type will contain all of the logic for our new REST controllers.</p>\n<p><a title=\"CodeIgniter REST controller\" href=\"http://github.com/philsturgeon/codeigniter-restserver/raw/master/application/config/rest.php\" target=\"_blank\">application/config/rest.php</a> - Control login restrictions and caching for your REST server.</p>\n<p><a title=\"Example REST API controller for CodeIgniter\" href=\"http://github.com/philsturgeon/codeigniter-restserver/raw/master/application/controllers/api/example.php\" target=\"_blank\">application/controllers/api/example.php</a> - This is an example of a REST controller with some basic user data. This can be called anything you like and be placed in Matchbox modules, sub-directories, whatever.</p>\n<h3>Useage</h3>\n<p>Now it is all set up and ready go. Crack open your browser and try URL's in these formats to see what happens:</p>\n<p><strong>Get one users profile</strong></p>\n<blockquote>http://localhost/codeigniter/index.php/api/example/user/id/1</blockquote>\n<p><strong>Get a list of users in HTML format</strong></p>\n<blockquote>http://localhost/codeigniter/index.php/api/example/users/format/html</blockquote>\n<p><strong>Try to access an object through an unsupported method</strong></p>\n<blockquote>http://localhost/codeigniter/index.php/api/example/user_put/id/1/name/Something</blockquote>\n<p>Personally, I would recommend using <span style=\"text-decoration: line-through;\"><a title=\"Matchbox - lets you organize your codeigniter resources in modules\" href=\"http://code.google.com/p/matchbox/\" target=\"_blank\">Matchbox</a></span> <a href=\"http://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc/wiki/Home\" target=\"_blank\">Modular Extensions</a> to get your controllers into modules and then put a api.php controller into each module you wish to send over the API.</p>\n<blockquote>\n<p>E.g http://localhost/codeigniter/index.php/news/api/article/id/465</p>\n</blockquote>\n<p>As you can see there is plenty of flexibility here. You can use any of the following formats too simply by appending /format/json to the end of your URL or passing the correct MIME-type:</p>\n<ul class=\"spacer-left-dbl\">\n<li>xml</li>\n<li>json</li>\n<li>serialize</li>\n<li>php (raw output that can be used in eval)</li>\n<li>html</li>\n<li>csv</li>\n</ul>\n<p>Within your REST controllers, remember you can access GET parameters through $this-&gt;get(), POST parameters through $this-&gt;post() and PUT parameters through $this-&gt;put().</p>",
    "created_on": "1244037000",
    "updated_on": "1285797879",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "33",
    "created": "2009-06-05 10:13:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "Poll: Which topic should my next screencast cover?",
    "slug": "Poll-Which-topic-should-my-next-screencast-cover",
    "category_id": "0",
    "attachment": "",
    "intro": "The last two screencasts I recorded recieved a great responce. Now I am not entirely sure to do for my next screencast. Use this Twitter Poll to cast a vote.",
    "body": "<p>The last screencasts I recorded for the article \"<a title=\"Build a VPS with Mosso Cloud Servers & Ubuntu\" href=\"news/2009/05/Build-your-own-VPS-in-the-cloud.html\">Build your own VPS in the cloud</a>\" recieved a great responce. Now I am not entirely sure to do for my next screencast.</p>\n<p>I figured I would try out <a href=\"http://twtpoll.com/\" target=\"_blank\">twtpoll</a> to ask you all <a href=\"http://twtpoll.com/s1rqxp\" target=\"_blank\">Which topic should my next screencast cover?</a></p>",
    "created_on": "1244196780",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "34",
    "created": "2009-06-09 12:01:00",
    "updated": "2009-06-09 12:21:25",
    "created_by": "0",
    "ordering_count": null,
    "title": "Charging extra for iPhone tethering really that bad?",
    "slug": "Charging-extra-for-iPhone-tethering-really-that-bad",
    "category_id": "14",
    "attachment": "",
    "intro": "There seams to be a great deal of anger on the Internet over the new iPhone. I agree with the outrage over upgrade costs, but I have to disagree with iPhone fans complaining about the tethering costs.<br />",
    "body": "<p>There seams to be a great deal of anger on the Internet over the new iPhone. I agree with the outrage over upgrade costs, but I have to disagree with iPhone fans complaining about the extra &pound;14.68 p/m tethering costs.</p>\n<h4>The problem</h4>\n<p>The main argument against it is that iPhone fans do not see why they need to pay extra when they already have \"unlimited data\" plans for their iPhone. While I hate companies using \"unlimited\" incorrectly, by now we should all know that everything has limits. In this case, the limits are the actual bandwidth o2's networks can handle.</p>\n<h4>The history</h4>\n<p>Let's go back about a year when the original iPhone 3G started having problems. o2 basically over-sold the iPhone to past maximum capacity for their networks, meaning that 3G useage was slow and dropped out on a regular basis. This has slowly got slightly better over the last year as o2 have upgraded their networks bandwidth, but as more and more users gert iPhones and more applications come out that get users burning through their \"unlimited data\" plans, that network is getting to bursting point.</p>\n<h4>Why do I agree?</h4>\n<p>There are two reasons I agree with o2 on the extra cost here.</p>\n<p>Firstly, if we are all given full tethering access via our iPhones, people will be sending and recieving considerably more data than before. They'll be sending e-mail attachments, playing online games, downloading large files, generally doing everything they normally do on their laptops. If this happens, we are all screwed. If the network is already struggling with basic web-browsing and streaming compressed music, how the hell are we going to get anywhere with people blitzing the network to play WoW?</p>\n<p>Secondly, why not? The \"unlimited data\" plans cover \"free unlimited data transfer for the iPhone\". This data is not being used on the iPhone, it is being used on your laptop. That makes sense to me. This is basically a way to stop you having to sign up to a seperate mobile broadband service and carry an extra USB dongle around with you.</p>\n<p>Finally, The extra cost may (if we are lucky) go towards upgrading their networks at a much faster rate which is great for everyone. It means apps will be allowed greater bandwidth limits and everything can work a bit quicker.</p>\n<p>Let's not complain straight away, this could be a good thing for all of us.</p>\n<p>That said, if they do not use this money to improve their networks: I will be the first to retract this post and fill the space with <span style=\"text-decoration: underline;\">lots</span> of rude words.</p>",
    "created_on": "1244548860",
    "updated_on": "1244550085",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "35",
    "created": "2009-06-22 10:21:00",
    "updated": "2009-06-22 10:41:31",
    "created_by": "0",
    "ordering_count": null,
    "title": "Quick tip: Create a branch in Git with a dirty copy",
    "slug": "Quick-tip-Create-a-branch-in-Git-with-a-dirty-copy",
    "category_id": "13",
    "attachment": "",
    "intro": "We've all done it. Started working on a task, ticket or issue and realised we have forgotten to create a branch. Using git stash we can easily hide these changes, create a branch and then get the changes back.",
    "body": "<p>We've all done it. Started working on a task, ticket or issue and realised we have forgotten to create a branch. Using git stash we can easily hide these changes, create a branch and then get the changes back.</p>\n<p><strong>1.)</strong> Save your changes using stash. This basically just hides your changes locally and lets you call them back later.</p>\n<blockquote>\n<p>git stash</p>\n</blockquote>\n<p><strong>2.) </strong>Create your new branch.</p>\n<blockquote>\n<p>git branch &lt;branch_name&gt;</p>\n</blockquote>\n<p><strong>3.)</strong> Use your new branch.</p>\n<blockquote>\n<p>git checkout &lt;branch_name&gt;</p>\n</blockquote>\n<p><strong>4.)</strong> Apply your saved hidden (or \"stash\"ed) changes.</p>\n<blockquote>\n<p>git stash apply</p>\n</blockquote>\n<p>There you go, you are now ready to commit those files off to your new branch.</p>",
    "created_on": "1245666060",
    "updated_on": "1245667291",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "36",
    "created": "2009-06-22 21:35:00",
    "updated": "2010-02-08 19:27:33",
    "created_by": "0",
    "ordering_count": null,
    "title": "How to: Multi-site CodeIgniter Set-up",
    "slug": "How-to-Multi-site-CodeIgniter-Set-up",
    "category_id": "3",
    "attachment": "",
    "intro": "A few people have asked me recently about setting up CodeIgniter to run accross multiple domains based on the same codebase, so here are a few tips on how to get this working on your CodeIgniter set-up.<br />",
    "body": "<p>A few people have asked me recently about setting up CodeIgniter to run accross multiple domains based on the same codebase. This can be handy for sites than run different databases for different geographical areas, all of which need the same code but different content.</p>\n<p>To get this working I took a little code from <a href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> and modded a previous article \"<a href=\"news/2009/01/How-to-Support-multiple-production-environments-in-CodeIgniter.html\">How to: Support multiple production environments in CodeIgniter</a>\" and found a relatively simple solution.</p>\n<h3>Setting the base URL</h3>\n<p>The first step of getting CodeIgniter working anywhere automatically is curing it of it's most pointless configuration setting. It seems CodeIgniter would like to be told where it is, which really doesn't need to happen. We could solve this in many ways, but instead of extending or replacing any core code, I would preffer to put a little snippet of code into the main application/config/config.php. Enter this code into the file and it will automatically support pretty much any kind of URL.</p>\n<pre><code>&lt;?php  if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />/*<br />|--------------------------------------------------------------------------<br />| Base Site URL<br />|--------------------------------------------------------------------------<br />|<br />| URL to your CodeIgniter root. Typically this will be your base URL,<br />| WITH a trailing slash:<br />|<br />| http://www.your-site.com/<br />|<br />*/<br /><br />if(isset($_SERVER['HTTP_HOST']))<br />{<br />&nbsp;&nbsp; &nbsp;$config['base_url'] = isset($_SERVER['HTTPS']) &amp;&amp; strtolower($_SERVER['HTTPS']) == 'on' ? 'https' : 'http';<br />&nbsp;&nbsp; &nbsp;$config['base_url'] .= '://'. $_SERVER['HTTP_HOST'];<br />&nbsp;&nbsp; &nbsp;$config['base_url'] .= str_replace(basename($_SERVER['SCRIPT_NAME']), '', $_SERVER['SCRIPT_NAME']);<br />}<br /><br />else<br />{<br />&nbsp;&nbsp; &nbsp;$config['base_url'] = 'http://localhost/';<br />}<br /><br /></code></pre>\n<h3>Setting a SITE constant</h3>\n<p>So the website URL is now set and links are fully working around the site. Next we need a way to work out throughout our code which site is currently being used. Amongst other things, this will help us with selecting the right database settings later.</p>\n<pre><code>/*<br />|--------------------------------------------------------------------------<br />| Site<br />| Set a constant for whichever site you happen to be running, if its not here<br />| it will fatal error.<br />|--------------------------------------------------------------------------<br />*/<br />switch($_SERVER['HTTP_HOST'])<br />{<br />&nbsp;&nbsp; &nbsp;case 'example.com':<br />&nbsp;&nbsp; &nbsp;case 'www.example.com':<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;define('SITE', 'example');<br />&nbsp;&nbsp; &nbsp;break;<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;case 'example2.com':<br />&nbsp;&nbsp; &nbsp;case 'www.example2.com':<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;define('SITE', 'example2');<br />&nbsp;&nbsp; &nbsp;break;<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;default:<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;define('SITE', 'default');<br />&nbsp;&nbsp; &nbsp;break;<br />}</code></pre>\n<h3>Domain based database settings</h3>\n<p>Now that CodeIgniter has its links working and it knows what site it is trying to run, it needs to know the database configuration for this domain. To do that, we can break down our config into domain specific \"Database groups\".</p>\n<pre><code class=\"php\">&lt;?php  if (!defined('BASEPATH')) exit('No direct script access allowed');<br />/*<br />| -------------------------------------------------------------------<br />| DATABASE CONNECTIVITY SETTINGS<br />| -------------------------------------------------------------------<br />| This file will contain the settings needed to access your database.<br />|<br />| For complete instructions please consult the \"Database Connection\"<br />| page of the User Guide.<br />|<br />| -------------------------------------------------------------------<br />| EXPLANATION OF VARIABLES<br />| -------------------------------------------------------------------<br />|<br />| ['hostname'] The hostname of your database server.<br />| ['username'] The username used to connect to the database<br />| ['password'] The password used to connect to the database<br />| ['database'] The name of the database you want to connect to<br />| ['dbdriver'] The database type. ie: mysql.  Currently supported:<br />     mysql, mysqli, postgre, odbc, mssql<br />| ['dbprefix'] You can add an optional prefix, which will be added<br />|     to the table name when using the  Active Record class<br />| ['pconnect'] TRUE/FALSE - Whether to use a persistent connection<br />| ['db_debug'] TRUE/FALSE - Whether database errors should be displayed.<br />| ['active_r'] TRUE/FALSE - Whether to load the active record class<br />| ['cache_on'] TRUE/FALSE - Enables/disables query caching<br />| ['cachedir'] The path to the folder where cache files should be stored<br />|<br />| The $active_group variable lets you choose which connection group to<br />| make active.  By default there is only one group (the \"default\" group).<br />|<br />*/<br /><br />$active_record = TRUE;<br /><br />$db['default']['hostname'] = \"localhost\";<br />$db['default']['username'] = \"\";<br />$db['default']['password'] = \"\";<br />$db['default']['database'] = \"\";<br />$db['default']['dbdriver'] = \"mysql\";<br />$db['default']['dbprefix'] = \"\";<br />$db['default']['pconnect'] = TRUE;<br />$db['default']['db_debug'] = TRUE;<br />$db['default']['cache_on'] = FALSE;<br />$db['default']['cachedir'] = \"\";<br />$db['default']['char_set'] = \"utf8\";<br />$db['default']['dbcollat'] = \"utf8_general_ci\";<br /><br />// example<br />$db['example']['hostname'] = \"localhost\";<br />$db['example']['username'] = \"root\";<br />$db['example']['password'] = \"\";<br />$db['example']['database'] = \"example\";<br />$db['example']['dbdriver'] = \"mysql\";<br />$db['example']['dbprefix'] = \"\";<br />$db['example']['active_r'] = TRUE;<br />$db['example']['pconnect'] = TRUE;<br />$db['example']['db_debug'] = TRUE;<br />$db['example']['cache_on'] = FALSE;<br />$db['example']['cachedir'] = \"\";<br />$db['example']['char_set'] = \"utf8\";<br />$db['example']['dbcollat'] = \"utf8_general_ci\";<br /><br />// Example 2<br />$db['example2']['hostname'] = \"localhost\";<br />$db['example2']['username'] = \"root\";<br />$db['example2']['password'] = \"root\";<br />$db['example2']['database'] = \"testfoo\";<br />$db['example2']['dbdriver'] = \"mysql\";<br />$db['example2']['dbprefix'] = \"\";<br />$db['example2']['active_r'] = TRUE;<br />$db['example2']['pconnect'] = TRUE;<br />$db['example2']['db_debug'] = TRUE;<br />$db['example2']['cache_on'] = FALSE;<br />$db['example2']['cachedir'] = \"\";<br />$db['example2']['char_set'] = \"utf8\";<br />$db['example2']['dbcollat'] = \"utf8_general_ci\";<br /><br />// Check the configuration group in use exists, if not use the default<br />$active_group = (defined('SITE') &amp;&amp; array_key_exists(SITE, $db)) ? SITE : 'default';<br /><br />?&gt;<br /></code></pre>\n<p>The little snippet of code at the bottom will check to see if the SITE constant you have set matches up with a database group. If it doesn't, it will use the default configuration group.</p>\n<p>Your CodeIgniter set-up should now work with any domain you happen to point to it. You even run simple little if(SITE == 'example2') checks anywhere within your code to do special code for a certian site, although I would not reccomend you doing this too heavily.</p>",
    "created_on": "1245706500",
    "updated_on": "1265657253",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "37",
    "created": "2009-06-24 15:54:00",
    "updated": "2009-06-24 16:03:39",
    "created_by": "0",
    "ordering_count": null,
    "title": "Poll: Will you use goto in PHP 5.3?",
    "slug": "Poll-Will-you-use-goto-in-PHP-5.3",
    "category_id": "2",
    "attachment": "",
    "intro": "PHP 5.3 adds some great features such as lambda functions, namespaces and class constants, but one new feature \"goto\" in my eyes is a massvie step backwards.",
    "body": "<p>It has just come to my attention that PHP 5.3 will include the \"<a href=\"http://us.php.net/goto\" target=\"_blank\">goto</a>\" keyword that exists in so many other programming languages.</p>\n<p>PHP 5.3 adds some great features such as lambda functions, namespaces and class constants, but this new feature in my eyes is a massvie step backwards for PHP and for all of us charged with the duty of maintaining other peopels code.</p>\n<p>The question I wish to ask, is \"<span id=\"p_question\"><a href=\"http://twtpoll.com/e9pghw\" target=\"_blank\">Will you use goto in your PHP when 5.3 is released?</a>\"</span><span id=\"p_question\">. Click to vote in the <a href=\"http://twtpoll.com/\" target=\"_blank\">twtpoll</a>.</span></p>\n<p><span>Give me your throughts and feedback in the comments here or <a href=\"http://twitter.com/philsturgeon\" target=\"_blank\">tweet me</a>.<br /></span></p>",
    "created_on": "1245858840",
    "updated_on": "1245859419",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "38",
    "created": "2009-07-01 15:33:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "Rant: Fed up with Twitter news!",
    "slug": "Rant-Fed-up-with-Twitter-news",
    "category_id": "0",
    "attachment": "",
    "intro": "Is anybody else getting really bored of Twitter news? These days it seems to be everywhere; you cannot get away from it. Do you - like myself - find it really difficult to give a damn?",
    "body": "<p>Is anybody else getting really bored of Twitter news? These days it seems to be everywhere; you cannot get away from it. I realize right now I am adding to the millions of blog posts, news articles and newspaper headlines that contain the word \"Twitter\" but this is not an article about Twitter, it is an article <em>about idiots writing about Twitter</em>.</p>\n<p>I'll start by saying I am a Twitter user. I have the <a href=\"https://addons.mozilla.org/en-US/firefox/addon/7631\" target=\"_blank\">TwitBin Firefox add-on</a> on my laptop, work computer and have <a href=\"http://iconfactory.com/software/twitterrific\" target=\"_blank\">Tweeterific </a>on my iPhone. This, does not mean I want every RSS feed I subscribe to, every magazine I look at and every news site I visit to bombard me with articles about their views on <a href=\"http://news.cnet.com/8301-1023_3-10161103-93.html\" target=\"_blank\">Twitters eventual monetization</a>, <a href=\"http://www.geek.com/articles/news/twitter-visitors-jump-131-since-february-20090417/\" target=\"_blank\">how many hits the site is getting a day</a>, <a href=\"http://www.businessinsider.com/ashton-kutcher-passes-2-million-twitter-followers-2009-6\" target=\"_blank\">how many followers Ashton Kutcher has</a>, <a href=\"http://www.time.com/time/business/article/0,8599,1902604,00.html\" target=\"_blank\">how it is going to change the world</a> &amp; <a href=\"http://www.readwriteweb.com/enterprise/2009/03/the-twitter-platform-3-years-old-and-ready-to-change-the-world.php\" target=\"_blank\">how we live</a> or <a href=\"http://www.pcworld.com/businesscenter/article/159981/three_ways_twitter_security_fails.html\" target=\"_blank\">how unsafe it is</a>.</p>\n<p>Let's put my views on the subject to a single point.</p>\n<p style=\"text-align: center;\"><span style=\"font-size: medium;\">\"I do not care!\"</span></p>\n<p>I didn't really care when Twitter launched their site. I continued to not care for well over a year while I carried on living my life. I registered to test out some client work and continued not caring. I even didn't care after I registered a personal account and started gaining a few followers.</p>\n<p>The whole world of media seems to think Twitter is the most amazing thing to happen since sliced bread. To me, it is just a mix of RSS, e-mail and instant messenger, the only difference: it is open and shorter. This does not mean it has changed the world (or even my life) and for God's sake I do not want 30% of my news intake to be saturated by constant pointless articles about it.</p>\n<p>The part that really sticks in my throat is that all is that articles are not just from teenage bloggers with nothing to write about. Many of these are from paid journalists working for companies such as like Time Magazine, Business Insider, Telegraph, CNN and plenty more. I really can't help but find it all completly ridiculous as there is so many more interesting things going on in the world wide web.</p>\n<p>I write this post in the hope that bloggers (both hobbyist and professional) out there will see it and perhaps realize how pathetic they are being. If you like Twitter, use it. If you don't then don't! Either way: well done, you have an opinion. Shut up writing about Twitter as it's old news now and nobody cares!</p>",
    "created_on": "1246462380",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "39",
    "created": "2009-07-08 09:49:00",
    "updated": "2010-08-28 10:34:38",
    "created_by": "0",
    "ordering_count": null,
    "title": "Create an Admin panel with CodeIgniter",
    "slug": "Create-an-Admin-panel-with-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "A topic I see come up on the CodeIgniter forums quite a lot is \"How do I create an admin panel\" in CodeIgniter? This article will show you the best structure for your admin panel, but leave the actual code to you.",
    "body": "<p>As I see it there are three methods to creating an admin system using the MVC framework <a href=\"http://codeigniter.com\" target=\"_blank\">CodeIgniter</a>. In this article I will show examples of the structures for each and mention the pro's and con's of using each.</p>\n<p>This article will only outline the theory and suggest the structures to you. I do not plan on writing yet another \"How to make a user login system and add admins to it\" type article.</p>\n<h3>1.) Two applications</h3>\n<p>In CodeIgniter you can easily set up multiple applications to run off the same CodeIgniter install, simply by creating a copy of index.php and renaming it to something else.</p>\n<blockquote>\n<pre>/<br />  applications/<br />    frontend/<br />        controllers/<br />         home.php<br />            blog.php<br />            comments.php<br />     models/<br />         blog_model.php<br />         comment_model.php<br />     views/<br />         blogs/<br />             index.php<br />             view.php<br />         comment/<br />             view.php<br />         index.php<br /><br />    backend/<br />     config/<br />     controllers/<br />         dashboard.php<br />            blog.php<br />            comments.php<br />     models/<br />         blog_model.php<br />         comment_model.php<br />     views/<br />         blogs/<br />             index.php<br />             form.php<br />         comment/<br />             index.php<br />         dashboard.php<br />         login.php<br /><br />  system/<br /><br />  index.php<br />  admin/<br />    index.php<br /></pre>\n</blockquote>\n<p>Here you can see I have put index.php into an admin/ folder of its own. Both index.php files will point to a single folder within /applications and this can be done by setting:</p>\n<p><strong>index.php</strong></p>\n<p><code class=\"php\"> $application_folder = \"applications/frontend\"; </code></p>\n<p><strong>admin/index.php</strong></p>\n<p><code class=\"php\"> $application_folder = \"applications/backend\"; </code></p>\n<p>This method does work, but is only really any good for big sites that have <em>very</em> different content for their front and back ends. You cannot use the same libraries, helpers, models, etc which will mean its very easy to end up with duplicated code. I'm not a big fan of such frontend/backend separation as for most sites, an admin panel will use the same models and code but this varies entirely on the spec of the site you are building.</p>\n<h3>2.) Sub-directories</h3>\n<p>This method follows a more usual CodeIgniter set-up and is the way that most new CodeIgniter users will try things at first.</p>\n<blockquote>\n<pre>/<br />    application/<br />        config/<br />        controllers/<br />            admin/<br />                 blog.php<br />                 dashboard.php<br />                 comments.php<br />            blog.php<br />            comments.php<br />        models/<br />            blog_model.php<br />            comments_model.php<br />        views/<br />            admin/<br />                blog/<br />                    index.php<br />                    form.php<br />                comments/<br />                    index.php<br />                    form.php<br />                dashboard.php<br />                login.php<br />            blog/<br />                index.php<br />                view.php<br />            comments/<br />                view.php<br />  system/<br />  index.php<br /></pre>\n</blockquote>\n<p>Here we are keeping the default MVC structure of CodeIgniter and using sub-directories for our controllers to give us the http://example.com/admin/blog URL structure. You'll need to set a $route['admin'] = 'admin/dashboard'; to get example.com/admin worksing but thats easy enough.</p>\n<p>This method has the advantage of being able to share models, libraries and helpers across both the front and backend. If you really need to separate models for front and back ends, why not just have a models/admin/ folder and put them in there?</p>\n<p>The down side is that when your site expands and more controllers are required, it can be a real pain to have your content so loosely linked across the entire application directory. You can see in the example above that we have several folders for blog and comment content, where really we should only have one. This one folder is called a module...</p>\n<h3>3.) Modules</h3>\n<p>To keep all the content under one single folder we can adopt the HMVC approach. This stands for Hierarchal MVC which essentially is just modular CodeIgniter. Two systems have been developed for this: <a href=\"http://codeigniter.com/wiki/Modular_Extensions_-_HMVC/\">HMVC</a> and <a title=\"Matchbox - lets you organize your codeigniter resources in modules\" href=\"http://code.google.com/p/matchbox/\" target=\"_blank\">Matchbox</a>. I personally prefer use the latter but have never tried HMVC so i'll leave that one up to you.</p>\n<p>A strange thing that many CodeIgniter users seem to do is create a blog module, comment module and admin module. This strikes me as a very strange separation of content that goes against the point of using modules in the first place! I have a single admin.php controller in the main controllers folder to act as the default admin page which will handle login, logout and the main dashboard. Then I add another admin.php controller in each module and use <a title=\"CodeIgniter User Guide: URI Routing\" href=\"http://codeigniter.com/user_guide/general/routing.html\">URI Routing</a> to get my URL structure as http://example.com/admin/.</p>\n<blockquote>\n<pre>/<br />    application/<br />        config/<br />        controllers/<br />             admin.php<br />        modules/<br />             blog/<br />                 controllers/<br />                     admin.php<br />                     blog.php<br />                 models/<br />                     blog_model.php<br />                 views/<br />                     admin/<br />                         index.php<br />                         form.php<br />             comments/<br />                  controllers/<br />                      admin.php<br />                      comments.php<br />                  models/<br />                      comment_model.php<br />                  views/<br />                     admin/<br />                         index.php<br />                         form.php<br />          views/<br />              admin/<br />                  dashboard.php<br />                  login.php<br />      system/<br />      index.php<br /></pre>\n</blockquote>\n<p>Right now to get at the blog admin you would have to go to http://example.com/blog/admin which may well be fine with you. If not, you can add the following routes to your <strong>application/config/routes.php</strong> to swap the segments around and emulate a /admin/ folder.</p>\n<p><code class=\"php\"> $route['admin/([a-zA-Z_-]+)/(:any)'] = '$1/admin/$2';<br /> $route['admin/login'] = 'admin/login';<br /> $route['admin/logout'] = 'admin/logout';<br /> $route['admin/([a-zA-Z_-]+)'] = '$1/admin/index';<br /> $route['admin'] = 'admin'; </code></p>\n<p>This way you have your admin controllers kept with the frontend controllers, you are sharing models, libraries and helpers and you still have some nice URL's.</p>\n<h3>Summary</h3>\n<p>If your front and back end applications share nothing in common and never will do, use method #1. If you have a small site with one a few controllers and do not want the small overhead HMVC adds, use method #2. If you are working on a massive site that is modular and shares code between front and back ends, use method #3.</p>\n<p>Got any more methods to handle admin structures? Let me know in the comments.</p>\n<div id=\"_mcePaste\" style=\"overflow: hidden; position: absolute; left: -10000px; top: 1178px; width: 1px; height: 1px;\">\n<pre><br />                      dashboard.php</pre>\n</div>",
    "created_on": "1247046540",
    "updated_on": "1282991678",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "40",
    "created": "2009-07-20 20:22:00",
    "updated": "2009-08-23 13:15:38",
    "created_by": "0",
    "ordering_count": null,
    "title": "iPhone Upgrade - Upgrade cheap, free or for profit",
    "slug": "iPhone-Upgrade-Upgrade-cheap-free-or-for-profit",
    "category_id": "14",
    "attachment": "",
    "intro": "Find out how you can save money upgrading your iPhone contract with o2. You could save yourself &pound;400 just by waiting 2 months! If you have the right criteria, you could even make a profit on the upgrade. Find out how.",
    "body": "<p>Finally got around to finishing off a small app I was working on a few weeks back. I forgot to finish it off until yesterday, so here it is.<br /><br /><a title=\"iPhone Upgrade - Upgrade your iPhone free or for profit\" href=\"http://iphone-upgrade.co.uk/\" target=\"_blank\">iPhone Upgrade</a></p>\n<p>Find out how you can save money upgrading your iPhone contract with o2. You could save yourself &pound;400 just by waiting 2 months! If you have the right criteria, you could even make a profit on the upgrade.</p>\n<p>Answer the questions to find out how much money you could save just by waiting a few months to upgrade.</p>\n<p>None of the information is stored, I really could not care less about who has what contract at the moment. This was done just to help peple dodge o2's horrendous buyout fee's.</p>",
    "created_on": "1248121320",
    "updated_on": "1251033338",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "41",
    "created": "2009-07-28 09:32:00",
    "updated": "2010-02-08 19:26:42",
    "created_by": "0",
    "ordering_count": null,
    "title": "How to: Create a Twitter feed with full syntax support",
    "slug": "How-to-Create-a-Twitter-feed-with-full-syntax-support",
    "category_id": "2",
    "attachment": "",
    "intro": "If you have a project that you would like to add a Twitter feed to, but do not want to add in a massive library for the one feed, take a look at this <i>very</i> simple PHP snippet that will give you full synatx support.<br />",
    "body": "<p>If you have a project that you would like to add a Twitter feed to, but do not want to add in a massive library for the one feed, try this little snippet of procedural code that I recently implemented on <a title=\"PyroCMS - a modular open source CodeIgniter CMS\" href=\"pyrocms.com\" target=\"_blank\">pyrocms.com</a>.</p>\n<h3>Expressions</h3>\n<h4>Detect URL's</h4>\n<p><code class=\"php\"> '|([a-z]{3,9}://[a-z0-9-_./?&amp;+]*)|i'<br /> =&gt;<br /> '&lt;a href=\"$0\" target=\"_blank\"&gt;$0&lt;/a&gt;', </code></p>\n<h4>Detect E-mail addresses</h4>\n<p><code class=\"php\"> '|[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,6}|i'<br /> =&gt;<br /> '&lt;a href=\"mailto:$0\"&gt;$0&lt;/a&gt;', </code></p>\n<h4>Detect @usernames's</h4>\n<p><code class=\"php\"> '|@([a-z0-9-_]+)|i'<br /> =&gt;<br /> '&lt;a href=\"http://twitter.com/$1\" target=\"_blank\"&gt;$0&lt;/a&gt;', </code></p>\n<h4>Detect #tags</h4>\n<p><code class=\"php\"> '|#([a-z0-9-_]+)|i'<br /> =&gt;<br /> '&lt;a href=\"http://twitter.com/search?q=#$1\" target=\"_blank\"&gt;$0&lt;/a&gt;' </code></p>\n<h3>Example</h3>\n<p>Lets put this together to create a very simple working example.</p>\n<p><code class=\"php\">&lt;?php<br /><br />// Fetch the Tweets in JSON form and convert to a PHP object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />$tweets = json_decode( <br />&nbsp;&nbsp; &nbsp;file_get_contents&#40;'http://twitter.com/statuses/user_timeline/philsturgeon.json?count=10'&#41;<br />);<br /><br />// List all regular expression rules<br />$patterns = array(<br />&nbsp;&nbsp; &nbsp;// Detect URL's<br />&nbsp;&nbsp; &nbsp;'|([a-z]{3,9}://[a-z0-9-_./?&amp;+]*)|i' &nbsp;&nbsp; &nbsp;=&gt; '&lt;a href=\"$0\" target=\"_blank\"&gt;$0&lt;/a&gt;',<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// Detect Email<br />&nbsp;&nbsp; &nbsp;'|[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,6}|i' =&gt; '&lt;a href=\"mailto:$0\"&gt;$0&lt;/a&gt;',<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// Detect Twitter @usernames<br />&nbsp;&nbsp; &nbsp;'|@([a-z0-9-_]+)|i' &nbsp;&nbsp; &nbsp;=&gt; '&lt;a href=\"http://twitter.com/$1\" target=\"_blank\"&gt;$0&lt;/a&gt;',<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// Detect Twitter #tags<br />&nbsp;&nbsp; &nbsp;'|#([a-z0-9-_]+)|i' &nbsp;&nbsp; &nbsp;=&gt; '&lt;a href=\"http://twitter.com/search?q=#$1\" target=\"_blank\"&gt;$0&lt;/a&gt;'<br />);<br /><br /><br />// Loop through tweets<br />foreach($tweets as $tweet)<br />{<br />&nbsp;&nbsp; &nbsp;// Run all rules to replace syntax with HTML<br />&nbsp;&nbsp; &nbsp;$tweet-&gt;text = preg_replace(array_keys($patterns), array_values($replace), $tweet-&gt;text);<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// Display the tweet with syntax enabled<br />&nbsp;&nbsp; &nbsp;echo '&lt;p&gt;&lt;strong&gt;'.date('d/m/Y', strtotime($tweet-&gt;created_at)) . '&lt;/strong&gt; ' . $tweet-&gt;text.'&lt;/p&gt;';<br />}<br /><br />?&gt;</code></p>\n<p>This is not following perfect coding practices, it will not cache data and might not be the most optimal implementation but I was trying to keep the amount of code low to show the simplicity of how it can be achieved.</p>\n<p>Instead of showing a users timeline you can use the same code to show search results with the url:</p>\n<blockquote>\n<p>http://search.twitter.com/search.json?q=pyrocms</p>\n</blockquote>\n<p>Now, go forth and tweet!</p>",
    "created_on": "1248773520",
    "updated_on": "1265657202",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "42",
    "created": "2009-08-17 15:05:00",
    "updated": "2009-10-19 21:46:12",
    "created_by": "0",
    "ordering_count": null,
    "title": "UTF-8 support for CodeIgniter",
    "slug": "UTF-8-support-for-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "Writing a CodeIgniter application is easy. Writing a CodeIgniter application that supports all characters from multiple languages? Not so easy. Find out how to support UTF-8 content in CodeIgniter.<br />",
    "body": "<p>Writing an application is easy. Writing an application that supports all characters from multiple languages? Not so easy.</p>\n<p>The main problem comes from way back, when the main language in computing was English. The ASCII characters were given numbers from 1 to 128 a-z, A-Z, 0-9 and punctuation. That is fine for the English language but pretty much every other language out there has characters that don't fit in there. To address this, we have UTF-8, which can store extra characters as multiple-bits and is backwards compatible with ASCII.</p>\n<p>To make your <a title=\"CodeIgniter - PHP MVC Framework\" href=\"http://codeigniter.com/\" target=\"_blank\">CodeIgniter</a> application play nicely with UTF-8 you have a few things to think about.</p>\n<h3>Set the HTTP header in index.php</h3>\n<p>All requests to CodeIgniter are made through the index.php file which by default sits outside the system/ folder. For this reason it makes a perfect place to add a PHP header for me.</p>\n<p><code class=\"php\">header('Content-Type: text/html; charset=utf-8');</code></p>\n<h3>Tell CodeIgniter what's going on</h3>\n<p>CodeIgniter by default is set to use UTF-8 for much of its internal functionality, so just make sure the charset is set to UTF-8 in your <strong>application/config/config.php</strong> file.</p>\n<p><code class=\"php\"> $config['charset'] = \"UTF-8\"; </code></p>\n<h3>Configure database connection</h3>\n<p><code class=\"php\"> $db['default']['char_set'] = \"utf8\";<br /> $db['default']['dbcollat'] = \"utf8_unicode_ci\"; </code></p>\n<p>The default here is normally utf8_general_ci which is a pretty weak for of Unicode. This is a quote from <a href=\"http://stackoverflow.com/questions/1036454/what-are-the-diffrences-between-utf8generalci-and-utf8unicodeci\" target=\"_blank\">StackOverflow</a> which I think explains things pretty well.</p>\n<blockquote>\n<p>\"utf8_unicode_ci is generally more accurate for all scripts. For example, on Cyrillic block: utf8_unicode_ci is fine for all these languages: Russian, Bulgarian, Belarusian, Macedonian, Serbian, and Ukrainian. While utf8_general_ci is fine only for Russian and Bulgarian subset of Cyrillic. Extra letters used in Belarusian, Macedonian, Serbian, and Ukrainian are sorted not well.\"</p>\n</blockquote>\n<h3>Set up or convert your MySQL</h3>\n<p>To get this working you need to use MySQL 4.1 (or higher) with utf8 support enabled, but this is pretty standard for most web-hosts.</p>\n<p><code class=\"sql\"> CREATE DATABASE example<br /> &nbsp;&nbsp; &nbsp;CHARACTER SET utf8<br /> &nbsp;&nbsp; &nbsp;DEFAULT CHARACTER SET utf8<br /> &nbsp;&nbsp; &nbsp;COLLATE utf8_unicode_ci<br /> &nbsp;&nbsp; &nbsp;DEFAULT COLLATE utf8_unicode_ci; </code></p>\n<p>If you already have the database set up and running, you can use the following code to convert the database to use UTF-8.</p>\n<p><code class=\"sql\"> ALTER DATABASE example<br />&nbsp;&nbsp; &nbsp;CHARACTER SET utf8<br />&nbsp;&nbsp; &nbsp;DEFAULT CHARACTER SET utf8<br />&nbsp;&nbsp; &nbsp;COLLATE utf8_unicode_ci<br />&nbsp;&nbsp; &nbsp;DEFAULT COLLATE utf8_unicode_ci; </code></p>\n<p>Now the database is ready, you need to add in some tables.</p>\n<p><code class=\"sql\"> CREATE TABLE blog (<br />&nbsp;&nbsp; &nbsp;id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,<br />&nbsp;&nbsp; &nbsp;title VARCHAR(100) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',<br />&nbsp;&nbsp; &nbsp;body TEXT COLLATE utf8_unicode_ci NOT NULL DEFAULT '',<br />) DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci; </code> As with the database, if your tables already exist then you can use the following code to convert your data. You might get some fairly strange results if it is full of data in another non-English character set, but on the whole this has never been an issue for me. <code class=\"sql\"> ALTER TABLE blog (<br />&nbsp;&nbsp; &nbsp;id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,<br />&nbsp;&nbsp; &nbsp;title VARCHAR(100) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',<br />&nbsp;&nbsp; &nbsp;body TEXT COLLATE utf8_unicode_ci NOT NULL DEFAULT '',<br />) DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci; </code></p>\n<h3>And finally, set up your Meta Data.</h3>\n<p>he last place to set for UTF-8 support is in your HTML in the &lt;head&gt; tag. You can use CodeIgniter's meta() function in the <a title=\"CodeIgniter User Guide: HTML Helper\" href=\"http://codeigniter.com/user_guide/helpers/html_helper.html\" target=\"_blank\">HTML helper</a> or plain HTML. <code class=\"html\"> &lt;html&gt;<br /> &nbsp;&nbsp;&lt;head&gt;<br /> &nbsp;&nbsp;&nbsp; &lt;?php echo meta('Content-type', 'text/html; charset='.config_item('charset'), 'equiv');?&gt;<br /> &nbsp;&nbsp;&nbsp; &lt;!-- or --&gt;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&lt;meta http-equiv=\"content-type\" content=\"text/html; charset=&lt;?php echo config_item('charset');?&gt;\" /&gt;<br /> &nbsp;&nbsp;&lt;/head&gt; </code></p>\n<p>I have used the config item instead of just putting in UTF-8 as it makes more sense from a programming point of view. If for any reason your charset is changed in the future, that is one less place to change it.</p>\n<p>Now your CodeIgniter application is ready, you need to make sure your database GUI is too. I regularly use Navicat and phpMyAdmin and on both you can set the \"MySQL connection collation\", so make sure that is set to \"utf8_unicode_ci\" too or it could show characters wrong and will most likely corrupt your data as you work on it.</p>\n<p>For more help developing with UTF-8, take a look at \"<a href=\"http://www.phpwact.org/php/i18n/utf-8\" target=\"_blank\">Handling UTF-8 with PHP</a>\" which will explain some of the problems of using the normal string functions on UTF-8 strings, then take a look at PHP's \"<a href=\"http://uk3.php.net/manual/en/ref.mbstring.php\" target=\"_blank\">Multibyte String Functions</a>\" manual pages to learn how to handle your new happily stored UTF-8 data.</p>",
    "created_on": "1250521500",
    "updated_on": "1255988772",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "43",
    "created": "2009-08-27 15:52:00",
    "updated": "2010-06-12 17:34:02",
    "created_by": "0",
    "ordering_count": null,
    "title": "Clearing CodeIgniter session data",
    "slug": "Clearing-CodeIgniter-session-data",
    "category_id": "3",
    "attachment": "",
    "intro": "This article shows a few ways of clearing session data in CodeIgniter, inlcuding a non-documented approach which lets you wipe all session data without destroying the session.",
    "body": "<p>A question came up in the CodeIgniter forums today asking how to clear session data. After writing a big reply to answer I felt others might be interested in the various options too.</p>\n<p>The most practical, yet least thorough is to unset specific bits of user data. This following code will wipe single or multiple pieces of userdata.</p>\n<p><code class=\"php\">$this-&gt;session-&gt;unset_userdata('something'); // single item<br />$this-&gt;session-&gt;unset_userdata(array('first_thing', 'second_thing', 'third_thing', 'etc')); // multiple items</code></p>\n<p>Alternatively, you can kill the whole session.</p>\n<p><code class=\"php\">$this-&gt;session-&gt;sess_destroy();</code></p>\n<p>This wipes out EVERYTHING but means you will need to create a new session to do anything useful.</p>\n<p>Final option, and this is a hack. Normally in PHP 5 objects, people hide direct access to variables to stop unintentional manipulation by developers. Seeing as CodeIgniter supports PHP 4 the whole way through we can do what we damn well please with them. This means we can view the entire userdata variable, even though that is not a documented feature.</p>\n<p><code class=\"php\"> foreach (array_keys($this-&gt;session-&gt;userdata) as $key)<br /> {<br />&nbsp;&nbsp; $this-&gt;session-&gt;unset_userdata($key);<br /> }</code></p>\n<p>That is a very bad way to do things, as it will break when/if CodeIgniter eventually move their libraries to PHP 5 syntax. That will not been soon (nor does it need to be) but it will happen eventually.</p>",
    "created_on": "1251388320",
    "updated_on": "1276364042",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "44",
    "created": "2009-09-17 12:21:00",
    "updated": "2009-09-22 12:54:52",
    "created_by": "0",
    "ordering_count": null,
    "title": "Asset handling in CodeIgniter with the BASE tag",
    "slug": "Asset-handling-in-CodeIgniter-with-the-BASE-tag",
    "category_id": "3",
    "attachment": "",
    "intro": "There are many suggested ways to handle your assets in CodeIgniter (including my very own Asset library) but this solution has to be one of the easiest. Read on to find out what it is!",
    "body": "<p>There are many suggested ways to handle your assets (CSS, images, JavaScript, etc) in CodeIgniter including my very own <a title=\"CodeIgniter Asset library - Load CSS, images & JavaScript easily\" href=\"http://github.com/philsturgeon/codeigniter-asset\" target=\"_blank\">Asset library</a>. Some people use paths relative to the web root like this:</p>\n<p><code class=\"html\">&lt;img src=\"/image/logo.gif\" alt=\"Logo\" /&gt;</code></p>\n<p>This method works fine if your application will only EVER exist in the web root. If that works for you, fine, no need to read on.</p>\n<p>Those that need their assets to be found wherever their CodeIgniter application happens to sit (root, sub-directory, sub-domain) can use libraries, helpers or add base_url() in front of all refferences to an asset. This does work but seems a bit overkill for something that can be handled with HTML.</p>\n<p>My new evil scheme? Use the lesser-known HTML tag &lt;base&gt; to get all of our links and refferences working perfectly. This should go into the &lt;head&gt; of your document.</p>\n<p><code class=\"html\">&lt;base href=\"&lt;?=base_url();?&gt;\"&gt;</code></p>\n<p>Now all your relative links will be relative to your base_url. Brilliant!</p>\n<p><code class=\"html\">&lt;img src=\"images/logo.gif\" alt=\"Logo\" /&gt;</code></p>\n<p>That will work fine, assuming your images are stored in public_html/images. Use some common sense on that.</p>",
    "created_on": "1253190060",
    "updated_on": "1253624092",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "45",
    "created": "2009-10-16 17:02:00",
    "updated": "2009-10-19 21:45:50",
    "created_by": "0",
    "ordering_count": null,
    "title": "Speaking at EECI2009 in Leiden, Holland",
    "slug": "Speaking-at-EECI2009-in-Leiden-Holland",
    "category_id": "3",
    "attachment": "",
    "intro": "As a massive fan of CodeIgniter I was pretty excited to be attending the EECI2009 conference in Leiden, Holland, as it would give me the chance to meet the EllisLabs development team and lots of other CodeIgniter nerds. Now as a last minute replacement I will actually be speaking at the event too!",
    "body": "<p>As a massive fan of CodeIgniter I was pretty excited to be attending the EECI2009 conference in Leiden, Holland. It would give me the chance to meet the EllisLabs development team and lots of other CodeIgniter nerds. Now as a last minute replacement I will actually be speaking at the event too!</p>\n<p>I found out last week there was a possibility of me speaking and was asked to knock together a topic and summary of what I would like to talk about. This was much harder than I had expected.</p>\n<p>My position within the CodeIgniter community is one of mainly support and blogging. I am regularly on the forums and IRC chatroom answering support questions and giving suggestions to users. All of that is very different to trying to think of a talk to give in front of nearly 100 CodeIgniter users as the forum posts always give you a topic to work with! Not only that but if people are paying almost &pound;300 they are going to expect it to be <strong><em>good</em></strong> to justify the cost. No pressure!</p>\n<p>After a week I have come up with an idea for the talk and I am pretty confident it will be worth attending. I do not want to give too much away, but I will basically be talking about taking CodeIgniter beyond being a simple web-framework and help you use the MVC structure and coding methodologies in some rather unexpected ways.</p>\n<p>For those of you interested in the talk, I will be posting my material and possibly a video of the talk on my blog afterwards.</p>\n<p>Wish me luck!</p>",
    "created_on": "1255712520",
    "updated_on": "1255988750",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "46",
    "created": "2009-10-30 12:45:00",
    "updated": "2009-10-30 12:57:13",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter \"2.0\": Rumours, facts and requests",
    "slug": "CodeIgniter-2.0-Rumours-facts-and-requests",
    "category_id": "3",
    "attachment": "",
    "intro": "Ever since it was announced that ExpressionEngine 2.0 would be running on CodeIgniter, the forums have been jammed full of \"CodeIgniter 2.0\" questions. I have answer this so many times I wanted to clear things up and put some useful suggestions forward.<br />",
    "body": "<p><em><strong>Update 22/03/2010: </strong>Now that CodeIgniter 2.0 development code has been release this article is irrelevant. Please have a look at <a href=\"/news/2010/03/codeigniter-2\">CodeIgniter 2.0: Everything you need to know</a>.</em></p>\n\n<p>Ever since it was announced that ExpressionEngine 2.0 would be running on CodeIgniter, the forums have been jammed full of \"CodeIgniter 2.0\" questions. I have answer this so many times I wanted to clear things up. I have jammed this post full of \"CodeIgniter 2.0\" keywords so hopefully this will be the first thing these muppets spot - if they are smart enough to even Google search a query before posting it on the forums... again.</p>\n<p>What started this off was Yet Another CI 2 question on the forums titled <em><a href=\"http://codeigniter.com/forums/viewthread/133529/\" target=\"_blank\">CodeIgniter 2.0</a></em>. This blew a restraint fuse and I had a bit of a rant.</p>\n<blockquote>It&rsquo;s not happening just yet. All the awesome features written for EE 2.0 are entirely separate to the CodeIgniter codebase. They have just extended and overridden the system to hell and will EVENTUALLY backport the features to CodeIgniter, therefore creating something that COULD be called CodeIgniter 2.0. It may be CodeIgniter 1.8, who knows.</blockquote>\n<p>This started off a brilliant follow-up topic, named <em><a href=\"http://codeigniter.com/forums/viewthread/133546/\">CodeIgniter 2.1</a></em> and it seems I have now been marked as \"The go-to guy\" for CodeIgntier 2 questions (mainly to piss me off).</p>\n<p>I figured, instead of just ranting about it, I could use this oppertunity to discuss what is, what is not and what <strong>should</strong> be going into CodeIgniter over the next few versions. This list is compiled from the Bug Report section of the forums, #codeigniter IRC chat room and a few replies to <a href=\"http://twitter.com/philsturgeon\">@philsturgeon</a>.</p>\n<p><em><strong>Note:</strong> I have filtered quite a few \"Can I haz YouTubes?!\" from this list.</em></p>\n<h3>Confirmed features</h3>\n<p>These features will make it into the CodeIgniter repository <strong>at some point</strong> after ExpressionEngine 2 is released.</p>\n<h4>Modular MVC</h4>\n<p>This is a feature I have wanted in CodeIgniter for a <em>long</em> time, and at <a href=\"http://eeci2009.com/\" target=\"_blank\">EECI2009</a> Derek Allard has confirmed it (unofficially, wandering through a back alley on the way to a pub). Details on what features this will support are rather vague, but assuming it will be similar to a basic Matchbox or HMVC does not seem ridiculous. Modularity in CodeIgniter basically allows your controllers, models, views and other files to be grouped not just by type, but by module and then type - allowing you to keep your application broken down into logical groups which we call \"modules\". Eg: blog, users, gallery, etc would all be a seperate module.</p>\n<h4>JavaScript library</h4>\n<p>My first reaction to having a JavaScript library within CodeIgniter was \"Why?!\". After time my feelings have lessened to a \"Hmm...\" but they will probably never get to the stage of \"Yay!!!1\". Basically this library abstracts common JavaScript framework functions such as show, hide, fade, basic event binding, etc. This to me seemed useless as server-side code cannot respond to the client-side events it builds, but after thinking it over for a while there may be a ways to take advantage of this.</p>\n<h3>Missing features</h3>\n<p>There are features I need in nearly every application I work on that I have extended libraries to include. It drives me mad that some of these are not included in the core as they are not drastic changes to the core and are already developed and tested by many developers.</p>\n<h4>Add download() to FTP library</h4>\n<p>I have to add this in every time I work with FTP on a project. We have upload(), why not download()? I wrote this very simple method over 2 years ago and it was never included into the core. Why? Who knows.</p>\n<h4>FTP groups (like DB groups) for connecting to common servers</h4>\n<p>FTP connections to multiple servers right now is a pain. You have to either place multiple config arrays around your controllers or find some other solution to doing it. This should be supported out of the box in the same was as connections to database servers. This code has also been written up and can be found <a href=\"http://codeigniter.com/forums/viewthread/57498/\" target=\"_blank\">here</a> along with my download() function.</p>\n<h4>DELETE with JOIN in DB-class</h4>\n<p>Another handy feature is SQL <em>DELETE</em> via join. This allows you to delete lots of joined data spread over different tables without having to run separate queries. Those of you lucky enough to be using cascading foriegn keys in your tables need not worry about this, but for the rest of us it is a pain to use multiple queries. Supporting JOIN is a feature supported by MySQL, Oracle and PostgreSQL but it looks like MSSQL may have a bit more trouble.</p>\n<p>A <a href=\"http://codeigniter.com/forums/viewreply/366063/\" target=\"_blank\">workaround</a> that I have tested to work with MySQL is available from <a href=\"http://www.haughin.com/\" target=\"_blank\">Elliot Haughin</a>. This was written a while ago but looks like nobody ever got behind it enough to get it included into the core.</p>\n<h4>prep_url() ignores https:// ftp:// etc</h4>\n<p>When using prep_url() if your pass a link https://example.com you will end up with http://https://example.com. Enough said.</p>\n<h3>Minor syntax changes</h3>\n<p>Small tweaks to simplify the syntax of things we do all the time.</p>\n<h4>Allow libraries to accept non-array params in constructor</h4>\n<p>Mainly just because I get pissed off writing <em>$this-&gt;load-&gt;library('piwik', array('server' =&gt; 'http://something.com/'));</em> when <em>$this-&gt;load-&gt;library('piwik', 'http://something.com/');</em> would do the job just as well. Not every library needs multiple constructor parameters. CodeIgniter not only does not support strings, ints and floats in the constructor but actively removes anything that is not an array.</p>\n<h4>Language helper support for sprintf()</h4>\n<p>It's not very often you have a language string that is entirely static. For example, if you want to write \"Hello username and welcome to the site\" you can either do it as two language strings with a variable in between, or the smooth \"Hello %s and welcome to the site\" and implement it with sprintf(lang('whole_string'), $variable). I would like to see something like slang('whole_string', $variable) just to make it neater and easier for new users to pick up.</p>\n<h3>Crazy but helpful</h3>\n<h4>Add hook to the end Controller constructor</h4>\n<p>CodeIgniter already has several hooks, the most used being pre_controller and post_controller_constructor. The problem for me is that pre_controller exists very early in the system flow and has no access to the database or a great deal of the CodeIgniter instance. The pre_controller_constructor hook has access to everything CodeIgniter has to offer, but it runs <em>after</em> your controller constructor meaning any code in the constructor will ignore whatever you have done in the Hook.</p>\n<p>To pick an example here, my pick_language.php hook uses $_SESSION and $_GET to work out language then sets it using load_class('Config'). I have no access to the database so users cannot pick a language and store it in the db. Why not use a post_controller_constructor hook? Well by that point I have loaded my language files, run database queries and all sorts of logic that is shared accross all methods in a controller. With this new hook it would run <span style=\"text-decoration: underline;\">after</span> the CodeIgniter instance is loaded, but <span style=\"text-decoration: underline;\">before</span> any of my Controller code has started.</p>\n<h4>Form validation and JavaScript library integration to build validation rules</h4>\n<p>Using the JavaScript library as an abstraction layer over the framework libraries such as jQuery, the Form Validation library could use the provided validation rules to build up a string of JavaScript that could help validate your work. It would require a little configuration but imagine the benefits of automatically generated client-side <em>and</em> server-side validation that you only need to write once. I had planned to do this quite some time ago, but with the addition of the JavaScript library this could be made a whole lot easier.</p>\n<h3>What we wont see</h3>\n<p>EllisLab will not drop PHP 4 overnight and rewrite the whole core. We wont be seeing any \"Automatic DRUD generators\" that require one command line prompt and integration with telepathic control. And we wont be seeing anythnig amazing until some time after the ExpressionEngine release at he start of December '09. So stop asking everyone and be patient. The only people who know wont tell you, and as soon as the code is available it will be in the SVN.</p>",
    "created_on": "1256906700",
    "updated_on": "1256907433",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "47",
    "created": "2009-11-18 12:40:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "When this developer designs",
    "slug": "When-this-developer-designs",
    "category_id": "0",
    "attachment": "",
    "intro": "For far too long this blog felt tainted. It's quality diminished by using a free design from Free CSS Templates. Well no more, I have finally had a crack at designing and after a few horrendous iterations I have something that I am happy with.",
    "body": "<p>For far too long this blog felt tainted. It's quality diminished by using a free design from <a href=\"http://freecsstemplates.org/\" target=\"_blank\">Free CSS Templates</a>. Well no more, I have finally had a crack at designing and after a few horrendous iterations I have something that I am happy with.</p>\n<p>It may not be a graphical masterpiece, nor will I be winning any awards for it, but it is mine and that is good enough for me.</p>\n<p>Oh and its HTML 5 too so it looks <em><strong>disgusting</strong></em> in IE6. Let's consider that to be a win!</p>\n<p>Font and text sizes are not perfect so they will be worked on, and I had some plans to implement @font-face on the header. This will all be done soon, but for now it is back to working on <a href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> <a href=\"http://github.com/philsturgeon/pyrocms/tree/v0.9.8-dev\">v0.9.8</a> as its already a few days past due.</p>\n<p>For any of you nerdy developer types with the design skills of a drunk beaver, take a look at <a href=\"http://boagworld.com/design/when-developers-design\" target=\"_blank\">When developers design</a>. It is an old article but has some great advice for those of us more used to an IDE than Photoshop.</p>",
    "created_on": "1258548000",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "48",
    "created": "2009-11-19 17:08:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "Goodbye Matchbox, Hello Modular Separation",
    "slug": "Goodbye-Matchbox-Hello-Modular-Separation",
    "category_id": "3",
    "attachment": "",
    "intro": "I've been using Matchbox in one of its many forms for several years - almost as long as I have been using CodeIgniter - and it got to the point where I could not use CodeIgniter without it. After all this time an alternative has come along with all Matchbox's features and more.<br />",
    "body": "<p>I've been using Matchbox in one of its many forms for several years - almost as long as I have been using CodeIgniter - and it got to the point where I   could not use CodeIgniter without it. After all this time I have finally found an alternative to handle my CodeIgniter applications modular structure.</p>\n<p>Matchbox is a modular system written by Zacharias Knudsen - a very talented young developer who is sadly not as active as he used to be. Modular   CodeIgniter basically means you can group your controllers, models and views for a specific section of the site together.</p>\n<p>The new system I have been implementing to my applications is Modular Separation* by <a title=\"CodeIgniter user profile for wiredesignz\" href=\"http://codeigniter.com/forums/member/45875/\" target=\"_blank\">wiredesignz</a>. Modular Separation is purely PHP 5 which gives it a slight edge over Matchbox from the   get-go as it can leave out a lot of the extra PHP 4 support and go right for the much cleaner &amp; quicker full OOP approach.</p>\n<p>That said, dropping PHP 4 support by itself was not quite enough to make me want to drop Matchbox from my applications. Matchbox still had a few features   over Modular Separation such as multiple module directories (<a class=\"link-subtle\" href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> has both /modules   and /core_modules) which helps to separate out different types of modules. After some pestering and nagging, wiredesignz added that feature (and a few   others) and made Modular Separation seem much more appealing to me.</p>\n<p>One of those brilliant features - added in 1.9 - is 404 routing. I have worked on many applications that like to control how the 404 works. This could be   for many reasons, be it sending the user to a controller that has a full design instead of the usual <acronym title=\"Red Box of Doom\">R.B.O.D</acronym> 404   page, or it could be for more advanced systems that use some sort of page manager: E.g http://example.com/page-name.</p>\n<p><code class=\"php\">$route['404'] = 'pages';</code></p>\n<p>That route will send any 404 errors off the the pages module. More routing can be done from withing the module as Modular Separation supports another   brilliant feature: modular routing.</p>\n<p>Modular routing for CodeIgniter is nothing new - I wrote a simple patch to <a href=\"http://philsturgeon.co.uk/news/2008/06/Matchbox-with-modular-routes-in-CodeIgniter\" target=\"_blank\">support modular routes in Matchbox</a> a while back   and the feature eventually made it into Matchbox 2. Zacharias and I both used a very similar approach, which was effectively adding extra routes into the   main $routes array.</p>\n<p>Modular Separation will match a result in the main config/routes.php file, then look at the module to see if any more routes match the routed URL. This   means you can keep general rules in the global file, then module specific rules can be kept in the module itself. Keeping control of a modules routes to the   specific module is brilliant and cuts down on the possibility of routes conflicting with each other too.</p>\n<p><a class=\"link-subtle\" href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> has now been converted to use Modular Separation and it has shaved a few   100ths of a second off here and there. That's good enough for me, especially as I now have fewer extended libraries in my applications/libraries folder.</p>\n<p>I am not suggestion you drop Matchbox right now, I have no idea where is going and I may some day switch back. Right now however, I will be using Modular   Separation and suggest you give it a try if you are starting a new project.</p>\n<p><small>* Confusingly, Matchbox used to be called Modular Sepration a year or two back, so be careful when looking around the web for details. The forum   thread to look for help on the new Modular Separation (PHP 5) by wiredesignz is <a href=\"http://codeigniter.com/forums/viewthread/121820/\">this one</a>.</small></p>",
    "created_on": "1258650480",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "49",
    "created": "2009-11-21 13:19:00",
    "updated": "2011-02-03 11:23:47",
    "created_by": "0",
    "ordering_count": null,
    "title": "Send iPhone notifications from CodeIgniter",
    "slug": "Send-iPhone-notifications-from-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n Most web-applications currently use automated e-mail&#39;s to let an administrator know someting is going on and some applications use Twitter. Why not use iPhone Push Notifications to get an alert to you immediately without having to check a thing?</p>",
    "body": "<p>\n <img alt=\"IMG 0223\" height=\"234\" src=\"/application/uploads/default/assets/cache/1_254_234_90.png\" style=\"float: right;\" width=\"254\" />Most web-applications currently use automated e-mail&#39;s to let an administrator know someting is going on and some applications use Twitter. Why not use iPhone Push Notifications to get an alert to you immediately without having to check a thing?</p>\n<p>\n If you know nothing about how Push Notifications work then relax, you really don&#39;t need to. <a href=\"http://prowl.weks.net/\" title=\"Prowl is the Growl client for the iPhone OS.\">Prowl</a> handles it all for you and gives you acces to a simple API once you have registered an account.</p>\n<p>\n The day Prowl was released I felt the need to make something with it, no matter how simple or silly. The result was <a href=\"http://philsturgeon.co.uk/spamphil/\" target=\"_blank\">Spam Phil</a>. That was some time ago and recently the comical spams have died out, but I was reminded of this work when a follower on Twitter asked for my Prowl work &quot;@philsturgeon any chance you could email me the source of your little Codeigniter + Prowl integration?&quot;.</p>\n<p>\n I was slightly confused as I had never done any CodeIgniter + Prowl work, but not wanting to disappoint, I threw one together based on PHP Prowl.</p>\n<p>\n The installation and useage is really simple, take a look here:</p>\n<p>\n <a href=\"/code/codeigniter-prowl\" title=\"Prowl library for CodeIgniter\">Prowl library for CodeIgniter</a></p>\n<p>\n If it makes your iPhone explode, blame somebody else.</p>",
    "created_on": "1258809540",
    "updated_on": "1296732227",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "50",
    "created": "2009-11-23 21:54:00",
    "updated": "2009-11-23 22:18:31",
    "created_by": "0",
    "ordering_count": null,
    "title": "Give CodeIgniter's Parser library more kick with Dwoo",
    "slug": "Give-CodeIgniters-Parser-library-more-kick-with-Dwoo",
    "category_id": "3",
    "attachment": "",
    "intro": "Dwoo is a PHP based templating engine aimed as a replacement for Smarty 2.x using similar and alternative syntax. This implementation basically overrides the logic of the default parser with this more powerful system.<br />",
    "body": "<p>Anyone who has used the CodeIgniter Parser library will agree it is damn basic. The library is litterally just a way to use variables and foreach loops in your views without using PHP syntax. I have never found that too helpful, and when I started looking for a way to enable a template parser for the PyroCMS page manager, what I ended up with was <a href=\"http://github.com/philsturgeon/codeigniter-helpfulparser\"><strong>HelpfulParser</strong></a>. That allowed us to use helpers and other PHP functions, but was also pretty basic.</p>\n<p>Not wanting to spend too much time re-inventing the wheel I had a look at existing templating engines and decided to use <a title=\"Dwoo - A PHP5 template engine positioned as an alternative to Smarty\" href=\"http://dwoo.org/\">Dwoo</a>. It is a lightwight, PHP 5 only templating engine intended as a replacement for Smarty. The main reason I picked Dwoo over another alternative like <a title=\"Twig - The flexible, fast, and secure template language for PHP\" href=\"http://www.twig-project.org/\">Twig</a> was the syntax. If BDU's are going to using this, it needs to be as easy as possible to learn.</p>\n<p>Suprisingly the Dwoo download came witha CodeIgniter implementation already, bundled as a very simple wrapper library with syntax such as $this-&gt;dwootemplate-&gt;assign('foo', 'bar') and $this-&gt;dwootemplate-&gt;display(). I don't you about you folks, but I hate putting the name of a third-party anything in my code when it can be avoided.</p>\n<p>So after a little head-scratching, we now have CodeIgniter-Dwoo. DwooParser? DwooIgniter? Whatever we call it, my new Dwoo implementation for CodeIgniter sits in with \"the CodeIgniter way\" perfectly and the only code you will need to change within your application is the Parser file and your view files. No changes to your controllers at all!</p>\n<p>The Lead Developer of Dwoo contacted me about this implementation and it may way well be included in the Dwoo 1.2 release in place of the old one, so please test this out and let me know if you have any issues or suggestions.</p>\n<p><strong><a href=\"/code/codeigniter-dwoo\">Dwoo implementation</a></strong> for CodeIgniter</p>",
    "created_on": "1259013240",
    "updated_on": "1259014711",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "51",
    "created": "2009-11-30 18:42:00",
    "updated": "2010-03-11 15:43:39",
    "created_by": "0",
    "ordering_count": null,
    "title": "Managing stable and unstable branches in Git",
    "slug": "Managing-stable-and-unstable-branches-in-Git",
    "category_id": "13",
    "attachment": "",
    "intro": "Stable and unstable branches mean that while you work on a new version of your software, you maintain the current   version by working on bug-fixes and small tweaks. Find out how to achieve this using Git.<br />",
    "body": "<p>Stable and unstable branches are something that every open-source developer, project manager, or general software   user should be aware of. The idea is that while you work on a new version of your software, you maintain the current   version by working on bug-fixes and small tweaks.</p>\n<p>A great example of this methodology is Mozilla Firefox. They already have branches for 3.6 and 4.0, but if a bug is   noticed in 3.5.x they can still make a fix without worrying about any of their 3.6+ features getting in the way.</p>\n<p>To do this using Git (a distributed version control system) is very simple when compared to other version control   systems like Subversion. In Subversion have to keep careful notes of which trunk updates you have merged into your   branch, spend ages looking through logs for the correct merge points and messing around with long URL based merge   commands. IF you don't know what I'm talking about, don't worry. Subversion sucks so put it out of your mind.</p>\n<h3>Branch naming conventions</h3>\n<p>By default, every Git repo has one branch called <strong>master</strong>. I like to make sure this branch always has   a relatively stable release of the code so although it can be considered \"bleeding edge\", a user should always be   able to pull and not be bombarded with errors.</p>\n<p>So if master contains our current release, what should we call our new branch? Let's use PyroCMS as an example so we   have some nubmers to work with.</p>\n<p>The current release of PyroCMS at time of writing is v0.9.7.2, and that sits in the master. I have created a new   branch called v0.9.8-dev to contain all new features for v0.9.8.</p>\n<h3>Creating the branches</h3>\n<blockquote># when in master<br /> git branch v0.9.8-dev<br /> git checkout v0.9.8-dev<br /> git push origin v0.9.8-dev</blockquote>\n<p>This creates a branch for user A, switches to it and pushes it to the origin remote repository. Once thats done,   other people can use it via:</p>\n<blockquote># when in master<br /> git branch v0.9.8-dev<br /> git checkout v0.9.8-dev<br /> git pull origin v0.9.8-dev</blockquote>\n<p>This creates a branch on user B's local repository, switches to it and pulls the current copy of v0.9.8-dev merging   in any of their master changes at the same time (effectively updating the branch too).</p>\n<h3>Submitting work</h3>\n<p>Now everybody has a branch, people can switch between master and v0.9.8-dev putting their code into whichever branch   is relevant for the task. For this use the usual combination of git status, git add and git commit (a.k.a \"S.A.C\" =   if you dont run status, add, then commit I will SAC your ass from the team).</p>\n<blockquote>git status</blockquote>\n<p>Shows which files have been changed. Nothing will be added to the commit until you run add/rm.</p>\n<blockquote>git add folderA folderB/fileB1.html fileC*.php</blockquote>\n<p>That will add anything in folderA, only fileB1.html within fodlerB and fileC1.php, fileC2.php, fileC3.php etc. With   selective use of add and rm you should be able to avoid commiting anything you don't mean to, like cache files or   your database config files (you know who I'm talking about guys :-p).</p>\n<p>With that done, commit with with a simple:</p>\n<p>git commit -m \"This system now makes tea quicker and better than before.\"</p>\n<p>And finally, a quick pull then a push.</p>\n<blockquote># when in master<br /> git pull master<br /> git checkout v0.9.8-dev<br /> git merge master<br /> git push</blockquote>\n<p>Doing this ensures that the most up to date copy of master has been downloaded, v0.9.8-dev is switched to and master   changes are merged in. Then by using git push and ommiting the remote name and branch, it will just push everything   meaning master and v0.9.8-dev are updated simultaniously.</p>\n<h3>Releasing new versions</h3>\n<p>When you are ready to release a new version of your stable branch, you run the following:</p>\n<blockquote>git checkout master<br /> git tag v0.9.7.3<br /> git push origin v0.9.7.3</blockquote>\n<p>If instead you wish to release the new major version, you need to make sure it has all of your master changes and   then:</p>\n<blockquote>git checkout master<br /> git merge v0.9.8-dev<br /> git tag v0.9.8<br /> git push<br /> git push origin :v0.9.8-dev</blockquote>\n<p>For most of you, that command is probably the most confusing of the lot. What this does it switch to master, merge in   all of your v0.9.8-dev branch changes, tag the new release in the local repository and then push everything to your   remote. Then right at the end it deletes the unstable branch and your transition is complete!</p>\n<p>That then means its time to blog, tweet then party. Your new version is out and that means go to the pub as quick as   possible with your phone off so you dont have to worry about bug-fixes. Tomorrow - when the hangover wears off - it's   time to go back to the start and begin working on your new stable and unstable versions.</p>",
    "created_on": "1259606520",
    "updated_on": "1268322219",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "52",
    "created": "2009-12-03 11:54:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "Write your first ExpressionEngine 2.0 plugin",
    "slug": "Write-your-first-ExpressionEngine-2.0-plugin",
    "category_id": "16",
    "attachment": "",
    "intro": "into",
    "body": "<p>What does CodeIgniter bring to ExpressionEngine 2.0?<br /><br />As soon as I got a copy of ExpressionEngine 2.0 Beta I wanted to start writing about it. It is a great looking system <br /><br />and it is very well put together. Now with EE 2.0 Public Beta release it means NDA has been lifted and I can actually <br /><br />talk about it - Great! <br /><br />I'll leave the in-depth reviews to the rest of the blog-o-sphere. For now I just want to cover the first most basic <br /><br />thing that all of us CodeIgniter developers will want to try for ExpressionEngine 2: Making a plugin.<br /><br />&lt;h3&gt;Creating the basic structure&lt;/h3&gt;<br /><br />The first thing to do is create the plugin file. For now I will use a very simple example and help you get a \"Hello <br /><br />World\" plugin working. You'll need to create the following file: <br /><br />&nbsp;./system/expressionengine/plugins/pi.hello_world.php<br /><br />if for some reason you plan of having multiple files, you can create a folder in the third_party folder. <br /><br />&nbsp;./system/expressionengine/third_party/pi.hello_world.php<br /><br />This will most likely be for creating modules that contain plugins, images, CSS, etc but that is speculation from a <br /><br />ExpressionEngine Add-on newbie.<br /><br />Now the file exists we can get the structure ready. This consists of two parts, the metadata array and the class <br /><br />object which will make up the plugin. The array is read in by ExpressionEngine on the Addons -&gt; Plugins section of <br /><br />the Control Panel and tells the user what the plugin is, what it does, who made it and when.<br /><br />[CODE STEP 1]<br /><br />You can see this plugin is really simple so far. It sets the metadata and has only one function - the class <br /><br />constructor. When you call a ExpressionEngine plugin, it is the constructor that is called so most of your work will <br /><br />be done in here.<br /><br /><br />&lt;h3&gt;Adding usage information&lt;/h3&gt;<br /><br />This step could argueably be the last, but that depends if you are a document first or document later kind of <br /><br />developer. Usage is a field on the metadata display page and allows you to display simple documentation for a plugin.<br />You can add this simply by adding a usage() function to your plugin class and adding a new line in the metadata <br /><br />array.<br /><br />[CODE STEP 2]<br /><br />You can see the syntax here is Hello_World::usage(). For those of you not \"down with the OOP\" that is a static <br /><br />method. A call to your plugin, made without instantiating your class (meaning none of your other code runs). The <br /><br />example is a little crazy and uses the output buffer to catch the output, but you can just do return 'This does <br /><br />stuff'; if you like.<br /><br />&lt;h3&gt;Adding parameters&lt;/h3&gt;<br /><br />Most ExpressionEngine Plugin will use parameters to give the plugin more flexibility and provide more information <br /><br />about what the plugin user is actually trying to do.<br /><br />For example, the Nice Date plugin written by Lodewijk Schutte:<br /><br />&nbsp;&nbsp; &nbsp;{exp:nice_date date=\"2007-05-20\" format=\"%F %j%S, %Y\"}<br /><br />This example shows it taking a date and a format parameter, which will convert that date into the format provided - <br /><br />all pretty standard stuff. To get hold of those parameters within your plugin you can do the following:<br /><br />[CODE EXAMPLE 3]<br /><br />Anyone used to developing plugins for ExpressionEngine 1.6.x will notice this is slightly different. Instead of <br /><br />accessing global variables, we use $this-&gt;EE =&amp; get_instance() and interact with $this-&gt;EE-&gt;TMPL to get out <br /><br />parameters.<br /><br />&lt;h3&gt;Double tag syntax&lt;/h3&gt;<br /><br /><br /><br />&lt;h3&gt;So where is this CodeIgniter thing hiding?&lt;/h3&gt;<br /><br />Remember earlier adding $this-&gt;EE =&amp; get_instance()? Well, that just so happens to be CodeIgniter right there. Adding <br /><br />that line is the magic step that lets us CodeIgniter nerds do our thing and grants Plugin developers access to the <br /><br />CodeIgniter super-global. To explain to the ExpressionEngine folk, the super-global&nbsp; allows us to load helpers, <br /><br />libraries, CodeIgiter plugins, etc which can all be used to better your ExpressionEngine Plugins. <br /><br /><br />An example of useful functions from core CodeIgniter files are the following helper functions:<br /><br /><br />&lt;h4&gt;Number helper&lt;/h4&gt;<br /><br />$this-&gt;EE-&gt;load-&gt;helper('number');<br /><br />byte_format()<br /><br />Formats a numbers as bytes, based on size, and adds the appropriate suffix.<br /><br /><br />&lt;h4&gt;Inflector helper&lt;/h4&gt;<br /><br />$this-&gt;EE-&gt;load-&gt;helper('inflector');<br /><br />$word = \"dogs\";<br />echo singular($word); // Returns \"dog\"<br /><br />plural()<br /><br />Changes a singular word to plural. Example:<br />$word = \"dog\";<br />echo plural($word); // Returns \"dogs\" <br /><br />humanize()<br /><br /><br />It also gives you access to the awesome date_helper, which replaces functionality like <br /><br />$LOC-&gt;decode_date($format,$time,$loc). It's my belief that while ExpressionEngine handles a lot of these functions <br /><br />internally - in several strange places like a large Library class called Functions.php... - that they will slowly be <br /><br />relying more and more on CodeIgniter helpers and core libraries. For that reason it makes sense to rely on these core <br /><br />helpers and libraries as much as possible to save a later recode. Also for us CodeIgniter nerds, it means we have <br /><br />fewer new functions to try and remember.<br /><br /><br /><br />http://net.tutsplus.com/tutorials/cmss/building-your-first-expressionengine-plugin/</p>",
    "created_on": "1259841240",
    "updated_on": "0",
    "status": "draft",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "53",
    "created": "2009-12-07 18:13:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "PyroCMS v0.9.7.3 released",
    "slug": "PyroCMS-v0.9.7.3-released",
    "category_id": "11",
    "attachment": "",
    "intro": "After a long wait the new stable PyroCMS has been released which adds German language support and a bunch of other bug-fixes.<br />",
    "body": "<p>After a long wait the new stable PyroCMS has been released which adds German language support and a bunch of other bug-fixes. It might not be anything crazy exciting but if you are using PyroCMS already it will take care of pretty much any bug you might have noticed so far.</p>\n<p>If you aren't already using PyroCMS because you heard about the Apache crashing PHP 5.3 bug: good news. This release should stop your server crashing on the final installer stage.</p>\n<p>More information over on <a href=\"http://www.pyrocms.com/news/2009/12/PyroCMS-v0.9.7.3-released\" target=\"_blank\"><strong>pyrocms.com</strong></a></p>",
    "created_on": "1260209580",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "54",
    "created": "2009-12-10 11:45:00",
    "updated": "2010-12-31 01:33:52",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter on PHP 5.3",
    "slug": "CodeIgniter-on-PHP-5.3",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tFind out how to make PHP 5.3 shut up complaining about &quot;<i>warning: date(): It is not safe to rely on the system&#39;s timezone settings</i>&quot; and deprecated functions in your CodeIgniter<i> </i>applications.</p>",
    "body": "<p>\n\tLast night I set up Zend Community Server with PHP 5.3 and gave PyroCMS (running CodeIgniter 1.7.2) a spin. Out of the box v0.9.7.3 and v0.9.8-dev seemed to work fine, except for a single Warning at the top of each page:</p>\n<p>\n\t<em>&quot;warning: date(): It is not safe to rely on the system&#39;s timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier.&quot;</em></p>\n<p>\n\tTo fix this, you only need to edit the main index.php for your CodeIgniter application:</p>\n<p>\n\t<code class=\"php\">/*<br />\n\t|---------------------------------------------------------------<br />\n\t| DEFAULT TIMEZONE<br />\n\t|---------------------------------------------------------------<br />\n\t|<br />\n\t| Set the default timezone for date/time functions to use if<br />\n\t| none is set on the server.<br />\n\t|<br />\n\t*/<br />\n\t<br />\n\tif( ! ini_get(&#39;date.timezone&#39;) )<br />\n\t{<br />\n\t&nbsp;&nbsp; date_default_timezone_set(&#39;GMT&#39;);<br />\n\t} </code></p>\n<p>\n\tThis modification is something you will probably need to make for any CodeIgniter application running on PHP 5.3 and can easily be modified to your local timezone. There is a full list of supported timezones in the PHP manual <a class=\"link-subtle\" href=\"http://uk2.php.net/manual/en/timezones.php\" target=\"_blank\" title=\"Full list of supported timezones in PHP\">here</a>.</p>\n<p>\n\tAnother tweak that might be worth trying (although not something I had an issue with on my apps) will be removing error messages for deprecated functions. I personally would prefer to see these so I know what to fix, but if you are trying to fix an app running on PHP 5.3 quickly, change your error reporting level in index.php like so:</p>\n<p>\n\t<code class=\"php\">/*<br />\n\t|---------------------------------------------------------------<br />\n\t| PHP ERROR REPORTING LEVEL<br />\n\t|---------------------------------------------------------------<br />\n\t|<br />\n\t| By default CI runs with error reporting set to ALL. For security<br />\n\t| reasons you are encouraged to change this when your site goes live.<br />\n\t| For more info visit: http://www.php.net/error_reporting<br />\n\t|<br />\n\t*/<br />\n\t<br />\n\terror_reporting(E_ALL &amp; ~E_DEPRECATED);</code></p>\n<p>\n\tHave you noticed any other problems when upgrading your CodeIgniter applications to PHP 5.3? If so (and the damn captchas are actually working...) please let me know in the comments.</p>",
    "created_on": "1260445500",
    "updated_on": "1293759232",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "55",
    "created": "2009-12-14 17:06:00",
    "updated": "2009-12-15 11:36:59",
    "created_by": "0",
    "ordering_count": null,
    "title": "Why CodeIgniter HTML helper functions rock",
    "slug": "Why-CodeIgniter-HTML-helper-functions-rock",
    "category_id": "3",
    "attachment": "",
    "intro": "A complaint I often hear about CodeIgniter is one about HTML helper functions like form_open(), doctype() and img(). This post helps explain what they are and why they are useful.",
    "body": "<p>A complaint I often hear about CodeIgniter is one about HTML helper functions like form_open(), doctype() and img().</p>\n<p>The complaint boils down to these points:</p>\n<ul>\n<li>heading('Hello', 1) is ugly compared to &lt;h1&gt;Hello&lt;/h1&gt;!</li>\n<li>Putting HTML in PHP functions is \"bad MVC\".</li>\n<li>My favourite \"I know how to write HTML, I don't need a helper\".</li>\n</ul>\n<p>These points of view come from people who do not understanding the potential benefits of using HTML helpers - whichis fair enough as I used to think they were useless too.</p>\n<p>Two small things to mention first, then on to the \"meat\" of the article.</p>\n<h3>It looks ugly</h3>\n<p>If you are reading this you are quite likely a programmer who stares at PHP for large amounts of time. Who cares if it does not look as clean as plain HTML in your view files? As far as readability goes, if a designer was to look at heading() im sure it would make perfect sense to them as much as a &lt;h1&gt;.</p>\n<h3>MVC pattern</h3>\n<p>Due to CodeIgniter being a MVC framework, people try to apply those three letters to everything. The people who see HTML helpers as \"bad MVC\" say so mainly because they have HTML outside of the view, which to them \"goes against the rules\" but I don't think it should be as cut-and-dry as \"ALL HTML ALWAYS GOES IN VIEWS\".</p>\n<p>The way I see it is simple, views should contain your custom chunks of HTML (i.e. displaying content, forms, RSS feeds, etc) and helpers/plugins should contain whatever they need to do their helpful job and if that happens to be a small amount of HTML, who gives a damn? It doesn't \"break MVC\" in the slightest.</p>\n<h3>Wrapping your data</h3>\n<p>The main interest to me comes in the extra abstraction layer these HTML helpers provide you with. The \"whats the point?\" comments can be answered in the same way as \"What's the point in using jQuery?\" or \"Why use CodeIgniter over PHP?\". The extra layer of abstraction, combined with helper extending/overriding makes it very easy to change simple bits of logic throughout your application output with minimal fuss.</p>\n<p>To explain what the f**k I am talking about, I'll use an example.</p>\n<pre>&lt;form action=\"&lt;?php echo site_url('controller/method'); ?&gt;\" method=\"post\"&gt;<br />vrs<br />&lt;?php echo form_open('controller/method');</pre>\n<p>First you will see the standard HTML way to do it, with the site_url() function used to create the link to the form action. Second you will see the form_open() tag - and in this example its shorter too, wahey!</p>\n<p>I wanted a way to set accept-charset=\"UTF-8\" in all my forms to help keep my data all &lt;a href=\"/news/2009/08/UTF-8-support-for-CodeIgniter\"&gt;UTF-8 in CodeIgniter&lt;/a&gt;. If I was using just HTML then I would have to go through &lt;strong&gt;all&lt;/strong&gt; my forms and add that in myself, which would be wasting time I could have spent at the pub.</p>\n<p>Instead, as CodeIgniter allows you to extend helpers, I just made my own slightly modified form_open() inapplication/helpers/MY_form_helper.php which contained this logic. Because I was using PHP to wrap my useful data, I could make one simple change and update all of my &lt;form&gt; tags.</p>\n<p>The main problem is people are looking at these HTML helper functions and seeing them purely as different syntax.</p>\n<h3>Think big</h3>\n<p>My example shows one useful application of this beyond shorter syntax, but there are plenty more applications for</p>\n<p>HTML helper functions.</p>\n<ul>\n<li>Store your DOCTYPE in a config variable and update your entire site from XHTML 1.1 to HTML 5 easily</li>\n<li>Developing your app with &lt;h1&gt;Something&lt;/h1&gt; then relizing your headers in 500 different view files need &lt;h1&gt;&lt;span&gt;Something&lt;/span&gt;&lt;/h1&gt;</li>\n<li>Fetching metadata from a database and outputting with meta()</li>\n<li>Adding Google event tracking to images loaded with img()</li>\n<li>Set your page titles (display headers, not title tag) to use a config variable 1 to 6 in case your CMS needs to change what level the links are.</li>\n<li>XSS protection for forms using form_open() and form_close(). Derek Allard hinted at this some time ago and I still hope to see it happen.</li>\n</ul>\n<p>There are all sorts of crazy things you can do with HTML helpers and while it might be hard to see their value before you have the \"aha!\" moment, it is a pain to realise you need to use them when it is too late.</p>",
    "created_on": "1260810360",
    "updated_on": "1260877019",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "56",
    "created": "2009-12-15 17:03:00",
    "updated": "2009-12-15 17:03:00",
    "created_by": "0",
    "ordering_count": null,
    "title": "Twiny-Framework: the framework small enough to tweet",
    "slug": "Twiny-Framework-the-framework-small-enough-to-tweet",
    "category_id": "2",
    "attachment": "",
    "intro": "<p>Many frameworks say they are lightweight, quick and easy on your server, but none are as lightweight as my new &quot;framework&quot; which is so lightweight it can fit in a Tweet.</p>\n",
    "body": "<p>Many frameworks say they are lightweight, quick and easy on your server, but none are as lightweight as my new &quot;framework&quot; which is so lightweight it can fit in a Tweet.</p>\n\n{{ prism:syntax lang=\"php\" }}\n<? $g=$_GET;$c=@$g['c']?:'Home';\nif(!@include\"c/$c.php\")die('fail');\n$m=method_exists($c,$m=@$g['m'])?$m:'index';\n$o=new$c;$o->$m($g);\n{{ /prism:syntax }}\n\n<p>This idea was not my own, but was inspired by <a href=\"http://twitto.org/\" target=\"_blank\">Twitto</a>. During some extreme boredom at work I decided to &quot;one-up&quot; this teeny-tiny framework and improve on it. My framework does this by allowing you to run Controller files and methods in a similar way to CodeIgniter, while Twitto only has the ability to run functions from a single file.</p>\n\n<h3>Usage</h3>\n\n{{ prism:syntax lang=\"php\" }}\nclass Blog\n{\n    function index()\n    {\n        echo \"This is my blog!\";\n    }\n    function view( $params )\n    {\n        echo \"This is article #\".$params['id'];\n    }\n}\n{{ /prism:syntax }}\n\n<p>This simple class structure contains a method for each page, defaulting to index. If no controller is set, then it goes to Home.php.</p>\n\n<ul>\n\t<li>index.php - Runs Home-&gt;index() in ./c/Home.php</li>\n\t<li>index.php?c=Blog - Runs Blog-&gt;index() in ./Blog.php</li>\n\t<li>index.php?c=Blog&amp;m=view&amp;id=1 - Runs Blog-&gt;view($params) and id can be accessed via $params[&#39;id&#39;]</li>\n</ul>\n\n<p>You can get to that with URL&#39;s like index.php?c=Blog&amp;m=view&amp;id=1, but with some mod_rewrite that could be reduced to /Blog/view/id/1 easily enough.</p>\n\n### MVC?\n\nWant full MVC? Set an autoload function to check ./m/ and use:\n\n{{ prism:syntax lang=\"php }}\n    function view($params)\n    {\n        include'm/blog_m.php';\n        blog\\_m::get( $params['id'] );\n    }\n{{ /prism:syntax }}\n\nViews would just be another include with direct access to your variables set in the controller.\n\n### Summary\n\nAs I said this mainly came out of boredom and is not meant for serious use (or serious ridicule), but it is cool to see how much can be done with less than 140 characters of PHP as base. I could do some awesome things with this by taking it up to 300-400 characters, but that would spoil the fun right?",
    "created_on": "1260896580",
    "updated_on": "1260896580",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p>Many frameworks say they are lightweight, quick and easy on your server, but none are as lightweight as my new &quot;framework&quot; which is so lightweight it can fit in a Tweet.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n&lt;? $g=$<em>GET;$c=@$g['c']?:'Home';\nif(!@include\"c/$c.php\")die('fail');\n$m=method</em>exists($c,$m=@$g['m'])?$m:'index';\n$o=new$c;$o->$m($g);\n{{ /prism:syntax }}</p>\n\n<p>This idea was not my own, but was inspired by <a href=\"http://twitto.org/\" target=\"_blank\">Twitto</a>. During some extreme boredom at work I decided to &quot;one-up&quot; this teeny-tiny framework and improve on it. My framework does this by allowing you to run Controller files and methods in a similar way to CodeIgniter, while Twitto only has the ability to run functions from a single file.</p>\n\n<h3>Usage</h3>\n\n<p>{{ prism:syntax lang=\"php\" }}\nclass Blog\n{\n    function index()\n    {\n        echo \"This is my blog!\";\n    }\n    function view( $params )\n    {\n        echo \"This is article #\".$params['id'];\n    }\n}\n{{ /prism:syntax }}</p>\n\n<p>This simple class structure contains a method for each page, defaulting to index. If no controller is set, then it goes to Home.php.</p>\n\n<ul>\n    <li>index.php - Runs Home-&gt;index() in ./c/Home.php</li>\n    <li>index.php?c=Blog - Runs Blog-&gt;index() in ./Blog.php</li>\n    <li>index.php?c=Blog&amp;m=view&amp;id=1 - Runs Blog-&gt;view($params) and id can be accessed via $params[&#39;id&#39;]</li>\n</ul>\n\n<p>You can get to that with URL&#39;s like index.php?c=Blog&amp;m=view&amp;id=1, but with some mod_rewrite that could be reduced to /Blog/view/id/1 easily enough.</p>\n\n<h3>MVC?</h3>\n\n<p>Want full MVC? Set an autoload function to check ./m/ and use:</p>\n\n<p>{{ prism:syntax lang=\"php }}\n    function view($params)\n    {\n        include'm/blog_m.php';\n        blog&#95;m::get( $params['id'] );\n    }\n{{ /prism:syntax }}</p>\n\n<p>Views would just be another include with direct access to your variables set in the controller.</p>\n\n<h3>Summary</h3>\n\n<p>As I said this mainly came out of boredom and is not meant for serious use (or serious ridicule), but it is cool to see how much can be done with less than 140 characters of PHP as base. I could do some awesome things with this by taking it up to 300-400 characters, but that would spoil the fun right?</p>\n",
    "preview_hash": ""
  },
  {
    "id": "57",
    "created": "2009-12-29 10:38:00",
    "updated": "2009-12-29 14:23:13",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter Template library",
    "slug": "CodeIgniter-Template-library",
    "category_id": "3",
    "attachment": "",
    "intro": "Working with multiple views in CodeIgniter has always been a pain. Out of the box CodeIgniter provides no real way of having a layout file or header/footer functionality. This library makes the whole process very easy and gives lots of useful methods for shared output.<br />",
    "body": "<p>Working with multiple views in CodeIgniter has always been a pain. Out of the box CodeIgniter provides no real way of having a layout file and the only way to get header/footer functionality is to put $this-&gt;load-&gt;view('header') in your views or in each controller and method.</p>\n<p>Obviously as a programmer I am lazy and don't want to do that. Years ago I made some dodgy helper which evolved into a library which I called <strong>CodeIgniter Layout library</strong>. The problem was this was a library that got used for loads of different applications, some modular, some not and ended up with a really confused set of features that were plain bodged together. It was so embarresingly screwed that I never released it, even though it is running 95% of all views in PyroCMS v0.9.7.</p>\n<p>During PyroCMS v0.9.8 development one of the first things to go was the Layout library, which has  been entirely re-coded with my <strong><a title=\"Template library for CodeIgniter\" href=\"/code/codeigniter-template\">CodeIgniter Template library</a></strong>.</p>\n<p>This library has an awesome featureset:</p>\n<ul>\n<li>Page title - will guess if nothing is set</li>\n<li>Breadcrumbs</li>\n<li>Meta-data</li>\n<li>Layout files - wrapper around the loaded view</li>\n<li>Themes</li>\n<li>Partials - Give any nubmer of views a name and load them in the layout (sidebar, menu, extra footer, etc)</li>\n<li>Loading views in modules - supports <a class=\"link-subtle\" href=\"http://codeigniter.com/forums/viewthread/121820/\" target=\"_blank\">Modular Separation (PHP 5)</a> and any system that uses $this-&gt;router-&gt;fetch_module().</li>\n</ul>\n<p>So that's lots of crazy stuff that to me has been very useful and should be for others too.</p>\n<p>The way it works is simple, you tell it what view you would like to load and tell it which layout to use, then it will wrap your view file with the layout suggested. By using the <a class=\"link-subtle\" href=\"http://codeigniter.com/wiki/MY_Controller_-_how_to_extend_the_CI_Controller/\" target=\"_blank\">MY_Controller trick</a>, you can set the name of the layout file for your entire application and by creating a Front_Controller and Back_Controller you can set different default layouts for your frontend or backend respectively. This is a big change for people not used to structuring their applications this way, but trust me it is worth it for several reasons I will go into in a later post.</p>\n<p><a title=\"Template library for CodeIgniter\" href=\"/code/codeigniter-template\">Read more</a> about this library to learn how it all works and see some code examples.</p>",
    "created_on": "1262083080",
    "updated_on": "1262096593",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "58",
    "created": "2010-02-04 13:56:00",
    "updated": "2010-02-04 14:01:00",
    "created_by": "0",
    "ordering_count": null,
    "title": "Working with RESTful services in CodeIgniter",
    "slug": "Working-with-RESTful-services-in-CodeIgniter",
    "category_id": "3",
    "attachment": "",
    "intro": "This blog has been pretty quiet for a few weeks now, mainly because I have been working on a beast of an article for NetTuts called \"Working with RESTful services in CodeIgniter\".<br />",
    "body": "<p>This blog has been pretty quiet for a few weeks now, mainly because I  have been working on a beast of an article for NetTuts called \"<a title=\"NetTuts Tutorial explaining how to work with REST in CodeIgniter\" href=\"http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/\" target=\"_blank\">Working  with RESTful services in CodeIgniter</a>\".</p>\n<p>It is a great feeling to finally get an article on a site as large as NetTuts and hopefully it is the first of several. I have a few ideas for more articles, but of course I will keep posting the smaller ones here.</p>\n<p>Even nerds need money for food. ;-)</p>",
    "created_on": "1265291760",
    "updated_on": "1265292060",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "59",
    "created": "2010-02-08 10:48:00",
    "updated": "2011-07-25 05:56:24",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter Base Classes: Keeping it DRY",
    "slug": "CodeIgniter-Base-Classes-Keeping-it-DRY",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tMost applications in CodeIgniter will have various types of pages. Logic for these types of pages is normally copied between all of their different Controllers which means, for example,&nbsp; if the way the admin area protection is handled is changed there will be lots of Controllers to change and test. This logic can instead be shared by some creative extending of the Controller class to create custom Base Controllers like Public_Controller, Admin_Controller, etc.</p>",
    "body": "<p>\n\tMost applications in CodeIgniter will have various types of pages. The public frontend, a backend admin panel, perhaps some sort of moderator or staff panel, etc. Logic for these types of pages is normally copied between all of their different Controllers which means, for example,&nbsp; if the way the admin area protection is handled is changed there will be lots of Controllers to change and test. This logic can instead be shared by some creative extending of the Controller class to create custom Base Controllers like Public_Controller, Admin_Controller, etc.</p>\n<h4>\n\tWTF are you talking about?</h4>\n<p>\n\tThe idea is that most of your controllers share something in common with each other. For example: All admin controllers need to make sure a logged in user is present and that they are an administrator. A public controller may want to load a theme for your application and load default user data, navigation links or anything else frontend related.</p>\n<h4>\n\tWicked! How?</h4>\n<p>\n\tThe first step is to create these Base Controllers.</p>\n<h5>\n\tapplication/core/MY_Controller.php</h5>\n<p>\n\tMY_Controller is a basic core library extension. Whenever you create a class with the MY_ prefix the CodeIgniter Loader class will load this after loading the core library, allowing your code to <a class=\"link-subtle\" href=\"http://codeigniter.com/user_guide/general/creating_libraries.html\" target=\"_blank\">replace/extend the core library</a>. We won&#39;t be replacing anything, but we will be adding to it.</p>\n<pre class=\"code php\">\nclass MY_Controller extends CI_Controller\n{\n function __construct()\n {\n  parent::__construct();\n\n  $user_id = $this-&gt;session-&gt;userdata(&#39;user_id&#39;);\n         $this-&gt;data[&#39;user&#39;] = $this-&gt;user_lib-&gt;get($user_id);\n        }\n}</pre>\n<p>\n\tAll we have done here is create a base class that all of our Controllers and &quot;controller types&quot; will inherit. Anything we put in here and assign to $this will be available to anything that extends this class.</p>\n<h5>\n\tapplication/core/Public_Controller.php</h5>\n<pre class=\"code php\">\nclass Public_Controller extends MY_Controller\n{\n&nbsp;&nbsp; &nbsp;function __construct()\n&nbsp;&nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;parent::__construct();\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if($this-&gt;config-&gt;item(&#39;site_open&#39;) === FALSE)\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;show_error(&#39;Sorry the site is shut for now.&#39;);\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}\n\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// If the user is using a mobile, use a mobile theme\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$this-&gt;load-&gt;library(&#39;user_agent&#39;);\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if( $this-&gt;agent-&gt;is_mobile() )\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;/*\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Use my template library to set a theme for your staff\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp;&nbsp; http://philsturgeon.co.uk/code/codeigniter-template\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$this-&gt;template-&gt;set_theme(&#39;mobile&#39;);\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp;}\n}</pre>\n<p>\n\tPublic_Controller is pretty much the same, but you can see we have some frontend-only related code here. The first statement will check to see if the site is currently open using a theoretical settings library that your application might habe and shows an error if the site is closed. The next statement uses the user agent library to offer a mobile version of the site to anyone on a mobile device.</p>\n<h5>\n\tapplication/core/Admin_Controller.php</h5>\n<pre class=\"code php\">\nclass Admin_Controller extends MY_Controller\n{\n&nbsp;&nbsp; &nbsp;function __construct()\n&nbsp;&nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;parent::__construct();\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if($this-&gt;data[&#39;user&#39;][&#39;group&#39;] !== &#39;admin&#39;)\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;show_error(&#39;Shove off, this is for admins.&#39;);\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp;}\n}</pre>\n<p>\n\tAdmin_Controller is again fairly similar. It uses a generic sort of user level checking to see if the user is an admin and shows an error if not.</p>\n<h5>\n\tConnecting Base Controllers to Controllers</h5>\n<p>\n\tWhile there are a few ways to do this, the easiest is to use PHP 5&#39;s wonderful __autoload() magic function. By placing this at the bottom of your config.php you can make it load early enough to run before the Controller and it will be somewhere that wont get overridden on upgrade.</p>\n<pre class=\"code php\">\n/*\n| -------------------------------------------------------------------\n|  Native Auto-load\n| -------------------------------------------------------------------\n| \n| Nothing to do with cnfig/autoload.php, this allows PHP autoload to work\n| for base controllers and some third-party libraries.\n|\n*/\nfunction __autoload($class)\n{\n if(strpos($class, &#39;CI_&#39;) !== 0)\n {\n  @include_once( APPPATH . &#39;core/&#39;. $class . EXT );\n }\n}</pre>\n<p>\n\tNow the Base Controllers are being made and loaded, you need to inheriting them in your Controllers. So instead of the usual...</p>\n<pre class=\"code php\">\nclass Blog extends CI_Controller\n{\n&nbsp;&nbsp;&nbsp; function __construct()\n&nbsp;&nbsp;&nbsp; {\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;parent::__construct();\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Whatever\n        $data[&#39;stuff&#39;] = $whatever;\n&nbsp;&nbsp;&nbsp; }\n}\n</pre>\n<p>\n\tuse...</p>\n<pre class=\"code php\">\nclass Blog extends Public_Controller\n{\n&nbsp;&nbsp;&nbsp; function __construct()\n&nbsp;&nbsp;&nbsp; {\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;parent::__construct();\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Whatever\n        $this-&gt;data[&#39;stuff&#39;] = $whatever;\n&nbsp;&nbsp;&nbsp; }\n}</pre>\n<p>\n\tAnd there you have it! In your Controller you&#39;ll have all your data set in MY_Controller or other Base Controllers available in $this-&gt;data, so pass that to your views and it will be available. You can also use $this-&gt;load-&gt;vars(&#39;foo&#39;, $bar) in your Base Controllers to set values that are only available in your views.</p>\n<h4>\n\tSummary</h4>\n<p>\n\tBase Controllers are a nice simple way to give you global data, logic and shared code which can be specific to a certain part of your site. They can do all sorts of crazy stuff which I will leave for you to think about.</p>\n<p>\n\tPlease post your most inventive uses in the comments section.</p>",
    "created_on": "1265626080",
    "updated_on": "1311573384",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "91",
    "created": "2011-02-08 22:30:00",
    "updated": "2011-02-09 02:15:44",
    "created_by": "0",
    "ordering_count": null,
    "title": "Geocoding API's Compared",
    "slug": "geocoding-apis-compared",
    "category_id": "0",
    "attachment": "",
    "intro": "<p>\n In this article I explain the pro&#39;s and con&#39;s of working with three of the most popular free geocoding services around: Google Map&#39;s API, Yahoo PlaceFinder and SimpleGeo. This review goes beyond the &quot;I want this address on a map marker!&quot; junk most people do and goes on to explain some of the issues faced when using these services in slightly &quot;out of the ordinary&quot; conditions.</p>",
    "body": "<p>\n Over the last few weeks I have been doing plenty of work with geolocation and reverse geolocation directly in JavaScript, PHP and Ruby using mostly the Google Map&#39;s API. For the majority of map work the Google Map API is fine, but once you go past basic plotting of items on the map, comparing distance, etc and start trying to reverse geocode, everything gets a lot more complicated.</p>\n<p>\n There are several options around but most geocoding or reverse geocoding services are a crusty mess with useless data or no/lacking API&#39;s. The best services I could find were Google Maps, <a href=\"http://developer.yahoo.com/geo/placefinder/\">Yahoo PlaceFinder</a> and the relatively new <a href=\"http://simplegeo.com/\" target=\"_blank\">SimpleGeo</a>.</p>\n<h3>\n Geocoding</h3>\n<p>\n One of my recent projects involved writing a custom data management module for a multi-site CMS which could automatically Geocode any addresses when new data is inserted or updated. This would be easy if the system was a single-domain site but unlike the Google&nbsp; Maps JavaScript v3 API, the PHP API requires an API Key which is registered to a specific URL. This may not be an issue for many of you so we can say that basic geocoding with Google works perfectly, but for me this is a massive fail.</p>\n<p>\n Yahoo PlaceFinder supports an Application ID which is registered to an Application on the Yahoo Developer Network and therefore does not care about the URL. The API looked perfect and really simple to use, but a <a href=\"http://where.yahooapis.com/geocode?q=1 Abbey Apartments, Keynsham, Bristol, BS31 2JA&appid=[yourappidhere]\">quick test</a> proved to be inaccurate, as were the majority of the tests I ran after that. As another example, I enter my family house &quot;46&quot; and it returns the details for &quot;28&quot; down the road and the co-ordiantes show the Google Street View of number 5. Not too helpful eh?</p>\n<p>\n This is a common problem in the UK as our main postal service &quot;Royal Mail&quot; is selfish jerk when it comes to allowing people to use it&#39;s postcode data. Google were lucky enough to be able to buy a license but as far as I can tell Yahoo never managed to get one. This means simple requests for a house name and road number often end up several houses out and far from accurate, but for many services &quot;somewhere on the road&quot; may be good enough.</p>\n<p>\n While tweeting my complaints about Google and Yahoo I had several people suggest I use SimpleGeo. I&#39;d used it a little before but was under the impression that it had no actual geocoding service. It does but at the time of writing the &quot;address&quot; parameter in the Context API is only for the USA, so thats no good for the rest of us. SimpleGeo right now is mainly about providing you with data about what is at - or near - a specific set of coordinates.</p>\n<p>\n For this project I ended up using Yahoo PlaceFinder through lack of options and luckily the level of accuracy was just about good enough. Google would have been my choice if their API Key was less restrictive.</p>\n<h3>\n Reverse Geocoding</h3>\n<p>\n Another project I have been working on recently is <a href=\"http://travlrapp.com/\" target=\"_blank\">TravlrApp</a> which uses an awful lot of geocoding and reverse geocoding. If you aren&#39;t familiar with the term &quot;reverse geocoding&quot; then it basically means providing human data from a set of <a class=\"modal\" href=\"/uploads/default/files/Screen_shot_2011-02-08_at_23.52_.29_.png\" target=\"_blank\"><img alt=\"Google Map JS Objects\" class=\"pyro-image\" src=\"/uploads/default/files/Screen_shot_2011-02-08_at_23.52_.29_.png\" style=\"width: 414px; height: 186px; float: right; padding: 10px 10px 0pt;\" /></a>coordinates, so you provide 37.766713, -122.428938 and get 1600 Pennsylvania Ave NW, Washington, DC. Google, Yahoo and SimpleGeo all do this well with varying levels of accuracy but the most important part of reverse geocoding is providing segments of address that your application can understand.</p>\n<p>\n I&#39;ve been using a City database for TravlrApp to populate auto-complete lists but sadly it the data set seems to be missing some cities. What I wanted to do was let users click the map, have Google tell me the City and Country, have my code check the database and if they don&#39;t exist then it should add them to that list. In this day in age I would have thought that would be easy, so I started playing with Google Reverse Geocoding.</p>\n<p>\n Google is very accurate in most countries and is easily the largest data set I have used. Some countries such as Iraq will just tell you that the coordinates are in Iraq, but not many of my TravlrApp customers will be planning holidays there so I am not too fussed. The real problem with using the Google Maps API for reverse geocoding is that the results are returning in a relatively unusable way. For an example of a few of the JS objects returned from the API take a look to the right. This may at first look pretty useful, but the way they return their data is actually about as logical as the average episode of Family Guy... after smoking a whole bowl of meth.</p>\n<p>\n So what is Google doing? Well it will return any number of objects which each have a different level of accuracy. There is no specific number and none of these objects have a specific level, it just gives you as many as it feels like for that specific point on the map. Within each of these objects is an array of &quot;address_compontents&quot; which look more promising (see below).</p>\n<p style=\"text-align: center;\">\n <span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span><span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span><img alt=\"Google Address components\" class=\"pyro-image\" src=\"/uploads/default/files/Screen_shot_2011-02-08_at_23.54_.11_.png\" style=\"float: none; width: 812px; height: 139px;\" /><span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span><span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span></p>\n<p>\n Well that looks pretty useful right? Wrong. Google will give you up to 7 items back with the first being the most accurate and the last being either a postcode, country or sometimes a state. The first could be a house number, street, village or town and there could be any number of entries in-between. This example is the most clean, but sometimes the first line will have the street address mixed in with a postcode and the country name too, and sometimes the city or region will have part of the post code mixed in too. Other parts are often left out or repeated up to 3 times for no obvious reason.</p>\n<p>\n They provide a type property but this is no more useful as everything from a village to a country could be considered &quot;political&quot;. Utterly useless.</p>\n<p>\n <img alt=\"Yahoo XML\" class=\"pyro-image\" src=\"/uploads/default/files/Screen_shot_2011-02-09_at_00.00_.17_.png\" style=\"width: 288px; height: 270px; float: left; padding: 10px 10px 10px 0pt;\" />Yahoo does a much better job of this by providing a rigid chunk of XML that you can use to pick exactly what piece of information is what. It is still not hugely accurate but if you are clicking on a map you most likely do not need to know the exact address.</p>\n<p>\n First it will take a guess at the line 1 - 4 of your address but more usefully it will tell you exactly what the Street, City, County, State, Country and Postcode along with a few country codes and other useful information. If it is not sure about any of this information it will just leave it blank so you know exactly where you stand when working with this API. In the most populated countries this seems to do a brilliant job but I can&#39;t say I have tested it fully. At least in the UK and US it is spot on almost everywhere I query so I may well be using Yahoo PlaceFinder for all my reverse-geocoding needs, even if the geocoding itself sucks.</p>\n<p>\n Finally onto SimpleGeo. I have avoided this in the past mainly because of the Client support. They only officially maintain Objective-C, Android, Java and Python while the .NET, Ruby and PHP ones are left to the community. The PHP client requires a few PECL extensions and I&#39;ve previously found the Ruby client to lack support for their Places data, but that is another issue altogether. To be fair I cannot complain too much. I was talking to one of the guys behind SimpleGeo and he said &quot;it&#39;s open source, fork it!&quot;, which I say to lazy and complacent PyroCMS users on a daily basis. Hell, that&#39;s why I bought Ed Finklers &quot;<a href=\"http://spaz.spreadshirt.com/pull-request-or-stfu-black-A6928817/\" target=\"_blank\">Pull Request or STFU</a>&quot; t-shirt!</p>\n<p>\n Client support aside I am wary of using SimpleGeo for reverse geolocation. When using their <a href=\"http://simplegeo.com/products/context/#demo\">demo</a>, coordinates in the USA seem to give you a plethora of information but hop the pond to the UK, anywhere in Europe or just anywhere not in the States and you&#39;ll be lucky to get much more than &quot;Provincial&quot;, &quot;Timezone&quot; and &quot;Country&quot; returned.</p>\n<h3>\n Summary</h3>\n<p>\n If you are lucky enough to not need to do any multi-domain based work and you do not need Reverse Geocoding then Google will probably do the trick. Google Map API is very accurate, has great data and will not limit you too much as long as you have an API key. That said you can only use Google Geocode data to plot items onto a Google Map. If you do anything else you are violating the terms of use, which is pretty anal if you ask me.</p>\n<p>\n Yahoo provides the easiest access to data as you can geocode both ways with just a file_get_contents&#40;&#41; in PHP and as far as I can tell - let me know before their lawyers do - they do not have the same restrictions on where you can use their data. Their accuracy is not always brilliant for geocoding but when the service is free and easy to work with you can&#39;t really complain too much.</p>\n<p>\n SimpleGeo clearly has massive potential and I am sure it will only get better in time. For now with it&#39;s incomplete data sets, limited official client libraries and use of oAuth for the entire API I can see the average developer having a tough time getting too far with it, but I will keep experimenting with SimpleGeo for TravlrApp as in the USA it seems to work very nicely and has great documentation.</p>\n<p>\n As always my comparison reviews have ended up being &quot;use them all&quot;. They all have their pro&#39;s and con&#39;s and do certain jobs well. It&#39;s just a shame SimpleGeo does not do it all perfectly - yet.</p>",
    "created_on": "1297204200",
    "updated_on": "1297217744",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "88",
    "created": "2010-12-31 00:29:00",
    "updated": "2010-12-31 03:09:39",
    "created_by": "0",
    "ordering_count": null,
    "title": "2010 for Phil Sturgeon: Year in Review",
    "slug": "2010-for-phil-sturgeon-year-in-review",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tAnother year has passed and this has been the best yet. Most years fly by without me having any real record of what I have achieved or where I need to improve to better myself, so this year I decided to set myself a <a href=\"goals/2010\">list of goals</a> to help shape my life. Find out how I did!</p>",
    "body": "<p>\n\tAnother year has passed and this has been the best yet. Most years fly by without me having any real record of what I have achieved or where I need to improve to better myself, so this year I decided to set myself a <a href=\"/goals/2010\">list of goals</a> to help shape my life. My list was split into for sections: Personal, Fitness, Programming and Business so I will follow that theme with this review.</p>\n<h3>\n\tPersonal</h3>\n<p>\n\tThis part was about bettering myself as a person. Gaining new experiences, seeing new things and opening my mind. I have read a great few books, namely <em>Brave New World</em>, <em>Tiger Force</em>, <em>Dune</em> (that was a bloody effort) and a few other less known books such as <em>I Am Not A Serial Killer</em> and <em>The Outsider</em>; both of which make you really question your mental state.</p>\n<p>\n\tI crossed the pond for the first time and visited San Francisco which was an amazing experience. While I was there I went to EECI2010 and while I didn&#39;t get to speak again it was a brilliant time and a bizarre interval amongst two weeks of drinking with hostel buddies. I headed up to Canada and spent some time with Lee Tengum and his family. Everything you have heard about Canadian hospitality is true, but their bacon is worthless.</p>\n<h3>\n\tFitness</h3>\n<p>\n\tTotal letdown. I started off the year training for the Bath Half Marathon which I was very proud to finish in 1:59 after suffering some knee problems 2 miles from the end. God knows what I did, probably not enough warm-up and cool-down while I was training but they are shot. This was only March so my plans to train for the Tough Guy, Grime Challenge or London to Paris Cycle were shot. I still get pain walking now!</p>\n<p>\n\tThe Kayaking has gone very well. I&#39;ve gone from a wobbly regular swimmer to being a confident paddler who is not afraid of a challenge. I&#39;ve learned to roll although I have yet to try it in anger, but I&#39;m sure the opportunity will come up soon. I sadly did not achieve my 3* award this year but not through any fault of my own. I am on a course which starts in two weeks, so that&#39;s not really a fail right?</p>\n<h3>\n\tProgramming</h3>\n<p>\n\tOh dear god the coding, THE CODING. IT HASN&#39;T STOPPED!</p>\n<p>\n\tThis year was about coding new things and breaking out of my stagnant slump of 100% PHP and building CodeIgniter CMS by day and another CodeIgniter CMS by night.</p>\n<p>\n\tI&#39;ve made a few ExpressionEngine Add-ons; the very well accepted <a href=\"http://devot-ee.com/add-ons/rest\" target=\"_blank\">Rest</a> and the basically un-noticed <a href=\"http://codecanyon.net/item/widgets/127932?ref=pjsturgeon\" target=\"_blank\">Widgets</a> which hit a goal and made some cash. This seemed like a market and community I would be interested in getting into as it meant leaving the CMS dev to others while I just make some buckaroos, but with no real understanding of client needs or experience building sites with it I soon realized I was just doing it for the sake of it. On the plus side if a client needs me to build add-ons for EE then I can do it, but I won&#39;t be trying to take on <a href=\"http://pixelandtonic.com/\" target=\"_blank\">Pixel &amp; Tonic</a> or <a href=\"http://leevigraham.com/cms-customisation/expressionengine/\" target=\"_blank\">Leevi Graham</a> any time soon.</p>\n<p>\n\tAs for learning new languages, I left this a little late. I got all over <a href=\"http://rubyonrails.org/\" target=\"_blank\">Ruby on Rails</a> with some videos from Think Vitamin and a lot of pestering <a href=\"http://twitter.com/elliottkember\" target=\"_blank\">Elliott Kember</a> and <a href=\"http://twitter.com/reddavis\" target=\"_blank\">Red Davis</a> for help. I have worked past the initial honey-moon period and wont go around telling everyone to use it all the time for everything as so many other converts do, but I will say that it&#39;s fucking awesome. What started off as a simple learning exercise is blossoming into a full-blown web-app called <a href=\"http://travlrapp.com/\" target=\"_blank\">Travlr</a> which will really come into it&#39;s own soon.</p>\n<p>\n\tI have <strike>stolen</strike> sourced several ideas from Rails for a new framework started by <a href=\"http://dhorrigan.com/\" target=\"_blank\">Dan Horrigan</a> that myself and others are working on called <a href=\"http://fuelphp.com/\" target=\"_blank\">FUEL</a>. It combines the best of Kohana, CodeIgniter, Rails and a few other bits and bobs, combined with a huge amount of our own ideas and community contributions. The BETA will hopefully be 01/01/2011, so it&#39;s nearly ready for world domination.</p>\n<p>\n\tBut where does that leave CodeIgniter? Well I am still loving it &quot;long-time&quot; and now I have commit access to a new community branch: <a href=\"http://philsturgeon.co.uk/news/2010/12/ellislab-react-with-codeigniter-reactor\" target=\"_blank\">CodeIgniter Reactor</a> which will be out soon too. The contributors (or Engineers) are a brilliant group who I have a great deal of respect for. Contributing to this project is a great feeling as finally I can directly contribute to the framework I use every day and help improve it for everyone.</p>\n<p>\n\tSadly my Objective-C goes as far as Hello World! and I haven&#39;t even scratched the surface of Python but there are only so many hours in the day. I have a decent understanding of C and feel confident that I will be on top of iPhone App development in the New Year, with the first app being iTravlr.</p>\n<h3>\n\tBusiness</h3>\n<p>\n\tNow for all this open-source coding and writing, I still need to make some money. I was asked to write a CodeIgniter Cookbook but Packt bailed on me after I spent weeks writing up the outlines. To be honest: I am glad. You work your arse off for those guys and get 20% of not much.</p>\n<p>\n\tOn a more positive note I have managed to get the <a href=\"http://pyrocms.com/store\" target=\"_blank\">PyroCMS Add-on Store</a> up and have teamed up with a brilliant designer Scott Parry of <a href=\"http://www.ikreativ.com/about\" target=\"_blank\">iKreativ</a>. Working together we will be an unstoppable force of web-app creating ninja fiends. In all, business is looking good for 2011.</p>\n<h3>\n\tMost Popular Posts of 2010</h3>\n<ul>\n\t<li>\n\t\t<a href=\"http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/\" target=\"_blank\">Working with RESTful Services in CodeIgniter</a></li>\n\t<li>\n\t\t<a href=\"http://philsturgeon.co.uk/news/2009/07/Create-an-Admin-panel-with-CodeIgniter\" target=\"_blank\">Create an Admin Panel with CodeIgniter</a></li>\n\t<li>\n\t\t<a href=\"http://philsturgeon.co.uk/news/2010/03/codeigniter-2\">CodeIgniter 2: Everything you need to know</a></li>\n\t<li>\n\t\t<a href=\"http://philsturgeon.co.uk/news/2010/02/CodeIgniter-Base-Classes-Keeping-it-DRY\" target=\"_blank\">CodeIgniter Base Classes: Keeping it DRY</a></li>\n\t<li>\n\t\t<a href=\"http://philsturgeon.co.uk/news/2010/09/company-shit-list\">Sturgeons Shittiest Company Award &#39;10</a></li>\n\t<li>\n\t\t<a href=\"news/2010/05/upgrading-to-codeigniter-2.0\" target=\"_blank\">Upgrading to CodeIgniter 2.0</a></li>\n</ul>\n<h3>\n\tGoals For 2011</h3>\n<ul>\n\t<li>\n\t\tMake PyroCMS a Ltd company with profit margins big enough to justify support time.</li>\n\t<li>\n\t\tDouble traffic over the next year. If I start to struggle I can just post photos of <a href=\"http://derekallard.com/\" target=\"_blank\">Derek Allard</a> in a mankini.</li>\n\t<li>\n\t\tKayak in 3 countries (not in the UK).</li>\n\t<li>\n\t\tCreate a paid iPhone app with more than 100 downloads.</li>\n\t<li>\n\t\tSuccessfully set up CICON2011 in UK, Amsterdam and US (and stay sober until afterwards)</li>\n</ul>",
    "created_on": "1293755340",
    "updated_on": "1293764979",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "60",
    "created": "2010-02-23 14:59:00",
    "updated": "2010-02-25 15:25:46",
    "created_by": "0",
    "ordering_count": null,
    "title": "Deploying websites with Git",
    "slug": "Deploying-websites-with-Git",
    "category_id": "13",
    "attachment": "",
    "intro": "Use Git to deploy your web applications without having to faff with FTP syncronisation or manually working out which files need to be uploaded.",
    "body": "<p>Back in 2008 I wrote an article describing how you can <a class=\"link-subtle\" title=\"Deploying sites with Subversion (SVN)\" href=\"/news/2008/10/deploying-sites-with-svn\">use Subversion as a very simple deployment method</a> from your local box, through testing environments to your live servers. Since then I have been using Git to track all client work and personal projects, so I modified this approach to work with Git.</p>\n<p>It sounds a little crazy to some people, but really deploying websites with a version control system makes a lot of sense. When you develop on your local box you can change any number of files throughout a codebase and trying to manually remember what files have been changed can be a pain in the nadgers.</p>\n<p>You either need to use your VCS (<a class=\"link-subtle\" title=\"Apache Subversion\" href=\"http://subversion.apache.org/\" target=\"_blank\">Subversion</a>, <a class=\"link-subtle\" title=\"Git: Fast VErsion Control\" href=\"http://git-scm.com/\" target=\"_blank\">Git</a>, <a class=\"link-subtle\" title=\"Mercurial: Distributed Source Control Management\" href=\"http://mercurial.selenic.com/\" target=\"_blank\">Mercurial</a>, etc) to give you a list of changes files so you can manually go around re-uploading each of them, but this can take a long time on a large application.</p>\n<p>Another option is re-uploading your entire site through FTP which is even more annoying, if not potentially dangerous to live servers as it can destroy file permissions, remove user-uploaded content, confuse cache systems and show programming errors throughout the site as files are deleted and replaced by the FTP client.</p>\n<p>FTP clients tried making this easier for us by adding Syncronize features but they just compare dates so they are as useful as a chocolate teapot if you are trying to do careful deployments.</p>\n<p>We clearly need another option, and thats where VCS deployments come in. In this case, Git.</p>\n<h3>I'm convinced, so how can I do it?</h3>\n<p>The best part is that if you are already working with Git on your local box then this is pretty damn easy to set up.</p>\n<h4>Step 1: SSH into your server</h4>\n<pre class=\"code terminal\">$ ssh user@example.com</pre>\n<h4>Step 2: Install Git</h4>\n<pre class=\"code terminal\">$ sudo apt-get install git</pre>\n<p>Or use yum, aptitude, compile from source, etc.</p>\n<h4>Step 3: Setup your repo's</h4>\n<pre class=\"code terminal\">$ cd  /home/user/public_html<br />$ git init<br />$ git remote add origin git@github.com:philsturgeon/somerepo.git</pre>\n<p>This next command gets a little tricky if you already have your site running on this server. I have always used this method from the first deployment of Git managed sites, but you will probably need to delete any folders that will be managed by Git so they can be replaced. Of course be careful with backups and save any user uploaded content, but once that is done you wont have to worry about losing changes ever again.</p>\n<pre class=\"code terminal\">$ git pull orgin master</pre>\n<h4>Step 4: Deploy new changes</h4>\n<p>Once you have made some changes you will need to send them back to your main repository</p>\n<pre class=\"code terminal\">$ git commit -a -m \"Lazy commit of new stuff\"<br />$ git push origin master<br /></pre>\n<p>That will push everything to your repository, then SSH back into your live/testing server and pull the new changes.</p>\n<pre class=\"code terminal\">$ git pull origin master</pre>\n<p>That will pull the changes from the main repository to the local repo on the live/testing site.</p>\n<h4>Last minute brainwave</h4>\n<p>I always SSH'ed in the pulled as that was how I used to do things when deploying with Subversion, but last night I had a sudden brainwave that cuts that step out completely.</p>\n<p>You can  push directly from your local box to the live website, or the testing server you are running Git on. On your local  box you can simply add testing and live servers as another remote:</p>\n<pre class=\"code terminal\">$ git remote add testing ssh://user@example.com/home/example/public_html<br />$ git remote add live ssh://user@example.com/home/example/public_html<br />$ git push origin master<br />$ git push testing master<br /></pre>\n<p>And then when you have tested these changes had no screwy effects on your testing server:</p>\n<pre class=\"code terminal\">$ git push live master</pre>\n<p>That means any time you make a change, you can commit it, push it back to the main codebase (GitHub, CodeBaseHQ, etc) then push it to the correct server(s). Sorted!</p>\n<p><em><strong>Update: </strong>After posting it came to my attention that directly pushing to a repository like this appears to work from the push end, but it wont actually update the files on the live server. To get this to happen you need to create a post-recieve hook.</em></p>\n<pre class=\"code terminal\">$ ssh user@example.com<br />$ cd /home/example/public_html<br />$ vim .git/hooks/post-receive</pre>\n<p>The only thing in my post-recieve hook was the default example, so I deleted it and added this:</p>\n<blockquote>\n<p>#!/bin/sh<br /> <br /> # Update the working tree after changes have been pushed here<br /> cd ..<br /> env -i git reset --hard</p>\n</blockquote>\n<p>Save that with Escape then :wq and you need to permission the hook so it can be executed:</p>\n<pre class=\"code terminal\">$ chmod +x .git/hooks/post-receive</pre>\n<p>That's the hook completed.</p>\n<h3>Summary</h3>\n<p>The posibilities with Git are insane. These are two very useful ways to deploy your websites and i'm sure there are other methods. If you have an even better way to get your code from local, through testing and then to live with minumum fuss, please let me know!</p>\n<p><em><strong>Note: </strong>This article assumes you have <a title=\"Generating SSH Keys\" href=\"http://help.github.com/key-setup-redirect\">SSH keys set up</a>. You will need too add your local SSH public key to the Git repository server and add your live servers SSH key to the Git repository server for the live server to contact it. If you wish to deploy directly from local to live, then you can add your local SSH key to the live server but most servers by default will just ask for your user password.</em></p>",
    "created_on": "1266937140",
    "updated_on": "1267111546",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "61",
    "created": "2010-03-11 17:42:00",
    "updated": "2010-11-23 13:51:11",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter 2.0: Everything you need to know",
    "slug": "codeigniter-2",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tIt has been 6 months since the last CodeIgniter minor update and 18 months since the last major update. Through all this time we were given no information about the next release of CodeIgniter, but <i>finally</i> 2.0 is on the way.</p>",
    "body": "<p>\n\tIt has been 6 months since the last CodeIgniter minor update and 18 months since the last major update. Through all this time we were given no information about the next release of CodeIgniter, but <em>finally</em> 2.0 is on the way.</p>\n<p>\n\tThe EllisLab team have decided to drop <a class=\"link-subtle\" href=\"http://subversion.apache.org/\" target=\"_blank\">Subversion</a>, use <a class=\"link-subtle\" href=\"http://mercurial.selenic.com/\" target=\"_blank\">Mercurial</a>, track their tickets on <a class=\"link-subtle\" href=\"http://www.assembla.com/\" target=\"_blank\">Assembla</a> and host their code on <a class=\"link-subtle\" href=\"http://bitbucket.org/ellislab/codeigniter/\" target=\"_blank\">BitBucket</a></p>\n<h3>\n\tSo what?</h3>\n<p>\n\tThe change of Version Control System to us (the general public) makes no real difference, but it wil let the team work much quicker.</p>\n<p>\n\tThe change to Mercurial would not be as interesting if it was not for the fact they were hosting the code on BitBucket, which is the Mercurial equivilent of GitHub. This is potentially the best piece of news in this entire article.</p>\n<p>\n\tBy moving to a social-coding platform like this, CodeIgniter can face the same attention from the community that jQuery and CakePHP have recently recieved. jQuery 1.4 massively benefited by being moved to GitHub, as v1.4 was made up almost entirely of community patches and suggestions.</p>\n<p>\n\tEssentially, if you spot a bug then you can fork CodeIgniter and make the change. Then if they like it, it may well get added in. Win!</p>\n<h3>\n\tWhat about the code?</h3>\n<p>\n\tWell, there are a LOT of changes in the Changelog for 2.0 so far. Many of these are small tweaks, but the best?</p>\n<blockquote>\n\t<p>\n\t\t<span style=\"font-size: medium;\">PHP 4 support is deprecated. Features new to 2.0.0 may not be support PHP 4, and all legacy features will no longer support PHP 4 as of 2.1.0.</span></p>\n</blockquote>\n<p>\n\tWell thank fuck for that. It was not a huge suprise as ExpressionEngine 2.0 had dropped support for PHP 4, but the fact it has come down to CodeIgniter is brilliant. It means slowly but surely CodeIgniter can progress forwards with great new features without having to worry about coding it in a long-winded PHP 4 compatible fashion.</p>\n<p>\n\t<em><strong>Update 11/11/2010: </strong>Support for PHP4 is now no longer deprecated, but totally removed. You must now use PHP 5.1.x and change your parent::Controller()&#39;s to parent::__construct().</em></p>\n<h3>\n\tDrivers</h3>\n<p>\n\tDrivers are a really useful feature that Kohana has had implemented for a while, but is rather difficult to explain. I&#39;ll let EllisLab do it for me:</p>\n<blockquote>\n\t<p>\n\t\tDrivers are a special type of Library that has a parent class and any number of potential child classes. Child classes have access to the parent class, but not their siblings. Drivers provide an elegant syntax in your <a href=\"file:///Users/phil/Sites/classes/codeigniter-pre2/user_guide/general/controllers.html\">controllers</a> for libraries that benefit from or require being broken down into discrete classes.</p>\n</blockquote>\n<p>\n\tA great example of this is the new JavaScript library. That is the main &quot;parent&quot; class, then the jQuery &quot;driver&quot; inherits and does more specific code.</p>\n<p>\n\tAnother example could be a Cache class, which then has File, Memcache, APC, etc as drivers.</p>\n<h3>\n\tApplication &quot;Packages&quot;</h3>\n<p>\n\tThis is a feature I have wanted for as long as I have been using CodeIgniter. It basically allows you to set extra directories that contain libraries, models, helpers, etc.</p>\n<p>\n\tExample:</p>\n<blockquote>\n\t<p>\n\t\t/system/application/third_party/foo_bar<br />\n\t\t<br />\n\t\tconfig/<br />\n\t\thelpers/<br />\n\t\tlanguage/<br />\n\t\tlibraries/<br />\n\t\tmodels/</p>\n</blockquote>\n<p>\n\tUsing $this-&gt;load-&gt;add_package_path() you can set any full server path to use any shared location you like. No more faffing with symlinks or infecting system/libraries with your third party code.</p>\n<h3>\n\tCore libraries</h3>\n<p>\n\tCore libraries like Router, Loader, Output, etc are all system/core, but look like they can still be extended/replaced by placing yours in system/application/core.</p>\n<h3>\n\tReserved Controller Names</h3>\n<p>\n\tThe &quot;reserved controller name&quot; list is now tiny (if you are using PHP 5). They can be anything other than:</p>\n<ul>\n\t<li>\n\t\t_ci_initial</li>\n\t<li>\n\t\tDefault</li>\n\t<li>\n\t\tindex</li>\n</ul>\n<p>\n\tThat gives you a LOT more flexibility on what you can call your controllers after the massive list in PHP 4 support.</p>\n<h3>\n\tMore database config</h3>\n<ul>\n\t<li>\n\t\t<strong>swap_pre</strong> - A default table prefix that should be swapped with <var>dbprefix</var>. This is useful for distributed applications where you might run manually written queries, and need the prefix to still be customizable by the end user.</li>\n\t<li>\n\t\t<strong>autoinit</strong> - Whether or not to automatically initialize the database.</li>\n\t<li>\n\t\t<strong>stricton</strong> - TRUE/FALSE (boolean) - Whether to force &quot;Strict Mode&quot; connections, good for ensuring strict SQL while developing an application.</li>\n</ul>\n<p>\n\tThe most exciting of the lot there for me is <strong>stricton</strong>. I have had some real problems with <a class=\"link-subtle\" href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> on MySQL Strict Mode installations as my local environment is not strict. Using this switch you can just turn MySQL Strict Mode on and make sure it lets you know about any possible errors that <em>would occur if you were running using Strict Mode.</em></p>\n<h3>\n\tGoodbye plugins!</h3>\n<p>\n\tPlugins have been removed which should really help with the &quot;Library, Helper or Plugin?&quot; confusion. Now your code can be boiled down much eaiser:</p>\n<p style=\"padding-left: 30px;\">\n\t<strong>Helpers</strong> - One or more functions<br />\n\t<strong>Libraries</strong> - Lots of functions that share properties (and therefore needs to be a class)</p>\n<p>\n\tNow the ambiguous &quot;Plugins&quot; have been replaced this is a much easier choice, as previously a plugin could be a function or a class. This should be the hardest upgrade step, but essentially all you need to do is find &amp; replace &quot;load-&gt;plugin(&quot; with &quot;load-&gt;helper(&quot; and move <em>system/application/plugins/foo_pi.php</em> to <em>system/application/helpers/foo_helper.php</em> - no biggy.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tBy the looks of it, CodeIgniter 2.0 brings along some brilliant new changes, a heap of bug-fixes for us to be content with. Nothing massive, nothing scary and nothing incompatible. With PHP 4 support on the way out we can all dance a little jig and look forward to a much more interesting future in CodeIgniter feature development.</p>\n<p>\n\tFor now, check out the <a href=\"http://bitbucket.org/ellislab/codeigniter/src/tip/user_guide/changelog.html\" target=\"_blank\">Changelog</a> and subscribe to the <a href=\"http://bitbucket.org/ellislab/codeigniter/rss/?token=b1ff7f584323d32165103f65e1bc60d6\" target=\"_blank\">RSS feed</a> or follow the <a href=\"http://bitbucket.org/ellislab/codeigniter/\" target=\"_blank\">BitBucket project</a> to keep up to date with the progress.</p>\n<p>\n\t<strong>Edit:</strong> <a class=\"link-subtle\" href=\"http://www.michaelwales.com/2010/03/codeigniter-2-0-and-mercurial-transition/\" target=\"_blank\">Michael Wales</a> and <a class=\"link-subtle\" href=\"http://www.haughin.com/2010/03/11/codeigniter-2-critical-changes-implications/\" target=\"_blank\">Elliot Haughin</a> have also written their views on the new CodeIgniter 2.0 announcement. Read their articles to get a good base of opinions on the subject.</p>",
    "created_on": "1268329320",
    "updated_on": "1290520271",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "62",
    "created": "2010-03-24 22:35:17",
    "updated": "2010-03-25 16:29:22",
    "created_by": "0",
    "ordering_count": null,
    "title": "Modular Separation for CodeIgniter 2",
    "slug": "modular-separation-codeigniter-2",
    "category_id": "3",
    "attachment": "",
    "intro": "Sadly CodeIgniter 2.0 did not bring any sort of modular/HMVC system to us, but luckly Modular Separation works for this new version with two minor tweaks. The new version has been published to GitHub.<br />",
    "body": "<p>Sadly CodeIgniter 2.0-dev has not brought us any sort of modular/HMVC system, but luckly Modular Separation works for this new \"version\" with two  minor tweaks.</p>\n<p>The fix was  worked out a few hours after the CodeIgniter 2.0 dev code was released but I was  hoping wiredesignz would incorporate and re-post. Sadly the man has other commitments to attend to, so I have released <a class=\"link-subtle\" href=\"http://github.com/philsturgeon/codeigniter-modular-separation\" target=\"_blank\">the patched version</a>.</p>\n<p>I will use this fork to work on some cool new CodeIgniter 2.0 related features such as supporting Packages as well as the existing custom \"module location\" array.</p>\n<p><em><strong>Note:</strong> In no way is this intended as theft of wiredesignz work. He is a brilliant developer who I have a great deal of respect for, so please notice his name is still on every file with only \"@modified Phil Sturgeon\" added in. I have <span style=\"text-decoration: underline;\">patched</span> his work.</em></p>\n<p><em><strong>Update:</strong> There was some confusion in this post with my wording. CodeIgniter 2.0 is not officially released yet, I am talking about the development code. DO NOT use CodeIgniter 2.0 on any live sites just yet, I will post an update when I feel confident enough to run CodeIgniter 2.0 on my live sites.<br /></em></p>",
    "created_on": "1269470117",
    "updated_on": "1269534562",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "63",
    "created": "2010-03-31 16:03:58",
    "updated": "2010-03-31 16:40:19",
    "created_by": "0",
    "ordering_count": null,
    "title": "Why you should try Netbeans 6.8",
    "slug": "why-you-should-try-netbeans-6-8",
    "category_id": "10",
    "attachment": "",
    "intro": "For a long time I have had the opinion that NetBeans sucked. When  somebody asked me what exactly I didn't like about NetBeans I couldn't  remember any reasons, so decided to give it another try. The result of  my test? <i>Why the hell have I not been using longer?!</i>",
    "body": "<p>For a long time I have had the opinion that NetBeans sucked. When somebody asked me what exactly I didn't like about NetBeans I couldn't remember any reasons, so decided to give it another try. The result of my test? <em>Why the hell have't I been using longer?!</em></p>\n<p>To set the scene, I have been using Eclipse in some form for years. <a href=\"http://www.easyeclipse.org/site/distributions/php.html\" target=\"_blank\">EasyEclipsePHP</a>, <a href=\"http://www.eclipse.org/pdt/\" target=\"_blank\">Eclipse PDT</a> and <a href=\"http://www.aptana.com/\" target=\"_blank\">Aptana</a> are some of the easiest pre-built but there have been other manual combinations too. After almost 5 years of using Eclipse on Windows, Linux and Mac it was amazing how many bugs I had just \"got used to\". Slow performance, buggy, some buttons and features not working for several releases in a row - put simply, a pile of junk.</p>\n<p>After firing up NetBeans and opening a few files it did not take me long to remember what I missed about Eclipse. These two key-board shortcuts alone are brilliant.<img class=\"spacer-left\" style=\"float: right;\" src=\"/application/uploads/default/assets/cache/4_454_254_90.png\" alt=\"netbeans keyprofiles\" width=\"435\" height=\"244\" /></p>\n<ul>\n<li>CTRL / CMD + Shift + R: Really powerful workspace-wide \"Go to File\".</li>\n<li>CTRL / CMD + D: Delete line. Really cannot live without this one.</li>\n</ul>\n<p>As it turns out, NetBeans has \"Key Binding\" profiles, one of which is named \"Eclipse\". Wow! So NetBeans can have all the same shortcuts you are used to in Eclipse.</p>\n<p>With that sorted I already felt at home with NetBeans and wanted to explore further. Here are just a few of the things that I have discovered to work really well in the week I have been using NetBeans as my primary IDE.</p>\n<h3>Language Support</h3>\n<p>You can download packages to provide support for various languages. There are plugins for all sorts of languages, the most notable being Python, Ruby, Java and C++. I simply downloaded the base PHP package and added in Python and \"Ruby and Rails\" plugins.</p>\n<h3>Plugins</h3>\n<p>There are a <em>huge </em>number of plugins for NetBeans which add plenty more than just language support. They can be installed through the Tools &gt; Plugins interface or downloaded from third-party sites and loaded manually. There is all sorts of crazy plugins that I don't have time to go through, but they support stuff like Database IDE panels, Copy and Paste history, OpenOffice.org API (whatever that involves!) and plenty more.</p>\n<h3>Subversion, Mercurial and Git</h3>\n<p>Out of the box NetBeans has support for two of the most popular VCS systems in use. And CVS... This allows you to create new projects from repositorys, make commits, view changes and revert based on history. This was especially handy for me as <a href=\"http://bitbucket.org/ellislab/codeigniter/\" target=\"_blank\">CodeIgniter 2.0</a> is now on Mercurial so not having to worry about finding a new client was a great help. I can of course use the command line, but if I don't have to bother that's more potential time at the pub.</p>\n<p>I was initially disappointed that it lacked support for Git but found that the plugin <a href=\"http://nbgit.org/\" target=\"_blank\">nbgit</a> would add support to the same <img style=\"float: right;\" src=\"/application/uploads/default/assets/cache/3_403_229_90.png\" alt=\"netbeans git  push\" width=\"403\" height=\"229\" />standard as the others. This strangely does not offer push support, but that can be added in with a \"Custom action\" on the Team &gt; Git &gt; Custom action &gt; New... tree. Simply place a path to your git binary and pass \"push\" or push \"origin master\" as your arguments. Of course this doesn't replace the power of working with Git through the command line but it can be good for quick cheeky commits.</p>\n<h3>What about the basics?</h3>\n<p>Ok so we know it can support all the crazy \"new trends\" like Rails and Git but how does it handle the baiscs like HTML and CSS?</p>\n<p>Once again the answer is \"Really fucking well\". When editing HTML it will suggest closing tags for you but it wont automatically shove them in unless you hit Enter. NetBeans will also auto-indent your HTML and prvovide validation for unknown tags, incorrect attributes and it can do all of this even if you are working on HTML in a .php file. It will sense what you are writing and react accordingly instead of simply \"this is a PHP file, treat is as such\".</p>\n<p>The support for CSS is just as good, possibly better. When writing properties are autocompleted, documentation for possible values shows up in tool-tips and it will validate incorrect values.</p>\n<p>There is even a GUI for adding properties if you are a massive n00b, but I wouldn't like to use that.</p>\n<h3>But what about \"uber-magic CodeIgniter auto-completez\"?</h3>\n<p>Firstly, im not entirely sure what everyone is talking about when they mention \"CodeIgniter auto-complete\" but apparently, version 7.0 will have it...</p>\n<p>As I see it, auto-complete is useful for things like writing $this and having a list of possible options being shown up, but when you write $this-&gt;load the auto-complete stops. I assume thats where the magic \"CodeIgntier support\" would kick in and list helper/library/model/etc?</p>\n<p>Whatever, the PHP OOP auto-complete in 6.8 is already helpful enough.</p>\n<h3>Summary</h3>\n<p>You won't very often hear me admit I'm wrong, but it does happen now and then. This is one case where I am perfectly happy to admit I am wrong and say that NetBeans is a vastly supiror IDE. It uses more memory than any other I have tried, but at the end of the day everything works perfectly and exactly how you would expect it to. That is enough for me to ignore the memory hogging and upgrade.</p>\n<p><a href=\"http://netbeans.org/downloads/index.html\" target=\"_blank\">Try NetBeans 6.8 today</a>. It's free and you will be very happy, especially if you are currently \"putting up with\" Eclipse or one of its ugly sisters.</p>",
    "created_on": "1270051438",
    "updated_on": "1270053619",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "64",
    "created": "2010-04-12 00:49:50",
    "updated": "2010-04-12 01:01:27",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter Packages != Modules",
    "slug": "codeigniter-packages-modules",
    "category_id": "3",
    "attachment": "",
    "intro": "So many people are asking about the new Packages feature in CodeIgniter 2.0 that I need to put this to bed. Packages are not modules, they are entirely different concepts and should not be confused. Hopefully that is enough convincing for most of you but if you need to know more, read on.<br />",
    "body": "<p>So many people are asking about the new Packages feature in CodeIgniter  2.0 that I need to put this to bed:</p>\n<blockquote>\n<p>Packages are not Modules.</p>\n</blockquote>\n<p>These are two entirely different concepts and should not be confused with each other.</p>\n<h3><strong>Modules</strong></h3>\n<p>By modules I mean any HMVC implementation such as Modular Separation or Matchbox. These essentially allow you to split your application down into folders of self-contained logic, so your news module will contain all your news controllers, helpers and models, kept hidden away from your user system.</p>\n<p>Modules essentially allow you to build your application exactly the same as you normally would, but you put you have a slightly cleaner file system.</p>\n<p>The key&nbsp;differentiating feature is that modules are called by the URL.</p>\n<blockquote>\n<p>http://example.com/module/controller/method</p>\n</blockquote>\n<p>All current modular systems extend the Router to pick up a module name from the URL and then use that to find the controller. They also extend the Loader to give the current module prefference when loading. So in your news controller if you write $this-&gt;load-&gt;model('news_m'); it will first look in the current module, then the main application directory, then - if you are using them - Packages.</p>\n<h3>Packages</h3>\n<p>A wonderful but mis-understood feature added in by the EllisLab team to CodeIgniter 2.0 development branch that will allow you to put your models, libraries, helpers and config into a shared \"repository\". This is VERY helpful, but is nothing more than creating a dynamic list of fallback directories for Loader to look in if something does not exist in /application.</p>\n<p>Packages in no way map to the URL but instead have to be loaded via:</p>\n<pre class=\"code php\">$this-&gt;load-&gt;add_package_path(<var></var>'/usr/local/codeigniter/shared');<br /></pre>\n<p>Doing this would allow several useful things:</p>\n<ul>\n<li>Store models/libaries containing complex business logic in one place between various applications.</li>\n<li>Maintain one set of third-party stuff to stop having to constantly upgrade cURL, REST, Cache, Asset libraries, etc.</li>\n<li>Allow users of an open-source system to drop in third-party libs without actually putting them in /application.</li>\n</ul>\n<p>Things Packages do not do:</p>\n<ul>\n<li>Map to the URL</li>\n<li>Interact with the Router</li>\n<li>Allow cross-loading from one package to another, everything is a fallback</li>\n<li>ALLOW HMVC</li>\n</ul>\n<h3>But surely...?</h3>\n<p>With all that said, Packages are fairly close to allowing modular applications but not out of the box. Theoretically you could create a MY_Router that would tie to the URL and check if a module was being used. If so it would dynamically load the module as a package and Bob's your Uncle, you have a modular system.</p>\n<p>There is plenty of code out there that could make this very easy and If I was a little less knackered or busy I might consider having a go just for the hell of it. When it comes to my applications I very much doubt I would use a system like that as I don't see the point. <a class=\"link-subtle\" href=\"http://codeigniter.com/wiki/Modular_Separation\" target=\"_blank\">Modular Separation</a> is <a href=\"http://github.com/philsturgeon/codeigniter-modular-separation\">patched to work with CodeIgniter 2.0</a> and offers many more features than this theoretical bodged Packages-HMVC such as 404 routing and some very smart routing tweaks for routing withing a module not at a global level like normal routes.php.</p>\n<h3>But I want modules!</h3>\n<p>I don't know if anything has changed in the last few months, but at <a class=\"link-subtle\" href=\"http://eeci2009.com/\" target=\"_blank\">EECI2009</a> <a title=\"Evil Robot Overlord\" href=\"http://derekallard.com/\" target=\"_blank\">Derek Allard</a> assured me that at some point, some form of HMVC would probably make it into the CodeIgniter codebase. Right now EE2 has a custom modular system and they have no need to mess with that. Until then we have Modular Sepration which is a very elegant and lightweight system compared to the older Modular Extensions or Matchbox.</p>\n<h3>Summary</h3>\n<p>We have an awesome new way to store our code in more places than just /application or /system, nothing more. Let's not get over-excited and stick to using existing modular systems if we need them.</p>\n<p><strong>Further reading: </strong>For more information on what Packages can do, take a look at <a href=\"http://jamieonsoftware.com/blog/entry/wrap-me-up-and-put-me-in-a-box\" target=\"_blank\">Jamie Rumbelow's post</a> on the subject. Notice even he gets a little confused between Modules and Packages, but submits to my reasoning in the end. ;-)</p>",
    "created_on": "1271033390",
    "updated_on": "1271034087",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "65",
    "created": "2010-04-28 00:03:20",
    "updated": "2010-04-30 10:37:16",
    "created_by": "0",
    "ordering_count": null,
    "title": "Tiny REST framework in PHP",
    "slug": "tiny-rest-framework",
    "category_id": "2",
    "attachment": "",
    "intro": "Based on Twiny framework and my CodeIgniter REST server I have created a  really simple RESTful framework that lets you use CodeIgniter style  controllers without any of the extra weight of using a whole framework.  It lets you handle GET, POST, PUT, DELETE requests with ease and return  data in XML, JSON, HTML tables, Serialize, PHP syntax and CSV.",
    "body": "<p><a class=\"modal\" href=\"/application/uploads/default/assets/cache/5_462_251_90.png\"><img class=\"spacer-left\" style=\"float: right;\" src=\"/application/uploads/default/assets/cache/5_462_251_90.png\" alt=\"resource index json\" width=\"321\" height=\"174\" /></a>I figured it is about time I start selling some of my work as the number  of libraries and projects I have released open-source means I spent a  silly amount of time answering support requests for free. As a step towards financial gain from coding  I figured I'd give <a href=\"http://codecanyon.net/\">CodeCanyon</a> a try, which so far is going fairly well.</p>\n<p>I have created a  really simple <em>standalone</em> RESTful framework that lets you use CodeIgniter style  controllers without any of the weight of using a whole framework.  It lets you handle GET, POST, PUT, DELETE requests with ease and return  data in XML, JSON, HTML tables, Serialize, PHP syntax and CSV.</p>\n<p>Sound familiar? Well it should! The codebase is based on my CodeIgniter REST_Controller which has been out for a long time now. It was a big part of my <a class=\"link-subtle\" title=\"Slides: Igniting your web-service (EECI2009)\" href=\"{page_url(9)}\">EECI2009 talk</a> and was the basis of my recent NetTuts article \"<a class=\"link-subtle\" href=\"http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/\" target=\"_blank\">Working with RESTful Services in CodeIgniter</a>\".</p>\n<p>Anyway, if you like my CodeIgniter REST_Controller but do not always want to have CodeIgniter on your REST server, give this a try. It is only 3 PHP files: index.php, config.php and REST.php class file then a .htaccess and your controllers. Very lightweight, very easy to use and incredibly useful for flexible RESTful APi's.</p>\n<p>For only $7, what do you have to lose?</p>\n<p><a href=\"http://codecanyon.net/item/tiny-rest-framework/99263\" target=\"_blank\">Buy Tiny REST Framework</a> from <a class=\"link-subtle\" href=\"http://codecanyon.net/\" target=\"_blank\">CodeCanyon</a></p>",
    "created_on": "1272413000",
    "updated_on": "1272623836",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "66",
    "created": "2010-05-05 23:31:00",
    "updated": "2010-11-23 13:54:32",
    "created_by": "0",
    "ordering_count": null,
    "title": "Upgrading to CodeIgniter 2.0",
    "slug": "upgrading-to-codeigniter-2.0",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tThe CodeIgniter 2.0 branch is still coming together and has not yet been released, but it is getting considerably more stable as time goes on. If you want a smooth ride upgrading your application to run on CodeIgniter 2.0 then read this guide.</p>",
    "body": "<p>\n\tAs soon as I saw the tweet from EllisLab that <a href=\"http://bitbucket.org/ellislab/codeigniter/\" target=\"_blank\">CodeIgniter 2.0-dev</a> was available on BitBucket I instantly converted <a class=\"link-subtle\" href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> to run on it. I got it all working in a few hours after LOTS of headbanging, mouse throwing and blaspheming. All the bugs I found along the way have since been fixed in the 2.0 branch by the Ellis developers or myself.</p>\n<p>\n\tWhile this does not mean everything is running perfectly, at the time of writing all the worrying bugs are squashed so it should be safe for us to have a play.</p>\n<h3>\n\tGrab those new files</h3>\n<p>\n\t<a href=\"http://bitbucket.org/ellislab/codeigniter/get/tip.zip\">Download</a> the new files from BitBucket.</p>\n<h3>\n\tWhat goes where</h3>\n<p>\n\tSlight change in the folder structure for some of you, the application/ folder and the system/ folder now sit next to each other.</p>\n<p>\n\tSo move your application folder up one level to sit next to system/ then delete that system/ folder. That has killed off CodeIgniter 1.7.2. Bye!</p>\n<p>\n\tNow you need to copy the new downloaded system/ folder to the empty gap where the old one was.</p>\n<p>\n\tSadly that is not entirely it. You must also copy the following files from the new download to your installation:</p>\n<ul>\n\t<li>\n\t\tindex.php</li>\n\t<li>\n\t\tapplication/config/foreign_chars.php</li>\n\t<li>\n\t\tapplication/config/profiler.php</li>\n</ul>\n<h3>\n\tNoticed that your controllers and models are broked?</h3>\n<p>\n\tCodeIgniter Controllers and Models used to be defined extend like this:</p>\n<pre class=\"code php\">\nclass Blog_model extends Model</pre>\n<p>\n\tNow in CodeIgniter 2.0 you write:</p>\n<pre class=\"code php\">\nclass Blog_model extends CI_Model\n</pre>\n<p>\n\t<em><strong>Update 10/11/2010:</strong> Remember to do this for Controllers too. Instead of Foo extends Controller, you must now write Foo extends CI_Controller and all parent::Controller() calls must be changed to parent::__construct()!</em></p>\n<p>\n\tLet&#39;s not argue about why, what, who, where, when, the fact is you have to do this. It can be achieved with some simple Find &amp; Replace over your folder if your IDE/Text editor will allow it. For most applications (especially ones built primarilry during the 1.7.x era) you are nearly there now. Unless you use plugins or the old Validation class...</p>\n<h3>\n\tOh shit, I use plugins!</h3>\n<p>\n\tWell not any more you don&#39;t. Plugins are dead and gone so you need to convert them to be <a class=\"link-subtle\" href=\"http://codeigniter.com/user_guide/general/helpers.html\" target=\"_blank\">Helpers</a>. Move them to the application/helpers and rename from &quot;whatever_pi.php&quot; to &quot;whatever_helper.php&quot;. Theoretically there is more to what should be a plugin or helper than the name of the file but TBH they will work like this so who gives a damn at this stage?</p>\n<p>\n\tMake sure you have moved any array values in application/config/autoload.php from $autoload[&#39;plugins&#39;] to $autoload[&#39;helpers&#39;] or you will notice stuff break.</p>\n<h3>\n\tValidation is no more</h3>\n<p>\n\tYou all had fair warning, it has been deprecated for several versions and now it is gone completely. You can:</p>\n<blockquote>\n\t<p>\n\t\tA.) Move to using the new <a href=\"http://codeigniter.com/user_guide/libraries/form_validation.html\" target=\"_blank\">Form Validation class</a>.</p>\n\t<p>\n\t\tB.) Grab the old <a href=\"http://bitbucket.org/ellislab/codeigniter/raw/3b6f3beea126/system/libraries/Validation.php\" target=\"_blank\">Validation.php</a> class and put it in your application/libraries/ folder.</p>\n\t<p>\n\t\tC.) Whine like a little girl on the <a href=\"http://codeigniter.com/forums/\" target=\"_blank\">forums</a>.</p>\n</blockquote>\n<h3>\n\tStrange change to $config[&#39;permitted_uri_chars&#39;]</h3>\n<p>\n\tI had to change &quot;a-z 0-9~%.:_-&quot; to &quot;a-z 0-9~%.:_-&quot; in my application/config/config.php. Notice the backslash () before the hyphen (-).</p>\n<h3>\n\tModular Separation / Modular Extensions</h3>\n<p>\n\t<span style=\"text-decoration: line-through;\">Out of the box Modular Separation won&#39;t work with CodeIgniter 2.0. Good thing I picked up the project and released a patch then huh? Grab the latest version in the 2.x branch from the <a href=\"http://codeigniter.com/wiki/Modular_Separation\" target=\"_blank\">Modular Sepearation Wiki</a>.</span></p>\n<p>\n\t<em>Update 12/10/2010: Modular Separation has been merged back into Modular Extensions so they are now the same project. I wrote <a class=\"link-subtle\" href=\"/news/2010/09/what-happened-to-modular-separation\">a post explaining the merge</a> which details the differences and explains how to upgrade.</em></p>\n<h3>\n\tMY_Controller and other extended libs</h3>\n<p>\n\tA new /system/core/ folder has been created for some libraries considered more core than others such as Router, Loader and Controller. If you extend any library that has now moved to /system/core/ you must now place it in /application/core/.</p>\n<h3>\n\tCI_Language has a new name</h3>\n<p>\n\tThe core library CI_Language has been renamed to CI_Lang. For 80% of apps this will mean nothing at all. If you refference the library or extend it then you will of course need to rename this.</p>\n<h3>\n\tDeprecated DB methods removed</h3>\n<p>\n\tAfter being deprecated since 1.6.x we finally see the back of the DB methods orwhere, orlike, groupby, orhaving, orderby and getwhere. They should now be&nbsp;or_where, or_like, group_by, or_having, order_by and get_where which is just a few more find/replace changes to run on your projects.</p>\n<h3>\n\tDisable query strings or expect weirdness</h3>\n<p>\n\tThis didn&#39;t happen in previous CodeIgniter versions but in 2.0 if you enable $config[&#39;enable_query_strings&#39;] it will now generate links like http://example.php/index.php?/controller, or http://example.php/?/controller. You need to set enable_query_strings to false which will disable GET support. You can re-enable that with a MY_Controller or hook that runs:</p>\n<pre class=\"code php\">\nparse_str($_SERVER[&#39;QUERY_STRING&#39;], $_GET);</pre>\n<h3>\n\tSummary</h3>\n<p>\n\tThat should be it! Up and running on CodeIgniter 2.0. Most of you won&#39;t need to have bothered with all the steps but they are worth keeping in mind for the future. If you spot anything I have missed please pester me in one of the usual ways.</p>",
    "created_on": "1273102260",
    "updated_on": "1290520472",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "67",
    "created": "2010-05-11 17:52:00",
    "updated": "2010-05-19 19:32:57",
    "created_by": "0",
    "ordering_count": null,
    "title": "CloudIgniter: Easy hosting for CodeIgniter",
    "slug": "cloudigniter-hosting-for-codeigniter",
    "category_id": "3",
    "attachment": "",
    "intro": "Ever wanted to install PyroCMS or set up a CodeIgniter playground but don't know what the hell you are doing? The wonderful new hosting service CloudIgniter does it all for you. Read on to see what it's all about.",
    "body": "<p>Ever wanted to install PyroCMS or set up a CodeIgniter playground but  don't know what the hell you are doing? The wonderful new hosting  service <a href=\"http://www.getcloudigniter.com/partner/philsturgeon\">CloudIgniter</a> does it all for you. The service is currently in private beta but I have been using it for a while and it seems perfectly stable.</p>\n<p>The basic idea behind the service is to provide users with a CodeIgniter powered service as easily as possible. They provide one-click installs for CodeIgniter 1.7.2 and CodeIgniter 2.0-dev which you can change between on the fly.</p>\n<p>A killer feature of CloudIgniter is their one-click installs of CodeIgniter based applications - think Fantastico on cPanel. The current list of supported applications is small but the team promise more are on their way. Currently you can install:</p>\n<ul>\n<li><a href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> - The modular open-source CodeIgniter CMS</li>\n<li><a href=\"http://www.myclientbase.com/\" target=\"_blank\">MyClientBase</a> - Free and Open Source Invoice  Management</li>\n</ul>\n<ul>\n</ul>\n<p>All of the CodeIgniter specific stuff aside, CloudIgniter is an impressive hosting service in it's own right with the ability to easily Clone/Disable/Edit Domains, standard SSH acess, FTP, daily backups and automaticly set up Google Apps MX records for your domains. Each site will have a database set up and everything is configured for you.</p>\n<p>CloudIgniter really makes the entire process as easy as possible and wether you are a new CodeIgniter user or a professional it will make deploying your sites much easier.</p>\n<p>There are a few hidden gems too, such as the ability to <a class=\"link-subtle\" href=\"http://philsturgeon.co.uk/news/2010/02/Deploying-websites-with-Git\">deploy your site with Git</a> thanks to Git being installed on the server. Another fantastic feature is that it comes with a pre-built .htaccess file meaning you can get CodeIgniter running without index.php in your URL's with minimum fuss. As somebody who is pretty active on the CodeIgniter forums and StackOverflow you would be amazed (or depressed) at how many issues people have with mod_rewrite or using the wrong $config['uri_protocol']. With CloudIgniter you know right from the word \"go\" you will have a compatible, working setup.</p>\n<p><a href=\"http://www.getcloudigniter.com/partner/philsturgeon\" target=\"_blank\">Sign up for the private beta</a> and when a spot becomes available you can have a play. This is a great service that I know I'll be using a lot in the future.</p>",
    "created_on": "1273600320",
    "updated_on": "1274297577",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "68",
    "created": "2010-05-26 15:15:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "Nerdy Adventures in America: EECI2010 US",
    "slug": "eeci2010-us",
    "category_id": "1",
    "attachment": "",
    "intro": "After months of waiting the time is finally here for EECI2010 US: the ExpressionEngine &amp; CodeIgniter Conference of 2010, held in San Fransisco. It's been 5 months since the last EECI over in Leiden, Holland but  it already feels like too long.<br />",
    "body": "<p>After months of waiting the time is finally here for EECI2010 US: The  ExpressionEngine &amp; CodeIgniter Conference of 2010, held in San  Fransisco. It's been 5 months since the last EECI over in Leiden,  Holland but  it already feels like too long.</p>\n<p>Sadly unlike Leiden, Whooz Media - the event organizers - aren't sending me over as a speaker. While I wouldn't mind being flown half way accross the world for my opinions, the down side to there is they only cover your hotel and plane for the duration of the event. Organizing this myself means I can spend a little more time over the pond checking out SF and even slip in a trip to Canada.</p>\n<p>Canada is a place I have always wanted to visit and now I am over that way it's actually pretty cheap. It gives me a chance to hike, kayak and climb surrounded by some of the nicest scenery known to man. I'll also take the chance to see <a href=\"http://twitter.com/thatleeguy\" target=\"_blank\">@ThatLeeGuy</a> who will be putting me up for a few nights, <a href=\"http://twitter.com/shriker\">shriker</a></p>\n<p>Anyway, I am really looking forward to seeing some familiar CodeIgniter faces from EECI2009 and hopefully lots of new faces too. This time I will be making much more of an effort to mingle with the ExpressionEngine crowd (and appologize to a few for last year...) as I plan to be breaking into that community with a few great add-ons over the next few months. The first of these modules will be demoed to anyone interested at EECI2010.</p>\n<p><em>\"Party on, Wayne!\"</em></p>",
    "created_on": "1274886900",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "69",
    "created": "2010-06-15 10:19:00",
    "updated": "2010-06-15 10:47:48",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter CON 2010 coming soon",
    "slug": "codeigniter-con-2010-coming-soon",
    "category_id": "3",
    "attachment": "",
    "intro": "CodeIgniter Con 2010 is the first all-CodeIgniter conference and is being run in the UK. This means anyone who couldn't make it to San Francisco this month for EECI2010 will be able to \"get their nerd on\" with some well known CI developers.",
    "body": "<p>CodeIgniter Con 2010 is the first all-CodeIgniter conference and is being run in the UK. This means anyone who couldn't make it to San Francisco this month for <a class=\"link-subtle\" href=\"http://eeci2010.com/\" target=\"_blank\">EECI2010</a> will be able to \"get their nerd on\" with some well known CI developers. The conference will be great for people new to CI wanting to learn and experienced developers who may want to pick up some new tricks or just meet fellow nerds.</p>\n<div>Unlike many conferences we have worked hard to make sure that ticket prices are affordable for everyone. A slightly cheaper venue has been used but it is still a great location. This means we can offer tickets at &pound;20 for the speaker orientated Day 1, and &pound;10 for the Workshop Day 2.</div>\n<p>Another big appeal of CICON2010 is that EECI2010 has dropped it's \"CI Track\" which means that there will be no more \"CI based web development\", instead focusing only on ExpressionEngine and EE-centric CodeIgniter development.&nbsp;So if you want to learn about CodeIgniter and don't care about making EE add-ons, this is your best bet.</p>\n<p>For a full list of speakers, talk topics and other information pop over to the <a title=\"CodeIgniter Conference UK\" href=\"http://www.cicon2010.com/\" target=\"_blank\">CICON2010 website</a>.</p>",
    "created_on": "1276597140",
    "updated_on": "1276598868",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "70",
    "created": "2010-07-03 17:38:00",
    "updated": "2010-10-05 15:43:59",
    "created_by": "0",
    "ordering_count": null,
    "title": "ExpressionEngine 2.0 can finally have a Rest",
    "slug": "expressinengine2-rest",
    "category_id": "16",
    "attachment": "",
    "intro": "My first ExpressionEngine 2.0 Add-on has been released, with the amazingly imaginative name \"Rest\". You can use it to integrate RESTful API's into your ExpressionEngine 2.0 website. You can list Tweets, search for Digg articles, show off Flickr photographs and interact with any open RESTful API.",
    "body": "<p>My first ExpressionEngine 2.0 Add-on has been released, with the amazingly imaginative name \"Rest\". I originally had the idea for this module at EECI2009 but never quit got around to it. After playing around with a few ideas in the run-up to EECI2010 I had the chance to come up with something that I felt would work nicely. After some encouraging words from some of the EE and CI guys I decided to press on, and&nbsp;voila!</p>\n<div>\n<object style=\"display: block; margin-left: auto; margin-right: auto;\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"600\" height=\"383\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">\n<param name=\"loop\" value=\"false\" />\n<param name=\"quality\" value=\"high\" />\n<param name=\"src\" value=\"http://blip.tv/play/g7lmgerREgA.m4v\" /><embed style=\"display: block; margin-left: auto; margin-right: auto;\" width=\"600\" height=\"383\" src=\"http://blip.tv/play/g7lmgerREgA.m4v\" loop=\"false\" quality=\"high\" type=\"application/x-shockwave-flash\"></embed>\n</object>\n</div>\n<p>For an example of how this all works, you can have a <a title=\"ExpressionEngine 2.0: Rest\" href=\"{page_url(24)}\">look here</a>&nbsp;at the code page or&nbsp;<a href=\"http://devot-ee.com/addons/rest/\" target=\"_blank\">buy this module</a>&nbsp;now from Devot:ee for a very reasonable $30.</p>\n<p>I'm really excited to have finally released a module and initial feedback has been positive. Yet another item I can cross off my list of <a title=\"Goals\" href=\"{page_url(17)}\">goals for 2010</a>.</p>\n<p>Let me know what you think of the module and I'll be happy to take any feedback into consideration. v1.1 is already underway with authentication support and improved support for Delicious (and dodgy HTTPS setups in general).</p>",
    "created_on": "1278178680",
    "updated_on": "1286293439",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "71",
    "created": "2010-07-24 09:35:00",
    "updated": "2010-07-24 13:05:17",
    "created_by": "0",
    "ordering_count": null,
    "title": "BitBucket or GitHub? Use both!",
    "slug": "bitbucket-or-github",
    "category_id": "13",
    "attachment": "",
    "intro": "Over the last few months I have seen several discussions by many developers - especially in the CodeIgniter community - about wether or not to convert their GitHub repo's over to BitBucket. I say: why not use both?",
    "body": "<p>Over the last few months I have seen several discussions by several developers - especially in the CodeIgniter community - about wether or not to convert their <a class=\"link-subtle\" href=\"http://github.com/\" target=\"_blank\">GitHub</a> repo's over to <a class=\"link-subtle\" href=\"http://bitbucket.org/\" target=\"_blank\">BitBucket</a>. I say: why not use both?</p>\n<p>That may initially sound confusing and like a lot of hard work, but using the brilliant <a title=\"Hg (Mercurial) and Git plugin\" href=\"http://hg-git.github.com/\" target=\"_blank\">Hg-Git</a> plugin from the GitHub developers it really has been made easy to do. Essentially the Hg-Git plugin allows Hg to talk to a Git repository like it was a Mercurial repo.</p>\n<p>I have recently done this with pretty much all of my repositories as I was split half and half between the two. Some code on GitHub and some on BitBucket. Now pretty much everything can be found on both profiles, including Modular Separation, Template and Dwoo parser. Even my CodeIgniter fork is on both!</p>\n<p>A picture says a thousand words, a video says a gajillion more:</p>\n<p>\n<object style=\"width: 780px; height: 510px; display: block; margin-left: auto; margin-right: auto;\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"780\" height=\"510\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">\n<param name=\"src\" value=\"http://blip.tv/play/g7lmgfDEbAA.m4v\" />\n<param name=\"allowfullscreen\" value=\"true\" /><embed style=\"width: 780px; height: 510px; display: block; margin-left: auto; margin-right: auto;\" width=\"780\" height=\"510\" src=\"http://blip.tv/play/g7lmgfDEbAA.m4v\" type=\"application/x-shockwave-flash\"></embed>\n</object>\n</p>\n<p style=\"text-align: right;\"><a href=\"http://blip.tv/file/get/Philsturgeon-BitBucketOrGitHubBoth754.mp4\">iPhone version</a></p>\n<p>For those of you who don't have time to watch the whole video, or if you can't stand my accent here are the basic commands:</p>\n<pre class=\"code bash\">$ hg clone git+ssh://git@github.com:philsturgeon/codeigniter-prowl.git\n$ mv codeigniter-prowl.git codeigniter-prowl\n$ cd codeigniter-prowl\n$ vim .hg/hgrc</pre>\n<p>When you are in the config edit mode change default = to github = then add a new line with your BitBucket ssh repo address. Then you can change some code and (without having to use a staging area you) you can simply do:</p>\n<pre class=\"code bash\">$ hg commit -m \"Stuff changed\"\n$ hg push github\n$ hg push bitbucket</pre>\n<p>The one and only niggle I have spotted so far is that you can't delete your Git tags on a remote repo. I don't see that to be a major issue as normally you wouldn't need to delete one, you'd simply re-tag and push over the top. If you do the only option I have found is to quickly git clone your repo and remove it with git push origin :tagname.</p>\n<p>Give this a try and let me know how it goes for you. I find it really helpful, do you?</p>",
    "created_on": "1279964100",
    "updated_on": "1279976717",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "72",
    "created": "2010-08-06 14:16:00",
    "updated": "2010-08-06 14:25:58",
    "created_by": "0",
    "ordering_count": null,
    "title": "The internet finally gets some Mojo",
    "slug": "internet-gets-some-mojo",
    "category_id": "17",
    "attachment": "",
    "intro": "After several months of totally secret development and two months of private beta MojoMotor - an amazing new CMS from EllisLab - is out, and I'm finally allowed to talk about it!",
    "body": "<p>After several months of totally secret development and two months of private beta <a href=\"http://mojomotor.com/\" target=\"_blank\">MojoMotor</a> - an amazing new CMS from <a href=\"http://ellislab.com/\" target=\"_blank\">EllisLab</a> - is out, and I'm finally allowed to talk about it!</p>\n<p><a href=\"http://derekallard.com/\" target=\"_blank\">Derek Allard</a> showed of this awesome new inline CMS at EECI2010 US and as soon as I saw it I was intrigued. There is basically no backend, just inline editing,&nbsp;spawn-able&nbsp;WYSIWYG areas and a MojoBar at the top of the page for everything else.</p>\n<p>You can learn everything you need to from the website so I won't blab on about it too much, but if you like the video and decide to buy it make sure you check out <a href=\"http://mojoaddons.com/\" target=\"_blank\">MojoAddons.com</a>. I'm slightly annoyed after buying Mojo-Addons.com but myself and the owner have come to a partnership arrangement and to be fair he was a lot quicker out of the styles.</p>\n<p>I currently have three add-ons out, one paid and two free.</p>\n<p style=\"padding-left: 30px;\"><strong><a href=\"http://mojoaddons.com/index.php/page/rest\" target=\"_blank\">Rest</a></strong>&nbsp;- MojoAddons</p>\n<p style=\"padding-left: 30px;\"><strong><a href=\"http://github.com/philsturgeon/mojo-inputs\" target=\"_blank\">Inputs</a></strong> - GitHub</p>\n<p style=\"padding-left: 30px;\"><strong><a href=\"http://github.com/philsturgeon/mojo-variables\" target=\"_blank\">Variables</a></strong> - GitHub</p>\n<p>Check it out, it's a great CMS for simple little sites. We've had the <a href=\"http://cicon2010.com/\" target=\"_blank\">CICON2010</a> website running it for a while now and it was smooth even when in beta!</p>",
    "created_on": "1281104160",
    "updated_on": "1281104758",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "73",
    "created": "2010-09-19 17:56:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "What happened to Modular Separation?",
    "slug": "what-happened-to-modular-separation",
    "category_id": "3",
    "attachment": "",
    "intro": "Modular Separation for CodeIgniter is no more. It has kicked the bucket, shuffled off the mortal coil, run down the curtain and joined the bleedin' choir invisibile!! THIS IS AN EX-PARROT!!",
    "body": "<p><a href=\"http://codeigniter.com/wiki/Modular_Separation/\" target=\"_blank\"> Modular Separation</a> for CodeIgniter is no more.&nbsp;It has kicked the&nbsp;bucket, shuffled off the mortal coil, run down the curtain and joined the bleedin' choir invisibile!! THIS IS AN EX-PARROT!!</p>\n<p>Obscure Monty Python&nbsp;references&nbsp;aside, support for Modular Separation has been dropped in place of Modular Extensions. Both projects were developed by <a href=\"http://twitter.com/wiredesignz\" target=\"_blank\">wiredesignz</a>&nbsp;who has recently returned to active development after a period of inactivity.</p>\n<p>I've been supporting Modular Separation for several months in his absence keeping it working with CodeIgniter 2.0, fixing any bugs and helping to get it known, but 99% of the work was done by wiredesignz himself.</p>\n<p>Now he is back to developing he has merged Modular Separation back into Modular Extensions taking the best from both.&nbsp;Modular Extensions adds HMVC aspects to your modules which means you can load controllers from other controllers which Modular Separation did not support. To continue using modules in the same way as in Modular Separation simply do not use or include the MX/Controller or extend from MX_Controller, just use the old Controller in the same way.</p>\n<p>The <a href=\"http://codeigniter.com/wiki/Modular_Extensions_-_HMVC/\" target=\"_blank\">Modular Extensions</a> wiki page should contain everything you need to know about installaiton. It is essentially a case of replacing MY_Router and MY_Loader with the new ME code, and if you want HMVC you need to start using MX_Controller.</p>\n<p>Enjoy.</p>",
    "created_on": "1284918960",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "74",
    "created": "2010-09-23 22:15:00",
    "updated": "2010-11-13 15:59:28",
    "created_by": "0",
    "ordering_count": null,
    "title": "Sturgeons Shittiest Company Award '10",
    "slug": "company-shit-list",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tLet&#39;s face it, none of us like dealing with big companies. Long waiting times, script reading Indian call centers, uncaring supervisors and red tape. In the last two months I have had several experiences beyond ridiculous so I thought I&#39;d share my list of companies that have pissed me off and why.</p>",
    "body": "<p>\n\tLet&#39;s face it, none of us like dealing with big companies. Long waiting times, script reading Indian call centers, uncaring supervisors and red tape. In the last two months I have had several experiences beyond ridiculous so I thought I&#39;d share my list of companies that have pissed me off and why.</p>\n<h3>\n\tBarclays Underwriting Department</h3>\n<p>\n\tI don&#39;t care how awesome your hold music is, 20 minute waits are not acceptable. Especially when I&#39;ve had to call you 7 times in the space of a few days.&nbsp;</p>\n<h3>\n\tApple Finance</h3>\n<p>\n\tApplying for a Macbook Pro with finance really should not be this difficult. Apple managed to mess up my application by giving Barclays Finance my wrong name and address... TWICE! Both were accepted but with the wrong address I couldn&#39;t sign the contract. When they finally got my address correct my credit rating had been lowered so much by the first two applications that my third application was declined!</p>\n<p>\n\tI had to shout quite a bit at Joel Apple Finance and some guy in the Barclays Underwriting Department to get that fixed. MBP incoming, but this has taken a week to do what should have taken a few hours!</p>\n<h3>\n\tVirgin Media</h3>\n<p>\n\tThis company is a fucking joke on so many levels.</p>\n<p>\n\tThis week was a ridiculous problem with me trying to find out what settings I would need to set up my router after a reset. Are they using DHCP? PPPoE? PPPoV? Who knows, so I phoned up. I had 4 people try to explain to me that I needed to set up Wi-Fi to get it working. Bare in mind I am using a Linux server hardwired into my router 5 meters away, and this was working perfectly before<img alt=\"far side MidvaleSchoolForTheGifted\" class=\"padding-left\" height=\"355\" src=\"/application/uploads/default/assets/cache/8_246_355_90.jpg\" style=\"float: right;\" width=\"246\" /> I reset the router to factory default. I gave in and let them talk me through the WiFi setup, then when that magically didnt work they decided that I needed a new router. RETARDED!</p>\n<p>\n\tTheir worst offense was about a year ago. I switched from BT to Virgin and had to wait 8 weeks while they did some construction work to get a cable to my door. Fair enough, I can wait 8 weeks. The problem was the company that handled the construction just pretended to do the work and didn&#39;t actually bother. Virgin had to apply for planning permission: another 8 week wait. Repeat this process 3 or 4 times and I ended up waiting SIX MONTHS for internet. As a web developer, having the internet is slightly more than fucking convenient, good work guys.</p>\n<p>\n\tA very similar problem has left me with the wrong home phone number for 4 months. I&#39;ll have moved out again before they get that bloody number switched over!</p>\n<h3>\n\tThe winner: PayPal</h3>\n<p>\n\tThis company has caused me so much stress recently It wins the Official &quot;Sturgeons Shitiest Company&quot; award.</p>\n<p>\n\tLONG story short, I sold an iPhone 3G on eBay. The money was instantly sent to my PayPal account but got frozen before I could withdraw it. PayPal said buyer might have been using a stolen credit card, but assured me because I had a tracking number I was covered with PayPal Seller Protection, meaning either way I would get my money.</p>\n<p>\n\tAfter a week the money was unfrozen so I withdrew it assuming either it was fraud and I was paid by PayPal, or PayPal confirmed the buyer was not fraudulent.</p>\n<p>\n\tA few weeks later the credit card company issued a chargeback which apparently isn&#39;t covered by Seller Protection. PayPal took the money straight out of my account leaving me with -&pound;200 in there. They sent me running in circles phoning people to resolve it and eventually they just told me they were discussing it with the credit card company and they&#39;d be back to me with a result after 72 days. Still waiting guys!</p>\n<p>\n\tI figured that balance would stay the same until this was resolved but the scheming bastards withdrew the full balance when my $9.99 Dropbox monthly charge went through, putting me over my bank account overdraft limit.</p>\n<p>\n\tThanks to PayPal, selling my iPhone for &pound;200 has currently cost me &pound;350.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tIf you run a company that provides support, employ people that know what the hell they are talking about. If you&#39;re using a brainless drone you might as well just have pre-recorded responses with voice recognition answering complex technical problems. These guys haven&#39;t got a clue! Example, Me: &quot;Does Virgin use DHCP or PPPoE settings?&quot; Them: &quot;Yes&quot;. Great!</p>\n<p>\n\tIf you work for a company that handles loans and finance, pay attention. Spell peoples names right and get their right fucking address on a contract. It REALLY can&#39;t be that hard.</p>\n<p>\n\tIf you work for PayPal, burn the office down and shoot yourself in the face.</p>\n<p>\n\t&lt;/rant&gt;</p>",
    "created_on": "1285280100",
    "updated_on": "1289663968",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "75",
    "created": "2010-09-28 19:04:00",
    "updated": "2010-09-29 20:49:35",
    "created_by": "0",
    "ordering_count": null,
    "title": "Power dump() on your PHP applications",
    "slug": "power-dump-php-applications",
    "category_id": "2",
    "attachment": "",
    "intro": "Application development going a bit slowly? Take a power dump() and get right back on track. This handy little PHP function will output the what, why, when, where of your variables and help you get back on track.",
    "body": "<p>When trying to work out what the hell is going wrong in your PHP application the first thing most of us start doing is madly start var_dump()'ing everything possible to work out where the problem is. var_dump() is fine, but by default it comes out in one line. So then we need to echo &lt;pre&gt; tags. Then we can't always see whats going on, espeically if the background is black and bla bla bla so it goes on.</p>\n<p>One option is to install XDebug which does basically the same thing, but sadly we don't all have access to SSH for our servers. Shared hosting, limited shell, can't install stuff, whatever. I spend a lot of time with CodeIgniter which is all about portability, make your stuff work anyway.</p>\n<p>Using this handy function (which I have set up as a CodeIgntier debug_helper or native PHP debug_functions.php) I can dump any number of variables and always be able to see whats going on.</p>\n<pre class=\"code php\"><br />/**<br />  * Debug Helper<br />  *<br />  * Outputs the given variable(s) with formatting and location<br />  *<br />  * @access        public<br />  * @param        mixed    variables to be output<br />  */<br />function dump()<br />{<br />    list($callee) = debug_backtrace();<br />    $arguments = func_get_args();<br />    $total_arguments = count($arguments);<br /><br />    echo '&lt;fieldset style=\"background: #fefefe !important; border:2px red solid; padding:5px\"&gt;';<br />    echo '&lt;legend style=\"background:lightgrey; padding:5px;\"&gt;'.$callee['file'].' @ line: '.$callee['line'].'&lt;/legend&gt;&lt;pre&gt;';<br />    $i = 0;<br />    foreach ($arguments as $argument)<br />    {<br />        echo '&lt;br/&gt;&lt;strong&gt;Debug #'.(++$i).' of '.$total_arguments.'&lt;/strong&gt;: ';<br />        var_dump($argument);<br />    }<br /><br />    echo \"&lt;/pre&gt;\";<br />    echo \"&lt;/fieldset&gt;\";<br />}<br /></pre>\n<p>Thanks to the fact this shows the line number and file it was called from I also manage to avoid those annoying \"where the hell did I put that debug?!\" situations, which is one of the main causes of swearing in my office.</p>\n<p>Give it a try.</p>",
    "created_on": "1285700640",
    "updated_on": "1285793375",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "76",
    "created": "2010-10-03 18:50:00",
    "updated": "2010-10-05 15:56:57",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeCanyon's ExpressionEngine 2 section launches",
    "slug": "codecanyon-expressionengine-2",
    "category_id": "16",
    "attachment": "",
    "intro": "CodeCanyon have launched their new ExpressionEngine 2 section along with a few of plugins from me. One of these is the long awaited, much anticipated Widgets module!",
    "body": "<p><a href=\"http://codecanyon.com/?ref=pjsturgeon\">CodeCanyon</a> have just released their new <a href=\"http://codecanyon.net/category/plugins/expressionengine?ref=pjsturgeon\">ExpressionEngine 2</a> section with some of my plugins as seed content. I have put <a href=\"http://codecanyon.net/item/widgets/127932?ref=pjsturgeon\">Widgets</a>, <a href=\"http://codecanyon.net/item/mapper/128328?ref=pjsturgeon\">Mapper</a>, <a href=\"http://codecanyon.net/item/text-plugin/128322?ref=pjsturgeon\">Text</a> and <a href=\"http://codecanyon.net/item/html-plugin/128312?ref=pjsturgeon\">HTML</a> plugins on there to start things off but hopefully other developers will start releasing more content on there.</p>\n<p>The Text plugin is just a simple text/string manipulation plugin for censor, word-wrap, etc and the HTML plugin lets you strip, encode and decode chunks of text or tags. The real meat of this new launch is the long awaited, much anticipated Widgets module!&nbsp;It's a great module that could change the way your clients interact with large sections of the design. Here&rsquo;s a <a href=\"http://blip.tv/file/4059118\">video about the Widgets plugin</a> to show you how it works.</p>\n<p>\n<object style=\"width: 780px; height: 510px;\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"780\" height=\"510\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">\n<param name=\"src\" value=\"http://blip.tv/play/g7lmgfj0GgI.m4v\" /><embed style=\"width: 780px; height: 510px;\" width=\"780\" height=\"510\" src=\"http://blip.tv/play/g7lmgfj0GgI.m4v\" type=\"application/x-shockwave-flash\"></embed>\n</object>\n</p>\n<p>For other developers interested in releasing on CodeCanyon, remember that they have recently bumped their base rate from 40% to 50%, which can be worked up to 70% based on sales. Sure it&rsquo;s no Devot:ee 80% but if you sell other content and designs you can get your percentage up fairly quickly while keeping everything in one place. CodeCanyon also get a huge amount of traffic which can help drive your sales.</p>\n<p>One thing I really want to avoid is a Devot:ee vrs CodeCanyon argument, as I still love those guys. Also to avoid pissing anyone off I&rsquo;ll be keeping my Rest module on Devot:ee so nobody has to pay twice. If you do release anything on CodeCanyon you should of course link it on Devot:ee too as they currently have EVERY ExpressionEngine Add-on listed and that is no mean feat!</p>\n<p>Let&rsquo;s not fight over this one, competition is good for everyone.</p>",
    "created_on": "1286131800",
    "updated_on": "1286294217",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "77",
    "created": "2010-10-12 18:10:00",
    "updated": "2010-10-13 09:52:14",
    "created_by": "0",
    "ordering_count": null,
    "title": "Mozilla Drumbeat Interview: Brad Felix",
    "slug": "mozilla-drumbeat-interview-brad-felix",
    "category_id": "18",
    "attachment": "",
    "intro": "With the awesome Mozilla Drumbeat festival less than a month away, I've been talking to one of the featured participants: Brad Felix, Chief Learning Officer of Flat World Knowledge.",
    "body": "<p>Anybody interested in Open Education, Open Software, Open Hardware (basically anything open and web related) will probably know about the Mozilla Drumbeat Festival coming up this November in Barcelona. If not there is one single bullet point on their web-site that summed up how awesome this is going to be:</p>\n<blockquote>\n<p>A chance to play with open source robots, lasers and other nifty digital learning doodads</p>\n</blockquote>\n<p>That'll do it for me, I'm going.</p>\n<p>So with this amazing festival less than a month away, I've been talking to one of the featured participants: Brad Felix, Chief Learning Officer of <a href=\"http://www.flatworldknowledge.com/\" target=\"_blank\">Flat World Knowledge</a>.</p>\n<p>Brad is a New Yorker with 14 years of experience building, managing, and teaching about educational technology. He is credited with co-designing and developing one of the world's first web-based learning management systems as VP of Technology for eCollege, so he has plenty of knowledge on an experience to bring to the festival.</p>\n<h3><img class=\"spacer-left\" style=\"float: right;\" src=\"../../../application/uploads/default/assets/cache/9_330_240_90.jpg\" alt=\"Photo on 2010 06 01 at 11.27 #2\" width=\"330\" height=\"240\" />Q: What will you be doing at the festival?</h3>\n<p><em>A: I will be co-chairing a conference space called \"Open Content  Studio\", in which we plan to basically hack, discuss, explore, enhance,  find, promote, or perform any other action on Open Content that suits  our desire. &nbsp;We're also planning to build stuff, by toying with the idea  of trying to craft some chunks of an Open textbook, likely on the topic  of web development. &nbsp;We don't necessarily expect a full textbook as a  result, but instead insight into the existing toolsets and where they  shine or fall short, as well as the editorial and content authoring  challenges of pulling together something like a textbook. &nbsp;We'll get a  chance to dig into feature sets of various OER tools.</em></p>\n<p><em>Simultaneously,  our space will hopefully serve as a feedback zone, facilitating  discussions with some key people in this space, allowing everyone a  chance to help set some direction of where to apply our efforts in the  future. &nbsp;</em></p>\n<p><em>Finally, we'll ideally begin  designing, in effect, \"OER Catalog 2.0\", to help with the  ever-challenging issue of discoverability of resources for educators.  We'll need lots of help here from conference attendees!</em></p>\n<h3>Q: Is there anyone in particular you are looking forward to meeting<strong></strong>?</h3>\n<p><em>A: I'd say there are probably too many people to list off. &nbsp;But I'm  passionate about education and I'm passionate about technology. &nbsp;I'd  guess that a healthy percentage of the people attending are of the same  frame of thought, but each brings a unique and critical personal  approach and set of experiences to the table. &nbsp;So, for this swath of  people whose work I have read, cited, discussed, respected, or otherwise  encountered virtually, I can finally meet personally and engage,  converse, share thoughts, drinks, and the charm of Barcelona. &nbsp; </em></p>\n<div><em>Finally,&nbsp;I'm  originally a Mechanical Engineer (before stumbling on this thingy  called Netscape 1.0 in 1995), so I have a personal interest in Open  Source Hardware, and am therefore also looking forward to the  Hackerspace playground in particular. &nbsp;It will be great getting my hands  dirty with arduino bits and other fun toys!</em></div>\n<h3>Q: In you're opinion, what is the most exciting thing happening in education and the web today?</h3>\n<p><em>A: One is just tough, so how about two?  I'd say 1) access and 2) efficiency.</em></p>\n<p><em>I try to be pragmatic in life, so generally feel the need to view web as a driver of cost.  Driving down the cost of education for students can have massive impact on access.  It's a big part of why I have spent the better part of 3 years at Flat World Knowledge, whose efforts focus on college textbook affordability.  Flat World's model of Open Content and a \"Free\" business model just makes so much sense here.  Its early, but we're starting to see some results from these new kinds of cost structures, Open Content, and resulting increases in access.</em></p>\n<p><em>Once people gain access, the experience has to be efficient.  For that we need tools and all of our favorite acronyms like IEP's, PLE's, PLN's, etc. which all basically enable the important shift from an educator-centric model to a student-centered one.  I love the idea that educators and students can tailor a learning experience exactly according to their needs.  With respect to Open Content  and Drumbeat, in Barcelona we'll be working with some of these tools, including brand new ones from Flat World on the verge of release that really break new ground in terms of content customization and remix. Instructors will have incredible and dead-simple-to-use control over their course content.</em></p>\n<p>If this has piqued your interest, follow <a href=\"http://twitter.com/brad_felix\" target=\"_blank\">@brad_felix</a>&nbsp;on \"the Twitters\", check out the&nbsp;<a href=\"http://twitter.com/brad_felix\" target=\"_blank\"></a><a href=\"http://www.flatworldknowledge.com/\" target=\"_blank\">Flat World Knowledge</a>&nbsp;website and of course if you have yet to Register, <a href=\"http://www.drumbeat.org/festival/register\" target=\"_blank\">do it now</a>!</p>",
    "created_on": "1286907000",
    "updated_on": "1286963534",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "78",
    "created": "2010-10-18 20:11:00",
    "updated": "2010-10-18 23:45:14",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter 2.0 is stable (enough)",
    "slug": "codeigniter-2.0-is-stable",
    "category_id": "3",
    "attachment": "",
    "intro": "For the last 7 months since CodeIgniter 2.0 was released on BitBucket  the question \"when will it be stable?\" has been all bouncing around all  over the place. The truth is CodeIgniter 2.0 has been stable for months.  Somebody at EllisLab could open the  terminal and write $ hg tag v2.0;  hg push; right now, but what would that actually give us?",
    "body": "<p>For the last 7 months since <a href=\"http://codeigniter.com/\">CodeIgniter</a> 2.0 was <a class=\"link-subtle\" href=\"http://codeigniter.com/news/ellislab_moves_to_mercurial_assembla_bitbucket_codeigniter_2.0_baking/\" target=\"_blank\">released on BitBucket</a> the question \"when will it be stable?\" has been all bouncing around all over the place. The truth is CodeIgniter 2.0 has been stable for months. Somebody at EllisLab could open the  terminal and write $ hg tag v2.0; hg push; right now, but what would that actually give us?</p>\n<p>CodeIgniter 2.0 is a major release, which means this has been a perfect chance for <a href=\"http://ellislab.com/\" target=\"_blank\">EllisLab</a> to make major changes that effect compatibility. One example of a major change is that our Models now need to extend CI_Model instead of Model. That is an acceptable change for a major release, but think of the outcry if that was done after EllisLab had tagged v2.0. They would have to release a v2.0.1 which would not be compatible with v2.0, and that would be plain ridiculous. I've been told we shouldn't have any massive changes coming, but for now EllisLab still have that option. If any big changes do happen you don't need to worry about them breaking anything as you should be watching the RSS feed/changelog before grabbing a newer revision anyway.</p>\n<blockquote>\n<p>\"But there are f**kloads of bugs in the issue tracker!\"</p>\n</blockquote>\n<p>Yeeeaaahhh... no. At the time of writing there are 93 issues in the <a href=\"http://bitbucket.org/ellislab/codeigniter/issues\" target=\"_blank\">Issue Tracker</a> on BitBucket. The vast majority of those are invalid, irrelivant, ridiculous or badly described and non-repeatable. Another thing to remember is that most of these issues (and more) exist in CodeIgniter 1.7.x. I have found several bugs in 1.7.2 that I have fixed and pushed in 2.0. Now that CodeIgniter 1.7.x is frozen, all fixes for any bugs discovered are going into 2.0. That means CodeIgniter 2.0 is actually more stable than 1.7.2.</p>\n<p>Looking at this from another angle you need to bare in mind that EllisLab maintain two commericial products built on top of CodeIgniter 2.0. <a href=\"http://expressionengine.com/\" target=\"_blank\">ExpressionEngine</a> (until the 2.1.1 release tonight) was still pretty buggy and <a href=\"http://mojomotor.com/\" target=\"_blank\">MojoMotor</a> was only released at the end of July. Imagine how annoying it would be for you if one guy at work was going mental changing everything while you were trying to fix bugs with a unstable system? I'd be having serious words with him that's for sure.</p>\n<p>So, EllisLab have been busy working on ExpressionEngine and MojoMotor while only really fixing a few CodeIgniter bug's here and there. I'd say that's fair enough right? After-all those two applications are the main bread and butter of the company. Does this mean that CodeIgniter will end up stagnating? Hell no.</p>\n<p><a class=\"link-subtle\" href=\"http://expressionengine.com/blog/entry/expressionengine_2.1.1_released/\" target=\"_blank\">ExpressionEnigne just hit 2.1.1</a> and I have been assured by EllisLab CTO Derek Jones that within the next week we'll start to see a signification increase in commits to the repository. The less they need to concentrate on fixing bugs in ExpressionEngine the more they can start to work on CodeIgniter and take it forward as a framework that can benefit us as much as them.</p>\n<p>My advice to you, <a href=\"http://bitbucket.org/ellislab/codeigniter/get/tip.zip\">download the latest copy</a> and have a play. If your application worked in v1.7.2 it will work in v2.0 and <a class=\"link-subtle\" href=\"/news/2010/05/upgrading-to-codeigniter-2.0\">the upgrade</a> is pretty simple.</p>",
    "created_on": "1287432660",
    "updated_on": "1287445514",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "79",
    "created": "2010-10-25 16:17:00",
    "updated": "2010-10-25 16:20:08",
    "created_by": "0",
    "ordering_count": null,
    "title": "Template library gets Documentation",
    "slug": "template-library-gets-documentation",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tPeople have always said my Template library for CodeIgniter is powerful but f**king confusing. Well now I have written up some documentation, which anybody who knows me or my work is VERY unusual...</p>",
    "body": "<p>\n\tPeople have always said my Template library for CodeIgniter is powerful but f**king confusing. Well now I have written up some documentation, which anybody who knows me or my work is VERY unusual...</p>\n<p>\n\t<a href=\"http://philsturgeon.co.uk/demos/codeigniter-template/user_guide/\" target=\"_blank\">Documentation</a></p>\n<p>\n\tNow if you&#39;ll excuse me, I have a doctors appointment.</p>",
    "created_on": "1288023420",
    "updated_on": "1288023608",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "80",
    "created": "2010-10-27 15:07:00",
    "updated": "2011-01-31 13:07:09",
    "created_by": "0",
    "ordering_count": null,
    "title": "CodeIgniter: What happens next?",
    "slug": "what-happens-next",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n Times have been hard for the developers of CodeIgniter - EllisLab and they have addressed this in a few ways: A spot on the ExpressionEngine Podcast, a few articles explaining the future of EllisLab and ExpressionEngine and how they plan to take things forward. Sadly, as always us CodeIgniter developers have been left with not much more than a nod and a pat on the head.</p>",
    "body": "<p>\n <span style=\"font-style: italic;\"><strong>Update 31/01/2011:</strong> Things have changed a great deal since this article was written and now CodeIgniter 2.0 is released with Reactor (a community powered branch) being considered the default version of CodeIgniter. I am very happy with CodeIgniter, but this article may suggest otherwise. I&#39;ll leave it up as an explanation of problems at one point in CodeIgniter&#39;s life-time.</span></p>\n<p>\n Times have been hard for the developers of CodeIgniter - EllisLab and they have addressed this in a few ways: A spot on the ExpressionEngine Podcast, a few articles explaining the future of EllisLab and ExpressionEngine and how they plan to take things forward. Sadly, as always us CodeIgniter developers have been left with not much more than a nod and a pat on the head.</p>\n<p>\n This most recent pat came in the form of <a href=\"http://codeigniter.com/news/whats_happening_now/\">What&#39;s Happening Now?</a> which is the CodeIgniter branch of their acknowledgements to the recent article &quot;<a href=\"http://thenerdary.net/articles/entry/a_plea_to_ellislab\">A Plea to EllisLab</a>&quot;. Kenny&#39;s article was extremely well written and got a lot of attention from the ExpressionEngine community about the issues at EllisLab. They responded with &quot;<a href=\"http://thenerdary.net/articles/entry/a_plea_to_ellislab\">I hear You</a>&quot; and went onto the <a href=\"http://5by5.tv/eepodcast/33\">EE Podcast #33 </a>but the response for the CodeIgniter community is much less useful.</p>\n<p>\n I asked EllisLab to post an article to address the CodeIgniter community but the result left me feeling a bit cold.</p>\n<blockquote>\n <p>\n  CodeIgniter has always been born from ExpressionEngine ... to gauge what&rsquo;s happening with CodeIgniter, you can often look to ExpressionEngine.</p>\n</blockquote>\n<p>\n So not much then? New features for ExpressionEngine very rarely directly benefit CodeIgniter any more as the entire CMS is backported and squeezed on top of the framework. It has so many extended and overridden libraries calling EE a CI application is like calling Frankenstein an average bloke.</p>\n<blockquote>\n <p>\n  ...we will be actively working on communicating short and long term plans for the framework to you...</p>\n</blockquote>\n<p>\n This has been said repeatedly since EECI2009 with nothing done about it. Just put up a page with a rough list of Roadmap features. People have no idea what is happening in the future of CodeIgniter and they want to know.</p>\n<blockquote>\n <p>\n  We are still interviewing for the open <a href=\"http://ellislab.com/company/jobs/\" target=\"_blank\">Software Engineer position</a> to expand our team, which will make it easier for us to allocate <em>real</em> resources to CodeIgniter development.</p>\n</blockquote>\n<p>\n There are thousands of users ready to expand the team for free on BitBucket and plenty more who would join if they thought it would achieve anything. It took 3 years for my FTP::download() function to get merged into the core, how could I possibly hope to get something like <a href=\"http://github.com/philsturgeon/codeigniter-migrations\" target=\"_blank\">Migrations</a> in there, even though plenty of people want it and <a href=\"http://twtpoll.com/r/t7vaq0\" target=\"_blank\">many other features</a>?</p>\n<h3>\n So what is happening to the CodeIgniter Community?</h3>\n<p>\n People are getting fed up. For a community that has already been waiting almost 14 months for an update, we don&#39;t have that much to look forward to. Although <a href=\"http://philsturgeon.co.uk/news/2010/10/codeigniter-2.0-is-stable\">CodeIgniter 2 is stable enough</a> to use in production there is not that much in there that is <em>really</em> new and exciting. That might not have been such a problem 5/6 months ago when we thought it would be out soon as everybody expected to be salivating over a 2.1 feature-set by now, but we are in the same position we were in back then with no assurances that it will be any different in another 6 months. Because of this I am noticing quite a serious brain-drain of developers using CodeIgniter which has got much worse over the last few weeks.</p>\n<p>\n Let&#39;s have a look at who has left EllisLab in the last month:</p>\n<ul>\n <li>\n  <a href=\"http://derekallard.com/blog/post/new-challenges/\">Derek Allard</a></li>\n <li>\n  <a href=\"http://dhorrigan.com/blog/article/i-am-no-longer-with-ellislab\">Dan Horrigan</a></li>\n</ul>\n<p>\n Two very skilled developers who had a big impact on CodeIgniter and MojoMotor (another one of Ellis&#39; products). Two people alone might not make much difference but I can think of several other skilled developers who have left CodeIgniter or are considering it. They are currently working on CodeIgniter forks, are building new frameworks themselves or are just giving up and learning Rails. Why? Because there is no excitement left in CodeIgniter anymore.</p>\n<h3>\n What does that mean for the community?</h3>\n<p>\n The appeal of CodeIgniter over other frameworks has always been the community and the documentation. Based on the people who are talking about leaving, the IRC channel is going to be basically empty and the forums will have hardly any useful responses.</p>\n<p>\n If people aren&#39;t careful or new members in the community don&#39;t step forward to support the new users, one of the two main reasons for people to come to CodeIgniter will be gone.</p>\n<h3>\n What is next for me?</h3>\n<p>\n I have a few fun things in the works. I&#39;ve been learning Ruby recently and I&#39;ll be getting into the <a href=\"http://ramaze.net/\" target=\"_blank\">Ramaze</a> framework. This is not a response to my feelings about CI, just something I have wanted to do for a while.</p>\n<p>\n The most exciting thing is a funky little framework called <a href=\"http://fuelphp.com/\" target=\"_blank\">Fuel</a> that <a href=\"http://dhorrigan.com/\" target=\"_blank\">Dan Horrigan</a> and myself have been working on over the last few days. It will essentially be some of the best ideas behind Kohana mixed with some of the logical simplicity of CodeIgniter. HMVC thought-out, migrations in the core and everything autoloaded. It is too soon to announce anything just yet, but it will definitely be worth keeping an eye on.</p>\n<p>\n Something I have to stress is that this doesn&#39;t mean I&#39;ll be leaving CodeIgniter for good. <a href=\"http://codeigniter.com/\" target=\"_blank\">PyroCMS</a> runs CodeIgniter 2.0 and that project is still moving forwards with great pace. I&#39;ll also be doing what I can to get people together for CICON2011 EU, UK and US (website coming soon) but I won&#39;t be doing a whole lot of anything else in CodeIgniter.</p>\n<p>\n I just need something more interesting to develop with; CodeIgniter is too simple and adverse to change to provide anything new and interesting for experienced PHP developers.</p>",
    "created_on": "1288192020",
    "updated_on": "1296479229",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "81",
    "created": "2010-10-31 11:59:00",
    "updated": "2010-10-31 12:53:54",
    "created_by": "0",
    "ordering_count": null,
    "title": "BathCamp: A day of nerdery and beer",
    "slug": "bathcamp-a-day-of-nerdery-and-beer",
    "category_id": "18",
    "attachment": "",
    "intro": "<p>\n\tI have been to several conferences, unconferences and local BathCamp meets, but this years proper BathCamp was a real chuckle. BathCamp is BarCamp event which is basically a bunch of web geeks, some lightning talks, throw in some pizza, a free bar, some Family Fortunes and a lot of tweed and you&#39;ve got the general idea. This years event came at a great timing with recently starting to learn Ruby as I got to speak with a lot of other Ruby geeks while I was there and see Elliot Kember in action smashing a few crazy little applications out at great speed.</p>",
    "body": "<p>\n\tI have been to several conferences, unconferences and local BathCamp meets, but this years proper BathCamp was a real chuckle. BathCamp is BarCamp event which is basically a bunch of web geeks, some lightning talks, throw in some pizza, a free bar, some Family Fortunes and a lot of tweed and you&#39;ve got the general idea. This years event came at a great timing with recently starting to learn Ruby as I got to speak with a lot of other Ruby geeks while I was there and see Elliot Kember in action smashing a few crazy little applications out at great speed.</p>\n<p>\n\tBathCamp generally encourages everyone to give a talk but I&#39;ve had no time to prepare anything recently what with <a href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a>, <a href=\"http://fuelphp.com/\" target=\"_blank\">FuelPHP</a>, <a href=\"http://pancakeapp.com/\" target=\"_blank\">PancakeApp</a>, <a href=\"http://designsvn.com/\">DesignSVN</a> and god knows how many other projects going on. Instead myself, <a href=\"http://alexbilbie.blogs.lincoln.ac.uk/\" target=\"_blank\">Alex Bilbie</a>, <a href=\"http://elliottkember.com/\" target=\"_blank\">Elliott Kember</a>, <a href=\"http://twitter.com/#!/jacksonj04\" target=\"_blank\">Nick jackson</a> and some guy called Dave decided to perform a rendition of Daft Punk&#39;s Harder, Better, Faster, Stronger using RFID bracelets, two readers and a some of Elliott&#39;s &quot;mad-dog&quot; Ruby skills.</p>\n<p style=\"text-align: center;\">\n\t<object height=\"469\" width=\"585\"><param name=\"movie\" value=\"http://www.youtube.com/v/RzOvUd8QWU0?fs=1&amp;hl=en_US\" /><param name=\"allowFullScreen\" value=\"true\" /><param name=\"allowscriptaccess\" value=\"always\" /><embed allowfullscreen=\"true\" allowscriptaccess=\"always\" height=\"469\" src=\"http://www.youtube.com/v/RzOvUd8QWU0?fs=1&amp;hl=en_US\" type=\"application/x-shockwave-flash\" width=\"585\"></embed></object></p>\n<p>\n\tOne of my favourite talks was from a new Bath local: <a href=\"http://twitter.com/jack_franklin\" target=\"_blank\">Jack Fracklin</a>. He gave a talk on jQuery which lead me to learn a new phrase: &quot;slideshow rape&quot;. HA! Some genius (not me as he first thought) made a very subtle change in one of his expamples from &quot;some title&quot; to say &quot;some tits&quot;, which really knocked the otherwise confident little bugger for six.</p>\n<p>\n\tElliott Kember was chased by a flying iPhone controlled robot, so much Pizza was eaten that Bath is still suffering a pizza shortage, sugar-filled vitamin water was consumed in such large quantity that I think most of us are now diabetic and I ended up pissed as a fart as usual.</p>\n<p>\n\tIn all? A bloody good day, all thanks to the bearded &quot;Tweed Wonder&quot; that is <a href=\"http://twitter.com/#!/juliancheal\" target=\"_blank\">Julian Cheal</a>. Good work!</p>",
    "created_on": "1288526340",
    "updated_on": "1288529634",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "82",
    "created": "2010-11-06 19:42:00",
    "updated": "2010-11-08 12:02:24",
    "created_by": "0",
    "ordering_count": null,
    "title": "Drumbeat Festival: 3 days of awesome",
    "slug": "drumbeat-festival-barcelona",
    "category_id": "18",
    "attachment": "",
    "intro": "<p>\n\tFor the last few days I have been in Barcelona at a brilliant event run by Mozilla called Drumbeat Festival with the slogan &quot;Learning, Freedom and the Web&quot;. Unlike the normal Drumbeat events this was a two-day conference/festival and had 400 attendees. This event was focusing on a lot more than just web development which is what interested me, so I threw my name in to help out and went along as a blogger. This article is about my personal experiences of the event, things I have learned, people I have met and what I have taken away from it to use going forwards.</p>",
    "body": "<p>\n\tFor the last few days I have been in Barcelona at a brilliant event run by Mozilla called Drumbeat Festival with the slogan &quot;Learning, Freedom and the Web&quot;. Unlike the normal Drumbeat events this was a two-day conference/festival and had 400 attendees. This event was focusing on a lot more than just web development which is what interested me, so I threw my name in to help out and went along as a blogger. This article is about my personal experiences of the event, things I have learned, people I have met and what I have taken away from it to use going forwards.</p>\n<p>\n\tThe best way to explain Drumbeat is probably in the words of <a href=\"http://www.drumbeat.org/content/mark-surman-drumbeat-3-bullets\" target=\"_blank\">Mark Surman</a>:</p>\n<blockquote>\n\t<ol>\n\t\t<li>\n\t\t\tMozilla exists to <strong>make sure the internet stays open and awesome</strong>.</li>\n\t\t<li>\n\t\t\tWith Drumbeat, we&rsquo;re <strong>moving beyond Firefox </strong>to build more things that make the web better &mdash; <strong>not just software</strong>.</li>\n\t\t<li>\n\t\t\tWe&rsquo;re doing this by reaching out <strong>new kinds of people</strong> &mdash; teachers, filmmakers, lawyers, journalists. These people will play a key role in shaping the future of the web.</li>\n\t</ol>\n</blockquote>\n<h3>\n\tWednesday 3rd November</h3>\n<p>\n\tAfter I had landed, settled and unpacked I went off in search of fellow Volunteer/Blogger <a href=\"http://twitter.com/jukesie\">Matt Jukes</a> for a beer. Within the first two hours of being in Spain I was sat in an Irish Bar, drinking French beer, eating fish &#39;n&#39; chips with a guy who lives two miles from me. Cultural fail, but it was fun. Later we met up with <a href=\"http://www.drumbeat.org/content/mobile-and-disruptive-graham-brown-martin\">Graham Brown-Martin</a> who I ended up hanging out with for quite a lot of the week. Smart bloke and he handles Absinthe like a trooper.</p>\n<p>\n\tThe Wednesday was light day on official Drumbeat content, with a keynote and a &quot;Science Fair&quot; at the amazing Barcelona Museum of Contemporary Art. I&#39;ll be honest, I didn&#39;t mingle as much as I could have done: grabbing a few free beers and chatting up waitresses, but it was an enjoyable night all the same.</p>\n<h3>\n\tThursday 4th November</h3>\n<p>\n\tSecond day, first hangover. I had a very interesting evening drinking with a group of locals - who didn&#39;t speak a word of English. Dodging traffic and 4 million bikes/scooters/coffe shops/bars taking over the pavements, I set off towards the venue for my first assignment which was a session about Peer Learning and the reuse of Content. Knowing very little about any of this I felt rather out of place; discussing the problems with education to people who train Uni lecturers is bizarre at best.</p>\n<h4>\n\tEncourage Content Reuse: Educate your users!</h4>\n<p>\n\tThis session was being led by Jane Park from Peer-to-Peer University. We broke off into teams and to discuss how we could improve Content Re-use on the web, identifying the problems and suggesting ways to get around them. In my group we came up with these issues - in no particular order:</p>\n<ol>\n\t<li>\n\t\t<strong>Language</strong> &ndash; The majority of content is only offered in English</li>\n\t<li>\n\t\t<strong>Jealously</strong> - While people may use content from many places, they still want to protect what is &lsquo;theirs&rsquo; and don&#39;t encourage re-use</li>\n\t<li>\n\t\t<strong>Respecting each other&rsquo;s work</strong> &ndash; Creating a sharing culture</li>\n\t<li>\n\t\t<strong>Confusion</strong> - What does open mean? Free to read? Free to modify? Reusable? Redistributable? Too many options</li>\n\t<li>\n\t\t<strong>Generational Gap</strong> - Lecturers have very different mindsets to sharing content than kids and students these days. Share/blog/tweet <em>everything </em>compared to a very closed approach.</li>\n</ol>\n<p>\n\tWhat needs to happen?</p>\n<ul>\n\t<li>\n\t\tTrain the trainers to live the experience that the youths are having, pass up new knowledge</li>\n\t<li>\n\t\tEncourage people to live by &quot;do, ask for forgiveness later&quot; (ie. social cost vs. social gain)</li>\n\t<li>\n\t\tPolicymakers encourage upcoming culture to exist</li>\n</ul>\n<p>\n\tHow do we make that happen?</p>\n<blockquote>\n\t<p>\n\t\tCreate an amateur space, a digital virtual playground where people can come in without identity and you can build on what each other are doing (forchan?). kids can just do and create their own rules of engagement. remove identity, can allow trainers to be a part of this. you can use this as a model to show policymakers, this is what happens when you take away histories.</p>\n</blockquote>\n<p>\n\tSome brilliant suggestions were made from other groups taking very different approaches, including a Firefox extension/feature that would detect certain HTML Metadata and display a license type of content. If I understood it right, the feature would be similar to how &quot;the padlock&quot; shows if the page is secure or not. Something very useful, tangible and easily doable!</p>\n<h4>\n\tWebcraft Toolshed: Soft Skills</h4>\n<p>\n\tI left my post realizing that my position didn&#39;t need a volunteer and went off to find the code-geeks. I found them (including Chris <a href=\"http://twitter.com/codepo8\" target=\"_blank\"><span class=\"screen-name screen-name-codepo8 pill\">Christian Heilmann</span></a> and <a href=\"http://twitter.com/#!/anna_debenham\" target=\"_blank\">Anna Debenham)</a> all plugged in and Wi-Fied up in the aptly named &quot;Webcraft Toolshed&quot;. We spent the next hour or two discussing &quot;What are the core and specialist skills that web professionals need?&quot;. A post will be coming this one later for the Drumbeat website, but the basics are:</p>\n<blockquote>\n\t<ol>\n\t\t<li>\n\t\t\t<strong>Basic sysadmin skills</strong> - Knowing how your website will be run on the server is very important. If your application will run on Apache or nginx, you&#39;ll need to install locally and be sure that your code runs on the live site. You also need to understand performance issues that could arise from your servers specific setup and learn to circumnavigate these potentially problems with your code.</li>\n\t\t<li>\n\t\t\t<strong>Usability</strong> - Unless you are doing something really wrong, the website will be used by somebody. A web professional needs to identify and research who those users will be and make the site usable accordingly.</li>\n\t\t<li>\n\t\t\t<strong>Planning</strong> - Web Professionals of all sorts need to plan. User Flow Diagrams (UFD&#39;s), wire-frames, Entity Relationship Diagrams, etc all help minimize errors and coding/design time on small and large projects alike.</li>\n\t</ol>\n</blockquote>\n<h4>\n\tCreate P2PU Webcraft Courses</h4>\n<p>\n\tMy third session of the day was brilliant. We moved out of the Webcraft area and wandered around to corner to a bizarre museum full of tall metal spikes and playing cards. We sat on some steps in the corner and discussed what Peer to Peer University is, how it works and how we can get involved. This was interesting to me as I previously had no idea what P2PU was!</p>\n<p>\n\tThe idea behind it is to create groups of motivated people to all learn together. Each course lasts between 6-8 weeks and is done mostly over IRC/e-mail but optionally with meet ups or video chats. Unlike traditional courses these P2PU courses don&#39;t have an expert telling everybody what to do. Instead one person (who doesn&#39;t need to have all the answers) will be responsible for finding material to learn with and keeping people motivated. The entire group helps each other reach the goals set at the start of the course and comes away with knowledge and several contacts that can be used in the future.</p>\n<p>\n\tHow awesome is that? I have been putting off learning Ruby for over a year now so this seems like a perfect way to do it. I can join forces with like minded developers, learn Ruby with help from others who are at the same level and help other people learn it too. <a href=\"http://p2pu.uservoice.com/forums/84091-course-suggestions/suggestions/1202827-ruby-and-rails?ref=title\" target=\"_blank\">Vote for this course</a> to make it happen.</p>\n<p>\n\tThat was the last talk I saw, opting instead to follow the social track and wandered off with some new friends to find food and beer. The evening descended into organized madness with a large group of Mozilla people and we got toasted on the roof of a hotel. It was a beautiful view and I had some great conversations. I then had a few that made no sense and went on for far too long... sorry to whoever I bored with my drunken ramblings...</p>\n<h3>\n\tFriday 5th November</h3>\n<p>\n\tAnother challenging morning. Sessions felt like way too much of a struggle so I bummed around moving bins and carrying stuff as a volunteer instead of trying to write anything. I did catch a session about <a href=\"http://sketchpad.cc/\" target=\"_blank\">Sketchpad</a> which uses a combination of a modified <a href=\"http://etherpad.org/\" target=\"_blank\">Etherpad</a> install and <a href=\"http://processingjs.org/\" target=\"_blank\">Processing.js</a> to make collaborative editing of Java applets run in the web with JavaScript in real-time editing. It all seemed like crazy black magic to me, but awesome all the same!</p>\n<p>\n\tWe then all had a chat about <a href=\"http://pyjs.org/\" target=\"_blank\">Pyjamas</a>, Hacker Spaces, Jelly Spaces and all sorts of other geeky things. Hacker Spaces really got me interested as I&#39;d never heard of them before. So, WTF are they?</p>\n<blockquote>\n\t<p>\n\t\tHackerspaces are community-operated physical places, where people can meet and work on their projects.</p>\n</blockquote>\n<p>\n\tFrom what I coudl gather, its just somewhere (paid for by a membership fee) where geeks can just turn up and work on random projects together. Want to set up an <a href=\"http://philsturgeon.co.uk/news/2010/10/bathcamp-a-day-of-nerdery-and-beer\" target=\"_blank\">RFID tribute band</a>? This would be the place. Sadly there is nothing in Bristol or Bath but there are <a href=\"http://hackerspaces.org/wiki/List_of_Hacker_Spaces\" target=\"_blank\">plenty around</a>.</p>\n<p>\n\t&nbsp;</p>\n<p>\n\tThings ended with a party, some Massively Multiplayer Thumb Wars, drinking, conversations and eventually a plane. In all this was a bloody brilliant week. Props to everyone in the Mozilla Drumbeat gang for pulling it off!</p>",
    "created_on": "1289072520",
    "updated_on": "1289217744",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "89",
    "created": "2011-01-04 17:34:00",
    "updated": "2011-01-10 12:15:27",
    "created_by": "0",
    "ordering_count": null,
    "title": "Introducing FuelPHP",
    "slug": "introducing-fuelphp",
    "category_id": "20",
    "attachment": "",
    "intro": "<p>\n\tFuelPHP has been in development for the last two months but the new PHP 5.3 framework is nearly ready to see the light of day. We&#39;re just about to roll out the v1.0.0-beta1 and so far it is holiding up pretty well. Another PHP framework you say? Read this article and I&#39;ll try to explain why you should be excited about &quot;yet another framework&quot;.</p>",
    "body": "<p>\n\tIt&#39;s been in development for the last two months but the new PHP 5.3 framework <a href=\"http://fuelphp.com/\" target=\"_blank\">FuelPHP</a> is ready to see the light of day and <s>we&#39;re just about to roll out the v1.0.0-beta1</s> we've just rolled out <a href=\"http://fuelphp.com/news/2011/01/fuel-reaches-v1.0.0-beta1\" target=\"_blank\">v1.0.0-beta1</a>.</p>\n<p>\n\t<img src=\"http://fuelphp.com/addons/themes/fuelphp/img/fuel-h1-bg.png\" style=\"float: right; padding: 10px 0pt 10px 10px;\" /></p>\n<p>\n\tNow I know every developer and their dog has their own framework these days and it has become the new &quot;entry script&quot; like phpBB clones used to be, but being built by experienced framework &quot;connoisseurs&quot; FuelPHP is a good way towards breaking this stereotype.</p>\n<h3>\n\tWhy does the world need a new PHP framework?</h3>\n<p>\n\tI&#39;m a CodeIgniter fan and I have been for a long time. It is a brilliant, lightweight, configuration based framework which is fairly extend-able and doesn&#39;t force users to learn much to get going. It has great documentation and a brilliant community. The downside? It was created for PHP 4 and things like $this-&gt;load will always be a core part. CodeIgniter Reactor will help us make CodeIgniter better, but it will always be of a certain pattern. For most that is fine, we&#39;re just making something with sexy new PHP 5.3 syntax.</p>\n<p>\n\tLike CodeIgniter, FuelPHP will be keeping things simple but moving to a better PHP 5 syntax. Sounds like Kohana right? Well... kinda. Kohana got a lot of things right in 2.x but the 3.x re-write was a confusing one. Lots of their syntax and libraries are confusing and although incredibly well written they are poorly documented.. Kohana generally leaves people feeling confused unless they are ready to dive into the source and work it out for themselves. For many that is fine, we are just trying to make things easier.</p>\n<p>\n\tOthers are too simple, too complicated, badly documented, poorly thought out or just slow as hell.</p>\n<h3>\n\tSo it&#39;s a fork?</h3>\n<p>\n\tNope! CodeIgniter and Kohana are the two main frameworks FuelPHP is based around but all of the base code is original with only some small parts sourced from other places. We have taken a few ideas from Rails for parts like code generation but this will not be a huge complicated convention-based framework. The idea is if we can improve on CodeIgniter and Kohana a little then we already have a player in the world of frameworks.</p>\n<h3>\n\tWho else is working on this?</h3>\n<p>\n\tThis is not just me, I&#39;m not even in charge of the project. This project belong to Dan Horrigan who started things rolling, then invited me in soon to be followed by <a href=\"http://twitter.com/#!/jelmer_fuel\">Jelmer Schreuder</a> and <a href=\"http://twitter.com/#!/wanwizard\">Harro &quot;WanWizard&quot; Verton</a>. Unlike other frameworks this is very community driven and we&#39;ve already had contributions in planning, code and documentation from plenty of people. The FuelPHP way will be to always give feedback on pull requests with constructive feedback. Nothing will be ignored.</p>\n<h3>\n\tWhat features should I be excited about?</h3>\n<h4>\n\tCascading File System</h4>\n<p>\n\tWe&#39;ve borrowed the Cascading File System from Kohana and improved it greatly. The use of namespaces help to keep Core classes, App classes and Package classes from conflicting and we have added some path definitions to the auto-load logic to drastically speed up the <img alt=\"Fuel Directory Structure\" class=\"pyro-image\" src=\"/uploads/default/files/Screen_shot_2011-01-04_at_18.14_.24_.png\" style=\"float: left; padding: 10px 10px 10px 0pt;\" width=\"200\" />calling of classes.</p>\n<p>\n\tThe Cascading File System is a hierarchy of similar directory structures that cascade. The heirarchy in used when a file is loaded by Fuel::find_file() and checks core, packages / modules, application. At a very basic level this means you can have default config in the core and your own config in the application but it opens up awesome new options for things like default base controllers.</p>\n<p>\n\tBy default you have a <a href=\"http://fuelphp.com/docs/general/controllers/rest.html\" target=\"_blank\">Controller_Rest</a> and <a href=\"http://fuelphp.com/docs/general/controllers/template.html\">Controller_Template</a> which any controller can extend instead of the usual &quot;Controller&quot; to get extra logic.</p>\n<p>\n\tThe way autoloader works means each _ translates to being a / in the filepath. This means your controllers can do crazy stuff like:</p>\n<p>\n\tController_API_Users extends Controller_API = app/classes/controller/api/users.php</p>\n<p>\n\tController_API extends Controller_Rest = app/classes/controller/api.php</p>\n<p>\n\tController_Rest extends Controller= core/classes/controller/rest.php</p>\n<p>\n\tMadness? It might look it at first, but this is incredibly useful when you understand the use of base controllers and it all works out of the box. No hacking around <a href=\"http://philsturgeon.co.uk/news/2010/02/CodeIgniter-Base-Classes-Keeping-it-DRY\" target=\"_blank\">like in CodeIgniter</a>.</p>\n<h4>\n\tHMVC</h4>\n<p>\n\tThe whole system has been written to work with HMVC so you can make requests to other controllers and module controllers within your own controllers meaning you can do things like:</p>\n<p>\n\t<code>Request::factory(&#39;errors/twitter&#39;)-&gt;execute()</code></p>\n<h4>\n\tPackages</h4>\n<p>\n\tNot like the new packages feature in CodeIgniter, packages are installable module-like directories that store classes and are added to the cascading file system. By default you are provided with two packages, ActiveRecord and Oil. Oil is a slick command line utility that (amongst many other things) can be used to install other packages.</p>\n<blockquote>\n\t<pre>\n\tphp oil install test-package\nDownloading package: http://github.com/philsturgeon/fuel-test-package/zipball/master\nInstalling package &quot;test-package&quot;\n\t/Users/phil/Sites/fuel/fuel/packages/test-package/LICENSE.txt\n\t/Users/phil/Sites/fuel/fuel/packages/test-package/README\n\t/Users/phil/Sites/fuel/fuel/packages/test-package/classes/test.php\n\t/Users/phil/Sites/fuel/fuel/packages/test-package/classes/exception.php</pre>\n</blockquote>\n<p>\n\tMore on this kick-ass command line tool later.</p>\n<h4>\n\tLightweight ActiveRecord</h4>\n<p>\n\tFuelPHP contains a very simple, lightweight and powerful ActiveRecord/ORM implementation based on the old but rather tastey <a href=\"http://lukebaker.org/projects/activerecord-in-php/\" target=\"_blank\">ActiveRecord-in-PHP</a>.</p>\n<pre>\n<code>$slug = Model_Slug::find(&#39;first&#39;); # SQL query to grab first slug\n$slug-&gt;post; # an SQL query occurs behind the scenes to find the slug&rsquo;s post\n\n$p = Model_Post::find(&#39;first&#39;, array(&#39;include&#39; =&gt; &#39;slug&#39;)); # SQL join\n$p-&gt;slug; # no SQL query here because we already got this post&rsquo;s slug in the SQL join in the previous line\n\n$p = Model_Post::find(&#39;first&#39;);\n\n$s = new Model_Slug(array(&#39;slug&#39; =&gt; &#39;super-slug&#39;));\n$p-&gt;slug = $s; # assign a slug to this post\n\n$p-&gt;slug-&gt;slug = &#39;foobar&#39;;\n$p-&gt;save(); # cascading save (post and slug are saved)\n</code></pre>\n<p>\n\tWhy do you have to add Model_ at the start? Because models are in the /classes/model/ folder just the same as controllers and any other classes.</p>\n<h4>\n\tOil command line utiity</h4>\n<p>\n\tOil is the name of the command line utility in Fuel. Unlike some other frameworks you do not, <strong>ever</strong>, have to use this. It is an optional utility that speeds up things like package installation, MVC code generation, runs tasks and various other things.</p>\n<blockquote>\n\t<p>\n\t\tIf you are not interested in using a command line utility with your application, do not run it. Nothing will ever be loaded and it will never slow your application down.</p>\n</blockquote>\n<p>\n\t<a class=\"modal\" href=\"/uploads/default/files/Screen_shot_2011-01-04_at_18.38_.56_.png\"><img alt=\"Fuel Robots\" class=\"pyro-image\" src=\"/uploads/default/files/Screen_shot_2011-01-04_at_18.38_.56_.png\" style=\"width: 225px; height: 154px; float: left; padding: 10px 10px 0pt;\" /></a>So what can it do?</p>\n<p>\n\tRun <a href=\"http://fuelphp.com/docs/general/tasks.html\" target=\"_blank\">tasks</a> which are similar to controllers but command line only. Controllers run on the command line too, but this is a more direct an &quot;native&quot; approach. Tasks are a neat way to create structured cron jobs that you don&#39;t want to be publicly accessable, or if you want to accept some basic input to your application over SSH. Why? Who knows, but you can!</p>\n<p>\n\tOne task included in the core you may well use a lot is Migrate.</p>\n<blockquote>\n\t<p>\n\t\t$ php oil refine migrate --version=5</p>\n</blockquote>\n<p>\n\tGuess what that does? <a href=\"http://fuelphp.com/docs/general/migrations.html\" target=\"_blank\">Migrations</a> rock.</p>\n<p>\n\tYou can create and run unit tests with php oil test testname, test your code interactively via the php oil console and talk to models, and plenty more will come soon.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tWe already have our <a href=\"http://fuelphp.com/docs/\" target=\"_blank\">documentation</a> in place with not much <a href=\"http://typewith.me/4cfbj6hLHL\" target=\"_blank\">left to go</a>. I have a joke website <a href=\"http://amiafucktard.com/kanye_west\" target=\"_blank\">amiafucktard.com</a> up and running to test the Fuel codebase which covers HMVC, Models, ActiveRecord, Caching, Session, Cookies, Forms, Templating and plenty more. If you want to have a look at the code it&#39;s all freely <a href=\"https://github.com/philsturgeon/amiafucktard.com\" target=\"_blank\">available on GitHub</a> and another example site is <a href=\"http://scrapyrd.com/\">ScrapYrd.com</a> by Dan Horrigan, which will also be available on GitHub soon.</p>\n<p>\n\tIt is still early says and you will most likely find bugs. Hell, it&#39;s not BETA yet but on the whole this framework is nearly there and it&#39;s <a href=\"http://dhorrigan.com/blog/article/how-fast-is-fuel\" target=\"_blank\">pretty damn quick</a>.</p>\n<p>\n\tDownload it, give it a try and let me, Dan and the team know what you think! Swing by the IRC channel <a href=\"irc://irc.freenode.net/#fuelphp\">#fuelphp</a> to have a chat and if you find bugs you can put them on GitHub.</p>\n<blockquote>\n\t<p>\n\t\t<em><strong>Note: </strong>Please do not take any of this article as me expressing any concern, issue or negative points about CodeIgniter. I still love the framework and use it every day. I am a man with many mistresses, hell I use Rails and still write in PHP. This is another new option, not a replacement. I&#39;m not stopping working with CodeIgniter and am still contributing to <a href=\"http://codeigniter.com/news/reactor_update/\" target=\"_blank\">CodeIgniter Reactor</a>.</em></p>\n</blockquote>\n<p>\n\t<em>&nbsp; </em></p>",
    "created_on": "1294162440",
    "updated_on": "1294661727",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "84",
    "created": "2010-11-16 20:18:00",
    "updated": "2010-11-17 10:34:08",
    "created_by": "0",
    "ordering_count": null,
    "title": "Using OmniAuth to make Twitter/oAuth API requests",
    "slug": "using-omniauth-to-make-twitteroauth-api-requests",
    "category_id": "19",
    "attachment": "",
    "intro": "<p>\n\tUsing the brilliant user system Devise and a gem called OmniAuth you can make a Rails application that logs in or registers users via Twitter, Facebook, Foursquare, etc with amazing ease. But once the user has authenticated their account, how do you go about actually interacting with the API? This article will answer that for you, with some shiny code examples.</p>",
    "body": "<p>\n\tUsing the brilliant user system gem <a href=\"https://github.com/plataformatec/devise\" target=\"_blank\">Devise</a> and a gem called <a href=\"http://github.com/intridea/omniauth\">OmniAuth</a> you can make a Rails application that logs in or registers users via Twitter, Facebook, Gowalla, etc with amazing ease. But once the user is logged in, how do you go about actually interacting with the API on behalf of the account that has just been authorized?</p>\n<p>\n\tThis article starts where RailsCasts leaves off, so if you are not already up and running with Devise and OmniAuth then you might want to watch:</p>\n<ul>\n\t<li>\n\t\t<a href=\"http://railscasts.com/episodes/209-introducing-devise\">RailsCast #209: Introducing Devise</a></li>\n\t<li>\n\t\t<a href=\"http://railscasts.com/episodes/235-omniauth-part-1\" target=\"_blank\">RailsCast #235: OmniAuth Part 1</a></li>\n\t<li>\n\t\t<a href=\"http://railscasts.com/episodes/236-omniauth-part-2\" target=\"_blank\">RailsCast #236: OmniAuth Part 2</a></li>\n</ul>\n<p>\n\tSo, assuming we are all about at the point that the third video ends on, we are all ready to go. I&#39;ll be using the example of Twitter but really any of the providers using oAuth will use the same approach. Like in the &quot;ye-olden days&quot; when we used the Twitter username and password to authenticate an API request, we now use a Access Token and Token Secret. You can think of these as being basically the same thing as for the purpose of authenticating API requests, to us, they are.</p>\n<p>\n\tTo get the token and secret you need to add some fields to your authentications table:</p>\n<pre>\n<code class=\"bash\">\nrails g migration AddTokenToAuthentications token:string secret:string\nrake db:migrate</code></pre>\n<p>\n\tNow the database is ready to save the credentials we can change the authentication code to populate the fields. Assuming you placed the method in user.rb like <a href=\"http://railscasts.com/episodes/236-omniauth-part-2\" target=\"_blank\">RailsCast #236: OmniAuth Part 2</a> suggested then open user.rb and modify the following line:</p>\n<pre>\n<code class=\"ruby\">authentications.build(:provider =&gt; omniauth[&#39;provider&#39;], :uid =&gt; omniauth[&#39;uid&#39;])</code></pre>\n<p>\n\tand replace it with:</p>\n<pre>\n<code class=\"ruby\">authentications.build(\n    :provider =&gt; omniauth[&#39;provider&#39;],\n    :uid =&gt; omniauth[&#39;uid&#39;],\n    :token =&gt; omniauth[&#39;credentials&#39;][&#39;token&#39;],\n    :secret =&gt; omniauth[&#39;credentials&#39;][&#39;secret&#39;]\n)</code></pre>\n<p>\n\tNow whenever anybody authenticates their account we can save their credentials which are passed back from the internal hidden magic that is OmniAuth.</p>\n<p>\n\tThe next step is to actually make some requests using these saved credentials, which is described almost perfectly in the <a href=\"http://dev.twitter.com/pages/oauth_single_token#ruby\">Twitter Developer Documentation</a>. You&#39;ll want to install the oauth gem (put it in your Gemfile and run bundle install) then you can use the following code to test-dump a list of tweets from the user:</p>\n<pre>\n<code class=\"ruby\">class TwitterController &lt; ApplicationController\n\n    def recent_tweets\n        # Exchange your oauth_token and oauth_token_secret for an AccessToken instance.\n\n        def prepare_access_token(oauth_token, oauth_token_secret)\n            consumer = OAuth::Consumer.new(&quot;APIKey&quot;, &quot;APISecret&quot;\n                { :site =&gt; &quot;http://api.twitter.com&quot;\n                })\n            # now create the access token object from passed values\n            token_hash = { :oauth_token =&gt; oauth_token,\n                                         :oauth_token_secret =&gt; oauth_token_secret\n                                     }\n            access_token = OAuth::AccessToken.from_hash(consumer, token_hash )\n            return access_token\n        end\n\n        auth = current_user.authentications.find(:first, :conditions =&gt; { :provider =&gt; &#39;twitter&#39; })\n\n        # Exchange our oauth_token and oauth_token secret for the AccessToken instance.\n        access_token = prepare_access_token(auth[&#39;token&#39;], auth[&#39;secret&#39;])\n\n        # use the access token as an agent to get the home timeline\n        response = access_token.request(:get, &quot;http://api.twitter.com/1/statuses/user_timeline.json&quot;)\n\n        render :json =&gt; response.body\n    end\nend</code></pre>\n<p>\n\tBy pulling the content from current_user.authentications (im finding the first as in my application they should only have one) I can grab the credentials and have full permissions to get their recent tweets, post new ones, see friends tweets, etc.</p>\n<p>\n\tNow I can tweak this, get stuff saved, faff with the JSON and take what I need. Working with Facebook or any other oAuth provider will work in an almost identical way, or you can install specific gems to interact with their API&#39;s if the direct approach is not as smooth as you&#39;d like.</p>",
    "created_on": "1289938680",
    "updated_on": "1289990048",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "85",
    "created": "2010-11-26 17:16:00",
    "updated": "2010-11-26 17:20:11",
    "created_by": "0",
    "ordering_count": null,
    "title": "PyroCMS reaches final: v1.0",
    "slug": "pyrocms-reaches-final-v1.0",
    "category_id": "11",
    "attachment": "",
    "intro": "<p>\n\tToday we are incredibly pleased to annouce the biggest update to PyroCMS in it&#39;s 14 months of it&#39;s open-source history. v1.0 may seem like a small jump in numbers from v0.9.9.7 but really this is more like a 2.0! Everything has been logically restructured, Dwoo has been replaced with an amazingly powerful Tags and Plugin syntax and its all running much quicker, while looking considerably sexier.</p>",
    "body": "<p>\n\t<em><em>This article is a re-post from <a href=\"http://pyrocms.com/\" target=\"_blank\">pyrocms.com</a>, so when I say &quot;we&quot; I mean the PyroCMS development team and all of our <a href=\"https://github.com/pyrocms/pyrocms/contributors\">45ish amazing constributors</a>.</em></em></p>\n<p>\n\tToday we are incredibly pleased to annouce the biggest update to PyroCMS in it&#39;s 14 months of it&#39;s open-source history. v1.0 may seem like a small jump in numbers from v0.9.9.7 but really this is more like a 2.0! Everything has been logically restructured, Dwoo has been replaced with an amazingly powerful <a href=\"http://pyrocms.com/documentation/#designers/tags.html\">Tags and Plugin</a> syntax and its all running much quicker, while looking considerably sexier.</p>\n<p>\n\tHow much sexier? This much!</p>\n<p>\n\t<a href=\"http://files.droplr.com/files/20662440/SD1P.Screen shot 2010-10-20 at 08:41:28.png\" target=\"_blank\"><img alt=\"PyroCMS v1.0 Dashboard with Google Stats\" src=\"http://files.droplr.com/files/20662440/SD1P.Screen shot 2010-10-20 at 08:41:28.png\" width=\"100%\" /></a></p>\n<p>\n\tThe upgrade process from v0.9.9.7 is a little tricky but we made it as easy as we possible could with the upgrade script and a full <a href=\"http://pyrocms.com/documentation/#general/upgrades/0997_1.html\" target=\"_blank\">Upgrade Guide</a> in the <a href=\"http://pyrocms.com/documentation/\" target=\"_blank\">new Documentation</a>.</p>\n<p>\n\tMow for those of you who like Change-logs, here it is:</p>\n<ul>\n\t<li>\n\t\tNew control panel design</li>\n\t<li>\n\t\tAdded File module. This will replace the photos module and allow for Images, Video, Audio and Documents.</li>\n\t<li>\n\t\tRemoved Dwoo and added Tags and Plugins.</li>\n\t<li>\n\t\tRewrite of Settings module to allow module developers easier access and CRUD of site settings.</li>\n\t<li>\n\t\tBig structure rewrite and added an addons folder for modules, helpers, libraries, widgets, etc.</li>\n\t<li>\n\t\tAdded &quot;Save&quot; and &quot;Save &amp; Exit&quot; buttons to Page manager so you can go back to the same page on save.</li>\n\t<li>\n\t\tWidgets can now go in modules and any packages, not just /addons.</li>\n\t<li>\n\t\tLogged in users will no longer see the stupid website box on comments, it will use their profile value.</li>\n\t<li>\n\t\tTheme views and layouts must now use .html not .php.</li>\n\t<li>\n\t\tIf comment moderation is disabled you will only see a list of comments, no &quot;unapproved&quot; stuff.</li>\n\t<li>\n\t\tMerged old categories module into news module.</li>\n\t<li>\n\t\tMoved &quot;Permission Roles&quot; to a new Groups module.</li>\n\t<li>\n\t\tRemoved the crazy complicated and rather broken Permissions module. Replaced it with a VERY simple module.</li>\n\t<li>\n\t\tAdded class prefix to all Widgets_ to stop namespace collisions.</li>\n\t<li>\n\t\tReplaced TinyMCE with CKEditor 3.4.</li>\n\t<li>\n\t\tRemoved dependency on $this-&gt;data so controllers in modules can use whatever $data variable they like.</li>\n\t<li>\n\t\tRenamed $this-&gt;module_data to $this-&gt;module_details to match details.php name.</li>\n\t<li>\n\t\tAdded a hook to check if installed, automatically redirecting to the installer if not. This can be disabled in config/hooks.php.</li>\n\t<li>\n\t\t$this-&gt;data is no longer required. Thats right, use whatever variables you like in your controllers.</li>\n\t<li>\n\t\tTenplate library upgraded so mobile themes work!</li>\n</ul>\n<p>\n\tWhen put in this list, the rewrite doesn&#39;t seem as big but trust me, this has been absolutely massive! We&#39;ve re-written pretty much every line of code and taken care of a ridiculous number of issues. We have more languages, better designs, better usability and everything is a whole bunch more slick.</p>\n<p>\n\tPyroCMS now supports the following languages:</p>\n<ul>\n\t<li>\n\t\tArabic</li>\n\t<li>\n\t\tBrazilian</li>\n\t<li>\n\t\tChinese (Traditional)</li>\n\t<li>\n\t\tDutch</li>\n\t<li>\n\t\tEnglish</li>\n\t<li>\n\t\tFrench</li>\n\t<li>\n\t\tGerman</li>\n\t<li>\n\t\tItalian</li>\n\t<li>\n\t\tPolish</li>\n\t<li>\n\t\tRussian</li>\n\t<li>\n\t\tSpanish</li>\n</ul>\n<p>\n\tWhat&#39;s next? Well we still have lots to do. While most of PyroCMS was rewritten in this upgrade we still have lots of work to do on some of the core modules. Pages, News and Navigation need a lot of love and one of the main features we are asked for over and over again is &quot;multi-level navigation&quot;. Yes, that is a priority in v1.1, just be patient. This upgrade was a massive structural re-work, now we can go and make our modules brilliant.</p>\n<p>\n\tWe&#39;ll also start to populate our <a href=\"http://pyrocms.com/store\">Add-on Store</a> over the next few days to contain some brilliant new modules for your PyroCMS websites.</p>\n<p>\n\t<strong>Download:</strong> <a href=\"https://github.com/pyrocms/pyrocms/archives/v1.0\" target=\"_blank\">v1.0</a></p>\n<p>\n\tOther links of interest:</p>\n<ul>\n\t<li>\n\t\t<a href=\"http://pyrocms.com/documentation/\">Documentation</a></li>\n\t<li>\n\t\t<a href=\"http://pyrocms.com/forums\">Forums</a> (new and improved)</li>\n\t<li>\n\t\t<a href=\"http://pyrocms.com/documentation/#general/upgrades/0997_1.html\">Upgrade Guide</a></li>\n\t<li>\n\t\t<a href=\"http://pyrocms.com/documentation/#designers/index.html\">Designers Guide</a></li>\n</ul>",
    "created_on": "1290791760",
    "updated_on": "1290792011",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "86",
    "created": "2010-12-02 22:52:00",
    "updated": "2010-12-02 23:10:24",
    "created_by": "0",
    "ordering_count": null,
    "title": "EllisLab react with CodeIgniter Reactor",
    "slug": "ellislab-react-with-codeigniter-reactor",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tTwo weeks ago we had some interesting news from EllisLab about the planning of a &quot;Official CodeIgniter Community Branch&quot; in which &quot;CodeIgniter Deputies&quot; would be appointed to manage community contributions. That was pretty awesome, but today we&#39;ve had some even better news about the future of CodeIgniter. That is: The CodeIgniter Reactor!</p>",
    "body": "<p>\n\tSo it&#39;s been a month since my post &quot;<a href=\"/news/2010/10/what-happens-next\">CodeIgniter: What happens next?</a>&quot; and things have changed drastically in the world of CodeIgniter. That post was regarded by some as me saying &quot;I hate CodeIgniter, you suck&quot; which could not have been further from the truth. The article was meant to express my concerns that CodeIgniter was not progressing, the downfalls that need to be addressed and a public &quot;so it&#39;s a little boring right now, I&#39;m going to give Fuel and Rails a try for fun&quot;. This was a badly written article that focused too much on the nagative points and acciddentally caused a shit-storm of tweets and responce posts. Oops!</p>\n<p>\n\tSince what some have referred to as &quot;CodeIgniter-gate&quot; EllisLab&#39;s have done a great job of listening to the points raised by me and other members of the community and in part I believe we have effected change. Two weeks later we had some interesting news from EllisLab about the planning of a &quot;<a href=\"http://codeigniter.com/news/the_official_codeigniter_community_branch/\" target=\"_blank\">Official CodeIgniter Community Branch</a>&quot; where &quot;CodeIgniter Deputies&quot; (or Engineers as they are now called) would be appointed to manage community contributions. That was pretty awesome, but today we&#39;ve had some even better news about the future of CodeIgniter. That is: The CodeIgniter Reactor!</p>\n<p>\n\tCodeigniter at this point is splitting into two slightly different versions:</p>\n<h4 style=\"margin-left: 40px;\">\n\tCodeIgniter Core</h4>\n<p style=\"margin-left: 40px;\">\n\tCommits to this branch will be managed entirely by EllisLab as CodeIgniter has been to date. It will be a slow-moving, heavily tested version that EllisLab will be using as a base for their commercial products ExpressionEngine and MojoMotor. Releases will be less often but it will be brilliant for running client systems or large-scale in-house projects which you need to be mission criticial and stable as hell because you KNOW it will work well.</p>\n<h4 style=\"margin-left: 40px;\">\n\tCodeIgniter Reactor</h4>\n<p style=\"margin-left: 40px;\">\n\tThe Reactor branch will be managed entirely by the 6 CodeIgniter Engineers - of which I am one. This branch will be used to merge in community changes that we agree will be of benefit CodeIgniter without drastically changing the entire thing. It will be used as a test-bed for features that we want and the best will be merged by EllisLab as and when they see fit, if they feel it is of benefit to the stable Core branch. I know I speak for some of the Deputies when I say changes to this branch should be kept as simple as possible. We&#39;re not looking to totally re-write the architecture as some have suggested and we aren&#39;t just going to throw in ORM and HMVC just for the hell of it. The answer on those two will most likely remain as it always has done: &quot;If you wan&#39;t it, install it&quot;.</p>\n<h3>\n\tGood news right?</h3>\n<p>\n\tHell yes. This is exactly what the CodeIgniter community has been looking for. EllisLab need to keep their core version working for themselves of course and have always suggested that if a feature is to be integrated then it needs to be heavily tested first. So we can take and make changes, test them and if they like em they&#39;ll be merged. Spot on!</p>\n<h3>\n\tBut... but...!</h3>\n<p>\n\tNow I&#39;m going to preempt a few of the comments on this post, based in part by some of the general comments I&#39;ve seen flying around Twitter after the original &quot;Official Community Branch&quot; post by EllisLab.</p>\n<blockquote>\n\t<p>\n\t\tWhy are there two versions? This will confuse the community!</p>\n</blockquote>\n<p>\n\tNot at all, this is how open-source works. Let&#39;s look at Red Hat as an example. Red Hat is a stable commercial project that they sell and is the core product of their companty. Red Hat Fedora is the &quot;leading edge&quot; of their distribution, where they back-port features when they see fit. This works brilliantly for them, let&#39;s see if it works for the CodeIgniter community.</p>\n<blockquote>\n\t<p>\n\t\tThis is just EllisLab being lazy and giving up on development</p>\n</blockquote>\n<p>\n\tIf you think that you&#39;re a fucking idiot who doesn&#39;t deserve a response. I&#39;ve seen a few people saying this, go lick a window. I&#39;ll say again: &quot;this is how open-source works&quot;.</p>\n<h3>\n\tMaking Feature Requests</h3>\n<p>\n\tThere used to be a forum for this, but useful suggestions were always lost in a sleugh of crappy or repeated suggestions. 5000 &quot;LETS HAVE ORM!!!11&quot; posts would hide useful suggestions and code-fixes, so they never happened. That forum has now been closed and instead EllisLab and the CodeIgniter Engineers be looking at a <a href=\"http://codeigniter.uservoice.com/\">UserVoice feedback forum</a>. This will allow members to vote features up, so those that the community want will be clear to see amongst other suggestions that not so many people want or need.</p>\n<h3>\n\tContributing Code</h3>\n<p>\n\tSame as right now. Fork, commit and send a pull request! I am toying with the idea of setting up a copy of the <a href=\"news/2010/07/bitbucket-or-github\" target=\"_blank\">repo on GitHub using the hg-git</a> plugin. That would be purely so people who don&#39;t understand Mercurial/BitBucket can get involved, but of course learning it would make the process more centralized.</p>\n<h3>\n\tSo when can we get our grubby mitts on this sexy new code?</h3>\n<p>\n\tNext year. First quarter of 2011. We have to plan, develop and create, but you can be certain our first order of business is raising the bug tracker to the ground. Fix&nbsp; the old then improve the new!</p>\n<p>\n\tCodeIgniter is about to get exciting again guys, watch this space!</p>",
    "created_on": "1291330320",
    "updated_on": "1291331424",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "87",
    "created": "2011-02-07 16:00:00",
    "updated": "2011-02-08 14:28:16",
    "created_by": "0",
    "ordering_count": null,
    "title": "How to write a Feature Request",
    "slug": "how-to-write-a-feature-request",
    "category_id": "0",
    "attachment": "",
    "intro": "<p>\n fs</p>",
    "body": "<p>\n http://codeigniter.uservoice.com/forums/40508-codeigniter-reactor/suggestions/1268819-reports</p>\n<p>\n http://codeigniter.uservoice.com/forums/40508-codeigniter-reactor/suggestions/1266739-native-graphics-library</p>\n<p>\n http://www.chiark.greenend.org.uk/~sgtatham/bugs.html</p>\n<p>\n Introduction</p>\n<p>\n &nbsp;</p>\n<p>\n &quot;Make X better&quot;</p>\n<p>\n &nbsp;</p>\n<p>\n What will this change</p>",
    "created_on": "1297094400",
    "updated_on": "1297175296",
    "status": "draft",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "90",
    "created": "2011-01-11 21:51:00",
    "updated": "2011-01-11 22:15:10",
    "created_by": "0",
    "ordering_count": null,
    "title": "Pancake v2.0 - Invoice Clients in style",
    "slug": "pancake-v2.0-invoice-clients-in-style",
    "category_id": "10",
    "attachment": "",
    "intro": "<p>\n\tPancake Payments is a super awesome invoicing application that lives on your server and can be made to keep with your brands look and best of all there are no monthly fees! This application is built on CodeIgniter so it is modular, themable and really easy to extend if you feel the need. Even better it has been brought to you by some of the people behind PyroCMS and other CodeIgniter projects like CloudIgniter!</p>",
    "body": "<p>\n\t<a href=\"http://pancakeapp.com/\" target=\"_blank\">Pancake Payments</a> is a super awesome invoicing application that lives on your server and can be made to keep with your brands look and best of all there are no monthly fees! This application is built on CodeIgniter so it is modular, themeable and really easy to extend if you feel the need. Even better it has been brought to you by some of the people behind <a href=\"http://pyrocms.com\" target=\"_blank\">PyroCMS</a> and other CodeIgniter projects like CloudIgniter!</p>\n<p>\n\tVersion 1 was pretty damn awesome and worked very well but it had a few flaws. The development took a few real hits with people coming and going and v2.0 looked like it would never come. With a few weeks of grunt work from myself and the team we&#39;ve finally got it out and we&#39;ve included pretty much everything people wanted.</p>\n<p>\n\t<a class=\"modal\" href=\"http://pancakeapp.com/assets/img/screenshots/recurring_invoices.png\" style=\"float: left; padding-right: 10px;\"><img alt=\"\" src=\"http://pancakeapp.com/assets/img/screenshots/recurring_invoices.png\" width=\"150px\" /></a>Almost a week later we had v2.0.1 ready to go with some great feedback from customers. So, let&#39;s have a look at what it can do!</p>\n<h3>\n\tRecurring invoices</h3>\n<p>\n\tNow you can offload all that tedious recurring billing to Pancake and have it do all the work. Need to send a monthly hosting invoice? Let Pancake do it, set it to send at the interval you want and it will send the invoices at that time! The frequency can be set to a month, a week or a year and will work with either a simple cron job or you can get a third-party service to call a simple URL every day/hour.</p>\n<h3>\n\tProject Management</h3>\n<p>\n\t<a class=\"modal\" href=\"http://pancakeapp.com/assets/img/screenshots/project_tasks.png\" style=\"float: left; padding-right: 10px;\"><img alt=\"\" src=\"http://pancakeapp.com/assets/img/screenshots/project_tasks.png\" width=\"150px\" /></a> We kept it simple, you should be working on the task at hand, not spending 10 minutes entering it into your project management app! Now you can track projects, assign tasks to them with hourly rate, log the time you spent and when you are all done, click a button and Pancake will create an invoice with those tasks (and hourly rates) as line items! Seriously simple project management, time tracking and invoicing!</p>\n<h3>\n\tOffer Files on Payment</h3>\n<p>\n\tEver been complained at because the client paid you out of office hours and you didn&#39;t notice because you were at the pub? Or ever heard this?</p>\n<blockquote>\n\t<p>\n\t\tClient: We&#39;ll fill out the payment form soon, but we need the files right now!</p>\n</blockquote>\n<p>\n\tNever worry about it again. You can add downloadable files to the invoice so as soon as clients send in your money they can access the design/code/whatever.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tIf you like working with <a href=\"http://pyrocms.com\" target=\"_blank\">PyroCMS</a> you will love this code as most of the codebase is the same. There&#39;s plenty more Pancake can do and it will only improve in the future, but you guys should really have a look around the site and if you like it - <a href=\"http://buy.pancakeapp.com/\" target=\"_blank\">buy a copy</a>.</p>",
    "created_on": "1294782660",
    "updated_on": "1294784110",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "92",
    "created": "2011-02-15 22:05:00",
    "updated": "2011-02-16 01:37:38",
    "created_by": "0",
    "ordering_count": null,
    "title": "Getting involved with CodeIgniter",
    "slug": "getting-involved-with-codeigniter",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tWhat makes Reactor so much more different than CodeIgniter has been in the past? Anyone can be involved wether you are a hard-core developer who is happy to jump into the codebase and start changing things and adding features, or a new user who just wants to request some new features, you can do this on the <a href=\"https://codeigniter.uservoice.com/forums/40508-codeigniter-reactor\">UserVoice</a> or send in your code using BitBucket and GitHub.</p>",
    "body": "<p>\n\tNow that CodeIgniter (Reactor) 2.0 is out people are starting to get involved, which is great. There are still a few stragglers getting confused over branch names and having arguments over the philosophy of CodeIgniter, but it all seems to be dying down a little bit. To put it simply, CodeIgniter Reactor 2.0 is CodeIgniter. When you upgrade, this is what you will most likely be upgrading to, it is the version you will download when you go to the CodeIgniter homepage and as long as you don&#39;t go randomly wandering around BitBucket accidentally downloading development versions then it will be pretty stable. In fact, CodeIgniter Reactor 2.0 has fixed about 30 bugs that existed in 1.7.x so it is actually way more stable.</p>\n<p>\n\tSo with that out of the way, what makes Reactor so much more different than CodeIgniter has been in the past? Well that is easy, anyone can be involved whether you are a hard-core developer who is happy to jump into the codebase and start changing things and adding features, or a new user who just wants to request some new features, you can do this on the <a href=\"https://codeigniter.uservoice.com/forums/40508-codeigniter-reactor\">UserVoice</a>. On here are lots of features and we already have some features over 800 vote points (people can spend 10 each, up to 3 at a time, so that is not actually 800 votes). Now I think it is important to address here, that just because a feature is asked for, does not mean 100% it will happen, it just means it will be noticed over other feature requests and discussed. For example, if 100 people go in there and ask for a .NET GUI for generating code... well tough, that still is not going to happen. The fact that we vet feature requests after a full discussion should be seen as a plus, because the community sure would not be happy if we just ran around making every single change that anybody asked for. Then CodeIgniter might as well just be a Microsoft product and would loose its lightweight claim to fame!</p>\n<h3>\n\tYou seem to say &quot;we&quot; quite a lot</h3>\n<p>\n\tUnlike Queen Victoria I do not use the term &quot;we&quot; to describe myself, I am reffering to the Reactor Engineer team. We are a team of 6 long-time CodeIgniter developers who accepted the challenge from EllisLab and applied to help manage a community version of CodeIgniter. The community asked for change and EllisLab responded with a way for us to do it. Great!</p>\n<h3>\n\tWhat to expect from the Engineers</h3>\n<p>\n\tExpect dedication but don&#39;t expect the world. There have been numerous complaints that are entirely contradictory.</p>\n<ol>\n\t<li>\n\t\tThey&#39;ll just change everything and change the framework that I love beyond recognition.</li>\n\t<li>\n\t\tThey aren&#39;t doing enough, why don&#39;t we have namespaces, static classes up the wazoo and a zillion other random features?!</li>\n</ol>\n<p>\n\tWell it looks like we can&#39;t win eh? ;-)</p>\n<p>\n\tThe Reactor Engineers are mostly people who work with CodeIgniter on a regular basis. Myself, I have been using CodeIgniter every single day on my 9-5 for the last 14 months and a fair bit for the 4 years before that, so I am around it alot. As somebody who uses CodeIgniter this much it is easily fair to say I have written more CodeIgniter based apps than EllisLab! As such I notice a lot of things that are missing or just plain broken and I really wanted to be in a situation where I could make those changes easily. When I notice an error, or a friend of mine working on a commerical app notices an error, or one of the 100 people who email me about CodeIgniter every single bloomin&#39; day notices an error, I sure want to be able to fix is ASAP.</p>\n<p>\n\tThat is exactly the sort of thing the Engineers are about: helping to facilitate change.</p>\n<h3>\n\tSweet, can you facilitate my change?</h3>\n<p>\n\tDamn right. Here are some simple rules to get your changes into CodeIgniter:</p>\n<ol>\n\t<li>\n\t\t<a href=\"http://codeigniter.com/user_guide/general/styleguide.html\"><strong>Follow the EllisLab Coding Standards</strong></a> - They are pretty simple and mean that all of CodeIgniter will look like Rick Ellis himself wrote it. Remember, he is a black belt so that is a good thing.</li>\n\t<li>\n\t\t<strong>Documentation</strong> - Documenting your own code might be boring, but it&#39;s a lot more boring for us to document other peoples code when they are the ones providing the changes. Supply all features and changes with documentation. Some may only be an update to the changelog, some will be entire library docs, just make sure it is right and fits in with the rest.</li>\n\t<li>\n\t\t<strong>Test </strong>- There is no point sending in busted code. Write the change into your applications, test the balls off it and submit the change when it&#39;s done.</li>\n\t<li>\n\t\t<strong>Use <a href=\"https://bitbucket.org/ellislab/codeigniter-reactor\" target=\"_blank\">BitBucket</a> / <a href=\"https://github.com/philsturgeon/codeigniter-reactor\" target=\"_blank\">GitHub</a></strong> - You can send the changes via a Pull Request on either repository. The GitHub one is a personal repo I use to help Git users get their changes in, but has EllisLab&#39;s blessing.</li>\n</ol>\n<h3>\n\tWhat change is good change?</h3>\n<p>\n\tA good change to make is one that has been really useful to you. Not just on one project, but on lots. If that change is on UserVoice then even better! Drop a comment on there saying you are going to work on it, then leave another when it is done with a link to the change. That means the Engineers and all the other users interested in that change can have a look.</p>\n<p>\n\tAn example of a good change recently is things like GET string support, or supporting multiple environments. The code for these was tiny, but was pretty darn useful for a lot of developers. Other changes are things like adding&nbsp; decimal, less_than and greater_than rules to Form Validation or adding the audio/mp3 mime type to the mimes.php config. We aren&#39;t trying to re-invent the framework or create artificial intelligence, just make it better one step at a time.</p>\n<h3>\n\tWhat is a bad change?</h3>\n<p>\n\tDon&#39;t create something just for the hell of it. If you make a feature and only test that feature in a plain install with no real world usage, that feature is going to suck.</p>\n<p>\n\tAlso I&#39;ve seen quite a few &quot;CodeIgniter haz to haz <em>Sprockets</em> because X and Y Framework have them!!!11one&quot; and this is a terrible reason to do anything. If you instead think &quot;I really like the way Kohana has implemented this feature, perhaps I will work it into my application and test it as I go, then see if anybody else is interested&quot; then good work, you might have yourself a feature for 2.1.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tCodeIgniter Reactor is here to stay and is a tool for good. It is lightweight, stable, useful and has a great following, but us Engineer folk are not going to spend our entire free time working on features for the hell of it, nor should we be expected or needed to. Everyone who wants and needs a feature in CodeIgniter has the equal opportunity to get their code into place and anybody who has been using CodeIgniter for more than a few months can dedicate something useful. As for the size of the changes, we are taking things slow for now and changes will eventually ramp up but nobody should be scared of using it.</p>\n<p>\n\tNow hopefully we can all stop posting about &quot;the status of the community&quot; or &quot;the future of CodeIgniter&quot; and having silly arguments on the forums and get back to writing some code. I&#39;ll have a sweet new version of <a href=\"http://pyrocms.com/\" target=\"_blank\">PyroCMS</a> out fairly soon and <a href=\"http://pancakeapp.com/\" target=\"_blank\">Pancake</a> 2.1 needs to get done. Both of which will be running on Reactor and taking full advantage of the new changes!</p>",
    "created_on": "1297807500",
    "updated_on": "1297820258",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "93",
    "created": "2011-02-12 00:37:00",
    "updated": "2011-02-12 00:40:37",
    "created_by": "0",
    "ordering_count": null,
    "title": "PHP Format abstraction with a simple class",
    "slug": "php-format-abstraction-with-a-simple-class",
    "category_id": "2",
    "attachment": "",
    "intro": "<p>\n Having a quiet night in before a long day of kayaking I thought I&#39;d write some fun code instead of banging out the usual shit like I&#39;ve been doing all day. Convert between Array, Object, JSON, XML, CSV and Serialized data and back again easily. I&#39;ll add a few more types like YAML when I can be arsed to work out PECL for MAMP.</p>",
    "body": "<p>\n Having a quiet night in before a long day of kayaking I thought I&#39;d write some fun code instead of banging out the usual shit like I&#39;ve been doing all day...</p>\n<p>\n Convert between Array, Object, JSON, XML, CSV and Serialized data and back again easily. I&#39;ll add a few more types like YAML when I can be arsed to work out PECL for MAMP.</p>\n<pre class=\"php\">\n<code>    $original_array = array(&#39;foo&#39; =&gt; &#39;bar&#39;, &#39;baz&#39; =&gt; &#39;stuff&#39;);\n\n    $json = Format::factory($original_array)-&gt;to_json();\n    $xml = Format::factory($json, &#39;json&#39;)-&gt;to_xml();\n    $end_array = Format::factory($xml, &#39;xml&#39;)-&gt;to_array();\n\n    var_dump($original_array === $end_array); // true\n</code></pre>\n<p>\n Get it on <a href=\"http://github.com/philsturgeon/php-format\" target=\"_blank\">GitHub</a>.</p>\n<p>\n I&#39;ve put it into FuelPHP and I&#39;ll commit to CodeIgntier 2.0 soon.</p>",
    "created_on": "1297471020",
    "updated_on": "1297471237",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "94",
    "created": "2011-03-06 15:09:00",
    "updated": "2011-03-06 15:34:18",
    "created_by": "0",
    "ordering_count": null,
    "title": "FuelPHP - Oil Introduction &amp; Scaffolding",
    "slug": "fuelphp-oil-introduction-scaffolding",
    "category_id": "20",
    "attachment": "",
    "intro": "<p>\n\tDevelopment of FuelPHP has come a long way since Dan and myself started work on the system a few months ago and it&#39;s command line utility has progressed amazingly. I spent all of yesterday polishing off this package and now we have Rails-style scaffolding and migrations working perfectly. This video shows off the basic functionality of Oil by running through scaffolding creation and quickly brushing on migration work.</p>",
    "body": "<p>\n\tDevelopment of FuelPHP has come a long way since Dan and myself started work on the system a few months ago and it&#39;s command line utility has progressed amazingly. I spent all of yesterday polishing off this package and now we have Rails-style scaffolding and migrations working perfectly. This video shows off the basic functionality of Oil by running through scaffolding creation and quickly brushing on migration work.</p>\n<p style=\"text-align: center;\">\n\t<embed allowfullscreen=\"true\" allowscriptaccess=\"always\" height=\"683\" src=\"http://blip.tv/play/g7lmgqmIcAA%2Em4v\" type=\"application/x-shockwave-flash\" width=\"875\"></embed></p>\n<p>\n\tYou can see here I have created a basic controller with template support, my model, all of my basic views, the schema and even run the schema just by using two commands:</p>\n<blockquote>\n\t$ php oil generate scaffold monkey name:varchar[100] biography:text favourite_number:integer<br />\n\t$ php oil refine migrate</blockquote>\n<p>\n\tI could then deploy this code (<a href=\"/blog/2010/02/Deploying-websites-with-Git\">maybe with git</a>) and run the migrate command on the live server and those features would be live!</p>\n<p>\n\tIf you are not used to this way of working it borrows <em>heavily</em> from Rails which I have been doing a fair bit of work with recently. I don&#39;t want to start&nbsp; massive PHP vrs Ruby argument because there is nothing new to be said here, but suffice it to say we don&#39;t always have the option to work with Ruby. FuelPHP is taking ideas from Rails in how the command line utility works and helping to speed up PHP development. For me that is pretty exciting!</p>\n<p>\n\tI&#39;ll be posting more screencasts soon focusing on other aspects of Oil, covering the console and migrations in more detail. I&#39;ll also be working on a write-up for setting up <a href=\"http://www.php.net/manual/en/book.readline.php\" target=\"_blank\">Readline for PHP</a> so you can interact with the Oil Console like it is part of bash.</p>",
    "created_on": "1299424140",
    "updated_on": "1299425658",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "95",
    "created": "2011-03-17 23:27:00",
    "updated": "2011-03-17 23:27:00",
    "created_by": "0",
    "ordering_count": null,
    "title": "Video: Set up a REST API with CodeIgniter",
    "slug": "video-set-up-a-rest-api-with-codeigniter",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>Tonight I started working on the RESTful API for PancakeApp - an invoicing system built in CodeIgniter - when I remembered how many people have been asking for help using REST_Controller. I wrote up an article on NetTuts last year hoping that would cover the majority of questions, but with new features like API Keys, Limiting and Logging being added I thought a quick run-through was in order. This video covers the basic implementation, HTTP Basic/Digest authentication, format switching and goes onto the new API Key and logging features. As this is an admittedly an unplanned video I&#39;ll be accepting answers to the question &quot;How many mistakes did I make?&quot; on the back of a postcard.</p>\n",
    "body": "Tonight I started working on the RESTful API for [PancakeApp](http://pancakeapp.com/) - an invoicing system built in CodeIgniter - when I remembered how many people have been asking for help using REST_Controller. I wrote up an article on NetTuts last year [Working with RESTful Services in CodeIgniter](http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/) hoping that would cover the majority of questions but with new features like API Keys, Limiting and Logging being added I thought a quick run-through was in order. This video covers the basic implementation, HTTP Basic/Digest authentication, format switching and goes onto the new API Key and logging features.\n\n<p style=\"text-align: center;\">\n<embed allowfullscreen=\"true\" allowscriptaccess=\"always\" height=\"683\" src=\"http://blip.tv/play/g7lmgqyWDwA\" type=\"application/x-shockwave-flash\" width=\"875\"></embed>\n</p>\n\nAs this is an admittedly an unplanned video I'll be accepting answers to the question \"How many mistakes did I make?\" on the back of a postcard. It's surprising how much time can go into screencasts, even bad ones!",
    "created_on": "1300404420",
    "updated_on": "1300404420",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p>Tonight I started working on the RESTful API for <a href=\"http://pancakeapp.com/\">PancakeApp</a> - an invoicing system built in CodeIgniter - when I remembered how many people have been asking for help using REST_Controller. I wrote up an article on NetTuts last year <a href=\"http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/\">Working with RESTful Services in CodeIgniter</a> hoping that would cover the majority of questions but with new features like API Keys, Limiting and Logging being added I thought a quick run-through was in order. This video covers the basic implementation, HTTP Basic/Digest authentication, format switching and goes onto the new API Key and logging features.</p>\n\n<p style=\"text-align: center;\">\n<embed allowfullscreen=\"true\" allowscriptaccess=\"always\" height=\"683\" src=\"http://blip.tv/play/g7lmgqyWDwA\" type=\"application/x-shockwave-flash\" width=\"875\"></embed>\n</p>\n\n<p>As this is an admittedly an unplanned video I'll be accepting answers to the question \"How many mistakes did I make?\" on the back of a postcard. It's surprising how much time can go into screencasts, even bad ones!</p>\n",
    "preview_hash": ""
  },
  {
    "id": "96",
    "created": "2011-04-01 08:39:00",
    "updated": "2011-04-01 08:51:29",
    "created_by": "0",
    "ordering_count": null,
    "title": "Time for a Change",
    "slug": "time-for-a-change",
    "category_id": "2",
    "attachment": "",
    "intro": "<p>\n\tAfter years of being an active member in the CodeIgniter community I have decided it is time to change things up and move on. Where is that move taking me? Recently I have been doing a lot of research into various frameworks and I have made a final decision. Read on to find out what framework I decided to go with and why.</p>",
    "body": "<p>\n\tAfter years of being an active member in the CodeIgniter community I have decided it is time to change things up and move on. Where is that move taking me? Recently I have been doing a lot of research into various frameworks and I have made a final decision.</p>\n<h3>\n\tWhy the move?</h3>\n<p>\n\tI am bored of CodeIgniters simplicity and fed up with how FuelPHP has made development way too easy and logical. Development is meant to be a challenge, but both of these frameworks make things so easy that programming has started to bore me to death. I need a challenge, I need something that will constantly keep me guessing and I want to work with random auto-magic in a Rails-like way, but without having to go and learn a new language. PHP is the best thing in the world right, so why learn anything else if I could just use a framework that has blindly ported some of the features in?</p>\n<h3>\n\tSo which framework?</h3>\n<p>\n\tThere can be only one answer here and that is CakePHP. The main thing I love about this framework is that it <em><strong>really </strong></em>makes you think long and hard about performance and caching. CodeIgniter is so lightweight that you end up getting lazy and pay no attention to the benchmarks. CakePHP has the heaviest base of any framework around, so what better way to make you focus on efficiency! I&#39;ll go back to those fun nights of trying to squeeze that last 5% of effeciency out of an application, but now instead of creating a massive CMS or a video encoding API, I can have those performance tuning nights on a basic brochure site. Winner!</p>\n<p>\n\tKeep an eye out for developments and tutorials as I go along this path. It should be a blast.</p>",
    "created_on": "1301647140",
    "updated_on": "1301647889",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "97",
    "created": "2011-04-11 00:51:00",
    "updated": "2011-04-11 02:01:28",
    "created_by": "0",
    "ordering_count": null,
    "title": "Why Write A New Framework?",
    "slug": "why-write-a-new-framework",
    "category_id": "0",
    "attachment": "",
    "intro": "<p>\n\tSo we all know that the internet is full of frameworks. They&#39;ve been the popular thing for the last 5 or 6 years and it seems to have become the &quot;barrier for entry&quot; or the &quot;passage of rights&quot; that 8 or 9 years ago used to be &quot;hey I just wrote a phpBB clone!&quot;. There are plenty around but in this day in age, why would anyone write a new one? As somebody involved in a new PHP framework &quot;Fuel&quot; that has shaken a few opinions up I thought it would be interesting to share my thoughts and views on the situation.</p>",
    "body": "<p>\n\tSo we all know that the internet is full of frameworks. They&#39;ve been the popular thing for the last 5 or 6 years and it seems to have become the &quot;barrier for entry&quot; or the &quot;passage of rights&quot; that 8 or 9 years ago used to be &quot;hey I just wrote a phpBB clone!&quot;. There are plenty around but in this day in age, why would anyone write a new one? As somebody involved in a new PHP framework - <a href=\"http://fuelphp.com\">Fuel</a> - that has shaken a few opinions up I thought it would be interesting to share my thoughts and views on the situation.</p>\n<p>\n\tLet&#39;s look at a few opinions to start off with and give then some quick answers.</p>\n<h3>\n\tThere are already plenty of frameworks out there</h3>\n<p>\n\tSure, but there are plenty of cars out there and Ford haven&#39;t stopped trying to make a better car just yet.</p>\n<h3>\n\tThere are too many for people to choose from</h3>\n<p>\n\tThere are a shitload of popular bands out there in the charts, but the bands that don&#39;t sell any singles just fade away and drop off the radar. New artists pop up and irrelevant artists go away, keeping a constantly fresh amount of new music out there that everyone can benefit from. The competition keeps them all going strong and sometimes collaborations happen between artists or genres cross over, which can lead to some of the best new music around.</p>\n<h3>\n\tWhy not help improve an existing framework?</h3>\n<p>\n\tWell sure you could, but if you don&#39;t like how a framework does X, what options do you have? Go and tell them that X is rubbish or rewrite it and hope they merge it? If they do then people will complain that X is different to how it used to work and that they now have to go and recode their application. On the other hand, if they don&#39;t you are left with an unmerged feature that you have to maintain yourself in a fork of the framework that will never be part of the mainstream. How annoying.</p>\n<h3>\n\tWhy reinvent the wheel?</h3>\n<p>\n\tWhat if I don&#39;t like the wheels that are out there? Working with a framework is all about developing things in the quickest way possible, not just to help make yourself more efficient but to make the most of your time and to keep client costs down. Every time I have to do some silly workaround in a framework is extra time I could spend either working on a new feature for the client or having a well deserved pint.</p>\n<p>\n\tPersonally I love CodeIgniter, Kohana and Rails for certain parts of how their frameworks work, but other parts of the system frustrate the hell out of me. If I can develop a new framework that encompasses the best parts of those wheels and make a new shinny one then that has to be the best way for me to build code right?&nbsp;</p>\n<p>\n\tThe same rule applies for any business, open-source project, web-app or whatever else. Firstly, make something that is useful to you. If you can open it up in a way that others can use then brilliant, they might find it useful to. The one downside here is that the second it hits a large news site you end up with an influx of idiots giving half-baked opinions with no real research behind them. Ignore this, it is standard.</p>\n<h3>\n\tSo where does Fuel sit in with all this?</h3>\n<p>\n\tWorking with a framework can really speed you up if it jives with how you develop but this only works if there is a) enough documentation and b) the developers work in the same way as you. Rails is essentiallly learning how 37signals like to write code. They have their conventions and their automagic that to them make a whole bunch of sense and speed them up in developing applications. Great! Now, if I don&#39;t agree with those conventions and assumptions, what can I do? Um.... nothing.</p>\n<p>\n\tMost of the time the Rails automagic is bloody brilliant. Over the years several frameworks have tried to copy the Rails magic and failed horrifically. CakePHP has tried and without wanting to rip on them too much, they have just ended up with a complicated piece of software that has the worst performace of any PHP framework I have ever seen benchmarked. It would be great to see more of the Rails way of working in the world of PHP. Why? Because although as a single developer I can pick and choose whatever language I wish to work in, I don&#39;t always have that level of choice when working for clients.</p>\n<p>\n\tSure, I can use Rails for a webapp (and hell, I have, <a href=\"http://travlrapp.com/\">TravlrApp</a> uses Rails and I love it) but if a client asks me to build them a project I have to listen to what they want and normally that will be PHP. Why? Because their existing systems use PHP, their servers all support PHP, their developers all know how to write PHP and everything everywhere is PHP. Rails is great, some of their developers might dabble with it or even a bit of Django, but at the end of the day PHP is still the most used and most widely supported web scripting language around and I cannot see that changing any time soon.</p>\n<p>\n\tSo, let&#39;s make PHP as fun to use as we possibly can right?</p>\n<p>\n\tSome of the best things I love about Rails are gems, Migrations, irb, Scaffolding (useful in small doeses) and rakes. So how great would it be if I could do all that in PHP?</p>\n<p>\n\tWell you can. I wrote <a href=\"/blog/2011/03/fuelphp-oil-introduction-scaffolding\">all of those features</a> into the optional command line utility &quot;Oil&quot; for Fuel. Whoop! I could have written those features into Kohana, but then I would have had to ask the core developers if they thought it was in their interests, if it met their standards, if anyone else was working on anything similar, if it was the way their framework was interested in going, which version it should be merged with, bla bla bla. Why do that if I can put it into a framework I have helped to build with people who are not just friends, but some of the most talented PHP developers I know?</p>\n<h3>\n\tSummary</h3>\n<p>\n\tA framework is essentially a way to put all of your best practises into a single place so that you can reuse them over and over again. This should make you more efficient and make your time more financially viable to clients. If the framework you use slows you down or does not cater for the way you like to develop then sack it off and do your own thing. A vast majority of the framework community seems to have a massive fanboy attitude which is totally unneccessary. You can use a framework for a few years then change your mind and write a few apps in a different one. It doesn&#39;t make you a traitor, it just makes you a free thinking logical developer who uses the best tools for the job at the right time.</p>\n<p>\n\tUse whatever you like and don&#39;t be negative to anyone who wants to work in a different way. There is no one framework that does everything right for everyone and there never will be. I have my three favourites and I&#39;ll be using those until I change my mind. I prefer to have my options and you&#39;re welcome to yours, just don&#39;t tell me I&#39;m wrong for wanting to work in the best way I can or I won&#39;t have anything polite to say.</p>",
    "created_on": "1302483060",
    "updated_on": "1302487288",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "101",
    "created": "2011-06-10 22:06:00",
    "updated": "2011-06-10 23:31:31",
    "created_by": "0",
    "ordering_count": null,
    "title": "Tumbleweed?",
    "slug": "tumbleweed",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tAs you may have seen in my last article I&#39;m currently off traveling the world (well, North America for now at least) and I wanted to give people a quick update as to what is going on with various projects while that is happening. The good news is nothing is being dropped and everything is coming along really nicely, but I&#39;ll just quickly explain what my projects are and why and how I stay involved with them all.</p>",
    "body": "<p>\n\tAs you may have seen in my last article I&#39;m currently off traveling the world (well, North America for now at least) and I wanted to give people a quick update as to what is going on with various projects while that is happening. The good news is nothing is being dropped and everything is coming along really nicely, but I&#39;ll just quickly explain what my projects are and why and how I stay involved with them all.</p>\n<p>\n\tWorking on <a href=\"http://codeigniter.com\" target=\"_blank\">CodeIgniter Reactor</a>, <a href=\"http://fuelphp.com\" target=\"_blank\">FuelPHP</a>, <a href=\"http://pancakeapp.com\" target=\"_blank\">PancakeApp</a>, <a href=\"http://pyrocms.com\" target=\"_blank\">PyroCMS</a>, <a href=\"http://travlrapp.com\" target=\"_blank\">Travlr</a>, a day job and freelance stuff has always been a tough call and it may have seemed like I bit off more than I could chew, but realisticly most of them were mutually beneficial for a long time and there were less &quot;ands&quot; involved. Now for many reasons this has become a little more difficult.</p>\n<h3>\n\tCodeIgniter Reactor</h3>\n<p>\n\tGoing back a year and a bit I started a job where my day job was to build a CodeIgniter CMS - multi-site, multi-client, mult-lingual, multi-territory - MADNESS. Although this was a crazy job, working on CodeIgniter every day meant I found lots of bugs or potential features in CodeIgniter and PyroCMS as the two shared a very similar codebase. So back last year I was actually being paid to work on CodeIgniter and a lot of bug-fixes and new features made to &quot;MizuCMS&quot; were easy to run home and apply to PyroCMS. Well now that I am no longer working for that company my time for CodeIgniter has seriously dropped and the only time I spend working on CodeIgniter is when I&#39;m working with PancakeApp or PyroCMS which soon will start to become a lot more. No clients are really asking for me to work with CI these days for various reasons, so this is why I&#39;ve not really been doing all that much for the last month or two.</p>\n<p>\n\tFor now my main contribution to CodeIgniter will be to make <a href=\"http://cicon2011.com\" target=\"_blank\">CICON</a> happen, which will be great not only for those attending but the community as a whole. How? Well one of the features we&#39;ll be running is a &quot;CodeIgniter Bug Sprint&quot;. 1 hour, fix as many bugs as possible with the winner getting a free iPad. 163 issues (many of which are probably non-issues) + 200 people = kick-ass version of Reactor! Crowd-sourcing with iPads is easy.</p>\n<h3>\n\tPyroCMS</h3>\n<p>\n\tPyroCMS was the product of two years of &quot;StyleDNA Ltd&quot;, a company I ran when I was still a spotty-faced teenager straight out of college. The recession hit and we just weren&#39;t ready for it. PyroCMS became open-source and has exploded into a massive project used by thousands of people. Since its release the main driving force behind development has been freelance clients asking for features or wanting sites shipped. If a client wants a basic site with a theme, bam, there is a Pyro install and some design work on top.</p>\n<p>\n\tAgain, recently with PyroCMS I will admit I have been slack. This mainly comes down to a shift in the focus of my clients. Everyone wants me to make them business Facebook or Twitter/StackOverflow/Springboard/Something-else instead of &quot;ma &amp; pa&quot; brochure-ware. This is good as it means much bigger and more involved development work and I get to flex my FuelPHP muscles a little, but it leaves me no time to work on fun new features.</p>\n<p>\n\tCommunity to the rescue! <a href=\"https://github.com/jerel\" target=\"_blank\">Jerel Unruh</a> and <a href=\"https://github.com/marcoscoelho\" target=\"_blank\">Marcos Coelho</a> along with several others have been <a href=\"https://github.com/pyrocms/pyrocms/commits/develop\">coding the hell out of PyroCMS</a> in my absence and have all been doing a damn good job. There are some great new features incoming and while I haven&#39;t been actively involved in development I have been involved in some plans which will take PyroCMS in a great new direction. v1.3 is going to be awesome and we have a Premium version coming which - amongst other things - will allow you to white-label the CMS and sell it off to your clients!</p>\n<p>\n\tAlso, I&#39;ll be meeting up with Jerel in Oklahoma City this Tuesday for a whole day of documentation (and steak). We&#39;re going to get this documentation awesome, its been <em>far</em> too long already.</p>\n<h3>\n\tPancakeApp</h3>\n<p>\n\tPancake started off as a small bit of freelance work for a friend but somehow I&#39;ve found myself being Lead Developer!</p>\n<p>\n\tAgain, it&#39;s been a little quiet for a few days but the next version comes with an API that lets you control EVERYTHING. This was made not just to allow easy integrations, but to help a friend of mine create a iPhone App (:o!!). Along with that I&#39;ve bundled in some awesome time-tracking which will potentially replace Toggl and make tracking and billing your work stupidly simple.</p>\n<p>\n\tAnyone who has seen my travel plans will see that I finish in Cranbrook. I&#39;m shacking up with Lee Tengum there who runs the project and we&#39;ll be hammering the hell out of the code (in between fishing and hiking trips in the Rockies) for about two months. It&#39;s already pretty awesome, so with this time to focus it will get a lot better.</p>\n<h3>\n\tFuelPHP</h3>\n<p>\n\tThis is one of the coolest projects to be part of, but luckily I have never needed to be a massive part of it. I&#39;d say of the four developers I have a much lessor role, mainly being known as the guy that did that &quot;Oil command line thing&quot;. This is brilliant, as while I am close enough to shout at Dan when he makes a bad call, I don&#39;t really need to be involved with the day-to-day and support.</p>\n<p>\n\tI&#39;ll be around to evangelize, support and improve the code overtime but after a whole 3 month session of constant coding on this fucker to get it from concept to beta, I will be sticking to my relative backseat and just be working on it &quot;now and then&quot;.</p>\n<h3>\n\tFreelance</h3>\n<p>\n\tYup, still working for others and the most recent is the very exciting <a href=\"http://microwd.co.uk/\" target=\"_blank\">MiCrowd</a> - the first social question-answer network to be written almost entirely from a Greyhound bus.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tI&#39;m still getting things done, I&#39;m just not shouting about it all quite as much as I used to. It&#39;ll be a long time before I&#39;m back to throwing out new libraries and fun technical articles regularly, but fuck it, I&#39;m traveling the world!</p>",
    "created_on": "1307743560",
    "updated_on": "1307748691",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "102",
    "created": "2011-06-15 23:21:00",
    "updated": "2011-06-15 23:21:00",
    "created_by": "0",
    "ordering_count": null,
    "title": "Misconceptions about ORMs",
    "slug": "misconceptions-about-orms",
    "category_id": "0",
    "attachment": "",
    "intro": "<p>&quot;ORMs are overweight, slow, hard to work with, pointless and for people who don&#39;t know how to use SQL&quot;. These are all arguments we have all heard - and in some cases in the past I have even used - but this is a stupid argument made by people who either looked at a &quot;Getting Started&quot; page and thought &quot;yuck&quot; or tried a bad clam and decided to avoid seafood for the rest of their life. In this article I&#39;ll explain why I have converted from a fully anti-ORM developer to somebody who strongly reccomends you give a [good] ORM a try.</p>\n",
    "body": "<p>I was reading an article today <a href=\"http://seldo.com/weblog/2011/06/15/orm_is_an_antipattern\">ORM is an anti-pattern</a> and it reminded me of some of the opinions I used to have about ORMs. I had used some PHP ORMs before like Doctrine and Propel and found them both to be heavy and a bit long winded for doing what I wanted to do. After that I wrote off ORMs for good and refused to listen to anyone who tried selling me a new one, but this makes about as much sense as turning to men just because you ended up with one fat girl. They aren&#39;t all that heavy, and they aren&#39;t all that ugly.</p>\n\n<p>After I decided to learn some Ruby on Rails (mainly for poops and giggles) I ended up falling in love with their <a href=\"http://guides.rubyonrails.org/active_record_querying.html\">ActiveRecord implementation</a> - which is essentially ORM. They had thought out pretty much everything, it seemed to work pretty quickly and saved me a craptonne of time over working with SQL.</p>\n\n<p>This article is not intended to directly dig at our friend Seldo here, but I will be referring to the points in his article to help me dispel some of the misconceptions that he - and plenty of others - have about ORMs as a whole.</p>\n\n<h3>Inadequate abstraction</h3>\n\n<blockquote>\n<p>The whole point of an abstraction is that it is supposed to simplify. An abstraction of SQL that requires you to understand SQL anyway is doubling the amount you need to learn: first you need to learn what the SQL you&#39;re trying to run is, then you have to learn the API to get your ORM to write it for you.</p>\n</blockquote>\n\n<p>Personally, I couldn&#39;t give a damn what SQL is being written as long as the ORM is performant and gives me results. The whole point of abstraction is that you are provided with a simple solution to do something more difficult or time consuming. Whether or not the API is intuitive or not is purely down to whoever developed the API and not down to ORMs on the whole.</p>\n\n<h3>Incorrect abstraction</h3>\n\n<blockquote>\n<p>If your project really does not need any relational data features, then ORM will work perfectly for you, but then you have a different problem: you&#39;re using the wrong datastore. The overhead of a relational datastore is enormous; this is a large part of why NoSQL data stores are so much faster. If your data is relational, however, that overhead is worth it: your database does not merely <i>store</i> your data, it <b>represents</b> your data and can answer questions about it on the basis of the relations captured, far more efficiently than you could in procedural code.</p>\n</blockquote>\n\n<p>Hang about, ORM stands for Object Relational Mapping. The fact that it handles relationships for you is exactly the reason for using an ORM! Maybe Doctrine and Propel handle this badly, but if you use something like FuelPHP&#39;s or Rails ActiveRecord then you&#39;ll see that adding in some &quot;belongs_to&quot;, &quot;has_many&quot;, &quot;has_one&quot;, etc to your models makes talking to related data a breeze. Let&#39;s imagine a normal model in CodeIgniter for example - not pure SQL but close enough to be the same thing:</p>\n\n{{ prism:syntax lang=\"php\" }}\nclass User_model {\n    public function get($params)\n    {\n    \t$this-&gt;db\n    \t    \t-&gt;select(&#39;profiles.*, users.*, IF(profiles.last_name = &quot;&quot;, profiles.first_name, CONCAT(profiles.first_name, &quot; &quot;, profiles.last_name)) as full_name&#39;, FALSE)\n    \t    \t-&gt;limit(1)\n    \t    \t-&gt;join(&#39;profiles&#39;, &#39;profiles.user_id = users.id&#39;, &#39;left&#39;);\n\n    \treturn $this-&gt;db-&gt;get(&#39;users&#39;)-&gt;row();\n    }\n}\n{{ /prism:syntax }}\n\n<p>Well that was no fun, but we have a method we can use to grab a single user from the database. Now, if we want to make a query that will get us a list of articles that user has written, or decide to see a list of their friends or work with any other sort of data then we have two options:</p>\n\n<ol>\n\t<li>Modify the SQL query to make one mega-join</li>\n\t<li>Make another query</li>\n</ol>\n\n<p>To be honest I don&#39;t really want to do either! Option 1 leaves me pulling back way more information than I need everywhere else in my application that method is used and option 2 means writing a really similar method just to join a few extra fields. What a PITA.</p>\n\n<p>Now if we were using Rails we&#39;d just do this:</p>\n\n{{ prism:syntax lang=\"ruby\" }}\nUser::find(id, :include =&gt; :profile)\n{{ /prism:syntax }}\n\n<p>Then if we felt like including the users articles or friends we&#39;d just do this:</p>\n\n{{ prism:syntax lang=\"ruby\" }}\nUser::find(id, :include =&gt; [:profile, :articles, :friends])\n{{ /prism:syntax }}\n\n<p>And brilliantly we can just do user.profile.foo to access nested properties and not have it all jammed into the main user variable as a SQL JOIN would end up doing.</p>\n\n<h3>Death by a thousand queries</h3>\n\n<blockquote>\n<p>This leads naturally to another problem of ORM: inefficiency. When you fetch an object, which of its properties (columns in the table) do you need? ORM can&#39;t know, so it gets all of them (or it requires you to say, breaking the abstraction). Initially this is not a problem, but when you are fetching a thousand records at a time, fetching 30 columns when you only need 3 becomes a pernicious source of inefficiency. Many ORM layers are also notably bad at deducing joins, and will fall back to dozens of individual queries for related objects.</p>\n</blockquote>\n\n<p>WRONG. Most ORMs will allow you to pass a select in to suggest what fields you want back insteade of just assuming you want *. As for relationships this is done in two ways.</p>\n\n<p><strong>Lazy-Loading</strong> - When you call $article-&gt;comments in PHP for example, the ORM can fire a __get() and see that comments is not set. It&#39;ll then realise it has a join and can sy &quot;oh crp, I&#39;d better go find some comments for this article!&quot;. That is <em>amazing</em> for Rapid Application Development, but of course is pretty inefficient. That is why any decent ORM will have...</p>\n\n<p><strong>Eager-Loading</strong> - You can see an example of eager loading in the code-block above. I told the ORM that not only did I want a User record, but I was going to want to load up the Profile, all related Articles and the users Friends too. That will make the ORM run off and build up one whapping massive query that will be cut, sliced, diced and formatted in exactly the way I would expect - an object for user and profile, and articles &amp; friends are an array of objects containing only the relevant data.</p>\n\n<blockquote>\n<p>Many ORM layers are also notably bad at deducing joins, and will fall back to dozens of individual queries for related objects. As I mentioned earlier, many ORM layers explicitly state that efficiency is being sacrificed, and some provide a mechanism to tune troublesome queries. The problem, I have discovered with experience, is that there is seldom a single &quot;magic bullet&quot; query that needs to be optimized: the death of database-backed applications is not the efficiency of any one query, but the number of queries. ORM&#39;s lack of context-sensitivity means that it cannot consolidate queries, and must fall back on caching and other mechanisms to attempt to compensate.</p>\n</blockquote>\n\n<p>Well only if the ORM is a piece of junk. I mentioned earily how lazy loading is great for RAD, well that is me all over. Bash together a prototype for the investors/testers/indecisive client, etc then make something slick and efficient later. I was working on <a href=\"http://travlrapp.com/philsturgeon/usa-canada-2011\">TravlrApp</a> and noticed that the page was running slowly. Sure its got a lot of data, but I noticed I was missing any eager loading. This meant that the ORM was making about 400 queries on a page... :-/</p>\n\n<p>I popped a few eager load references in and BAM, it made some crazy SQL for me like so:</p>\n\n{{ prism:syntax }}\n  Trip Load (4.4ms)  SELECT &quot;trips&quot;.* FROM &quot;trips&quot; WHERE (&quot;trips&quot;.user_id IN (19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,..........,346,347,348,349,350,351,352,353,354,355,356,357,358,360,361) AND (&quot;trips&quot;.&quot;started&quot; = &#39;t&#39; AND &quot;trips&quot;.&quot;completed&quot; = &#39;f&#39;))\n  Trip Load (0.8ms)  SELECT &quot;trips&quot;.* FROM &quot;trips&quot; WHERE (&quot;trips&quot;.user_id = 19 AND (&quot;trips&quot;.&quot;started&quot; = &#39;t&#39; AND &quot;trips&quot;.&quot;completed&quot; = &#39;f&#39;)) LIMIT 1\n  SQL (0.4ms)  SELECT COUNT(*) FROM &quot;users&quot; INNER JOIN &quot;friendships&quot; ON &quot;users&quot;.id = &quot;friendships&quot;.user_id WHERE ((&quot;friendships&quot;.friend_id = 19) AND ((accepted_at IS NULL)))\n  Marker Load (0.8ms)  SELECT &quot;markers&quot;.* FROM &quot;markers&quot; WHERE &quot;markers&quot;.&quot;id&quot; = 16 LIMIT 1\n  CACHE (0.0ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = 19 LIMIT 1\nRendered home/_activity.html.erb (40.1ms)\nRendered layouts/partials/_metadata.html.erb (4.7ms)\nRendered layouts/partials/_header.html.erb (7.5ms)\n  User Load (93.6ms)  SELECT &quot;users&quot;.&quot;id&quot; AS t0_r0, &quot;users&quot;.&quot;email&quot; AS t0_r1, &quot;users&quot;.&quot;encrypted_password&quot; AS t0_r2, \n&quot;users&quot;.&quot;password_salt&quot; AS t0_r3, &quot;users&quot;.&quot;reset_password_token&quot; AS t0_r4, &quot;users&quot;.&quot;remember_token&quot; AS t0_r5, \n&quot;users&quot;.&quot;remember_created_at&quot; AS t0_r6, &quot;users&quot;.&quot;sign_in_count&quot; AS t0_r7, &quot;users&quot;.&quot;current_sign_in_at&quot; AS t0_r8, \n&quot;users&quot;.&quot;last_sign_in_at&quot; AS t0_r9, &quot;users&quot;.&quot;current_sign_in_ip&quot; AS t0_r10, &quot;users&quot;.&quot;last_sign_in_ip&quot; AS t0_r11, \n&quot;users&quot;.&quot;created_at&quot; AS t0_r12, &quot;users&quot;.&quot;updated_at&quot; AS t0_r13, &quot;users&quot;.&quot;username&quot; AS t0_r14, \n&quot;users&quot;.&quot;first_name&quot; AS t0_r15, &quot;users&quot;.&quot;last_name&quot; AS t0_r16, &quot;users&quot;.&quot;website&quot; AS t0_r17, &quot;users&quot;.&quot;bio&quot; AS \nt0_r18, &quot;users&quot;.&quot;admin&quot; AS t0_r19, &quot;users&quot;.&quot;total_distance_traveled&quot; AS t0_r20, &quot;users&quot;.&quot;invitation_code&quot; AS t0_r21, \n&quot;users&quot;.&quot;num_invites&quot; AS t0_r22, &quot;users&quot;.&quot;address_1&quot; AS t0_r23, &quot;users&quot;.&quot;address_2&quot; AS t0_r24, \n&quot;users&quot;.&quot;town&quot; AS t0_r25, &quot;users&quot;.&quot;city&quot; AS t0_r26, &quot;users&quot;.&quot;country_id&quot; AS t0_r27, &quot;users&quot;.&quot;postcode&quot; \nAS t0_r28, &quot;users&quot;.&quot;home_marker_id&quot; AS t0_r29, &quot;users&quot;.&quot;current_marker_id&quot; AS t0_r30, &quot;users&quot;.&quot;last_seen_marker_id&quot; AS t0_r31, \n&quot;trips&quot;.&quot;id&quot; AS t1_r0, &quot;trips&quot;.&quot;name&quot; AS t1_r1, &quot;trips&quot;.&quot;slug&quot; AS t1_r2, &quot;trips&quot;.&quot;description&quot; AS t1_r3, \n&quot;trips&quot;.&quot;user_id&quot; AS t1_r4, &quot;trips&quot;.&quot;created_at&quot; AS t1_r5, \n&quot;trips&quot;.&quot;updated_at&quot; AS t1_r6, &quot;trips&quot;.&quot;start_date&quot; AS t1_r7, &quot;trips&quot;.&quot;end_date&quot; AS t1_r8, \n&quot;trips&quot;.&quot;last_place_id&quot; AS t1_r9, &quot;trips&quot;.&quot;distance_traveled&quot; AS t1_r10, &quot;trips&quot;.&quot;started&quot; AS t1_r11, \n&quot;trips&quot;.&quot;completed&quot; AS t1_r12, &quot;trips&quot;.&quot;is_private&quot; AS t1_r13 FROM &quot;users&quot; LEFT OUTER JOIN &quot;trips&quot; ON \n&quot;trips&quot;.&quot;user_id&quot; = &quot;users&quot;.&quot;id&quot; AND &quot;trips&quot;.&quot;started&quot; = &#39;t&#39; AND &quot;trips&quot;.&quot;completed&quot; = &#39;f&#39; \nWHERE &quot;users&quot;.&quot;id&quot; IN (25, 21, 105, 110, 111, 124, 158, 242, 189, 262, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, \n314, 315, 316, 317, 318, 319, 320, 322, 323, 19, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 208, 296, 211, 210, 232, 234, ............... 288, 281, 282, 283, 287, 284, \n290, 285, 280, 291, 89) AND (trips.id &gt; 0) ORDER BY users.username\nRendered home/_dashboard_sidebar.html.erb (126.6ms)\n  SQL (0.2ms)  SELECT COUNT(*) FROM &quot;users&quot;\nRendered layouts/partials/_footer.html.erb (1.6ms)\nRendered home/dashboard.html.erb within layouts/application (266.8ms)\nCompleted 200 OK in 4170ms (Views: 174.4ms | ActiveRecord: 3411.5ms)\n{{ /prism:syntax }}\n\n<p>As I said before, I don&#39;t care how it&#39;s all working internally as long as it works well - and this is awesome! This is two pretty speedy queries instead of essentially infinite queries. I could have made it all into one query, but as the article mentions it&#39;s not about making one super-dooper query and often two small ones are quicker.</p>\n\n<h3>OK, So like OMGZ?!</h3>\n\n<p>Well no. One thing I agree with in this article - and with most ORM naysayers - is that using ORM all the time for everything is obviously ridiculous. ORM is around as a RAD tool to help you get things done quicker. A phrase that I find myself having to say far too often is&nbsp; &quot;doing more stuff takes longer&quot;, which means &quot;yes, ORM does use more memory than native SQL&quot; but that does not make it evil and bad.</p>\n\n<p>If you are using a decent ORM then I see no reason why your application would fall over or perform badly unless you wrote it wrong.</p>\n\n<p>Sure if you are developing a site that is going to have 6 squillion users logging in every second then you are probably going to find ORM being a bottleneck, but at that point I would recommend either using Stored Procedures instead of SQL in your PHP, or maybe even switch to an even more performant database engine.</p>\n\n<h3>So... which would you suggest?</h3>\n\n<p>ORMs I consider to be worth a try are mainly ones built specifically for a framework. This removes a lot of the bloat as the framework itself contains a lot of the code that something like Doctrine would end up duplicating.</p>\n\n<ul>\n\t<li><a href=\"http://guides.rubyonrails.org/active_record_querying.html\" target=\"_blank\">ActiveRecord</a> (Rails)</li>\n\t<li><a href=\"http://fuelphp.com/docs/packages/orm/crud.html\">ORM</a> (FuelPHP - not blowing my own horn, this excellent ORM was made entirely by Jelmer and Dan)</li>\n\t<li><a href=\"http://datamapper.wanwizard.eu/\">DataMapper</a> (CodeIgniter)</li>\n</ul>\n\n<h3>Summary</h3>\n\n<p>ORM is development on crack. You&#39;ll get things done quicker and as long as you don&#39;t pick a fatty you&#39;ll have a good time. Use it to make your web applications quickly and if you end up getting that Angel Investor to give you $10 million for &quot;SquareFaceTwitPile&quot; then you can probably afford to hire somebody to spend all day tweaking the last 0.00000002% of performance out of the application for v2.0 while you are sipping Mai Tais on a yacht somewhere.</p>",
    "created_on": "1308176460",
    "updated_on": "1308176460",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "html",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "103",
    "created": "2011-08-24 03:22:00",
    "updated": "2011-08-27 17:37:56",
    "created_by": "0",
    "ordering_count": null,
    "title": "Nomadic Web Development",
    "slug": "nomadic-web-development",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tAnyone following me on Twitter will have seen tweets coming in from all-over the place for the last few months. Am I on holiday? Nope! I&#39;ve spent the last 4 months traveling USA and Canada doing a bit of work here and there. With freelance, a passive income and some training sessions here and there I am actually making a profit on traveling the world. A few friends wanted to know more so they could do it themselves, so how can you?</p>",
    "body": "<p>\n\tAnyone following me on Twitter will have seen tweets coming in from all-over the place for the last few months. Am I on holiday? Nope!<img alt=\"Backpack\" class=\"pyro-image\" src=\"/uploads/default/files/249340_10150242840546256_511501255_7917128_729200_n.jpg\" style=\"width: 200px; float: right; padding: 10px 0 10px 10px\" /></p>\n<p>\n\tOver the last few years I&#39;ve worked at a few jobs, from a massive stock brokers with a 650+ workforce and a 40-man development team to a 3-man web shop and while the people were brilliant I am just not cut out to work in an office. Fixed hours and the monotony of being in the same place every day drives me drives me insane and the red-tape and middle-management found in larger companies makes me want to go postal.</p>\n<p>\n\tI started my career working for myself and that is how I prefer it, but working from home can be even worse than working from an office. Whole days can go by just sat in my flat working and that is no way to spend your life.</p>\n<p>\n\tSo! A new approach needed to be found and this one works.</p>\n<p>\n\tI&#39;ve spent the last few months traveling North America: two in the states, two in Canada and with occasional freelancing, a small passive income from PancakeApp, PyroCMS sales and cheap or free accommodation I am actually earning half the amount I made back home and still breaking even - or better.<span style=\"font-weight: bold;\"> How?</span></p>\n<h3>\n\tAccommodation</h3>\n<p>\n\tHostels on average charge between $16 and $45 with the average being about $27 for a dorm room. Back home I was paying &pound;550 in rent about &pound;300 on bills / tax and I wasn&#39;t even living in an expensive area.</p>\n<table border=\"0\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t<strong>Hostels</strong></td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t<span class=\"st\">&pound;15</span> ($27)</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\tx</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t30 (nightly)</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t=</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t<span class=\"st\">&pound;</span>450</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t<strong>Renting</strong></td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t<span class=\"st\">&pound;</span>550</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t+</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t<span class=\"st\">&pound;</span>300</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t=</td>\n\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t<span class=\"st\">&pound;850</span></td>\n\t\t</tr>\n\t</tbody>\n</table>\n<p>\n\tThe entire time I have been traveling I have not had a single bad experience in a hostel, be it theft or violence. You always hear stories of people getting things taken but if you keep your valuables hidden, locked away or on you during the day its hard for things to go missing. On the whole people who stay in hostels are open minded, easy-going individuals who want to meet people to have a beer with, not thieving <a href=\"http://en.wikipedia.org/wiki/Pikey\" target=\"_blank\">pikeys</a> who want to steal your phone.</p>\n<h3>\n\tWorking</h3>\n<p>\n\tMost hostels - unlike plenty of hotels - give you free Wi-Fi. This Wi-Fi can often be a bit flaky in the rooms depending on the size of the place, but there is always some common room or shared area that gets a decent connection. Failing that <img alt=\"Getting it done up a mountain\" class=\"pyro-image\" src=\"/uploads/default/files/250261_10150246140066256_511501255_7951942_512191_n.jpg\" style=\"float: right; padding: 10px 0 10px 10px\" width=\"200px\" /> you can always wander off to a bar/Starbucks and get some work done which is often a nice change of scenery and involves lots of beer/coffee.</p>\n<p>\n\tI found it pretty hard to get work done in some places because most people in hostels are just out to have fun. I&#39;d constantly be invited out mountain biking, to join a group at a bar, etc. It&#39;s a good problem to have but finding the time to get things done is important. On the flip-side if a place is totally empty you&#39;ll end up getting bored and wander off around town. If you&#39;re easily tempted away from work like me then try renting a few nights in a motel or private room now and then so you can be by yourself.</p>\n<h3>\n\tBudget</h3>\n<p>\n\tIn general I found that $100 a day was enough to keep going, which meant I only needed to work every third day, leaving time for getting between places and some time for fun. I make a few assumptions but my calculation is:</p>\n<ul>\n\t<li>\n\t\t8 hours work</li>\n\t<li>\n\t\tHourly rate of &pound;25 = &pound;200</li>\n\t<li>\n\t\tRoughly converted: $325</li>\n</ul>\n<p>\n\tA daily budget of $100 may seem high or low to some. I&#39;ve met people traveling for over a year that have a budget of a few bucks a day - enough to buy some pasta - and I&#39;ve met people traveling for much less time who blast through their money like it was stolen. The idea is that we&#39;re living and spending in balance so we can spend this reasonable amount daily by splitting up our days into a three-day cycle:</p>\n<p style=\"margin-left: 40px;\">\n\t<strong>Day 1:</strong> Pay up x3 nights in a hostel, grab some beers and relax or get some work done.</p>\n<p style=\"margin-left: 40px;\">\n\t<strong>Day 2: </strong>Explore town in the day, climb something, swim somewhere, do something awesome. In the evening take your stuff home and hit the bars.</p>\n<p style=\"margin-left: 40px;\">\n\t<strong>Day 3:</strong> Recover and work, or get your Greyhound to the next place.</p>\n<p>\n\tThe more money you can save up before you go the better, but I did this just by taking my last pay-check and hoping on a plane.</p>\n<h3>\n\tSaving money</h3>\n<p>\n\tThere are loads of ways to save money and stretch your budget so you can a) have more fun or b) do less work.</p>\n<ul>\n\t<li>\n\t\tStay with friends and Twitter people<img alt=\"Up a mountain - one of many\" class=\"pyro-image\" src=\"/uploads/default/files/198765_10150242901801256_511501255_7918105_1397795_n.jpg\" style=\"width: 200px; float: right; padding: 10px 0 10px 10px\" /></li>\n\t<li>\n\t\t<a href=\"http://www.couchsurfing.org/\">CouchSurfing.com</a> - stay with a hippy</li>\n\t<li>\n\t\tClimb a mountain - its free!</li>\n\t<li>\n\t\tKill a book</li>\n\t<li>\n\t\tTalk to locals - in some small towns they&#39;ll be really impressed and buy you beers (because you obviously can&#39;t afford it)</li>\n\t<li>\n\t\tEat CHEAP - grab a loaf of bread and some ham for $4 and it&#39;ll last two days</li>\n\t<li>\n\t\tTeach - if you&#39;re a good developer you can probably help others learn. Line up some training sessions for cash-in-hand money</li>\n</ul>\n<h3>\n\tKeeping your cash-flow</h3>\n<p>\n\tCash-flow for me was the biggest problem. In Santa Fe, New Mexico one card was out of cash and another was being declined and I&#39;m stuck with a taxi driver who wants some money. After driving me around to 10 ATM&#39;s the taxi driver decides his next logical move is to call the Police! A spot of luck has him park in McDonalds car-park and I desperately hop on their Wi-Fi and Skype-call the bank with the last 10% of my battery life. After the most stressful &quot;on-hold&quot; of my life we get it worked out, I pay and run away to the Greyhound station. Sure I missed my Greyhound and had to wait 14 hours for the next one, but I was happy to not be with the cops.</p>\n<p>\n\tIt would be bad enough if that was the only problem I had, but it was one of many. It doesn&#39;t matter what you tell the bank - they will decline your shit for no reason. I told HSBC I was planning to travel all over the States for 4 months, which is specifically why I wanted an account with them. The account manager put notes on my personal and business accounts and said it would be fine, but that didn&#39;t stop them flagging and declining my cards at random every few weeks. The real solution here is to get a Pre-Paid Credit Card which will work in the States and can be topped up from back home or online. This should save a lot of the hassles.</p>\n<p>\n\tFailing that just take as many cards as you can. Splitting your money over different cards (I had 3 - two Visas and a Mastercard) and it meant that at least one of my cards would always be active. Wether it had money or not.... that&#39;s a different story!</p>\n<p>\n\tOf course a blog article from Phil Sturgeon wouldn&#39;t be the same without a complaint about PayPal:</p>\n<ol>\n\t<li>\n\t\tClients pay me on PayPal</li>\n\t<li>\n\t\tI withdraw the money</li>\n\t<li>\n\t\tPayPal locks my account</li>\n\t<li>\n\t\tI unlock my account</li>\n\t<li>\n\t\tRepeat x20</li>\n\t<li>\n\t\tIncoming money is now on hold for 21 days due to suspicious activity.</li>\n</ol>\n<p>\n\tHow do those jerk-wads still trade?</p>\n<h3>\n\tTravel</h3>\n<p>\n\tGreyhound is a network of coaches/busses that covers USA &amp; Canada and... it is a challenge, not only of your ability to deal with lazy uncaring staff, but it will test your personality and ability to sleep in cramped seats with fat people asleep on your shoulder, and your ability to function without any sleep at all.</p>\n<p>\n\tIf you&#39;ve heard about the Greyhound before: everything you&#39;ve heard is true. It&#39;s used predominantly by ex-cons fresh out of jail with a free pass, ex-mental patients and the poorest &amp; fattest of the population. That said for $550 you can pick up a two month pass to go anywhere, as much as you like in the USA &amp; Canada.</p>\n<p>\n\tThere is a myth floating around that the Greyhound fleet has been upgraded to have power sockets and Wi-Fi. I was pretty excited when I heard this as 19 hours on a bus would mean two billable days worth of work and more time for fun when I got off. Sadly this was not the case. 200 new buses is a drop in the ocean and they are mainly used for shorter trips around New York, Philly and Washington DC. Out of the 40+ Greyhounds I took all but two of them were shit in the 80&#39;s.</p>\n<p>\n\tI have enough crazy stories about the Greyhound to fill a book, but suffice it to say it&#39;s an experience. Take a book and notepad to keep you busy. Take a hoody or a fleece too because overnight it gets bloody cold and no matter what the temperature the A/C is always cranked up to 11!</p>\n<p>\n\tIf you want to avoid the Greyhound entirely: SouthWest airlines are pretty damn cheap, but that&#39;s not going to be as cheap as the bus.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tThere are a few pit-falls such as being cut off from money, getting lost, etc but as long as you withdraw enough cash for a few days at a time, write down addresses and phone numbers of taxi companies and the hostel you are heading to before you get on the bus and keep some emergency beef jerky in your bag at all times then most things will be great.</p>\n<p>\n\tIf I could remember to do all that, drink a little less and work a little more I could happily do this forever.</p>\n<p>\n\tI decided to call it a day on the state-side leg of my wandering and come back to England after <a href=\"http://cicon2011.com/\">CICON2011</a> in NYC as the plane was already booked, but I&#39;m still going. I have 3 weeks in London to get some work done with a friend then off to Newcastle for 3 months to take part in a start-up competition which has some nice investment already.</p>\n<p>\n\tHomeless and loving it!</p>",
    "created_on": "1314156120",
    "updated_on": "1314466676",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "104",
    "created": "2011-08-17 19:39:00",
    "updated": "2011-08-17 20:36:34",
    "created_by": "0",
    "ordering_count": null,
    "title": "Video: Pancake 3.1 overview",
    "slug": "video-pancake-3.1-overview",
    "category_id": "10",
    "attachment": "",
    "intro": "<p>\n\tWe&#39;ve been working hard on <a href=\"http://pancakeapp.com/\">PancakeApp</a> - a CodeIgniter-based Invoicing system - and it&#39;s getting to be a real power-house of features. This is turning out to be more of a &quot;Freelancers Side-kick&quot; with not just invoicing but project management, time tracking and the starting of some great CRM features. The video is about 11 minutes but it&#39;s worth it so please take a look. In the mean-time I will be working on Milestones and Call Logs.</p>",
    "body": "<p>\n\tWe&#39;ve been working hard on <a href=\"http://pancakeapp.com/\" target=\"_blank\">PancakeApp</a> - a CodeIgniter-based Invoicing system - and it&#39;s getting to be a real power-house of features. This is turning out to be more of a &quot;Freelancers Side-kick&quot; with not just invoicing but project management, time tracking and the starting of some great CRM features. The video is about 11 minutes but it&#39;s worth it so please take a look. In the mean-time I will be working on Milestones and Call Logs.</p>\n<p>\n\t<iframe frameborder=\"0\" height=\"434\" src=\"http://player.vimeo.com/video/27828942\" width=\"651\"></iframe></p>\n<p>\n\tIf you like the look of <a href=\"http://pancakeapp.com/\" target=\"_blank\">PancakeApp</a> then take a look at the site for more information. I&#39;m not just another guy selling another product, I generally think PancakeApp is a brilliant addition to any freelancer or small businesses armoury of software. I used to use an application for Invoicing, one for Project Management and another for Time Tracking, all of which cost a download free or a monthly subscription. PancakeApp does the lot and once it&#39;s downloaded you never have to pay again. Hell you never even have to UPGRADE again, it does it for you as soon as a new version comes out with <a href=\"http://pancakeapp.com/blog/entry/pancake_gets_a_life_of_its_own\" target=\"_blank\" title=\"Read more about Auto-Upgrading\">the auto-updater</a>.</p>\n<p>\n\tI have set up a discount code for the first 10 sales to save you the price of a good beer. The code is &quot;have_a_beer_0811&quot; and will knock $7 off the download price. <a href=\"http://pancakeapp.com/\">Go grab it</a>!</p>\n<p>\n\tWebsite: <u><a href=\"http://pancakeapp.com/\" target=\"_blank\">PancakeApp.com</a></u></p>",
    "created_on": "1313609940",
    "updated_on": "1313613394",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "105",
    "created": "2011-08-27 10:05:00",
    "updated": "2011-08-27 17:55:12",
    "created_by": "0",
    "ordering_count": null,
    "title": "CICON2011 and the future of CodeIgniter",
    "slug": "cicon2011-and-the-future-of-codeigniter",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tCICON2011 happened and it was awesome. We had 100 CodeIgniter nerds in the same place - which is the biggest collection of nerds since CICON2010 in the UK, but this event was so much better. We had a whole load of announcements that have changed the way the framework is contributed to and improved the whole community for the better. This is not me blowing smoke up my backside, but feedback I have had from attendees. So, what did you miss?</p>",
    "body": "<p>\n\t<img alt=\"CICON Banner\" class=\"pyro-image\" src=\"/uploads/default/files/6067761331_afa0ab6d4e.jpg\" style=\"float: right; width: 287px; height: 189px; padding: 10px 0 10px 10px\" />CICON2011 happened and it was awesome. We had 100 CodeIgniter nerds in the same place - which is the biggest collection of CI nerds since 54 at CICON2010 in the UK, but this event was so much better. We had a whole load of announcements that have changed the way the framework is contributed to and improved the whole community for the better. This is not me blowing smoke up my backside, but feedback I have had from attendees. So, what did you miss?</p>\n<h3>\n\tMoving to GitHub</h3>\n<p>\n\tBooyeah! There&#39;s a whole official blog about why they moved, but I am so happy about this. I was maintaining a mirror for CodeIgniter on my GitHub profile and it got up to 55&nbsp; pull requests. BitBucket... not so much.</p>\n<p>\n\tWe&rsquo;ve in the space of a few days got onto the GitHub &ldquo;Most Watched&rdquo; list for PHP and we&rsquo;re ranking pretty high.</p>\n<p>\n\tWe also have 22 active pull requests, all for useful bugs!</p>\n<h3>\n\tCodeIgniter Core and Reactor have merged</h3>\n<p>\n\tThere was some confusion in the community about which branch people should use. Core was just what EllisLab to keep ExpressionEngine going, so if a valid bug-fix came in that would cause an issue with ExpressionEngine it would not be included. The Reactor team is populated by people who use CodeIgniter for multiple applications on a daily basis, so the 6 of us were fixing a lot more bugs.</p>\n<p>\n\tWhile some have said they liked the fact that Core was slow moving, it was slow moving because there was barely anything happening. Look back at the speed in which things were being improved in the old 1.7.x days, then look at the <a href=\"http://codeigniter.com/user_guide/changelog.html\">change-log</a> and look out for all the changes with a green tick. They are all valid fixes made by the Reactor team - so clearly having this as the main and only branch is of benefit.</p>\n<h4>\n\tExample 1</h4>\n<p>\n\tSOME PDF&rsquo;s (I noticed on the UK TV License receipt) would have the MIME type wrapped with &rdquo; marks, which would be escaped. Meaning it was essentially saying:</p>\n<pre class=\"code php\">\nif (&quot;application/pdf&quot; == &#39;\\\\\\&quot;application/pdf\\\\\\&quot;&#39;) </pre>\n<p>\n\tThat fix took me TWO DAYS to resolve, but I&rsquo;m glad I did as nobody else is going to get stuck with it. That is in Reactor. I met Derek Allard (an ex EllisLab employee) on my travels and it turns out he knew about the fix two years ago, but it got lost in the sea of forum posts and he didn&#39;t remember to look for it or fix the bug. Now we have issues to track these things properly and pull requests where people can send in their own fixes, instead of dumping code into the forums. Brilliant!</p>\n<h4>\n\tExample 2</h4>\n<p>\n\tYesterday I had a client complain that thumbnails were not uploading and the &ldquo;GD not installed&rdquo; error was being returned. This was not a fault with GD, but it was a suppressed notice cascading through the logic and returning a false error. Really the path could not be read to the image, but it was saying GD not installed. That is MESSED UP, but fixed via Reactor.</p>\n<p>\n\tI wanted to be on the Reactor team purely so I could fix things when I notice them. I code with CodeIgniter every day and have done for over four years, so I want to fix bugs that annoy me. Now that we are on GitHub everyone can send in pull requests for bugs that annoy them, so we&rsquo;re all able to help out. The best people to fix a bug are those that have found it and now you can!</p>\n<p>\n\tReactor is about enabling the community to make this framework more stable and awesome, NOT about a bunch iof cowboys adding in random shit for fame and fortune. I hope you can see this with the new approach: i.e Git-Flow and Unit Testing.</p>\n<p>\n\tPeople in the core team didn&#39;t spot these, because they are using the framework to make one app. They are making one great app, but they aren&#39;t doing EVERYTHING with it in the same way we all are. We all do crazy different stuff and notice different things, so we can all find and fix more bugs than they can. Oracle&#39;s broken? It probably is, but I&#39;ll be f**ked if I have Oracle on my computer.</p>\n<h3>\n\tSparks are being merged into 2.1</h3>\n<p>\n\tThe <a href=\"http://getsparks.org/\" target=\"_blank\">GetSparks.org</a> project is a wonderful repository for libraries. This beats the hell out of the wiki, Googling for random blogs, finding random zips, downloading, extracting, hoping it works with your version, etc. It simply has a Spark (which is essentially a Application Package) and it can be installed manually via a .zip, or it can be installed with a really simple command in the terminal.</p>\n<p>\n\tThe benefit we have here is that it will avoid us bloating CodeIgniter with weird and wonderful features. Case study: ORM.</p>\n<p>\n\tYou want ORM in the core? Well which? Should it be Doctrine2, DataMapper, Propel, ActiveRecord, or should we all randomly start making one for free and freeze all development on CodeIgniter itself because all of our time is going on an ORM and we can&#39;t afford to feed our families?</p>\n<p>\n\tWell, none of those problems exist now because we can just type:</p>\n<blockquote>\n\tphp tools/spark install -v1.0.0 doctrine2</blockquote>\n<p>\n\tThis is awesome! No longer do we have to pick, we can install doctrine2, php-activerecord, or DataMapper-ORM packages with one command, and we know it&#39;ll work with our version of CodeIgniter.</p>\n<blockquote>\n\t&quot;Well why on earth are we re-writing package management instead of using PEAR?&quot;</blockquote>\n<p>\n\tI&#39;ve been asked this 100 times and it seems like a fair question, but there are two fundamental differences between PEAR and our approach.</p>\n<p>\n\tPEAR is package management software that will install PHP classes system-wide. This is very similar to Ruby GEMS which DO MY HEAD IN, in that when I upgrade a Gem in one location it upgrades all my applications, which can create cross dependency hell. Gem A requires a newer version of Gem B which does not work with Gem C. Shit, my application doesn&#39;t work until Developer C releases a patch... Um...</p>\n<p>\n\tSparks is a great way to install code into your application. It works just like you do, but saves the hassle of Google, Download, Unzip, move things around, test. Just one command and Application 1 has Package A, which might require Package B v2.1 but Application 2 can happily have Package B v1.0 without anything having problems.</p>\n<h3>\n\tMoving forwards</h3>\n<p>\n\tWe have plans for the future. 2.0.2 was a failure for a few reasons, mainly that the team were forced to use Mercurial - which we are all pretty weak with. Most of us were dumping code in now and than that might not have been perfectly tested - or even finished. For this reason when the Core team had a hotfix nobody was ready and none of the Reactor team were even contacted about it!</p>\n<p>\n\t2.0.2 was broken and this came down to three main things:</p>\n<ol>\n\t<li>\n\t\tNo branch control</li>\n\t<li>\n\t\tPoor communication</li>\n\t<li>\n\t\tNo version planning</li>\n</ol>\n<p>\n\tHow are we sorting this out?</p>\n<ol>\n\t<li>\n\t\tWe now use <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">Git-Flow </a></li>\n\t<li>\n\t\tAll changes are discussed on the pull request / issue, then fired to Basecamp so EllisLab and other Engineers have first refusal.</li>\n\t<li>\n\t\t<a href=\"https://github.com/EllisLab/CodeIgniter/issues/milestones\" target=\"_blank\">Milestones</a>! Issues are attached to versions, and changes are merged into version branches. This gives the community a Roadmap which we have never had before.</li>\n</ol>\n<p>\n\tSo, all of the problems we&#39;ve had in the past are gone. Combine that with the nearly-ready Unit Tests and the future is looking stable.</p>\n<h3>\n\tPositivity in the Community</h3>\n<p>\n\tWhen people were trickling off on the Sunday I had the oppertunity to one-on-one with a lot of people who were all really enthusiastic. Nobody tried to sneak away and nobody had any negative comments: everyone I spoke to said something along the lines of &quot;Man, I can&#39;t wait to get home and fix some bugs!&quot;. That. Is. Amazing.</p>\n<p>\n\tBy the end of the event we were up to 30 contributors on the Git repo, now it&rsquo;s up to 35.</p>\n<p>\n\tCodeIgniter just got a shot of adrenaline right in the face and I hope this positivitiy continues. So far only one person has complained (guess who - his name starts with a &quot;w&quot;) and he has yet to send a single pull request. If you think we&#39;re doing it wrong, tell us. If you can do better, show us with code.</p>\n<p>\n\t<u>Photos</u></p>\n<p>\n\tKyle Farris: <a href=\"http://www.flickr.com/photos/kylefarris/sets/72157627489315606/\" target=\"_blank\">CICON2011</a></p>\n<p>\n\t<u>Write-ups</u></p>\n<p>\n\tAdam Fairholm: <a href=\"http://blog.adamfairholm.com/thoughts-on-cicon2011/\" target=\"_blank\">Thoughts on CICON2011</a><br />\n\tFrank Michel: <a href=\"http://www.frankmichel.com/blog/article/cicon2011\" target=\"_blank\">CICON2011</a><br />\n\tGreg Aker: <a href=\"http://www.gregaker.net/2011/aug/22/codeigniter_conference_2011_roundup/\" target=\"_blank\">CodeIgniter Conference 2011 Roundup</a></p>",
    "created_on": "1314439500",
    "updated_on": "1314467712",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "106",
    "created": "2011-09-02 16:14:00",
    "updated": null,
    "created_by": "0",
    "ordering_count": null,
    "title": "fuel v ci",
    "slug": "fuel-v-ci",
    "category_id": "0",
    "attachment": "",
    "intro": "<p>\n\tsdf</p>",
    "body": "<p>\n\tCodeIgniter is a brilliantly simple framework that does the job really well. It is quick, efficient, has a massive community and a really low barrier to entry so any bugger can pick up a project written in CI and write features in. I run a few projects both open source and commercial in CodeIgniter and I love the fact that somebody can write a module for them with next to no prior experience.</p>\n<p>\n\tFor a little while many of the active members of the community got a little fed up with the progress of CI. For almost 2 years the framework barely moved forward and other frameworks raced ahead with PHP5.2/.5.3 specific features while CodeIgniter was stuck supporting PHP4.</p>\n<p>\n\tAs a result of that FuelPHP was born, which is another great framework for a slightly different audience. It takes what we know and love from CodeIgniter , adds some of Kohana&#39;s great cascading file system ideas, uses an autoloader similar to theirs and takes a few ideas from Rails in the way that the command line utility &quot;oil&quot; works. We&#39;ve added migrations, scaffolding, package management, namespace support for modules and all sorts of other things that would feel really out of place in CodeIgniter.</p>\n<p>\n\tNow that CodeIgniter 2.0 has started the Reactor community version (the suggested version for people to use, verses EllisLab&#39;s &quot;Core&quot; version which they use for ExpressionEngine/MojoMotor and not much else) change is happening at a much better pace.</p>\n<p>\n\tSo now we have two options; CodeIgniter for really really simple, &quot;low barrier to entry&quot; and easy to use development, verses some PHP 5.3-only, Kohana/Rails inspired awesomeness that will still feel like home to anyone familiar with CodeIgniter.</p>\n<p>\n\thttp://www.reddit.com/r/webdev/comments/fmy6i/why_is_fuelphp_better_than_codeigniter/</p>",
    "created_on": "1314980040",
    "updated_on": "0",
    "status": "draft",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "107",
    "created": "2011-09-25 11:09:00",
    "updated": "2011-09-25 15:54:09",
    "created_by": "0",
    "ordering_count": null,
    "title": "Managing CodeIgniter Packages with Git Submodules",
    "slug": "managing-codeigniter-packages-with-git-submodules",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tWith CodeIgniter moving to GitHub we are starting to see a lot of CodeIgniter developers wanting to learn more about Git, specifically how they can use it to improve their workflows, manage their applications and move away from the horrible days of copying and pasting updated libraries off a wiki. UCK. Sparks are helping us on the whole, but there is another method that we can use to manage our packages: Git Submodules.</p>",
    "body": "<p>\n\tWith CodeIgniter moving to GitHub we are starting to see a lot of CodeIgniter developers wanting to learn more about Git, specifically how they can use it to improve their workflows, manage their applications and move away from the horrible days of copying and pasting updated libraries off a wiki. UCK. Sparks are helping us on the whole, but there is another method that we can use to manage our packages: Git <a href=\"http://book.git-scm.com/5_submodules.html\" target=\"_blank\">Submodules</a>.</p>\n<p>\n\tFor those who have not heard of submodules in Git, I&#39;ll let the Git Book explain it:</p>\n<blockquote>\n\t<pre id=\"line38\">\nGit&#39;s submodule support allows a repository to contain, as a subdirectory, a\ncheckout of an external project.  Submodules maintain their own identity;\nthe submodule support just stores the submodule repository location and\ncommit ID, so other developers who clone the containing project\n(&quot;superproject&quot;) can easily clone all the submodules at the same revision.\nPartial checkouts of the superproject are possible: you can tell Git to\nclone none, some or all of the submodules.</pre>\n</blockquote>\n<p>\n\tGreat! So we can have our main application and other little packages can be installed as submodules which have their own repositories.</p>\n<h3>\n\tWhy bother?</h3>\n<p>\n\tIt&#39;s a good question. This all sounds like a lot of extra work but if like me you are working on 5 different applications at any one time you might have started to notice something:</p>\n<p>\n\tIn each project you work on your are probably creating libraries or packages that can be used in multiple places. For example I recently built the <a href=\"https://github.com/philsturgeon/codeigniter-oauth2\">oauth2</a> package which I was using in two diferent applications. These were totally different applications for different clients on different servers and there was no way I could get away with symlinking, sharing folder structures, etc and I noticed that if i fixed a bug in one location I would have to copy it over to the other application. If I had 10 projects using the oauth2 package that would be a LOT of copying and pasting with huge potential for pooching the system.</p>\n<p>\n\tEven if you are not in a situation where you need to copy between applications, you want to release your code to the world without having to copy it to a special &quot;oauth2&quot; folder which just contains those specific files. This is how I was releasing code for years: copy and paste. Bah!</p>\n<p>\n\tInstead I created a new repo on GitHub for the oauth2 package, pushed my files in and set it up as a submodule in my clients application:</p>\n<pre class=\"code bash\">\n$ cd Sites/example.com/\n$ git submodule add git://github.com/philsturgeon/codeigniter-oauth2.git application/third_party/oauth2</pre>\n<p>\n\tSo we&#39;ve put this into our application/third_party folder, but this could just as easily have been in application/packages if you prefer the name. Whatever - the autoload.php config file can be changed to have whatever directory you want:</p>\n<pre class=\"code php\">\n$autoload[&#39;packages&#39;] = array(APPPATH.&#39;third_party&#39;);</pre>\n<p>\n\tNow we need to commit this so other developers have access to the code:</p>\n<pre class=\"code bash\">\n$ git status\n\n# On branch oauth2\n# Changes to be committed:\n#\n#&nbsp;&nbsp; &nbsp;new file:&nbsp;&nbsp; .gitmodules\n#&nbsp;&nbsp; &nbsp;new file:&nbsp;&nbsp; application/third_party/oauth2\n</pre>\n<p>\n\tThe .gitmodules file has been added and keeps a reference of all submodules in your application.</p>\n<h3>\n\t&quot;My designer just pulled and it&#39;s broked!&quot;</h3>\n<p>\n\tMe too! So submodules can be a little funny when people pull for the first time. The .gitmodule file will know there is a new submodule but Git won&#39;t actually bother to do anything about it. This may seem odd but is easy to get around:</p>\n<pre class=\"code bash\">\n$ git submodule init\n$ git submodule update\n</pre>\n<p>\n\tThe first command will initialize any submodules listed in the .gitmodule file that is not already set up, and update will grab the latest commit for it.</p>\n<h3>\n\tCommitting fixes in your submodules</h3>\n<p>\n\tWhile developing an application with a submodule you are no doubt adding new stuff as you go. Wether this is fixing bugs or adding new features you&#39;re application is the best place to add these new features to your package because you can see when things are working.</p>\n<p>\n\tIf you have made some changes in your submodule you will notice that git status shows you this:</p>\n<pre class=\"code bash\">\n$ git status\n\n# On branch master\n# Changes not staged for commit:\n#\n#&nbsp;&nbsp; &nbsp;modified:&nbsp;&nbsp; application/third_party/oauth2 (modified content)</pre>\n<p>\n\tWe changed stuff! So let&#39;s go and commit it to our submodule.</p>\n<pre class=\"code bash\">\n$ cd application/third_party/oauth2\n$ git status\n\n# Not currently on any branch.\n# Changes not staged for commit:\n#\n#&nbsp;&nbsp; &nbsp;modified:&nbsp;&nbsp; libraries/OAuth2.php\n</pre>\n<p>\n\tWoah there, not currently on any branch? What the dickens?</p>\n<p>\n\tEach submodule has a specific commit used to reference which is the &quot;current&quot; commit that other applications should be on when they run git submodule update. Think of this much like a tag, but not actually a &quot;tag&quot;. We want to move out of this &quot;no branch&quot; and use master (or develop if you wan&#39;t to get all crazy with Git-Flow).</p>\n<pre class=\"code bash\">\n$ git checkout master</pre>\n<p>\n\tAwesome, now commit as usual and push back to the repo. If you cloned using a read-only remote (suggested if you want to deploy to PHPFog, etc) then you will need to do something like:</p>\n<pre class=\"code bash\">\n$ git remote add upstream git@github.com:philsturgeon/codeigniter-oauth2.git</pre>\n<p>\n\tThis will add the read/write remote to your system, but mean that deployment systems can still read the public remote when they look at origin. After that you push with:</p>\n<pre class=\"code bash\">\n$ git push upstream master</pre>\n<p>\n\tFinally, if we hop back up to the root level of our application we&#39;ll see:</p>\n<pre class=\"code bash\">\n$ git status\n\n# On branch master\n# Changes not staged for commit:\n#\n#&nbsp;&nbsp; &nbsp;modified:&nbsp;&nbsp; application/third_party/oauth2</pre>\n<p>\n\tCommit that and you&#39;re done. Yay!</p>\n<h3>\n\tSummary</h3>\n<p>\n\tAs with everything in Git it is initially confusing and potentially a little scary to try and work out, but once you get past the &quot;WTFPALMFACE&quot; section of learning you&#39;ll love this feature and find yourself using it all over the place.</p>",
    "created_on": "1316948940",
    "updated_on": "1316966049",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "0",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "108",
    "created": "2011-09-17 12:13:00",
    "updated": "2011-12-13 11:18:11",
    "created_by": "2",
    "ordering_count": null,
    "title": "NinjAuth: The Social Integration Package PHP has been dying for",
    "slug": "ninjauth-social-integration-php",
    "category_id": "20",
    "attachment": "",
    "intro": "<p>\n\tIn the past I have never needed to implement oAuth into a PHP project. I have done it in Rails and boy it was easy thanks to OmniAuth. OmniAuth abstracts away so much of the grunt work that it takes about 5 minutes to add a new social network to your site, and 4 of those minutes are spent signing up for the API keys. What options do we have in the world of PHP? A bunch of screwy hacks or provider specific classes like TwitterOAuth. I don&#39;t want to hunt down 20 libraries with different methods, I want to get a key, bang it in and go to the pub. Well, now I can!</p>",
    "body": "<p>\n\tIn the past I have never needed to implement oAuth into a PHP project. I have done it in Rails and boy it was easy thanks to <a href=\"https://github.com/intridea/omniauth\">OmniAuth</a>. OmniAuth abstracts away so much of the grunt work that it takes about 5 minutes to add a new social network to your site, and 4 of those minutes are spent signing up for the API keys. What options do we have in the world of PHP? A bunch of screwy hacks or provider specific classes like TwitterOAuth. I don&#39;t want to hunt down 20 libraries with different methods, I want to get a key, bang it in and go to the pub. Well, now I can!</p>\n<p>\n\t<a href=\"https://github.com/happyninjas/fuel-ninjauth\">NinjAuth</a> - named after my company <a href=\"http://happyninjas.com/\">HappyNinjas</a> - is a package which provides abstraction layer over various strategies such as oAuth and oAuth2 and sits on top of the built in Auth driver for handling users and registration. Multiple &quot;authentications&quot; can be made meaning you have a single user who has Twitter, Facebook, Instagram, etc all attached to his account so you can start doing fun things with their data.</p>\n<p>\n\t<a href=\"https://github.com/fuel-packages/fuel-oauth\">fuel-oauth</a> - A basic package which contains the providers for the oAuth strategy. This was a port of the great work done by shadowhand with his <a href=\"https://github.com/kohana/oauth\">Kohana oAuth</a> package. This is an open source world and I feel time can be better spent improving on existing code than re-inventing the wheel more than you need to. This code has been tweaked and improved upon and will get better over time.</p>\n<p>\n\t<a href=\"https://github.com/fuel-packages/fuel-oauth2\">fuel-oauth2</a> - Another simplistic package which has providers in the same format as fuel-oauth. Some of this code was provided by Calvin Froedge who supplied the codeigniter-oauth spark.</p>\n<p>\n\tUsing abstraction of strategies and providers to this level means we can easily add in OpenID or XAuth (pull request anyone?) and support new systems without needing to totally rewrite our apps. How many of you have had to recode the f**k out of your sites because of the upcoming <a href=\"http://developers.facebook.com/blog/post/497/\">Facebook oAuth2 Migration</a>? Well if we had this system we would have just moved the Facebook class from one to the other, tweaked it and your application would have seamlessly switched over as you updated the package.</p>\n<h3>\n\tHow do I use NinjAuth?!</h3>\n<p>\n\tThe most important thing about this is that it is insanely easy.</p>\n<ol>\n\t<li>\n\t\tInstall the package via Zip, Git or use Oil, whatever.</li>\n\t<li>\n\t\tEnable ninjauth, oauth, oauth2, orm and auth in config.php</li>\n\t<li>\n\t\tCreate an authentication controller. I use &quot;auth.php&quot;:\n\t\t<pre class=\"code php\">\nclass Controller_Auth extends \\NinjAuth\\Controller {}</pre>\n\t</li>\n\t<li>\n\t\tAdd keys and secrets for all the providers you wish to use in config/ninjauth.php by either modifying the file in the package or copy it to the app/config folder:\n\t\t<pre class=\"code php\">\n&#39;providers&#39; =&gt; array(\n\t\n\t&#39;facebook&#39; =&gt; array(\n\t\t&#39;id&#39; =&gt; &#39;&#39;,\n\t\t&#39;secret&#39; =&gt; &#39;&#39;,\n\t\t&#39;scope&#39; =&gt; &#39;&#39;,\n\t),\n\t\n\t&#39;github&#39; =&gt; array(\n\t\t&#39;id&#39; =&gt; &#39;&#39;,\n\t\t&#39;secret&#39; =&gt; &#39;&#39;,\n\t\t&#39;scope&#39; =&gt; &#39;user,public_repo&#39;,\n\t),\n\t\n\t&#39;twitter&#39; =&gt; array(\n\t\t&#39;key&#39; =&gt; &#39;&#39;,\n\t\t&#39;secret&#39; =&gt; &#39;&#39;,\n\t),</pre>\n\t</li>\n\t<li>\n\t\tGo to http://example.com/auth/session/facebook</li>\n\t<li>\n\t\tLaugh about how easy it all was.</li>\n</ol>\n<p>\n\tCurrently NinjAuth supports:</p>\n<ul>\n\t<li>\n\t\tDropbox</li>\n\t<li>\n\t\tTwitter</li>\n\t<li>\n\t\tFlickr</li>\n\t<li>\n\t\tGoogle</li>\n\t<li>\n\t\tGitHub</li>\n\t<li>\n\t\tLinkedIn</li>\n\t<li>\n\t\tFacebook</li>\n\t<li>\n\t\tYouTube</li>\n</ul>\n<p>\n\tMore can be added pretty easily by adding them to the correct oauth package then modifying ninjauth/classes/strategy.php and adding to the array which lists which provider uses which strategy. Then add it to the bootstrap.php and send me a pull request.</p>\n<h3>\n\tWhats next?</h3>\n<p>\n\tThe oauth2 package has been <a href=\"https://github.com/philsturgeon/codeigniter-oauth2\">ported to CodeIgniter</a> and Calvin is working on making the <a href=\"http://getsparks.org/packages/codeigniter-oauth/versions/HEAD/show\">codeigniter-oauth</a> Spark more awesome. Porting NinjAuth for CodeIgniter would be remarkably simple, but without a user package it&#39;s pretty pointless. I&#39;ll probably just write a blog about how to make your own in CI and use whatever user system you like. PyroCMS can expect to pick up a few sweet features from this code, potentially for v1.4 or v1.5.</p>\n<p>\n\tThese packages were the fruit of some freelance work done in London for the last few weeks (keeping up my <a href=\"http://philsturgeon.co.uk/blog/2011/08/nomadic-web-development\">Nomadic Web Development</a> lifestyle of hostel living with hot French girls) and they will all become crucial parts of the next few applications I build.</p>\n<p>\n\tWhat I want from people reading this is for them to download it, give it a go and provide feedback, build support for new providers (try Foursquare it&#39;s pretty easy but I refuse to sign up for an account) and help me make it even better. I firmly believe OmniAuth is one of the best projects in Rails-world and there is no reason PHP users shouldn&#39;t have something so damned useful.</p>\n<p>\n\t<em><strong>Update:</strong> As Adam Fairholm quite rightly pointed out this is only for v1.1 which is still in development, but I have been using it for every client project in Fuel and it seems fine to me.</em></p>",
    "created_on": "1316261580",
    "updated_on": "1323775091",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "109",
    "created": "2011-10-06 09:37:00",
    "updated": "2011-10-06 10:12:17",
    "created_by": "2",
    "ordering_count": null,
    "title": "New CodeIgniter Documentation = Unicorn Party",
    "slug": "new-codeigniter-documentation",
    "category_id": "3",
    "attachment": "",
    "intro": "<p>\n\tThe CodeIgniter Community has been crying out for EllisLab and the development team to be more open and forward with information, developments, roadmaps, etc and EllisLab have taken this to heart. Yesterday they put up a &quot;nightly build&quot; of the new documentation which has been worked on in a GitHub branch for months and is not in develop and... the community said AAAAGGGGHHHHHHH! This post is an explanation of why the new documentation is amazing.</p>",
    "body": "<p>\n\tThe CodeIgniter Community has been crying out for EllisLab and the development team to be more open and forward with information, developments, roadmaps, etc and EllisLab have taken this to heart. Yesterday they put up a &quot;<a href=\"http://codeigniter.com/nightly_user_guide/\">nightly build</a>&quot; of the new documentation which has been worked on in a GitHub branch for months and is not in develop and... the community said AAAAGGGGHHHHHHH! This post is an explanation of why the new documentation is amazing and most of the arguments against it are ridiculous.</p>\n<p>\n\tIn case anyone missed it, the announcement is <a href=\"http://codeigniter.com/news/new_user_guide_in_development\" target=\"_blank\">here</a>. Notice the words in the header &quot;in Development&quot;. Instead of the old hand-crafted HTML documentation we now have documents written in LaTex (similar to Markdown or Textile) which is parsed using a Python system called Sphinx and can generate HTML or PDF documentation.</p>\n<h3>\n\tWe need to install Python for docs?</h3>\n<p>\n\tNO! Python is the language used to build the documentation, and nobody is asking you to build the docs yourself. If you notice in the codebase the new latex files are stored in &quot;user_guide_src/&quot;. What does this suggest? That they are the <em>source</em> files and not the final. We can run the build script when CodeIgniter is in a release branch, so that means when we prep v2.1.0 for final release we run a command, have the source and the build copy and everyone is happy.</p>\n<h3>\n\tBut why Python? Why not a PHP system?</h3>\n<p>\n\tPeople should not be hung up on languages. The Ruby framework <a href=\"http://ramaze.net/\" target=\"_blank\">Ramaze</a> uses Sphinx and they don&#39;t care, why should we? It&#39;s just a tool that does the job, and it happens to do the job better than any existing PHP systems.</p>\n<h3>\n\tOh... ok well they don&#39;t look as good!</h3>\n<p>\n\tRemember that this is the initial push. The fact is that the documentation can now be styled without rewriting every single document manually. This means iterative improvements can be made until it looks amazing. You could even change the design if you wanted to go crazy, the fact is that the option is there.</p>\n<h3>\n\tFine, but why is it still using Google Search?</h3>\n<p>\n\tSomebody complained that the new documentation was using Google for Search. The documentation has always used to use Google Search and currently it still does. Sphinx supports it&#39;s own built in search and that will get hooked up before things go live. Again, THIS IS AN EARLY PUSH.</p>\n<h3>\n\tBut I was translating the user guide!</h3>\n<p>\n\tWell that is unfortunate, but what if we left it another month before releasing this plan? You&#39;d have spent even MORE time working on it. The fact of the matter is that now the source files only contain text with basic Markdown-style markup you&#39;ll find translating it SO MUCH easier! The documentation can be built in the same way and there, you have awesome styled HTML and PDF documentation written in whatever language you like.</p>\n<h3>\n\tAnything else good about this?</h3>\n<p>\n\tAs I&#39;ve said, PDF export and search straight out of the box is bloody brilliant. We can theme the docs, we can now <a href=\"http://ericlbarnes.com/post/11086832943/ci-userguide\" target=\"_blank\">open them in our editor easily</a> for reference, we have James Mathias working on the designs - and he can <a href=\"http://leihu.com/art\" target=\"_blank\">clearly design</a> - and now we can build documentation quicker. A few times I&#39;ve wanted to add a library but thought &quot;Sure, but then I have to spend hours writing up all the bloody documentation&quot;. Now I can write that same documentation in minutes. Brilliant! The whole team feels the same and are glad to be able to write documentation quicker.</p>\n<h3>\n\tSummary</h3>\n<p>\n\tThis is happening and it&#39;s a good thing. Every person making a complaint about a specific thing could just as easily say &quot;I don&#39;t like X because of Y, can we make it work like Z?&quot;. Or, get involved. CodeIgniter is an open-source project after all. <a href=\"http://codeigniter.com/news/contribution_guide\" target=\"_blank\">Send a pull request</a>! <a href=\"https://github.com/EllisLab/CodeIgniter/pull/536/files\" target=\"_blank\">This guy did</a>.</p>",
    "created_on": "1317893820",
    "updated_on": "1317895937",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "110",
    "created": "2011-10-24 18:54:00",
    "updated": "2011-10-24 19:30:03",
    "created_by": "2",
    "ordering_count": null,
    "title": "Developer++",
    "slug": "developer-plusplus",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tThis weekend I popped home to Bristol for Web Developers Conference 2011 and while I was mainly going to see a few friends I came away inspired to make some changes. Three of the talks at first seemed to be the common &quot;This is how I went from being an inexperienced dev to being part of an awesome company&quot; but the combination of different approaches and characters complimented each other perfectly and left me thinking for most of the day. By the time Paul Boag finished his talk I was ready for some big changes.</p>",
    "body": "I've been working up in Newcastle recently on the longest stay of my [Nomadic Web Development](http://philsturgeon.co.uk/blog/2011/08/nomadic-web-development) mission, wandering the globe and country getting things done.\n\nThis weekend I popped home to Bristol for [Web Developers Conference 2011](http://webdevconf.com/) and while I was mainly going to heckle [Elliott Kember](http://elliottkember.com) and see a few friends I came away inspired to make some changes. Three of the talks at first seemed to be the common \"This is how I went from being an inexperienced dev to being part of an awesome company\" but the combination of different approaches and characters complimented each other perfectly and left me thinking for most of the day. By the time [Paul Boag](http://boagworld.com/) finished his talk I was ready for some changes.\n\nOn the whole [Neil Dennis](http://twitter.com/strawberrysoup), [Ben Bodien](http://twitter.com/bbodien), Elliott Kember, John O'Nolan and Paul Boag got me thinking how to improve myself as a developer, business owner and as a person in general.\n\n## What grinds your gears?\n\nThe word \"emotional\" has negative connotations and to most if somebody is emotional they are weak minded, prone to random fits of crying and is likely to have mood swings. This thinking is absolute crap as we are all emotional and emotion drives almost every single decision we make, how well we sleep or even what we buy, whether it's buying a flash car to look good and feel important, or anger when somebody insults us. \n\nLearning to identify the things that invoke these emotions can be the first step in making yourself a better developer. Ben described how after every project he looks back in review and works out what elements of the project made him happy, proud, relieved, stressed, angry, frustrated and \"ready to smash a baby squirrel with his fist\". By going over these points in a project (A client asking for a stupid design, scope creep, the feeling when the site launches perfectly and gets in the press, etc) he can think about how each of these things came to be and strive to repeat the good and avoid the bad.\n\nThings that recently have made me frustrated are:\n\n* Constant streams of emails causing distractions\n* Complaints\n* Non-constructive feedback \n* Being constantly busy\n\nThese are pretty common problems for people working in the web industry thanks to the high expectations, low understandings of what we do and ease in which we can work out of hours. \n\nHow do I plan to get past these issues?\n\n## Remove your distractions\n\nPaul Boag pointed out that if you have your email coming in every 5 minutes then you are being distracted about 22,000 times a year. That's a fucking lot! He suggests that your check your email once or twice a day, but by turning my emails down to come through once an hour then I have massively reduced the number of distractions. It gives me nice one-hour blocks to get work done, and if I finish a task then I can pick another task. Anything else I'll just tell people that I'll look into it in the morning. Got server up-time to worry about? Set up some rules with [AwayFind.com](http://awayfind.com).\n\nI'll also be setting up rules for things like pull requests. I am incredibly happy that [CodeIgniter](http://codeigniter.com/), [FuelPHP](http://fuelphp.com/) and [PyroCMS](http://pyrocms.com/) are all doing so well that there is almost constant discussion on GitHub but damn is it distracting. Almost every 5 minutes a pull request comes in that needs discussion or feedback, other people need to be consulted, testing needs to be done, arguments randomly spring up for and against, people start moaning about stuff and BAM I am distracted. It's non-stop. From now on all emails from GitHub go in a box, and I'll open that box for one hour every evening if I feel like putting my open-source hat on. I'll do that when I am not distracted and in a good mood, meaning I am likely to respond to everything better and give my best answers.\n\n## Learn to love complaints\n\nJohn O'Nolan made a genius point and turned my thinking about complaints on its ass. He said \"If somebody takes the time out of their day and explain in detail to you all the ways in which you are shit, they are amazing. If you can have a conversation about them about why and improve on this then they will be the first to turn around and be your biggest evangelist. We had this on the [PancakeApp](http://pancakeapp.com/) project with people calling it a terrible product because it was lacking features they wanted. We wrote those features quickly and PancakeApp as a whole became better for it, but even better we had the complaining user turn around and start tweeting our praises to his thousands of followers which lead to a mention by Smashing Magazine. That was Lee Tengum's job and he did it well, while my first reaction would have been to call the guy an unreasonable ass for being so complacent and point him to the Feature Request forums.\n\nFrom this point on I'll be thanking people for their complaints and try my hardest to get a conversation from them as to what the issue is. If they are then just unreasonable and offer nothing constructive they are an idiot. John points out that in this position he will normally just say \"Ok, you make a better one and then we'll talk\" because if they cannot offer advice as to how something should be improved then they obviously have no base for their complaints and should be ignored. Simple!\n\n## Why are you so busy?\n\nThis is a problem every freelance developer has. Paul explained how so many of us like to wear it as a badge of honor and none of us can pretend that we don't. How many times have we seen or written the tweet \"I've worked for 18 hours, drank 12 coffee's and I still have more work to do! #fml\". Fuck I think that might be a direct quote from me! It's not a good thing and thinking about it it's just stupid. If anyone has that much work to do they need to have a think about why.\n\nIf it's the case of your boss having unrealistic expectations of your time then fuck them: that needs to change. Your boss either values you highly and will be forced into action when you try to quit, or is treating you like an idiot and you would be better off elsewhere.\n\nIt could be the case that you are the boss and if you still have that much work then you need an employee. I am currently being asked for enough hours to keep 3 clones busy and I am tired of saying no to people, it's obviously time to start saying yes.\n\nThings really do seem that simple right now. I've employed before when I was 18 and inexperienced. My company did not last long after the start of the recession which made me cautious about going down that road again, but now I have five more years in the industry, way more demand and a company that is behind several interested products. I'll be starting the recruitment process formally soon, but [HappyNinjas Ltd](http://happyninjas.com/) are looking for a [FuelPHP](http://fuelphp.com/) developer.\n\n## Summary\n\nThese speakers pointed out some things to me that should have been obvious. Look at who you are, concentrate on what is important, ignore things that you don't need to worry about and try to solve things instead of simply accepting them as standard.\n\nI would be interested to see other posts from you guys about how you see your career at the moment and how you can see it changing in the near future. What are you going to do to make yourself less stressed, more content and in return more productive?",
    "created_on": "1319482440",
    "updated_on": "1319484603",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "ee4a736af09592090fd877a83f596996",
    "type": "markdown",
    "parsed": "<p>I've been working up in Newcastle recently on the longest stay of my <a href=\"http://philsturgeon.co.uk/blog/2011/08/nomadic-web-development\">Nomadic Web Development</a> mission, wandering the globe and country getting things done.</p>\n\n<p>This weekend I popped home to Bristol for <a href=\"http://webdevconf.com/\">Web Developers Conference 2011</a> and while I was mainly going to heckle <a href=\"http://elliottkember.com\">Elliott Kember</a> and see a few friends I came away inspired to make some changes. Three of the talks at first seemed to be the common \"This is how I went from being an inexperienced dev to being part of an awesome company\" but the combination of different approaches and characters complimented each other perfectly and left me thinking for most of the day. By the time <a href=\"http://boagworld.com/\">Paul Boag</a> finished his talk I was ready for some changes.</p>\n\n<p>On the whole <a href=\"http://twitter.com/strawberrysoup\">Neil Dennis</a>, <a href=\"http://twitter.com/bbodien\">Ben Bodien</a>, Elliott Kember, John O'Nolan and Paul Boag got me thinking how to improve myself as a developer, business owner and as a person in general.</p>\n\n<h2>What grinds your gears?</h2>\n\n<p>The word \"emotional\" has negative connotations and to most if somebody is emotional they are weak minded, prone to random fits of crying and is likely to have mood swings. This thinking is absolute crap as we are all emotional and emotion drives almost every single decision we make, how well we sleep or even what we buy, whether it's buying a flash car to look good and feel important, or anger when somebody insults us. </p>\n\n<p>Learning to identify the things that invoke these emotions can be the first step in making yourself a better developer. Ben described how after every project he looks back in review and works out what elements of the project made him happy, proud, relieved, stressed, angry, frustrated and \"ready to smash a baby squirrel with his fist\". By going over these points in a project (A client asking for a stupid design, scope creep, the feeling when the site launches perfectly and gets in the press, etc) he can think about how each of these things came to be and strive to repeat the good and avoid the bad.</p>\n\n<p>Things that recently have made me frustrated are:</p>\n\n<ul>\n<li>Constant streams of emails causing distractions</li>\n<li>Complaints</li>\n<li>Non-constructive feedback </li>\n<li>Being constantly busy</li>\n</ul>\n\n<p>These are pretty common problems for people working in the web industry thanks to the high expectations, low understandings of what we do and ease in which we can work out of hours. </p>\n\n<p>How do I plan to get past these issues?</p>\n\n<h2>Remove your distractions</h2>\n\n<p>Paul Boag pointed out that if you have your email coming in every 5 minutes then you are being distracted about 22,000 times a year. That's a fucking lot! He suggests that your check your email once or twice a day, but by turning my emails down to come through once an hour then I have massively reduced the number of distractions. It gives me nice one-hour blocks to get work done, and if I finish a task then I can pick another task. Anything else I'll just tell people that I'll look into it in the morning. Got server up-time to worry about? Set up some rules with <a href=\"http://awayfind.com\">AwayFind.com</a>.</p>\n\n<p>I'll also be setting up rules for things like pull requests. I am incredibly happy that <a href=\"http://codeigniter.com/\">CodeIgniter</a>, <a href=\"http://fuelphp.com/\">FuelPHP</a> and <a href=\"http://pyrocms.com/\">PyroCMS</a> are all doing so well that there is almost constant discussion on GitHub but damn is it distracting. Almost every 5 minutes a pull request comes in that needs discussion or feedback, other people need to be consulted, testing needs to be done, arguments randomly spring up for and against, people start moaning about stuff and BAM I am distracted. It's non-stop. From now on all emails from GitHub go in a box, and I'll open that box for one hour every evening if I feel like putting my open-source hat on. I'll do that when I am not distracted and in a good mood, meaning I am likely to respond to everything better and give my best answers.</p>\n\n<h2>Learn to love complaints</h2>\n\n<p>John O'Nolan made a genius point and turned my thinking about complaints on its ass. He said \"If somebody takes the time out of their day and explain in detail to you all the ways in which you are shit, they are amazing. If you can have a conversation about them about why and improve on this then they will be the first to turn around and be your biggest evangelist. We had this on the <a href=\"http://pancakeapp.com/\">PancakeApp</a> project with people calling it a terrible product because it was lacking features they wanted. We wrote those features quickly and PancakeApp as a whole became better for it, but even better we had the complaining user turn around and start tweeting our praises to his thousands of followers which lead to a mention by Smashing Magazine. That was Lee Tengum's job and he did it well, while my first reaction would have been to call the guy an unreasonable ass for being so complacent and point him to the Feature Request forums.</p>\n\n<p>From this point on I'll be thanking people for their complaints and try my hardest to get a conversation from them as to what the issue is. If they are then just unreasonable and offer nothing constructive they are an idiot. John points out that in this position he will normally just say \"Ok, you make a better one and then we'll talk\" because if they cannot offer advice as to how something should be improved then they obviously have no base for their complaints and should be ignored. Simple!</p>\n\n<h2>Why are you so busy?</h2>\n\n<p>This is a problem every freelance developer has. Paul explained how so many of us like to wear it as a badge of honor and none of us can pretend that we don't. How many times have we seen or written the tweet \"I've worked for 18 hours, drank 12 coffee's and I still have more work to do! #fml\". Fuck I think that might be a direct quote from me! It's not a good thing and thinking about it it's just stupid. If anyone has that much work to do they need to have a think about why.</p>\n\n<p>If it's the case of your boss having unrealistic expectations of your time then fuck them: that needs to change. Your boss either values you highly and will be forced into action when you try to quit, or is treating you like an idiot and you would be better off elsewhere.</p>\n\n<p>It could be the case that you are the boss and if you still have that much work then you need an employee. I am currently being asked for enough hours to keep 3 clones busy and I am tired of saying no to people, it's obviously time to start saying yes.</p>\n\n<p>Things really do seem that simple right now. I've employed before when I was 18 and inexperienced. My company did not last long after the start of the recession which made me cautious about going down that road again, but now I have five more years in the industry, way more demand and a company that is behind several interested products. I'll be starting the recruitment process formally soon, but <a href=\"http://happyninjas.com/\">HappyNinjas Ltd</a> are looking for a <a href=\"http://fuelphp.com/\">FuelPHP</a> developer.</p>\n\n<h2>Summary</h2>\n\n<p>These speakers pointed out some things to me that should have been obvious. Look at who you are, concentrate on what is important, ignore things that you don't need to worry about and try to solve things instead of simply accepting them as standard.</p>\n\n<p>I would be interested to see other posts from you guys about how you see your career at the moment and how you can see it changing in the near future. What are you going to do to make yourself less stressed, more content and in return more productive?</p>\n",
    "preview_hash": ""
  },
  {
    "id": "111",
    "created": "2011-11-14 11:22:00",
    "updated": "2011-11-14 11:52:55",
    "created_by": "2",
    "ordering_count": null,
    "title": "Do Things That Scare You",
    "slug": "do-things-that-scare-you",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tI was giving a short talks at DevXS in Lincoln this weekend based on my Nomadic Web Development article and I was asked &quot;Where did you find the courage to quit your job, leave your flat and just go?&quot;. I mumbled something about not being sure but I am really annoyed with myself for not coming up with a substantially better answer. If asked again I would say &quot;Do the things that scare you. Try anything and you&#39;ll either succeed or fall on your ass and learn some valuable lessons, either way you come out stronger.&quot;. That might be some motivational bullhockey, but I believe it and you guys should give it a try.</p>",
    "body": "<p>\n\tI was giving a short talks at <a href=\"http://devxs.org/\" target=\"_blank\">DevXS</a> in Lincoln this weekend based on my <a href=\"http://philsturgeon.co.uk/blog/2011/08/nomadic-web-development\" target=\"_blank\">Nomadic Web Development article</a> and I was asked &quot;Where did you find the courage to quit your job, leave your flat and just go?&quot;. I mumbled something about not being sure but I am really annoyed with myself for not coming up with a substantially better answer. If asked again I would say &quot;Do the things that scare you. Try anything and you&#39;ll either succeed or fall on your ass and learn some valuable lessons, either way you come out stronger.&quot;. That might be some motivational bull-hockey, but I believe it and you guys should give it a try.</p>\n<p>\n\tOver the last year I have done so many things that scared the living shit out of me. There was mountains in Golden and Banff that were almost entirely scree all the way to the peak with high wind and huge drops that would certainly lead to death. So many times I considered giving up and heading back down but I pushed myself, got to the top and it was epic. I started kayaking last year and I was petrified of going down waterfalls and dodging rocks in rapids, now I have a BCU 3* which shows that I am now officially &quot;pretty good&quot;.</p>\n<p>\n\tMy most recent attempt to get over things that scare me is public speaking. As a developer we all feel nice and safe behind our screens, usernames and avatars but getting up in front of an audience is a bitch. I have done it before once or twice (EECI2009 and CICON2010) but they were only small-stages and... well I did not feel they went well as I was so new at it. This turned me off accepting talk offers and I&#39;ve been a little ashamed about it for a while, but now I am hitting this on the head and giving it a go.</p>\n<p>\n\tA month ago I spoke at <a href=\"http://phpne.org.uk\">PHPNE</a>, giving an <a href=\"http://phpne.org.uk/2011/10/10/phpne-october-an-introduction-to-fuel-php-by-phil-sturgeon/\">Introduction to FuelPHP</a> and by all accounts I nailed it. People were ingaged, I spoke slowly and clearly for most of it, I didn&#39;t fall over my words or stare at the screen for the entire talk and people asked interesting questions.</p>\n<p style=\"text-align: center;\">\n\t<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"366\" src=\"http://player.vimeo.com/video/30805520?title=0&amp;byline=0&amp;portrait=0\" webkitallowfullscreen=\"\" width=\"552\"></iframe></p>\n<p>\n\tThis left me feeling way more comfortable to giving more talks and I already had one in the pipeline for DevXS after being asked by Alex Bilbie. This one went great, but was in a much much bigger venue and while I still felt nervous and missed out some key points in general I was happy with it:</p>\n<p style=\"text-align: center;\">\n\t<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/QZSl-il3CtQ?rel=0\" width=\"560\"></iframe></p>\n<p>\n\tSo it&#39;s onwards an upwards from here. I&#39;ll be taking feedback, improving, speaking more and I have a few even bigger events lined up already which I&#39;ll announce as soon as I am allowed: And of course at CICON2012 which is about to release tickets.</p>\n<p>\n\tIn the mean time, if you&#39;d like me to give a talk at your event on any of the subjects I can speak with authority: <a href=\"http://fuelphp.com\">FuelPHP</a>, <a href=\"http://pyrocms.com\">PyroCMS</a>, <a href=\"http://codeigniter.com\">CodeIgniter</a>, Git, etc or even just want me for a little bit of training, get in touch via my contact form and we can makes some plans.</p>\n<p>\n\t&nbsp;</p>",
    "created_on": "1321269720",
    "updated_on": "1321271575",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "112",
    "created": "2011-11-30 10:06:00",
    "updated": "2011-11-30 18:44:52",
    "created_by": "2",
    "ordering_count": null,
    "title": "Stitch Your Friends Up",
    "slug": "stitch-your-friends-up",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tWhile I am on the ignite100 start-up incubator I have met some amazing people in some brilliant start-ups. One of these start-ups is Givey: a &quot;social giving platform&quot; which allows donations via SMS, Twitter, etc. They have organised an event happening in Newcastle tonight called &quot;Stitch Your Friends Up&quot; where a few people will be brought up on stage and be &quot;Stitched Up&quot; for money. Of course muggins here is involved and you can be too. I am sworn to secrecy on everybody else, but basically put for every &pound;10 that is raised - at the event or via Twitter by users watching the live stream - I will have one strip of wax removed from my leg. Yep you heard it. You can cause me pain in real time and see the results!</p>",
    "body": "While I am on the ignite100 start-up incubator I have met some amazing people in some brilliant start-ups. One of these start-ups is [Givey](http://www.givey.co.uk/): a \"social giving platform\" which allows donations via SMS, Twitter, etc. They have organised an event happening in Newcastle tonight called [Stitch Your Friends Up](http://www.eventbrite.com/event/2467179400) where a few people will be brought up on stage and be \"Stitched Up\" for money. Of course muggins here is involved and you can be too. I am sworn to secrecy on everybody else, but basically put for every £10 that is raised - at the event or via Twitter by users watching the live stream - I will have one strip of wax removed from my leg. Yep you heard it. You can cause me pain in real time and see the results!\n\nIf you are interested in contributing to my pain, I will be raising money for [Homeless International](http://www.homeless-international.org/) which do some great work helping to improve the quality of life for people living in slums in Asia and Africa. They provide training in water and sanitation, work to secure land for people living there and basically give them a voice. This is some great work and I am all for it, so much so that I am donating my leg hair to the event.\n\nAll you have to do is sign up to Givey and associate your Twitter account, then tweet - where 1 = £1:\n\n<blockquote>#GIVEY @philsturgeon 1</blockquote>\n\nAlternatively you can send SMS donations:\n\n<blockquote>88008: GIVEY PHIL 1</blockquote>\n\nThe donations are only open between 7:00-8:00pm GMT and you can watch the live-streaming here powered by [Bambuser](http://bambuser.com/) which streams straight to your mobile so even if you're on the bus you have no excuse to miss this horrible/hilarious event:\n\nI'm not allowed to say what the others are doing and to be honest I don't know some, but I do know that it's going to be very funny. If you're in Newcastle tonight then stop by, there are still tickets, it's free and we'll be having a few drinks afterwards.\n\n<object id=\"bplayer\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" width=\"650\" height=\"800\"><embed name=\"bplayer\" src=\"http://static.bambuser.com/r/player.swf?username=daveerasmus\" type=\"application/x-shockwave-flash\" width=\"650\" height=\"800\" allowfullscreen=\"true\" allowscriptaccess=\"always\" wmode=\"opaque\"></embed><param name=\"movie\" value=\"http://static.bambuser.com/r/player.swf?username=daveerasmus\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><param name=\"wmode\" value=\"opaque\"></param></object>\n\n*Direct Link: [http://bambuser.com/v/2171579](http://bambuser.com/v/2171579)*",
    "created_on": "1322647560",
    "updated_on": "1322678692",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "cbf8f70d76618220435ff8f18da44614",
    "type": "markdown",
    "parsed": "<p>While I am on the ignite100 start-up incubator I have met some amazing people in some brilliant start-ups. One of these start-ups is <a href=\"http://www.givey.co.uk/\">Givey</a>: a \"social giving platform\" which allows donations via SMS, Twitter, etc. They have organised an event happening in Newcastle tonight called <a href=\"http://www.eventbrite.com/event/2467179400\">Stitch Your Friends Up</a> where a few people will be brought up on stage and be \"Stitched Up\" for money. Of course muggins here is involved and you can be too. I am sworn to secrecy on everybody else, but basically put for every £10 that is raised - at the event or via Twitter by users watching the live stream - I will have one strip of wax removed from my leg. Yep you heard it. You can cause me pain in real time and see the results!</p>\n\n<p>If you are interested in contributing to my pain, I will be raising money for <a href=\"http://www.homeless-international.org/\">Homeless International</a> which do some great work helping to improve the quality of life for people living in slums in Asia and Africa. They provide training in water and sanitation, work to secure land for people living there and basically give them a voice. This is some great work and I am all for it, so much so that I am donating my leg hair to the event.</p>\n\n<p>All you have to do is sign up to Givey and associate your Twitter account, then tweet - where 1 = £1:</p>\n\n<blockquote>#GIVEY @philsturgeon 1</blockquote>\n\n<p>Alternatively you can send SMS donations:</p>\n\n<blockquote>88008: GIVEY PHIL 1</blockquote>\n\n<p>The donations are only open between 7:00-8:00pm GMT and you can watch the live-streaming here powered by <a href=\"http://bambuser.com/\">Bambuser</a> which streams straight to your mobile so even if you're on the bus you have no excuse to miss this horrible/hilarious event:</p>\n\n<p>I'm not allowed to say what the others are doing and to be honest I don't know some, but I do know that it's going to be very funny. If you're in Newcastle tonight then stop by, there are still tickets, it's free and we'll be having a few drinks afterwards.</p>\n\n<p><object id=\"bplayer\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" width=\"650\" height=\"800\"><embed name=\"bplayer\" src=\"http://static.bambuser.com/r/player.swf?username=daveerasmus\" type=\"application/x-shockwave-flash\" width=\"650\" height=\"800\" allowfullscreen=\"true\" allowscriptaccess=\"always\" wmode=\"opaque\"></embed><param name=\"movie\" value=\"http://static.bambuser.com/r/player.swf?username=daveerasmus\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><param name=\"wmode\" value=\"opaque\"></param></object></p>\n\n<p><em>Direct Link: <a href=\"http://bambuser.com/v/2171579\">http://bambuser.com/v/2171579</a></em></p>\n",
    "preview_hash": ""
  },
  {
    "id": "113",
    "created": "2011-12-15 00:40:00",
    "updated": "2011-12-15 00:56:35",
    "created_by": "2",
    "ordering_count": null,
    "title": "PyroCMS Gets Social!",
    "slug": "pyrocms-gets-social",
    "category_id": "11",
    "attachment": "",
    "intro": "<p>\n\tTwo months ago I was doing some client work that ended up with me creating NinjAuth - a generic authentication layer between FuelPHP&#39;s auth package and social networks. I&#39;ve been working on it a fair bit on and off since then and in the last week I&#39;ve ported it to CodeIgniter for use with PyroCMS and it&#39;s looking brilliant! You can now use PyroCMS to drive your social site. Login and register with Facebook, Twitter, etc, attach multiple accounts to users, post blog articles to Facebook and much more on the way. Here&#39;s a video.</p>",
    "body": "Two months ago I was doing some client work that ended up with me [creating NinjAuth](/blog/2011/09/ninjauth-social-integration-php) - a generic authentication layer between [FuelPHP](http://fuelphp.com/)'s auth package and social networks via OAuth, OAuth 2 and OpenID. I've been working on it a fair bit on and off since then and in the last week I've ported it to CodeIgniter for use with PyroCMS and it's looking brilliant! You can now use PyroCMS to drive your social site. Login and register with Facebook, Twitter, GitHub, YouTube, Tumblr, etc, attach multiple accounts to users, post blog articles to Facebook and much more on the way.\n\nHere's a video:\n\n<p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"360\" mozallowfullscreen=\"\" src=\"http://player.vimeo.com/video/33459969?color=ff9933\" webkitallowfullscreen=\"\" width=\"600\"></iframe></p>\n\nI'll be working on this some more and releasing it shortly after PyroCMS 2.0 final is released, but I got a bit excited and wanted to show it off to people. I have a few more kick-ass modules and features coming out for PyroCMS shortly and it's become one hell of a platform.\n\nWithin the next few months I'm expecting an iPhone app, inline-editing and an in-Control Panel Add-on Store where people can browse addons and install with one-click. The more copies of add-ons and PyroCMS I can sell the more fun features like these I get to work on, so thanks to everyone supporting me and [HappyNinjas](http://happyninjas.com/) to make fun stuff!",
    "created_on": "1323909600",
    "updated_on": "1323910595",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "62140bb83d69db757ec0d62039c2d02d",
    "type": "markdown",
    "parsed": "<p>Two months ago I was doing some client work that ended up with me <a href=\"/blog/2011/09/ninjauth-social-integration-php\">creating NinjAuth</a> - a generic authentication layer between <a href=\"http://fuelphp.com/\">FuelPHP</a>'s auth package and social networks via OAuth, OAuth 2 and OpenID. I've been working on it a fair bit on and off since then and in the last week I've ported it to CodeIgniter for use with PyroCMS and it's looking brilliant! You can now use PyroCMS to drive your social site. Login and register with Facebook, Twitter, GitHub, YouTube, Tumblr, etc, attach multiple accounts to users, post blog articles to Facebook and much more on the way.</p>\n\n<p>Here's a video:</p>\n\n<p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"360\" mozallowfullscreen=\"\" src=\"http://player.vimeo.com/video/33459969?color=ff9933\" webkitallowfullscreen=\"\" width=\"600\"></iframe></p>\n\n<p>I'll be working on this some more and releasing it shortly after PyroCMS 2.0 final is released, but I got a bit excited and wanted to show it off to people. I have a few more kick-ass modules and features coming out for PyroCMS shortly and it's become one hell of a platform.</p>\n\n<p>Within the next few months I'm expecting an iPhone app, inline-editing and an in-Control Panel Add-on Store where people can browse addons and install with one-click. The more copies of add-ons and PyroCMS I can sell the more fun features like these I get to work on, so thanks to everyone supporting me and <a href=\"http://happyninjas.com/\">HappyNinjas</a> to make fun stuff!</p>\n",
    "preview_hash": ""
  },
  {
    "id": "114",
    "created": "2011-12-20 23:12:00",
    "updated": "2011-12-21 16:45:27",
    "created_by": "2",
    "ordering_count": null,
    "title": "PHP Basher Bashing",
    "slug": "php-basher-bashing",
    "category_id": "2",
    "attachment": "",
    "intro": "<p>\n\tAnyone who has used PHP for a while knows that it has its ugly parts. Recently I&#39;ve seen a whole swathe of PHP-bashing articles and that would be fine if they were making a valid point, but some of it has just been - as I tweeted recently - &quot;absolute drivel&quot;. He didn&#39;t like that very much so I thought I&#39;d follow his follow-up with an article of my own.</p>",
    "body": "Anyone who has used PHP for a while knows that it has its ugly parts. Recently I've seen a whole swathe of PHP-bashing articles and that would fine if they were they are making a valid point, but some of it has just been - as I tweeted recently - \"absolute drivel\". \n\nThe article I am referring to is [PHP is not an acceptable COBOL](http://chipotle.tumblr.com/post/13908062333/php-is-not-an-acceptable-cobol) by Watts Martin in which he started explaining how PHP was:\n\n<blockquote>a powerful enough language to do nearly anything you want, ubiquitous, easy to get up and running (on many web hosts it’s pre-installed), and forgiving of shitty code.</blockquote>\n\nI for one think that is absolutely excellent. If your employee or team-mate is writing shitty code - in any language - then discipline them, fire them or train them better, but don't blame the language for being flexible enough to allow them to complete a given task.\n\n<blockquote>It started as a set of scripts written in C, but over the years has turned into a huge, shambling mutation.</blockquote>\n\nI'm not sure about this at all. OOP in PHP 4 sucked. In 5.1 it was ok, 5.2 was considerably better and the logic in PHP 5.3 has allowed us on the FuelPHP development team to make some truly lovely laid out code. PHP 5.4 will bring us [traits](http://php.net/manual/en/language.oop5.traits.php) which allows us to manage multiple inheritance neatly and I'm pretty excited about that but in no way do I consider PHP to be a \"shambling mess\".\n\n<blockquote>What nearly all other languages have in libraries PHP shoves into the language core, often in multiple incompatible ways.</blockquote>\n\nLike what? There are quite a few PECL extensions kicking around and there's a whole lot of PEAR available, but what of that is in the core that shouldn't be there?\n\nWatts entire article was full of similar statements to this with his complaints ranging from things I absolutely do not care about to things that are just not true. I toyed with the idea of writing a response at the time but in the end couldn't be bothered and put up a [lazy negative tweet](https://twitter.com/#!/philsturgeon/status/146340934001504256). To be fair this was rude and non-constructive as he pointed out in his latest article: [PHP Redux](http://chipotle.tumblr.com/post/14517072245/php-redux).\n\nThere's a reference in there to one of the PHP Advent 2011 articles [Cracks in the Foundation](http://phpadvent.org/2011/cracks-in-the-foundation-by-gwynne-raskind) written by the smart Gwynne Raskind. The quote says:\n\n<blockquote>Over time, PHP has suffered everything from security failures to bad design decisions. Some of these problems were avoidable, but others weren’t. […] If asked what the problem [with PHP] is today, I would say, \"no design and no plan.\"</blockquote>\n\nHe missed out the sentence before that which says \"Unfortunately, nothing’s perfect — PHP included.\". Absolutely, there have been security issues and bugs in PHP's past like any other language. One thing I'll say here is that none of them have ever had any effect on me, developers in my network of contacts or any of the teams I have ever worked with. That's not to say that the bugs never effected anyone and I am sure people will provide random examples, but I spent a few years developing for a massive team in a financial services company with a PHP platform doing all sorts of crazy stuff and guess what? <em>Nobody there had ever had any problems with those security bugs in that job or any of their others.</em> PHP bugs crop up and they are fixed before the exploits are made widely available. If your host is slow to upgrade then move away from that host instead of complaining about the language - it's their job to apply security patches in a timely fashion. If you have an SLA and you get hacked then sue the host's ass off for being incompetent.\n\nAs for the \"no design and no plan\" that can probably be said for PHP 1-4 but I haven't used PHP 4 since I was 13 and the last decade has been just fine. We do of course have the issue with string function needle and haystack orders being impossible to remember but this is on the list of \"things I just don't give a damn about\". An upcoming version of PHP will some day walk in and set strings to be primitive objects, add new string methods to those objects and deprecate procedural string functions. When that happens the one and only true \"PHP has evolved badly\" argument will be squashed and until then I will continue to build applications and still not care.\n\n### Anything else?\n\nPlenty! As a contributor to CodeIgniter and FuelPHP his comments about PHP frameworks really got my back up:\n\n<blockquote>We've learned a lot about how to make web frameworks over the last decade, and we want to bring that to PHP. Hence, frameworks in PHP!</blockquote>\n\nIt's not like PHP developers are only just working out how to make toolkits now. Just to make one example:\n\n* **Rails 1.0** - December 13, 2005\n* **CodeIgniter 1.0** - February 28, 2006\n\nCodeIgniter was never far behind Rails and it copied nothing.\n\n<blockquote>But by building frameworks on what is itself a (bad) framework, instead of fixing poor design decisions from way back when, we stuff our new framework full of workarounds.</blockquote>\n\nIs this not what jQuery is doing? It sits on top of JavaScript to help neater traversing of arrays, simplifies access to the DOM, replicates features that are missing in certain versions or implementations of JavaScript and gives one uniform way to handle your interaction logic across a broad range of browsers. For years people LOVED the way CodeIgniter added a compatibility layer providing PHP 4 with some of the new PHP 5 features. That may be less relevant now but it was bloody important at the time.\n\n<blockquote>I've spent the day - I now suspect needlessly - setting up an Amazon EC2 instance to mirror that architect’s own dev setup, as it appeared I’d lost the wrestling match on my local machine with PEAR and PECL2 and Symfony’s own dependency management system.</blockquote>\n\nI've had entire days lost to dependency hell during projects in Rails - yes I'm not a all-PHP-all-the-time zealot - and I can imagine this happening for any system that requires versioned tools. If it's not PEAR or PECL it will be CPAN, Gem, pip or whatever your language uses, don't pretend like PHP is the only system that ever struggled with dependencies. Besides by complaining about this you contradict yourself as this is the exact reason frameworks like CodeIgniter were born in the first place. By providing the developer with one set of classes in a framework they know all the classes available work with each other - no dependencies, easy deployment, one code style.\n\n<blockquote>Symfony 2’s coders are doing everything as right as possible, and that’s probably true of most of the other mysterious floating bits in the gumbo our new de facto chief architect has cooked up. But we’ve still ended up with a mishmash of patterns from Django, Rails, and enterprise Java, all held together by melted licorice jellybeans.</blockquote>\n\nWell in that case Watts you should probably go and have a word with Fabien Potencier with your feedback. I've heard that he quite likes Symfony - and so do quite a few others - but us framework types are always open to constructive feedback.\n\n### Done now?\n\nSure, I could probably go on but I feel I have justified my comments. \n\nThe main problem I see is this; when people learn a new language like Ruby or Python they notice a lot of interesting differences, cleaner syntax, funky new cloud-hosting services and they get their \"nerd-on\". Then they run around going on and on about how amazing it is and become a zealot, looking down their noses at people who are \"still\" using PHP because \"us stupid PHP developers aren't smart enough to code in anything else\". Thats elitist bullcrap and it has no merit.\n\n### So why do I \"still\" use PHP?\n\nI use a range of tools. Sometimes Ruby in the form of Sinatra or Rails but most often it's CodeIgniter or FuelPHP. Why? Because PHP is the language of the internet right now and has been for years, and that means my applications sell more! PyroCMS is compatible with PHP 5.2 and that means a huge number of people can download, contribute to and buy my software - that makes me pretty happy. I could probably recode it in NodeJS or Closure and tell everyone how awesome I am for using a new system but then I'll get less sales, less people will be able to build addons or extend it.\n\n### Are my commercial applications the only reason I use PHP?\n\nDespite known flaws and imperfections I continue to use PHP as my primary language because during all the time I spend worrying about which technology is the neatest, coolest or shiniest I could have built a new application to sell or finished another client site. In the words of Captain Ed Murphy in Lethal Weapon 2, \"Sometimes you have to know when to say 'I don't give a fuck' or you'll give yourself a hernia.\".",
    "created_on": "1324422720",
    "updated_on": "1324485927",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "e11d8538882a14992abc3a45a357c864",
    "type": "markdown",
    "parsed": "<p>Anyone who has used PHP for a while knows that it has its ugly parts. Recently I've seen a whole swathe of PHP-bashing articles and that would fine if they were they are making a valid point, but some of it has just been - as I tweeted recently - \"absolute drivel\". </p>\n\n<p>The article I am referring to is <a href=\"http://chipotle.tumblr.com/post/13908062333/php-is-not-an-acceptable-cobol\">PHP is not an acceptable COBOL</a> by Watts Martin in which he started explaining how PHP was:</p>\n\n<blockquote>a powerful enough language to do nearly anything you want, ubiquitous, easy to get up and running (on many web hosts it’s pre-installed), and forgiving of shitty code.</blockquote>\n\n<p>I for one think that is absolutely excellent. If your employee or team-mate is writing shitty code - in any language - then discipline them, fire them or train them better, but don't blame the language for being flexible enough to allow them to complete a given task.</p>\n\n<blockquote>It started as a set of scripts written in C, but over the years has turned into a huge, shambling mutation.</blockquote>\n\n<p>I'm not sure about this at all. OOP in PHP 4 sucked. In 5.1 it was ok, 5.2 was considerably better and the logic in PHP 5.3 has allowed us on the FuelPHP development team to make some truly lovely laid out code. PHP 5.4 will bring us <a href=\"http://php.net/manual/en/language.oop5.traits.php\">traits</a> which allows us to manage multiple inheritance neatly and I'm pretty excited about that but in no way do I consider PHP to be a \"shambling mess\".</p>\n\n<blockquote>What nearly all other languages have in libraries PHP shoves into the language core, often in multiple incompatible ways.</blockquote>\n\n<p>Like what? There are quite a few PECL extensions kicking around and there's a whole lot of PEAR available, but what of that is in the core that shouldn't be there?</p>\n\n<p>Watts entire article was full of similar statements to this with his complaints ranging from things I absolutely do not care about to things that are just not true. I toyed with the idea of writing a response at the time but in the end couldn't be bothered and put up a <a href=\"https://twitter.com/#!/philsturgeon/status/146340934001504256\">lazy negative tweet</a>. To be fair this was rude and non-constructive as he pointed out in his latest article: <a href=\"http://chipotle.tumblr.com/post/14517072245/php-redux\">PHP Redux</a>.</p>\n\n<p>There's a reference in there to one of the PHP Advent 2011 articles <a href=\"http://phpadvent.org/2011/cracks-in-the-foundation-by-gwynne-raskind\">Cracks in the Foundation</a> written by the smart Gwynne Raskind. The quote says:</p>\n\n<blockquote>Over time, PHP has suffered everything from security failures to bad design decisions. Some of these problems were avoidable, but others weren’t. […] If asked what the problem [with PHP] is today, I would say, \"no design and no plan.\"</blockquote>\n\n<p>He missed out the sentence before that which says \"Unfortunately, nothing’s perfect — PHP included.\". Absolutely, there have been security issues and bugs in PHP's past like any other language. One thing I'll say here is that none of them have ever had any effect on me, developers in my network of contacts or any of the teams I have ever worked with. That's not to say that the bugs never effected anyone and I am sure people will provide random examples, but I spent a few years developing for a massive team in a financial services company with a PHP platform doing all sorts of crazy stuff and guess what? <em>Nobody there had ever had any problems with those security bugs in that job or any of their others.</em> PHP bugs crop up and they are fixed before the exploits are made widely available. If your host is slow to upgrade then move away from that host instead of complaining about the language - it's their job to apply security patches in a timely fashion. If you have an SLA and you get hacked then sue the host's ass off for being incompetent.</p>\n\n<p>As for the \"no design and no plan\" that can probably be said for PHP 1-4 but I haven't used PHP 4 since I was 13 and the last decade has been just fine. We do of course have the issue with string function needle and haystack orders being impossible to remember but this is on the list of \"things I just don't give a damn about\". An upcoming version of PHP will some day walk in and set strings to be primitive objects, add new string methods to those objects and deprecate procedural string functions. When that happens the one and only true \"PHP has evolved badly\" argument will be squashed and until then I will continue to build applications and still not care.</p>\n\n<h3>Anything else?</h3>\n\n<p>Plenty! As a contributor to CodeIgniter and FuelPHP his comments about PHP frameworks really got my back up:</p>\n\n<blockquote>We've learned a lot about how to make web frameworks over the last decade, and we want to bring that to PHP. Hence, frameworks in PHP!</blockquote>\n\n<p>It's not like PHP developers are only just working out how to make toolkits now. Just to make one example:</p>\n\n<ul>\n<li><strong>Rails 1.0</strong> - December 13, 2005</li>\n<li><strong>CodeIgniter 1.0</strong> - February 28, 2006</li>\n</ul>\n\n<p>CodeIgniter was never far behind Rails and it copied nothing.</p>\n\n<blockquote>But by building frameworks on what is itself a (bad) framework, instead of fixing poor design decisions from way back when, we stuff our new framework full of workarounds.</blockquote>\n\n<p>Is this not what jQuery is doing? It sits on top of JavaScript to help neater traversing of arrays, simplifies access to the DOM, replicates features that are missing in certain versions or implementations of JavaScript and gives one uniform way to handle your interaction logic across a broad range of browsers. For years people LOVED the way CodeIgniter added a compatibility layer providing PHP 4 with some of the new PHP 5 features. That may be less relevant now but it was bloody important at the time.</p>\n\n<blockquote>I've spent the day - I now suspect needlessly - setting up an Amazon EC2 instance to mirror that architect’s own dev setup, as it appeared I’d lost the wrestling match on my local machine with PEAR and PECL2 and Symfony’s own dependency management system.</blockquote>\n\n<p>I've had entire days lost to dependency hell during projects in Rails - yes I'm not a all-PHP-all-the-time zealot - and I can imagine this happening for any system that requires versioned tools. If it's not PEAR or PECL it will be CPAN, Gem, pip or whatever your language uses, don't pretend like PHP is the only system that ever struggled with dependencies. Besides by complaining about this you contradict yourself as this is the exact reason frameworks like CodeIgniter were born in the first place. By providing the developer with one set of classes in a framework they know all the classes available work with each other - no dependencies, easy deployment, one code style.</p>\n\n<blockquote>Symfony 2’s coders are doing everything as right as possible, and that’s probably true of most of the other mysterious floating bits in the gumbo our new de facto chief architect has cooked up. But we’ve still ended up with a mishmash of patterns from Django, Rails, and enterprise Java, all held together by melted licorice jellybeans.</blockquote>\n\n<p>Well in that case Watts you should probably go and have a word with Fabien Potencier with your feedback. I've heard that he quite likes Symfony - and so do quite a few others - but us framework types are always open to constructive feedback.</p>\n\n<h3>Done now?</h3>\n\n<p>Sure, I could probably go on but I feel I have justified my comments. </p>\n\n<p>The main problem I see is this; when people learn a new language like Ruby or Python they notice a lot of interesting differences, cleaner syntax, funky new cloud-hosting services and they get their \"nerd-on\". Then they run around going on and on about how amazing it is and become a zealot, looking down their noses at people who are \"still\" using PHP because \"us stupid PHP developers aren't smart enough to code in anything else\". Thats elitist bullcrap and it has no merit.</p>\n\n<h3>So why do I \"still\" use PHP?</h3>\n\n<p>I use a range of tools. Sometimes Ruby in the form of Sinatra or Rails but most often it's CodeIgniter or FuelPHP. Why? Because PHP is the language of the internet right now and has been for years, and that means my applications sell more! PyroCMS is compatible with PHP 5.2 and that means a huge number of people can download, contribute to and buy my software - that makes me pretty happy. I could probably recode it in NodeJS or Closure and tell everyone how awesome I am for using a new system but then I'll get less sales, less people will be able to build addons or extend it.</p>\n\n<h3>Are my commercial applications the only reason I use PHP?</h3>\n\n<p>Despite known flaws and imperfections I continue to use PHP as my primary language because during all the time I spend worrying about which technology is the neatest, coolest or shiniest I could have built a new application to sell or finished another client site. In the words of Captain Ed Murphy in Lethal Weapon 2, \"Sometimes you have to know when to say 'I don't give a fuck' or you'll give yourself a hernia.\".</p>\n",
    "preview_hash": ""
  },
  {
    "id": "115",
    "created": "2011-12-29 01:32:00",
    "updated": "2012-01-03 00:48:43",
    "created_by": "2",
    "ordering_count": null,
    "title": "Starting Up in Start-ups",
    "slug": "starting-up-in-start-ups",
    "category_id": "1",
    "attachment": "",
    "intro": "<p>\n\tI spent the last three months working as a hired gun for a start-up in an incubator program called ignite100 and now I am back in the south-west for the holidays and I feel like I have learned so much in such a short space of time.&nbsp;Ignite100 is a three month program run in Newcastle that helps teams create relationships with helpful mentors who have experience in different fields. I am sad that the program is over but I thought I&#39;d write up my experiences.&nbsp;</p>",
    "body": "I spent the last three months working as a hired gun for a start-up in an incubator program called [ignite100](http://ignite100.com/), and now I am back in the south-west for the holidays and I feel like I have learned so much in such a short space of time. Ignite100 is a three month program run in Newcastle that helps teams create relationships with helpful mentors who have experience in different fields. I am sad that the program is over but I thought I'd write up my experiences. \n\nThe set-up for ignite100 was:\n\n* 10 teams / start-ups\n* Loads of potential mentors (3-5 a day for the first month)\n* £10k seed money per team\n* £90k potential further investment per team\n\nSo I say I was there as a hired gun, by which I mean [HappyNinjas](http://happyninjas.com/) were doing some contract work and it was a sweet deal. Good pay, free housing and no worries about council tax or bills made for a welcome relief after 5 months of hostels and traveling on my [Nomadic Web Development](/blog/2011/08/nomadic-web-development) trip around the states. I wasn't really sure if this was cheating, but not having to wonder where im going to be tomorrow certainly helped me focus on getting some work done.\n\n### 9 til Whaa?!\n\nWhat I was surprised about was just how much we all worked. I was going in with a freelance mindset of \"I will do X for £Y\" but most of the other teams were all co-founders and were all just motivated to make their idea happen. The number of times I would be sat in the office at 7pm and think \"Hey, I don't actually mind still being here\" was unreal. As time went on it was more like 10-11pm before we were heading home. One night I was sat in the office at midnight after a 3 hour \"networking session\" at the local pub and a developer walked in because he \"couldn't go to sleep without trying out an idea\". This sort of environment was amazing as you were never alone and always had somebody to bounce ideas off, and being surrounded by smart motivated people gets you even more motivated.\n\n### Repetition, Repetition, Repetition\n\nSomething else that struck me at first was just how much time was spent talking to mentors at a very early stage. Every single day was a roster of a few mentors that would come and talk to each team about their idea. Initially I know a few people were frustrated with this as repeating yourself over and over again is a definition of insanity, but this had two massive benefits:\n\n1. By repeating your pitch over and over and over to as many people as possible you get it *nailed*. You get feedback and can A/B test certain phrases to see which works best.\n2. Some of the mentors were people big tech guys part of companies from MixCloud to Amazon Web Services or PayPal who could give you great advice on tech and others were business types, IP lawyers, etc who can all help your ideas before you even get started writing any code. This could save a lot of time from redoing things you might not have even considered.\n\nEveryone went through the same process of initially talking about their products too much to try to explain them, but by the end of it most teams had it boiled down to a single sentence. If you have an idea you can't refine down to a sentence then you're either A) doing something way too complicated or B) trying to be a show-off by just talking about it too much. Put too many \"ands\" in there and you aren't describing the core product any more. \n\n### Business First, Code Later\n\n** Code is not the most important part of a tech startup in it's early stages.** This is a problem that a lot of developers find when they think of their \"million dollar idea\". It doesn't matter how many fancy doo-dads you can tack on, or how cleverly you build your massive network of servers all load-balanced and ready for your millions of users, if you can't get something together to show to investors then you've got no money and nobody cares what you're doing.\n\nNow that was quite a realisation to make for me as I am a proponent of bootstrapping; PyroCMS is a free product that has been slowly growing and improving over time with help and is now making a tidy profit. While I think bootstrapping is perfect for PyroCMS that is not the case for start-ups with big ideas. They need big money and to make that happen before somebody else does it, meaning investment needs to happen as early as possible before you worry about writing out every single feature. Put simply: don't be a nerd, be a businessman.\n\n### Network Like a Boss\n\nThe word \"networking\" in Newcastle seems to be my kind of networking: \"drinking\". Every other night there was a tech event, a trip to the pub, a PHPNE or Ruby NE meetup, a CodeWorks party, a dinner party or something else. I met a lot of interesting people at parties like the CodeWorks Christmas party (hmmm free warmed cider) or the ShareMyPlaylist Party (hmmm free cocktails) and while I wish I had business cards for some of the people I met, most of them had their own at least so now I have a nice big stack of cards to go through.\n\n### Next?\n\nUnfortunately the team I was on ran into trouble when the founder was taken ill, meaning he was the only team not able to pitch at the end. This was a real shame, but I am sure he will storm on without me once he is feeling better and I'm sure the company will go far. In the mean-time I am having a relax at home, crashing at [Jamie Rumbelow](http://twitter.com/jamierumbelow)'s place while he's off in Cyprus and getting PyroCMS 2.0 ready to launch while setting up a start-up of my own.\n\nI have a week to get as much of that done as possible. In January I'm off to the Canadian Rockies for a while and then off to stay with Lee Tengum to work on [PancakeApp](http://pancakeapp.com/) some more until I come back to blightey for [CICONF 2012](http://ciconf.com/) in London mid February.\n\nThroughout all of this and when I return I'll be back up to Newcastle to continue doing work for another ignite100 team called [Blooie](http://bloo.ie/) which I can't tell you a whole lot about until their patent comes through, but it is going to be very VERY interesting. I'm looking forward to 2012, just the first two months are already going to be epic.\n\n## Found a video\n\nI forgot all about this video, it's worth a watch if you want to see what was going on in that office. I miss it already! \n\n<p align=\"center\"><iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/embed/j-LRIPgy4S8\" frameborder=\"0\" allowfullscreen class=\"aligncenter\" ></iframe></p>",
    "created_on": "1325122320",
    "updated_on": "1325551723",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "edba36fcdf70ff9ddbc57f7b2eabe7e7",
    "type": "markdown",
    "parsed": "<p>I spent the last three months working as a hired gun for a start-up in an incubator program called <a href=\"http://ignite100.com/\">ignite100</a>, and now I am back in the south-west for the holidays and I feel like I have learned so much in such a short space of time. Ignite100 is a three month program run in Newcastle that helps teams create relationships with helpful mentors who have experience in different fields. I am sad that the program is over but I thought I'd write up my experiences. </p>\n\n<p>The set-up for ignite100 was:</p>\n\n<ul>\n<li>10 teams / start-ups</li>\n<li>Loads of potential mentors (3-5 a day for the first month)</li>\n<li>£10k seed money per team</li>\n<li>£90k potential further investment per team</li>\n</ul>\n\n<p>So I say I was there as a hired gun, by which I mean <a href=\"http://happyninjas.com/\">HappyNinjas</a> were doing some contract work and it was a sweet deal. Good pay, free housing and no worries about council tax or bills made for a welcome relief after 5 months of hostels and traveling on my <a href=\"/blog/2011/08/nomadic-web-development\">Nomadic Web Development</a> trip around the states. I wasn't really sure if this was cheating, but not having to wonder where im going to be tomorrow certainly helped me focus on getting some work done.</p>\n\n<h3>9 til Whaa?!</h3>\n\n<p>What I was surprised about was just how much we all worked. I was going in with a freelance mindset of \"I will do X for £Y\" but most of the other teams were all co-founders and were all just motivated to make their idea happen. The number of times I would be sat in the office at 7pm and think \"Hey, I don't actually mind still being here\" was unreal. As time went on it was more like 10-11pm before we were heading home. One night I was sat in the office at midnight after a 3 hour \"networking session\" at the local pub and a developer walked in because he \"couldn't go to sleep without trying out an idea\". This sort of environment was amazing as you were never alone and always had somebody to bounce ideas off, and being surrounded by smart motivated people gets you even more motivated.</p>\n\n<h3>Repetition, Repetition, Repetition</h3>\n\n<p>Something else that struck me at first was just how much time was spent talking to mentors at a very early stage. Every single day was a roster of a few mentors that would come and talk to each team about their idea. Initially I know a few people were frustrated with this as repeating yourself over and over again is a definition of insanity, but this had two massive benefits:</p>\n\n<ol>\n<li>By repeating your pitch over and over and over to as many people as possible you get it <em>nailed</em>. You get feedback and can A/B test certain phrases to see which works best.</li>\n<li>Some of the mentors were people big tech guys part of companies from MixCloud to Amazon Web Services or PayPal who could give you great advice on tech and others were business types, IP lawyers, etc who can all help your ideas before you even get started writing any code. This could save a lot of time from redoing things you might not have even considered.</li>\n</ol>\n\n<p>Everyone went through the same process of initially talking about their products too much to try to explain them, but by the end of it most teams had it boiled down to a single sentence. If you have an idea you can't refine down to a sentence then you're either A) doing something way too complicated or B) trying to be a show-off by just talking about it too much. Put too many \"ands\" in there and you aren't describing the core product any more. </p>\n\n<h3>Business First, Code Later</h3>\n\n<p>** Code is not the most important part of a tech startup in it's early stages.** This is a problem that a lot of developers find when they think of their \"million dollar idea\". It doesn't matter how many fancy doo-dads you can tack on, or how cleverly you build your massive network of servers all load-balanced and ready for your millions of users, if you can't get something together to show to investors then you've got no money and nobody cares what you're doing.</p>\n\n<p>Now that was quite a realisation to make for me as I am a proponent of bootstrapping; PyroCMS is a free product that has been slowly growing and improving over time with help and is now making a tidy profit. While I think bootstrapping is perfect for PyroCMS that is not the case for start-ups with big ideas. They need big money and to make that happen before somebody else does it, meaning investment needs to happen as early as possible before you worry about writing out every single feature. Put simply: don't be a nerd, be a businessman.</p>\n\n<h3>Network Like a Boss</h3>\n\n<p>The word \"networking\" in Newcastle seems to be my kind of networking: \"drinking\". Every other night there was a tech event, a trip to the pub, a PHPNE or Ruby NE meetup, a CodeWorks party, a dinner party or something else. I met a lot of interesting people at parties like the CodeWorks Christmas party (hmmm free warmed cider) or the ShareMyPlaylist Party (hmmm free cocktails) and while I wish I had business cards for some of the people I met, most of them had their own at least so now I have a nice big stack of cards to go through.</p>\n\n<h3>Next?</h3>\n\n<p>Unfortunately the team I was on ran into trouble when the founder was taken ill, meaning he was the only team not able to pitch at the end. This was a real shame, but I am sure he will storm on without me once he is feeling better and I'm sure the company will go far. In the mean-time I am having a relax at home, crashing at <a href=\"http://twitter.com/jamierumbelow\">Jamie Rumbelow</a>'s place while he's off in Cyprus and getting PyroCMS 2.0 ready to launch while setting up a start-up of my own.</p>\n\n<p>I have a week to get as much of that done as possible. In January I'm off to the Canadian Rockies for a while and then off to stay with Lee Tengum to work on <a href=\"http://pancakeapp.com/\">PancakeApp</a> some more until I come back to blightey for <a href=\"http://ciconf.com/\">CICONF 2012</a> in London mid February.</p>\n\n<p>Throughout all of this and when I return I'll be back up to Newcastle to continue doing work for another ignite100 team called <a href=\"http://bloo.ie/\">Blooie</a> which I can't tell you a whole lot about until their patent comes through, but it is going to be very VERY interesting. I'm looking forward to 2012, just the first two months are already going to be epic.</p>\n\n<h2>Found a video</h2>\n\n<p>I forgot all about this video, it's worth a watch if you want to see what was going on in that office. I miss it already! </p>\n\n<p align=\"center\"><iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/embed/j-LRIPgy4S8\" frameborder=\"0\" allowfullscreen class=\"aligncenter\" ></iframe></p>\n",
    "preview_hash": ""
  },
  {
    "id": "118",
    "created": "2012-03-06 10:41:00",
    "updated": "2012-03-07 00:29:54",
    "created_by": "2",
    "ordering_count": null,
    "title": "Packages: The Way Forward for PHP",
    "slug": "packages-the-way-forward-for-php",
    "category_id": "2",
    "attachment": "",
    "intro": "<p>\n\tA package is a piece of reusable code that can be dropped into any application and be used without any tinkering to add functionality to that code. You don&#39;t need to know what is happening inside, only what the API for the class(es) are so that you can archive your goal. This is how most modern programming languages work, but to make a generalisation: PHP developers hate packages. Why?</p>",
    "body": "What is a package? A package is a piece of reusable code that can be dropped into any application and be used without any tinkering to add functionality to that code. You don't need to know what is happening inside, only what the API for the class(es) are so that you can archive your goal. Maybe this package uses another package, that is called a dependency. \n\nMost package systems also allow for something called dependencies. This will basically allow \"Package A\" to sit on top of \"Package B\". What is great about this is that if I want to work on one chunk of code I can reuse another chunk. Instead of adding more code this can reduce the amount of extra code in your package, because \"Package C\" can sit on top of \"Package B\" too.\n\nThis is how most modern programming languages work, but to make a generalisation: **PHP developers hate packages**. Why? Well while other languages have great systems like [CPAN](http://www.cpan.org/) for Perl, [Gems](http://rubygems.org/) for Ruby, [PIP](http://pypi.python.org/pypi/pip), PHP has had a terrible history with package management going back years.\n\n### What about PEAR?\n\nPHP has had a packaging system for years called [PEAR](http://pear.php.net/). Let's get this understood right off the bat:\n\n> **PEAR sucks**\n\nTo get code onto the main PEAR repository you need to get a certain number of up-votes, otherwise it will not be accepted. This was meant to ensure quality but has only helped to detur contributions and promote elitism. \n\nAnother knock-on effect is that you have to install pretty much any code you need to add a new repository, because so many people are using their own to avoid using the default repo. That makes it harder to search, harder to contribute and just generally more of a bitch to work with.\n\nOf the packages already on on PEAR, most of them are massively out of date, inactive and no longer maintained, or never made it out of alpha. I have heard a few developers say \"PEAR is awesome, they have a package for everything!\". Maybe, but when I see that amongst a team of 4 developers, 2 are inactive and the code only got to 0.2.1 (alpha) in 2006-04-22, I am not full of hope for the stability of that codebase.\n\nThe nail in the coffin for me with PEAR is one of the biggest bug bears of the Gem system: system-wide installation. If I want to use a specific package, which requires a newer version of an already installed package, then I have to update it on my whole installation. That means an application I have not touched in weeks might break next time I try loading it on my local box. WAT?\n\n### The community gave up on PEAR\n\nWith frameworks like [Ruby on Rails](http://rubyonrails.org/) doing a cracking job of helping developers get things done faster, PHP frameworks started springing up.\n\nCodeIgniter set out in 2006 suggesting it was for developers who \"are not interested in large-scale monolithic libraries like PEAR\". Almost instantly people were hooked. They could make an entire application with the most useful libraries guaranteed to work with their code. Everything was versioned as one, released as one and had the same team.\n\nIn a time where nobody in the PHP community could decide on a standard, PHP frameworks would each adopts a coding standard. No matter what those standards were, at least they were the same in all the classes.\n\nCodeIgniter was not the only framework around, with [CakePHP](http://cakephp.org/) and [Symfony](http://symfony.com/) starting out at similar times. They all had the intention of helping developers build applications without the hassle of dependencies, so people got used to building everything with a framework.\n\n### Let's all start building frameworks\n\nSince late 2005 / early 2006 when these projects set out, hundreds of PHP frameworks have been developed by single developers, companies, community projects, everyone and their dog seems to have been involved with creating a PHP framework at some point or other, hell I've been involved in two: CodeIgniter and [FuelPHP](http://fuelphp.com/). \n\nPHP frameworks themselves have taken some flak for building up all this new code, bundling in ORM's (I've always said ORM's should not be part of a framework), adding in their own DB abstraction layers, etc. Some see this as a barrier as to switch to a new framework means throwing out everything you know and starting again.\n\nOne problem with PHP frameworks is that when one framework doesn't do exactly what a developer wants, they either dump it and start building their own, or fork the existing one until there is no resemblence. This all or nothing approach is what has lead to our main problem: ** Reusable Code **.\n\nDoes a library written for Kohana work with CodeIgniter - which was at one point a CodeIgniter fork itself? **Nope**.\n\nDoes a package written for Symfony work with FuelPHP? **Not even close!**\n\n### Stuff frameworks, let's go native\n\nYou wouldn't be the first to suggest it. As you know, creator of PHP Rasmus Lerdorf is all about procedural code and suggested years back that you [write your own basic MVC architecture](http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html) and not a full \"framework\". \n\nWhy do that? I have to build my own code that turns a URL into a loaded PHP file, I have to sort out a configuration system, handle \"templates\", do a million things that I could have done in seconds with a framework. Also, when I get another developer in I love just saying \"this is CodeIgniter so you know whats going on\" and not spend hours taking them through all my random code, which is probably different for each project.\n\nThe MVC wrappers were never the problem here, the problem was the lack of reusable code. Classes that developers can use to build their applications quickly. For years we Googled for PHP libraries and found them from places like [SourceForge](http://sourceforge.net/), [PHP Classes](http://www.phpclasses.org/), [Google Code](http://code.google.com/) but this lead to a million different coding standards, no way to get notified about new versions and was generally just a shit way to manage code. \n\n### Let's build an unframework!\n\nThis is a fun term that started sprining up with projects like [Flourish](http://flourishlib.com/) and [Spoon](http://www.spoon-library.com/) starting to build reusable components that you could drop into any application.\n\nThats idea is lovely and all but Flourish never made it out of BETA after years of development.\n\nSpoon looks brilliant - mainly thanks to their shiny design - but is a one-man-army. How can we expect one guy to take care of all that code? It took a year for the developer to get from 1.2.0 to 1.3.0 which is not a speed of progress I am happy with.\n\nSomebody is even working on a new unframework called [Phrame](http://www.phrame.org/) which is only a splash page with a subscription box. Do we need more of these small-team solutions?\n\n### So… what?\n\nPackages were never the problem. The PHP community has coded itself round in circles for years without ever actually fixing the problem and we're back where we started.\n\n**We need a better packages system.** PEAR2 happened, but it still just sucks.\n\nFrameworks have been used to the idea that they were the solution to a problem - and they are. They are fixing a lot of problems but a problem all the frameworks have been trying to fix over the last year are - wait for it… packages!\n\n* CodeIgniter has [Sparks](http://getsparks.org/)\n* FuelPHP has [Cells](http://docs.fuelphp.com/general/packages.html) (website never went live)\n* Laravel has [Bundles](http://bundles.laravel.com/)\n* CakePHP has [The Bakery](http://bakery.cakephp.org/) \n* ZF2 just got [Modules](http://akrabat.com/zend-framework-2/modules-in-zf2/)\n\nNot even Zend are using PEAR? Funny that.\n\nThese framework specific packages - espeically those with command line install / update utilities - are a breath of fresh air are and the communities are happy with the added functionality they can instantly put into their applications.\n\nThe downside is that the same code is being written over and over again for different frameworks, which is a massive waste of man-hours.\n\nLet's take a personal example. I noticed recently that Laravel has a [OAuth2 Bundle](http://bundles.laravel.com/bundle/laravel-oauth2), which was forked from my [CodeIgniter Spark](http://getsparks.org/packages/oauth2/versions/HEAD/show). I converted that OAuth2 Spark from a [FuelPHP Cell](https://github.com/fuel-packages/fuel-oauth2) when I had a project that called for it.\n\n_**WHAT THE HELL?**_\n\nThe realisation hit me like kipper to the face. Why are we all sat around building out identical solutions to each other or forking and maintaining seperate codebases when we could just be finishing projects? \n\nI on average spend 70% of my working day on client projects and 30% building or fixing, writing or porting packages and libraries. That 30% could make me 30% richer, or give me 30% more time doing something more interesting than writing code. Maybe I could get around to writing an even BIGGER rant about something else?\n\nWhatever it is we would end up doing with this extra time, we need to find a way to get there.\n\n> The PHP community needs to get together behind a new solution and the framework developers need to lead the charge.\n\n### The Plan\n\nTwo very talented PHP developers (<a href=\"http://www.naderman.de\">Nils Adermann</a> and <a href=\"http://seld.be/\">Jordi Boggiano</a>) have been working on a PEAR-killer called [Composer](http://getcomposer.org/), which has a single default repository called [Packagist](http://packagist.org/). Composer is based on systems like npm (NodeJS Package Manager) and Bundler / RubyGems. \n\nThere is another solution called [Phark](https://github.com/lox/phark) but it's still unfinished and their syntax is horrid. Sorry guys but Phark just doesn't look any good to me - and the website linked from your GitHub repo is giving DNS errors. Moving on.\n\nI am happy to see that Symfony are all over packages like a wet flannel. They have been helping out and a huge number of their packages are now using Composer - they've even been sending in pull requests.\n\nOther well known developers like [Ed Finkler](http://funkatron.com/) and [Chris Hartjes](http://www.littlehart.net/atthekeyboard/) who record the [/dev/null postcast](http://itunes.apple.com/us/podcast/dev-hell/id489840699) are behind it too. Check the first episode for some of their reasoning. Ed has a bunch of code on Packagist and I'll be joining him with as much code as I can - such as my [NinjAuth](http://philsturgeon.co.uk/blog/2011/09/ninjauth-social-integration-php) multi-provider user authentication system.\n\nMore than that I am really happy to say that after talking to the FuelPHP team they are all convinced this is the right way for FuelPHP to go. By removing the different between modules and packages, making pretty much everything into a package and fully supporting the PSR-0 standard of file and class naming, we become fully package based.\n\nFuelPHP will still have Cells, but they will be a Composer package that uses a FuelPHP repository. That means our command line utility will be able to install FuelPHP specific code from the FuelPHP repo, and fall back to generic packages. We'll be amending our Autoloader in 2.0 to support Composer packages, and if there is no FuelPHP autoloader in there (which of course generic packages won't) then FuelPHP will just crack on and find the files, instead of being told where they are. Minor speed loss for full support of generic packages sounds reasonable to me!\n\nHopefully Laravel, Lithium and anyone developing a PHP 5.3 framework will see the light. Don't build out a new system, don't silo your users, don't waste time building code that already exists and for god's sake stop building un-frameworks.\n\n### What Can You Do?\n\nGot a good PHP class? Is it only on GitHub, or maybe it's just sitting around on your blog? \n\n**Stop that. Stop that right now.** Make it into a Composer package and host it on Packagist. While you're at it add [unit testing](http://www.youtube.com/watch?v=Iq6wvboGU-A&noredirect=1), set up [Travis](http://travis-ci.org/) with a GitHub service hook and show off how stable it is.\n\nThis all makes it easier for anyone use your code, so anyone can contribute to it. The more we reuse the same packages, the more pull requests we can expect to see on that same code, which makes it more portable, more extensive, reduces bugs and means we can all spend a little more time working on that side-project that will eventually pay for us to get out of this coding lark, marry a fashion model and move to our private island for an early retirement.\n\nOnly half of that plan is far fetched, the other half you can do right now.",
    "created_on": "1331030460",
    "updated_on": "1331080194",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "19c97ff42534b6f8bb75df7bbc8d321e",
    "type": "markdown",
    "parsed": "<p>What is a package? A package is a piece of reusable code that can be dropped into any application and be used without any tinkering to add functionality to that code. You don't need to know what is happening inside, only what the API for the class(es) are so that you can archive your goal. Maybe this package uses another package, that is called a dependency. </p>\n\n<p>Most package systems also allow for something called dependencies. This will basically allow \"Package A\" to sit on top of \"Package B\". What is great about this is that if I want to work on one chunk of code I can reuse another chunk. Instead of adding more code this can reduce the amount of extra code in your package, because \"Package C\" can sit on top of \"Package B\" too.</p>\n\n<p>This is how most modern programming languages work, but to make a generalisation: <strong>PHP developers hate packages</strong>. Why? Well while other languages have great systems like <a href=\"http://www.cpan.org/\">CPAN</a> for Perl, <a href=\"http://rubygems.org/\">Gems</a> for Ruby, <a href=\"http://pypi.python.org/pypi/pip\">PIP</a>, PHP has had a terrible history with package management going back years.</p>\n\n<h3>What about PEAR?</h3>\n\n<p>PHP has had a packaging system for years called <a href=\"http://pear.php.net/\">PEAR</a>. Let's get this understood right off the bat:</p>\n\n<blockquote>\n  <p><strong>PEAR sucks</strong></p>\n</blockquote>\n\n<p>To get code onto the main PEAR repository you need to get a certain number of up-votes, otherwise it will not be accepted. This was meant to ensure quality but has only helped to detur contributions and promote elitism. </p>\n\n<p>Another knock-on effect is that you have to install pretty much any code you need to add a new repository, because so many people are using their own to avoid using the default repo. That makes it harder to search, harder to contribute and just generally more of a bitch to work with.</p>\n\n<p>Of the packages already on on PEAR, most of them are massively out of date, inactive and no longer maintained, or never made it out of alpha. I have heard a few developers say \"PEAR is awesome, they have a package for everything!\". Maybe, but when I see that amongst a team of 4 developers, 2 are inactive and the code only got to 0.2.1 (alpha) in 2006-04-22, I am not full of hope for the stability of that codebase.</p>\n\n<p>The nail in the coffin for me with PEAR is one of the biggest bug bears of the Gem system: system-wide installation. If I want to use a specific package, which requires a newer version of an already installed package, then I have to update it on my whole installation. That means an application I have not touched in weeks might break next time I try loading it on my local box. WAT?</p>\n\n<h3>The community gave up on PEAR</h3>\n\n<p>With frameworks like <a href=\"http://rubyonrails.org/\">Ruby on Rails</a> doing a cracking job of helping developers get things done faster, PHP frameworks started springing up.</p>\n\n<p>CodeIgniter set out in 2006 suggesting it was for developers who \"are not interested in large-scale monolithic libraries like PEAR\". Almost instantly people were hooked. They could make an entire application with the most useful libraries guaranteed to work with their code. Everything was versioned as one, released as one and had the same team.</p>\n\n<p>In a time where nobody in the PHP community could decide on a standard, PHP frameworks would each adopts a coding standard. No matter what those standards were, at least they were the same in all the classes.</p>\n\n<p>CodeIgniter was not the only framework around, with <a href=\"http://cakephp.org/\">CakePHP</a> and <a href=\"http://symfony.com/\">Symfony</a> starting out at similar times. They all had the intention of helping developers build applications without the hassle of dependencies, so people got used to building everything with a framework.</p>\n\n<h3>Let's all start building frameworks</h3>\n\n<p>Since late 2005 / early 2006 when these projects set out, hundreds of PHP frameworks have been developed by single developers, companies, community projects, everyone and their dog seems to have been involved with creating a PHP framework at some point or other, hell I've been involved in two: CodeIgniter and <a href=\"http://fuelphp.com/\">FuelPHP</a>. </p>\n\n<p>PHP frameworks themselves have taken some flak for building up all this new code, bundling in ORM's (I've always said ORM's should not be part of a framework), adding in their own DB abstraction layers, etc. Some see this as a barrier as to switch to a new framework means throwing out everything you know and starting again.</p>\n\n<p>One problem with PHP frameworks is that when one framework doesn't do exactly what a developer wants, they either dump it and start building their own, or fork the existing one until there is no resemblence. This all or nothing approach is what has lead to our main problem: ** Reusable Code **.</p>\n\n<p>Does a library written for Kohana work with CodeIgniter - which was at one point a CodeIgniter fork itself? <strong>Nope</strong>.</p>\n\n<p>Does a package written for Symfony work with FuelPHP? <strong>Not even close!</strong></p>\n\n<h3>Stuff frameworks, let's go native</h3>\n\n<p>You wouldn't be the first to suggest it. As you know, creator of PHP Rasmus Lerdorf is all about procedural code and suggested years back that you <a href=\"http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html\">write your own basic MVC architecture</a> and not a full \"framework\". </p>\n\n<p>Why do that? I have to build my own code that turns a URL into a loaded PHP file, I have to sort out a configuration system, handle \"templates\", do a million things that I could have done in seconds with a framework. Also, when I get another developer in I love just saying \"this is CodeIgniter so you know whats going on\" and not spend hours taking them through all my random code, which is probably different for each project.</p>\n\n<p>The MVC wrappers were never the problem here, the problem was the lack of reusable code. Classes that developers can use to build their applications quickly. For years we Googled for PHP libraries and found them from places like <a href=\"http://sourceforge.net/\">SourceForge</a>, <a href=\"http://www.phpclasses.org/\">PHP Classes</a>, <a href=\"http://code.google.com/\">Google Code</a> but this lead to a million different coding standards, no way to get notified about new versions and was generally just a shit way to manage code. </p>\n\n<h3>Let's build an unframework!</h3>\n\n<p>This is a fun term that started sprining up with projects like <a href=\"http://flourishlib.com/\">Flourish</a> and <a href=\"http://www.spoon-library.com/\">Spoon</a> starting to build reusable components that you could drop into any application.</p>\n\n<p>Thats idea is lovely and all but Flourish never made it out of BETA after years of development.</p>\n\n<p>Spoon looks brilliant - mainly thanks to their shiny design - but is a one-man-army. How can we expect one guy to take care of all that code? It took a year for the developer to get from 1.2.0 to 1.3.0 which is not a speed of progress I am happy with.</p>\n\n<p>Somebody is even working on a new unframework called <a href=\"http://www.phrame.org/\">Phrame</a> which is only a splash page with a subscription box. Do we need more of these small-team solutions?</p>\n\n<h3>So… what?</h3>\n\n<p>Packages were never the problem. The PHP community has coded itself round in circles for years without ever actually fixing the problem and we're back where we started.</p>\n\n<p><strong>We need a better packages system.</strong> PEAR2 happened, but it still just sucks.</p>\n\n<p>Frameworks have been used to the idea that they were the solution to a problem - and they are. They are fixing a lot of problems but a problem all the frameworks have been trying to fix over the last year are - wait for it… packages!</p>\n\n<ul>\n<li>CodeIgniter has <a href=\"http://getsparks.org/\">Sparks</a></li>\n<li>FuelPHP has <a href=\"http://docs.fuelphp.com/general/packages.html\">Cells</a> (website never went live)</li>\n<li>Laravel has <a href=\"http://bundles.laravel.com/\">Bundles</a></li>\n<li>CakePHP has <a href=\"http://bakery.cakephp.org/\">The Bakery</a> </li>\n<li>ZF2 just got <a href=\"http://akrabat.com/zend-framework-2/modules-in-zf2/\">Modules</a></li>\n</ul>\n\n<p>Not even Zend are using PEAR? Funny that.</p>\n\n<p>These framework specific packages - espeically those with command line install / update utilities - are a breath of fresh air are and the communities are happy with the added functionality they can instantly put into their applications.</p>\n\n<p>The downside is that the same code is being written over and over again for different frameworks, which is a massive waste of man-hours.</p>\n\n<p>Let's take a personal example. I noticed recently that Laravel has a <a href=\"http://bundles.laravel.com/bundle/laravel-oauth2\">OAuth2 Bundle</a>, which was forked from my <a href=\"http://getsparks.org/packages/oauth2/versions/HEAD/show\">CodeIgniter Spark</a>. I converted that OAuth2 Spark from a <a href=\"https://github.com/fuel-packages/fuel-oauth2\">FuelPHP Cell</a> when I had a project that called for it.</p>\n\n<p><em><strong>WHAT THE HELL?</strong></em></p>\n\n<p>The realisation hit me like kipper to the face. Why are we all sat around building out identical solutions to each other or forking and maintaining seperate codebases when we could just be finishing projects? </p>\n\n<p>I on average spend 70% of my working day on client projects and 30% building or fixing, writing or porting packages and libraries. That 30% could make me 30% richer, or give me 30% more time doing something more interesting than writing code. Maybe I could get around to writing an even BIGGER rant about something else?</p>\n\n<p>Whatever it is we would end up doing with this extra time, we need to find a way to get there.</p>\n\n<blockquote>\n  <p>The PHP community needs to get together behind a new solution and the framework developers need to lead the charge.</p>\n</blockquote>\n\n<h3>The Plan</h3>\n\n<p>Two very talented PHP developers (<a href=\"http://www.naderman.de\">Nils Adermann</a> and <a href=\"http://seld.be/\">Jordi Boggiano</a>) have been working on a PEAR-killer called <a href=\"http://getcomposer.org/\">Composer</a>, which has a single default repository called <a href=\"http://packagist.org/\">Packagist</a>. Composer is based on systems like npm (NodeJS Package Manager) and Bundler / RubyGems. </p>\n\n<p>There is another solution called <a href=\"https://github.com/lox/phark\">Phark</a> but it's still unfinished and their syntax is horrid. Sorry guys but Phark just doesn't look any good to me - and the website linked from your GitHub repo is giving DNS errors. Moving on.</p>\n\n<p>I am happy to see that Symfony are all over packages like a wet flannel. They have been helping out and a huge number of their packages are now using Composer - they've even been sending in pull requests.</p>\n\n<p>Other well known developers like <a href=\"http://funkatron.com/\">Ed Finkler</a> and <a href=\"http://www.littlehart.net/atthekeyboard/\">Chris Hartjes</a> who record the <a href=\"http://itunes.apple.com/us/podcast/dev-hell/id489840699\">/dev/null postcast</a> are behind it too. Check the first episode for some of their reasoning. Ed has a bunch of code on Packagist and I'll be joining him with as much code as I can - such as my <a href=\"http://philsturgeon.co.uk/blog/2011/09/ninjauth-social-integration-php\">NinjAuth</a> multi-provider user authentication system.</p>\n\n<p>More than that I am really happy to say that after talking to the FuelPHP team they are all convinced this is the right way for FuelPHP to go. By removing the different between modules and packages, making pretty much everything into a package and fully supporting the PSR-0 standard of file and class naming, we become fully package based.</p>\n\n<p>FuelPHP will still have Cells, but they will be a Composer package that uses a FuelPHP repository. That means our command line utility will be able to install FuelPHP specific code from the FuelPHP repo, and fall back to generic packages. We'll be amending our Autoloader in 2.0 to support Composer packages, and if there is no FuelPHP autoloader in there (which of course generic packages won't) then FuelPHP will just crack on and find the files, instead of being told where they are. Minor speed loss for full support of generic packages sounds reasonable to me!</p>\n\n<p>Hopefully Laravel, Lithium and anyone developing a PHP 5.3 framework will see the light. Don't build out a new system, don't silo your users, don't waste time building code that already exists and for god's sake stop building un-frameworks.</p>\n\n<h3>What Can You Do?</h3>\n\n<p>Got a good PHP class? Is it only on GitHub, or maybe it's just sitting around on your blog? </p>\n\n<p><strong>Stop that. Stop that right now.</strong> Make it into a Composer package and host it on Packagist. While you're at it add <a href=\"http://www.youtube.com/watch?v=Iq6wvboGU-A&amp;noredirect=1\">unit testing</a>, set up <a href=\"http://travis-ci.org/\">Travis</a> with a GitHub service hook and show off how stable it is.</p>\n\n<p>This all makes it easier for anyone use your code, so anyone can contribute to it. The more we reuse the same packages, the more pull requests we can expect to see on that same code, which makes it more portable, more extensive, reduces bugs and means we can all spend a little more time working on that side-project that will eventually pay for us to get out of this coding lark, marry a fashion model and move to our private island for an early retirement.</p>\n\n<p>Only half of that plan is far fetched, the other half you can do right now.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "120",
    "created": "2012-04-24 21:18:00",
    "updated": "2012-04-24 23:48:02",
    "created_by": "2",
    "ordering_count": null,
    "title": "CMS: Interesting History, Powerful Future",
    "slug": "cms-interesting-history-powerful-future",
    "category_id": "2",
    "attachment": "",
    "intro": "As a CMS developer on the PyroCMS team, a common problem I have to deal with on an almost daily basis is peoples strange fear of using a CMS as a base for a project. People often suggest the tools of my trade are not appropriate, are only for \"small sites\" or should not be used as a base for an application. I know there are plenty of awful content management systems around, but I propose a few rules for CMS developers to follow so we can shirk this dark cloud that hangs over us.",
    "body": "As a CMS developer on the PyroCMS team, a common problem I have to deal with on an almost daily basis is peoples strange fear of using a CMS as a base for a project. People often suggest the tools of my trade are not appropriate, are only for \"small sites\" or should not be used as a base for an application. I know there are plenty of awful content management systems around, but I propose a few rules for CMS developers to follow so we can shirk this dark cloud that hangs over us.\n\nIn many places I will talk about from the side of an end user - often a client, or whoever is in charge of looking after the website, and the side of a developer - who wants to (or is being paid to) extend and improve the system.\n\n### CMS History, from where I stood\n\nI've been building sites since I was about 12. I started off messing around with phpBB which was just a bulletin board but it started getting all sorts of hacks to allow certain forum posts to be pages. Weird, but it was better than making everything with HTML.\n\nPostNuke and PHP-Nuke came along and blew that approach out of the water. Suddenly there was a full on CMS that could do... ANYTHING. Sadly it was an ugly piece of crap, had a horrible code-base and building modules for it was a chore. It wasn't the fault of the team, it was 2001 and who knew any better?\n\nI used it for years - and even got involved with the PNphpBB team who tirelessly fought to keep phpBB and Postnuke integrated - but it was terrible. Drupal and Joomla were other solutions to the same problem, but were still way too complicated for the every-man and still lacked the clean MVC core, meaning that more PHP soup was to be found. For both end users clicking around on the backend and developers trying to build something up, it was not easy to learn how to work with these beasts and for anyone not interested in paying for training, other solutions were still sought after.\n\nSimpler \"blogging platforms\" started springing up. WordPress and pMachine came along to save the day. Suddenly we had awesome blogging systems that could blog, and... well write blogs... They were cool, but people wanted to have a blog AND a site, so these systems started allowing certain posts to act as pages. Weird, seems a bit like that old phpBB approach but... lets go with it for now.\n\nBlogging platforms get Add-ons! What better way to stop them just being about Posts and kinda-Pages-almost, now they can do ANYTHING! They have e-Commerce solutions, and all sorts of other bits strapped to the side. Getting people to build part of your application for you is fun, because you don't need to write it yourself. Sadly that is only a good thing if the code is any good, and that relies on the API provided to the developers being well thought out, wide reaching through the system and done with clean OOP code.\n\nSadly this is not how WordPress does things.\n\n### The Wrong Way\n\nWhile everything in WordPress is a post in a weblog, they can extend functionality with \"Plugins\", but let's take a look at the WordPress definition of a Plugin:\n\n> WordPress Plugin: A WordPress Plugin is a program, or a set of one or more functions, written in the PHP scripting language, that adds a specific set of features or services to the WordPress weblog, which can be seamlessly integrated with the weblog using access points and methods provided by the WordPress Plugin Application Program Interface (API).\n\n__Source:__ [WordPress.com: Writing a Plugin](https://codex.wordpress.org/Writing_a_Plugin)\n\nTo give the WordPress community their due they have managed to integrate a LOT into their \"weblog\". Using Plugins they can do all sorts of crazy stuff, including e-Commerce and building entire social networks. <img src=\"http://thereifixedit.files.wordpress.com/2009/06/tifi-redneckhouseboater.jpg\" style=\"float:right; width: 300px; margin: 1em 0 0 1em;\" />That in itself does not mean they are doing it right and I come into contact on a daily basis with people who are jaded against developing with CMS systems because of this, even some friends in the start-up world who are painfully trying to find funding after their first prototype got smashed together with WP-tape and string. With a little bit of hacking you'll soon find anything is possible, for more evidence of this check out the [There I Fixed It!](http://thereifixedit.failblog.org/) blog, topically enough on WordPress itself.\n\n### The Even Wronger Way\n\nThe best \"I Fixed It\" was working for Hargreaves Lansdown when they put in a £500,000 Content Management System to replace an in-house CMS. Sure the one we used had basic MVC, could use just a TPL or PHP and worked perfectly, but it took the Marketing team a few hours to make text changes and that meant we had to ditch all of our well structured code and use some shiny does-everything CMS to help them change text quicker...\n\nAlmost straight away we pointed out to the developers of the CMS that although we had all sorts of \"Assets\" available to us, there was nothing to actually access our content. They came up with the solution: the \"REST Resource JavaScript Asset\". This allows us to consume a REST endpoint, handle the response (XML only) with ECMAScript (not even any known version of valid JavaScript) on the server-side (years before node, potentially some Java emulator but we never found out) and output HTML with document.write() which didn't actually go to the browser then, no, it was cached and the response was saved as HTML and eventually shoved into page content after a bunch of MySQL queries had been run to find the cached output.\n\nSlow? Yes.\nConfusing? Yes.\nRidiculous? Absolutely.\n\nTo this day I maintain that if we DID have to shove a CMS in there, a copy of ExpressionEngine 2 and my [Rest plugin](http://devot-ee.com/add-ons/rest) would have done a better job and saved us about £499,600.\n\nAs soon as the project was complete - and management went off for their lobster celebrations - I threw down my crow-bar and quit. That is not the right way.\n\n### The Right Way\n\nA Content Management System by definition just means that you should be able to manage your content. Outside of that a CMS should really not be interfering at all. If a CMS tries to make everything into one thing, be that \"everything is a page\", \"everything is an asset\", or whatever, then you are going to make it WAY too complicated for any mere mortal to ever effectively do anything. \n\nAs a developer you want to be given freedom to create custom URLs that aren't always a page, that can handle their own forms, their own HTML views, DB models that can talk to the database or some Mongo DB server somewhere in a far off land, or whatever the hell you like. If you want to build a module then your application should be given everything it requires to do that, and every module should be treated as a first class citizen of your application.\n\nAs a client you want to have access to well built add-ons that just make sense. You can't do that if you have to learn how to add everything as an asset or a channel or whatever, because it means that every single aspect of a website has been reduced and abstracted so far that it barely resembles anything logical. That goes for making everything into a Sitemap too. THAT DOES NOT WORK, so stop it, all of you.\n\nA few more points for consideration:\n\n* __Don't be a hero, use a framework__ - you instantly have a bigger community and greatly improved security.\n* __Plan your add-on system well__ - Modularity is king. Every module should be a mini application with first-class access to everything.\n* __Dont try and give EVERYTHING an interface__ - the internets will always at some point need a geek to poke some code, don't be scared of that.\n* __On the contrary, don't force clients to code__ - complex \"tag syntax\" should absolutely be there for adding power, but learning it should never be __required__ for an end user.\n\n### Conclusion\n\nIf you are building your own CMS then try and stick to some of these rules. There are enough systems out there and many of them are convoluted, confusing, restrictive and are giving my software a bad name. \n\nPyroCMS will continue to develop along these lines and I will still use PyroCMS as a base for all sorts of random projects. People suggest you can only really build basic web sites, but I have recently used it for everything from massive boring corporate sites to iPhone backends and REST API driven websites that users can get a API Key for to do some cool things.\n\nI generally see no need to \"build it all from scratch\" unless I am doing something really REALLY custom, for which I am always happy to have CodeIgniter and FuelPHP in my arsenal, but if I EVER have to write another blog or forgotten password system I will probably rage-quit the internet and become a kayak instructor.",
    "created_on": "1335302280",
    "updated_on": "1335311282",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "214d5e01d444471c6f789e58f8e4206a",
    "type": "markdown",
    "parsed": "<p>As a CMS developer on the PyroCMS team, a common problem I have to deal with on an almost daily basis is peoples strange fear of using a CMS as a base for a project. People often suggest the tools of my trade are not appropriate, are only for \"small sites\" or should not be used as a base for an application. I know there are plenty of awful content management systems around, but I propose a few rules for CMS developers to follow so we can shirk this dark cloud that hangs over us.</p>\n\n<p>In many places I will talk about from the side of an end user - often a client, or whoever is in charge of looking after the website, and the side of a developer - who wants to (or is being paid to) extend and improve the system.</p>\n\n<h3>CMS History, from where I stood</h3>\n\n<p>I've been building sites since I was about 12. I started off messing around with phpBB which was just a bulletin board but it started getting all sorts of hacks to allow certain forum posts to be pages. Weird, but it was better than making everything with HTML.</p>\n\n<p>PostNuke and PHP-Nuke came along and blew that approach out of the water. Suddenly there was a full on CMS that could do... ANYTHING. Sadly it was an ugly piece of crap, had a horrible code-base and building modules for it was a chore. It wasn't the fault of the team, it was 2001 and who knew any better?</p>\n\n<p>I used it for years - and even got involved with the PNphpBB team who tirelessly fought to keep phpBB and Postnuke integrated - but it was terrible. Drupal and Joomla were other solutions to the same problem, but were still way too complicated for the every-man and still lacked the clean MVC core, meaning that more PHP soup was to be found. For both end users clicking around on the backend and developers trying to build something up, it was not easy to learn how to work with these beasts and for anyone not interested in paying for training, other solutions were still sought after.</p>\n\n<p>Simpler \"blogging platforms\" started springing up. WordPress and pMachine came along to save the day. Suddenly we had awesome blogging systems that could blog, and... well write blogs... They were cool, but people wanted to have a blog AND a site, so these systems started allowing certain posts to act as pages. Weird, seems a bit like that old phpBB approach but... lets go with it for now.</p>\n\n<p>Blogging platforms get Add-ons! What better way to stop them just being about Posts and kinda-Pages-almost, now they can do ANYTHING! They have e-Commerce solutions, and all sorts of other bits strapped to the side. Getting people to build part of your application for you is fun, because you don't need to write it yourself. Sadly that is only a good thing if the code is any good, and that relies on the API provided to the developers being well thought out, wide reaching through the system and done with clean OOP code.</p>\n\n<p>Sadly this is not how WordPress does things.</p>\n\n<h3>The Wrong Way</h3>\n\n<p>While everything in WordPress is a post in a weblog, they can extend functionality with \"Plugins\", but let's take a look at the WordPress definition of a Plugin:</p>\n\n<blockquote>\n  <p>WordPress Plugin: A WordPress Plugin is a program, or a set of one or more functions, written in the PHP scripting language, that adds a specific set of features or services to the WordPress weblog, which can be seamlessly integrated with the weblog using access points and methods provided by the WordPress Plugin Application Program Interface (API).</p>\n</blockquote>\n\n<p><strong>Source:</strong> <a href=\"https://codex.wordpress.org/Writing_a_Plugin\">WordPress.com: Writing a Plugin</a></p>\n\n<p>To give the WordPress community their due they have managed to integrate a LOT into their \"weblog\". Using Plugins they can do all sorts of crazy stuff, including e-Commerce and building entire social networks. <img src=\"http://thereifixedit.files.wordpress.com/2009/06/tifi-redneckhouseboater.jpg\" style=\"float:right; width: 300px; margin: 1em 0 0 1em;\" />That in itself does not mean they are doing it right and I come into contact on a daily basis with people who are jaded against developing with CMS systems because of this, even some friends in the start-up world who are painfully trying to find funding after their first prototype got smashed together with WP-tape and string. With a little bit of hacking you'll soon find anything is possible, for more evidence of this check out the <a href=\"http://thereifixedit.failblog.org/\">There I Fixed It!</a> blog, topically enough on WordPress itself.</p>\n\n<h3>The Even Wronger Way</h3>\n\n<p>The best \"I Fixed It\" was working for Hargreaves Lansdown when they put in a £500,000 Content Management System to replace an in-house CMS. Sure the one we used had basic MVC, could use just a TPL or PHP and worked perfectly, but it took the Marketing team a few hours to make text changes and that meant we had to ditch all of our well structured code and use some shiny does-everything CMS to help them change text quicker...</p>\n\n<p>Almost straight away we pointed out to the developers of the CMS that although we had all sorts of \"Assets\" available to us, there was nothing to actually access our content. They came up with the solution: the \"REST Resource JavaScript Asset\". This allows us to consume a REST endpoint, handle the response (XML only) with ECMAScript (not even any known version of valid JavaScript) on the server-side (years before node, potentially some Java emulator but we never found out) and output HTML with document.write() which didn't actually go to the browser then, no, it was cached and the response was saved as HTML and eventually shoved into page content after a bunch of MySQL queries had been run to find the cached output.</p>\n\n<p>Slow? Yes.\nConfusing? Yes.\nRidiculous? Absolutely.</p>\n\n<p>To this day I maintain that if we DID have to shove a CMS in there, a copy of ExpressionEngine 2 and my <a href=\"http://devot-ee.com/add-ons/rest\">Rest plugin</a> would have done a better job and saved us about £499,600.</p>\n\n<p>As soon as the project was complete - and management went off for their lobster celebrations - I threw down my crow-bar and quit. That is not the right way.</p>\n\n<h3>The Right Way</h3>\n\n<p>A Content Management System by definition just means that you should be able to manage your content. Outside of that a CMS should really not be interfering at all. If a CMS tries to make everything into one thing, be that \"everything is a page\", \"everything is an asset\", or whatever, then you are going to make it WAY too complicated for any mere mortal to ever effectively do anything. </p>\n\n<p>As a developer you want to be given freedom to create custom URLs that aren't always a page, that can handle their own forms, their own HTML views, DB models that can talk to the database or some Mongo DB server somewhere in a far off land, or whatever the hell you like. If you want to build a module then your application should be given everything it requires to do that, and every module should be treated as a first class citizen of your application.</p>\n\n<p>As a client you want to have access to well built add-ons that just make sense. You can't do that if you have to learn how to add everything as an asset or a channel or whatever, because it means that every single aspect of a website has been reduced and abstracted so far that it barely resembles anything logical. That goes for making everything into a Sitemap too. THAT DOES NOT WORK, so stop it, all of you.</p>\n\n<p>A few more points for consideration:</p>\n\n<ul>\n<li><strong>Don't be a hero, use a framework</strong> - you instantly have a bigger community and greatly improved security.</li>\n<li><strong>Plan your add-on system well</strong> - Modularity is king. Every module should be a mini application with first-class access to everything.</li>\n<li><strong>Dont try and give EVERYTHING an interface</strong> - the internets will always at some point need a geek to poke some code, don't be scared of that.</li>\n<li><strong>On the contrary, don't force clients to code</strong> - complex \"tag syntax\" should absolutely be there for adding power, but learning it should never be <strong>required</strong> for an end user.</li>\n</ul>\n\n<h3>Conclusion</h3>\n\n<p>If you are building your own CMS then try and stick to some of these rules. There are enough systems out there and many of them are convoluted, confusing, restrictive and are giving my software a bad name. </p>\n\n<p>PyroCMS will continue to develop along these lines and I will still use PyroCMS as a base for all sorts of random projects. People suggest you can only really build basic web sites, but I have recently used it for everything from massive boring corporate sites to iPhone backends and REST API driven websites that users can get a API Key for to do some cool things.</p>\n\n<p>I generally see no need to \"build it all from scratch\" unless I am doing something really REALLY custom, for which I am always happy to have CodeIgniter and FuelPHP in my arsenal, but if I EVER have to write another blog or forgotten password system I will probably rage-quit the internet and become a kayak instructor.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "121",
    "created": "2012-05-07 12:08:00",
    "updated": "2012-05-09 14:54:02",
    "created_by": "2",
    "ordering_count": null,
    "title": "Composer with CodeIgniter",
    "slug": "composer-with-codeigniter",
    "category_id": "2",
    "attachment": "",
    "intro": "Composer is the best thing for PHP since sliced arrays and using it in your applications means you have easy access to a large selection of well written PHP packages that plug and play with any framework that supports PSR-0 namespacing. This is BRILLIANT as it means less reliablity on the framework and framework-specific code, and helps you get towards the goal of portable code where the framework is essentially just the wrapper. FuelPHP will support Composer packages out of the box as does Symfony2&nbsp;and I hear Drupal are working it in too. This interoperability is brilliant, but how do you use it with CodeIgniter?",
    "body": "Composer is the [best thing for PHP since sliced arrays](http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php) and using it in your applications means you have easy access to a large selection of well written PHP packages that plug and play with any framework that supports PSR-0 namespacing. This is BRILLIANT as it means less reliablity on the framework and framework-specific code, and helps you get towards the goal of portable code where the framework is essentially just the wrapper. FuelPHP 1.x works with an optional autoloader and 2.0 will support Composer packages out of the box as does Symfony2 and I hear Drupal are working it in too. This interoperability is brilliant, but how do you use it with CodeIgniter?\n\nPeople have suggested that [CodeIgniter 3.0](https://github.com/EllisLab/CodeIgniter) should be rewritten entirely around Composer and we make it PHP 5.3 only, but rewriting is a silly suggestion and PHP 5.3 still only has about 30% coverage on servers so that is not going to happen. Besides if CodeIgniter 3.0 became PHP 5.3 over night then either it would break everyones application because it changed so much, or change so little that it would not merit a PHP version bump.\n\nThat said, if you want to start using Composer components in your application there is no reason why you should not. The code is mainly PHP 5.3 but by slowing moving the majority of your application from framework specific code to generic packages that work in any framework you free yourself from being limited to a specific framework and will find a transition to FuelPHP 2.0, Laravel or Symfony2 much easier in the future.\n\nSadly Laravel have not announced any plans to exclusively support Composer out of the box, but it is just as easy to work with [Composer in Laravel](http://www.keithloy.me/2012/04/composer-with-laravel/) as it is in CodeIgniter, so let's get going:\n\n### Step 1\n\n   Navigate to your project and install composer:\n\n<pre class=\"code bash\">$ cd /path/to/my/project\n$ curl -s http://getcomposer.org/installer | php</pre>\n\nYou could instead use [Homebrew](http://mxcl.github.com/homebrew/) to install composer system-wide, which is my preference:\n\n__Update: __ It turns out the homebrew package is pretty old. I installed a few weeks previous to this post, but users are having problems. Use the .phar method for now.\n\n<pre class=\"code bash\">$ brew install composer</pre>\n\n### Step 2\n\nNext you need to make a __composer.json__ in the root of your project (not the application folder):\n\n<pre class=\"code json\">{\n    \"require\": {\n        \"kriswallsmith/buzz\": \"*\"\n    }\n}</pre>\n\nThis will add a requirement for the Buzz package, which is a handy HTTP Request / Response PHP 5.3.x class. \n\n### Step 3\n\nTo actually install these files to your CodeIgniter project you simply run the install command:\n\n<pre class=\"code bash\">$ composer.phar install</pre>\n\nIf you have installed via Homebrew then this will be:\n\n<pre class=\"code bash\">$ composer install</pre>\n\nThen you should notice composer creating a __./vendors__ folder in your application and code will be installed there. \n\n### Step 4\n\nTo autoload this newly installed code all you need to do is drop a single line of PHP into your __index.php__\n\n<pre class=\"code php\">include_once './vendor/autoload.php';</pre>\n\n### Done\n\nIt is as simple as that. Now in my test controller I can use Buzz happily, along with any other PSR-0 code that I install via Composer:\n\n<pre class=\"code php\">class Test extends CI_Controller\n{\n\tpublic function index()\n\t{\n\t\t$browser = new Buzz\\Browser();\n\t\t$response = $browser->get('http://www.google.com');\n\n\t\techo $browser->getLastRequest().\"\\n\";\n\t\techo $response;\n\t}\n}</pre>\n\nTo see what is available check out [Packagist](http://packagist.org/packages/) - the default repo for Composer packages.\n\nIf you are not familiar with Composer or PSR-0 support then you should really look into it. The [PHP Standards group](http://groups.google.com/group/php-standards) or [PHP-FIG](https://github.com/php-fig) are doing a brilliant job of taming the mess that is third-party PHP code and are building some great [standards](https://github.com/php-fig/fig-standards), which are open to discussion and voted on by some of the best PHP developers around. \n\nGet involved and help PSR-1 and PSR-2 become something brilliant. In the mean-time enjoy all the PSR-0 code and use it wherever the hell you develop. \n\nStop making CodeIgniter libraries, Laravel bundles and Zend modules, make Composer packages.",
    "created_on": "1336392480",
    "updated_on": "1336575242",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "93265f90676dc2cbe532b2e55de19a7c",
    "type": "markdown",
    "parsed": "<p>Composer is the <a href=\"http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php\">best thing for PHP since sliced arrays</a> and using it in your applications means you have easy access to a large selection of well written PHP packages that plug and play with any framework that supports PSR-0 namespacing. This is BRILLIANT as it means less reliablity on the framework and framework-specific code, and helps you get towards the goal of portable code where the framework is essentially just the wrapper. FuelPHP 1.x works with an optional autoloader and 2.0 will support Composer packages out of the box as does Symfony2 and I hear Drupal are working it in too. This interoperability is brilliant, but how do you use it with CodeIgniter?</p>\n\n<p>People have suggested that <a href=\"https://github.com/EllisLab/CodeIgniter\">CodeIgniter 3.0</a> should be rewritten entirely around Composer and we make it PHP 5.3 only, but rewriting is a silly suggestion and PHP 5.3 still only has about 30% coverage on servers so that is not going to happen. Besides if CodeIgniter 3.0 became PHP 5.3 over night then either it would break everyones application because it changed so much, or change so little that it would not merit a PHP version bump.</p>\n\n<p>That said, if you want to start using Composer components in your application there is no reason why you should not. The code is mainly PHP 5.3 but by slowing moving the majority of your application from framework specific code to generic packages that work in any framework you free yourself from being limited to a specific framework and will find a transition to FuelPHP 2.0, Laravel or Symfony2 much easier in the future.</p>\n\n<p>Sadly Laravel have not announced any plans to exclusively support Composer out of the box, but it is just as easy to work with <a href=\"http://www.keithloy.me/2012/04/composer-with-laravel/\">Composer in Laravel</a> as it is in CodeIgniter, so let's get going:</p>\n\n<h3>Step 1</h3>\n\n<p>Navigate to your project and install composer:</p>\n\n<pre class=\"code bash\">$ cd /path/to/my/project\n$ curl -s http://getcomposer.org/installer | php</pre>\n\n<p>You could instead use <a href=\"http://mxcl.github.com/homebrew/\">Homebrew</a> to install composer system-wide, which is my preference:</p>\n\n<p>__Update: __ It turns out the homebrew package is pretty old. I installed a few weeks previous to this post, but users are having problems. Use the .phar method for now.</p>\n\n<pre class=\"code bash\">$ brew install composer</pre>\n\n<h3>Step 2</h3>\n\n<p>Next you need to make a <strong>composer.json</strong> in the root of your project (not the application folder):</p>\n\n<pre class=\"code json\">{\n    \"require\": {\n        \"kriswallsmith/buzz\": \"*\"\n    }\n}</pre>\n\n<p>This will add a requirement for the Buzz package, which is a handy HTTP Request / Response PHP 5.3.x class. </p>\n\n<h3>Step 3</h3>\n\n<p>To actually install these files to your CodeIgniter project you simply run the install command:</p>\n\n<pre class=\"code bash\">$ composer.phar install</pre>\n\n<p>If you have installed via Homebrew then this will be:</p>\n\n<pre class=\"code bash\">$ composer install</pre>\n\n<p>Then you should notice composer creating a <strong>./vendors</strong> folder in your application and code will be installed there. </p>\n\n<h3>Step 4</h3>\n\n<p>To autoload this newly installed code all you need to do is drop a single line of PHP into your <strong>index.php</strong></p>\n\n<pre class=\"code php\">include_once './vendor/autoload.php';</pre>\n\n<h3>Done</h3>\n\n<p>It is as simple as that. Now in my test controller I can use Buzz happily, along with any other PSR-0 code that I install via Composer:</p>\n\n<pre class=\"code php\">class Test extends CI_Controller\n{\n    public function index()\n    {\n        $browser = new Buzz\\Browser();\n        $response = $browser->get('http://www.google.com');\n\n        echo $browser->getLastRequest().\"\\n\";\n        echo $response;\n    }\n}</pre>\n\n<p>To see what is available check out <a href=\"http://packagist.org/packages/\">Packagist</a> - the default repo for Composer packages.</p>\n\n<p>If you are not familiar with Composer or PSR-0 support then you should really look into it. The <a href=\"http://groups.google.com/group/php-standards\">PHP Standards group</a> or <a href=\"https://github.com/php-fig\">PHP-FIG</a> are doing a brilliant job of taming the mess that is third-party PHP code and are building some great <a href=\"https://github.com/php-fig/fig-standards\">standards</a>, which are open to discussion and voted on by some of the best PHP developers around. </p>\n\n<p>Get involved and help PSR-1 and PSR-2 become something brilliant. In the mean-time enjoy all the PSR-0 code and use it wherever the hell you develop. </p>\n\n<p>Stop making CodeIgniter libraries, Laravel bundles and Zend modules, make Composer packages.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "124",
    "created": "2012-05-31 08:08:00",
    "updated": null,
    "created_by": "2",
    "ordering_count": null,
    "title": "CodeIgniter Conference 2012 SF",
    "slug": "codeigniter-conference-2012-sf",
    "category_id": "3",
    "attachment": "",
    "intro": "So only two months until the return of CICONF to America! Last year was CICONF2011 NY which was a great experience. There we announced the availability of CodeIgniter on GitHub, released CodeIgniter 2.1-dev and saw over 50 pull requests get made to CodeIgniter by developers trying to win my iPad. Then we had CICONF2012 in London, and now it's off to San Francisco for more CodeIgniter nerdery.",
    "body": "<p>\n\tSo only two months until the return of CICONF to America! Last year was <a href=\"http://cicon2011.com\">CICONF2011</a> NY which was a great experience. There we announced the availability of CodeIgniter on GitHub, released CodeIgniter 2.1-dev and saw over 50 pull requests get made to CodeIgniter by developers trying to win my iPad. Then we had <a href=\"http://ciconf.com/uk/2012\">CICONF2012 in London</a>, and now it's off to San Francisco for more CodeIgniter nerdery.</p>\n<p>\n\tThere are going to be more great speakers this year, including some attendees from last year which is great to see!&nbsp;</p>\n<ul>\n\t<li>\n\t\tAaron Kuzemchak</li>\n\t<li>\n\t\tBen Edmunds</li>\n\t<li>\n\t\tCalvin Froedge</li>\n\t<li>\n\t\tErik Giberti</li>\n\t<li>\n\t\tJohn Crepezzi</li>\n\t<li>\n\t\tJohn Corry</li>\n\t<li>\n\t\tKeeny Katzguru</li>\n</ul>\n<p>\n\tAlso, I'll be giving a talk too. As with many conferences the exact talk details are yet to be finalised, but we all have very exciting topics in mind. In London we learned about unit testing in CI, API driven development, using ORMs (and why they aren't evil) and amongst other things we saw a few developers how you can use CI to speed up your workflow. This year will be similar, but you won't have to listen to as many British people (which I know can be hard work!).</p>\n<p>\n\tI have a few fun announcements to make, games to host and prizes to give awat, which is always a pleasure. If you aren't there you wil certainly be missing out.</p>",
    "created_on": "1338451680",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "aa825367131599a16b2a6cf54445a35e",
    "type": "wysiwyg-advanced",
    "parsed": "",
    "preview_hash": ""
  },
  {
    "id": "123",
    "created": "2012-05-22 11:52:00",
    "updated": "2012-05-23 08:34:48",
    "created_by": "2",
    "ordering_count": null,
    "title": "Laravel is Awesome",
    "slug": "laravel-is-awesome",
    "category_id": "2",
    "attachment": "",
    "intro": "You might not expect to hear that from a CodeIgniter and FuelPHP developer, but it's true. Taylor has done a brilliant job writing code that is clean, functional and has built a huge community of smart developers in less than a year of active development. People are flooding to Laravel from other frameworks and that's great for the PHP community, read on to find out why.",
    "body": "You might not expect to hear that from a CodeIgniter and FuelPHP developer, but it's true. Taylor has done a brilliant job writing code that is clean, functional and has built a huge community of smart developers in less than a year of active development. People are flooding to Laravel from other frameworks and that's great for the PHP community.\n\n### Hold on, what?\n\nSo if you know me you'll know I have a history in CodeIgniter development. CodeIgniter is a slow moving framework with an API that has barely ever changed and historically the framework has always supported several versions of PHP behind the current active.\n\nCodeIgniter supported PHP 4 when PHP 5.2 was popular, and has only switched to requiring PHP 5.2 now that PHP 5.4 is available. This has always been absolutely brilliant for developers like me who are involved with projects like PyroCMS and PancakeApp, which are distributed applications that work on any environment.\n\nWhile developers have always been keen to move to the newest versions of PHP it's a well known fact that sometimes you just can't do that. Much like how designers and frontend guys wanted to use all the new HTML 5 JS API's as soon as they come out, but still had 60% of their users on IE6 - distributed application developers like myself are forced to work in a slightly different world where versions matter more than personal preference.\n\nTo put this simply, if right now upped the CI and PyroCMS requirements to PHP 5.3 then I would lose 26% of my community. My conversion rate of Community to Professional users is 1 in 5, so loosing that many sales would mean I would have to fire my support guy - which would make the project crumble.\n\nThese are the sort of things that need to be thought about when working with PHP projects - as remember, not everybody is in the same situation as you. This is why I still use CodeIgniter, and this is why it's a great framework for others in my situation.\n\n### But I thought CodeIgniter was dead?\n\nThis is an obvious reference to a blog post that has been going around recently: [Why CodeIgniter is Dead](http://heybigname.com/2012/05/06/why-codeigniter-is-dead/). I am fine with people having opinions, but this article makes several assertions that are entirely incorrect, and makes many comments that lead me to believe the author has never actually looked at the 3.0 branch at all. To me, this article comes across as this: one of the Laravel developers decided that he was no longer in a position where he required a slow-moving API for his applications, and a PHP 5.2 requirement base, so he decided instead of just using Laravel he would blog about how shit CodeIgniter was. That is pretty low and entirely inaccurate. I call it FUD.\n\nCodeIgniter 3.0 is still actively worked on by a whole team of developers, including a new Reactor Engineer Alex Bilbie. Unit testing for 3.0 is complete and the framework is up on Travis: [![Build Status](https://secure.travis-ci.org/EllisLab/CodeIgniter.png?branch=develop)](http://travis-ci.org/EllisLab/CodeIgniter), meaning bigger changes can be made without any worry of stability, PDO drivers have been included and there is even some progress being made on breaking free from the CI singleton without breaking the API. CodeIgniter doesn't break the API unless it's ridiculously minor, so thats important even at the cost of \"not being cool\".\n\nRemember, this is not the first \"death knell\" for CodeIgniter. Developers have proclaimed the end of CI a few times before, and each time we saw a brain-drain from the CI community of bored developers going somewhere else to build something else.\n\nIt happened in about 2007 when a few CodeIgniter developers got fed up with the lack of community contributions being merged in, so they made BlueFlame and then eventually recoded everything to make Kohana. CodeIgniter carried on just fine for a while until about 2010 when even more developers got fed up with the lack of community contributions - [myself included](http://philsturgeon.co.uk/blog/2010/10/what-happens-next) - which was the last time CI really had any issues in the community. Since then EllisLab have moved things to GitHub, the community has been put in charge and new features and bug fixes are flying in. This means since the last death knell CodeIgniter has never been more active - and while it might not be using namespaces and callbacks, it certainly makes writing PHP 5.2 code much more fun.\n\n### But you like Laravel?\n\nAbsolutely! Taylor has done a brilliant job of building up a framework that takes advantage of callbacks, IoC and event driven behaviour very well. Unit Tests are baked in nicely, the Migrations are very neat (and look pretty familiar to my CI migrations *cough*) and their Schema class is a beauty, very close to the way Rails handles things with the way callbacks and $table objects instead of shit-loads of procedural code.\n\n### Then why don't you use it?\n\nEvery single framework goes through the same trouble that every single piece of software goes through: Change.\n\nAs a framework developer you are always met with two extremes:\n\n1. Change a lot\n2. Don't change\n\nWe saw 1 happen during the Kohana switch to 2.4 to 3.x, where the entire framework was redeveloped and users of the original system were left in the cold. Development fractured, they even had two different websites with different sets of documentation. That was extremely unfortunate, but that is what happens when you change a lot.\n\n1 annoys developers who are trying to build large-scale stable applications.\n2 annoys developers who have been using your system for years and want new things\n\nThe lesser suggested 3rd option is \"only change a bit\" which CodeIgniter has been doing for a while, which still bores people who want the excitement of the bleeding edge.\n\nIt's pretty safe to say that Laravel is on the bleeding edge. Taylor has created one of the nicest looking frameworks around by building 3 major versions within the year, most of which have required a fair bit of application redevelopment. v3.x is looking amazing, but what happens when v4.x comes out? Will it require a lot of work? I don't know, but with all due respect to Taylor: that is something that worries me a little bit.\n\n### So you'll never use it?\n\nI wouldn't say that. When I know that the API has settled down I will be happy to dive in and have a go. If Laravel support Composer packages like FuelPHP 2.0 plan on doing then I'll be able to drag and drop components between the two easily, so my framework choice will be far less important and I can play with either one.\n\n### Final Thoughts\n\nLaravel has become the new, snazzy framework which gives bored PHP developers a new way to do things. CodeIgniter (and FuelPHP for that matter) are both similar projects which handle things in very similar ways. \n\nWhat right minded developer wants to work in the same way for 5+ years without exploring other options? Not me that's for sure, and most developers eventually reach the same level. For years the solution for these bored PHP developers was \"Fuck it, I am going to learn Rails\", or Python, or Node, or whatever the hell else is a bit different - just to stop the boredom. \n\nThe thing that makes me truly happy for Laravel's existence is the fact that the project has now started acting as a catchment base for those developers and keeping them in the language. Instead of developers outgrowing the simplicity of CodeIgniter - which most of them cut their teeth using - and wondering off into the \"grown up world\" of Python/Ruby/etc, we're keeping a lot of smart developers in the PHP community to build cool stuff.\n\nIf Laravel start playing ball with the [PHP-FIG group](https://groups.google.com/group/php-standards) and building their components as [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) and using Composer -much like FuelPHP 2.0 will be doing - then we'll start to see the whole PHP community really improving together instead of silioing our efforts into fragmented framework communities. We aren't CI devs, or Laravel devs, or FuelPHP devs, we are PHP developers and it's time to make that mean something respectable.\n\nInteroperability for the win.\nTrolling for the lose.",
    "created_on": "1337687520",
    "updated_on": "1337762088",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "33f3d7cb5f3ba4dddabaa8d665511020",
    "type": "markdown",
    "parsed": "<p>You might not expect to hear that from a CodeIgniter and FuelPHP developer, but it's true. Taylor has done a brilliant job writing code that is clean, functional and has built a huge community of smart developers in less than a year of active development. People are flooding to Laravel from other frameworks and that's great for the PHP community.</p>\n\n<h3>Hold on, what?</h3>\n\n<p>So if you know me you'll know I have a history in CodeIgniter development. CodeIgniter is a slow moving framework with an API that has barely ever changed and historically the framework has always supported several versions of PHP behind the current active.</p>\n\n<p>CodeIgniter supported PHP 4 when PHP 5.2 was popular, and has only switched to requiring PHP 5.2 now that PHP 5.4 is available. This has always been absolutely brilliant for developers like me who are involved with projects like PyroCMS and PancakeApp, which are distributed applications that work on any environment.</p>\n\n<p>While developers have always been keen to move to the newest versions of PHP it's a well known fact that sometimes you just can't do that. Much like how designers and frontend guys wanted to use all the new HTML 5 JS API's as soon as they come out, but still had 60% of their users on IE6 - distributed application developers like myself are forced to work in a slightly different world where versions matter more than personal preference.</p>\n\n<p>To put this simply, if right now upped the CI and PyroCMS requirements to PHP 5.3 then I would lose 26% of my community. My conversion rate of Community to Professional users is 1 in 5, so loosing that many sales would mean I would have to fire my support guy - which would make the project crumble.</p>\n\n<p>These are the sort of things that need to be thought about when working with PHP projects - as remember, not everybody is in the same situation as you. This is why I still use CodeIgniter, and this is why it's a great framework for others in my situation.</p>\n\n<h3>But I thought CodeIgniter was dead?</h3>\n\n<p>This is an obvious reference to a blog post that has been going around recently: <a href=\"http://heybigname.com/2012/05/06/why-codeigniter-is-dead/\">Why CodeIgniter is Dead</a>. I am fine with people having opinions, but this article makes several assertions that are entirely incorrect, and makes many comments that lead me to believe the author has never actually looked at the 3.0 branch at all. To me, this article comes across as this: one of the Laravel developers decided that he was no longer in a position where he required a slow-moving API for his applications, and a PHP 5.2 requirement base, so he decided instead of just using Laravel he would blog about how shit CodeIgniter was. That is pretty low and entirely inaccurate. I call it FUD.</p>\n\n<p>CodeIgniter 3.0 is still actively worked on by a whole team of developers, including a new Reactor Engineer Alex Bilbie. Unit testing for 3.0 is complete and the framework is up on Travis: <a href=\"http://travis-ci.org/EllisLab/CodeIgniter\"><img src=\"https://secure.travis-ci.org/EllisLab/CodeIgniter.png?branch=develop\" alt=\"Build Status\" /></a>, meaning bigger changes can be made without any worry of stability, PDO drivers have been included and there is even some progress being made on breaking free from the CI singleton without breaking the API. CodeIgniter doesn't break the API unless it's ridiculously minor, so thats important even at the cost of \"not being cool\".</p>\n\n<p>Remember, this is not the first \"death knell\" for CodeIgniter. Developers have proclaimed the end of CI a few times before, and each time we saw a brain-drain from the CI community of bored developers going somewhere else to build something else.</p>\n\n<p>It happened in about 2007 when a few CodeIgniter developers got fed up with the lack of community contributions being merged in, so they made BlueFlame and then eventually recoded everything to make Kohana. CodeIgniter carried on just fine for a while until about 2010 when even more developers got fed up with the lack of community contributions - <a href=\"http://philsturgeon.co.uk/blog/2010/10/what-happens-next\">myself included</a> - which was the last time CI really had any issues in the community. Since then EllisLab have moved things to GitHub, the community has been put in charge and new features and bug fixes are flying in. This means since the last death knell CodeIgniter has never been more active - and while it might not be using namespaces and callbacks, it certainly makes writing PHP 5.2 code much more fun.</p>\n\n<h3>But you like Laravel?</h3>\n\n<p>Absolutely! Taylor has done a brilliant job of building up a framework that takes advantage of callbacks, IoC and event driven behaviour very well. Unit Tests are baked in nicely, the Migrations are very neat (and look pretty familiar to my CI migrations <em>cough</em>) and their Schema class is a beauty, very close to the way Rails handles things with the way callbacks and $table objects instead of shit-loads of procedural code.</p>\n\n<h3>Then why don't you use it?</h3>\n\n<p>Every single framework goes through the same trouble that every single piece of software goes through: Change.</p>\n\n<p>As a framework developer you are always met with two extremes:</p>\n\n<ol>\n<li>Change a lot</li>\n<li>Don't change</li>\n</ol>\n\n<p>We saw 1 happen during the Kohana switch to 2.4 to 3.x, where the entire framework was redeveloped and users of the original system were left in the cold. Development fractured, they even had two different websites with different sets of documentation. That was extremely unfortunate, but that is what happens when you change a lot.</p>\n\n<p>1 annoys developers who are trying to build large-scale stable applications.\n2 annoys developers who have been using your system for years and want new things</p>\n\n<p>The lesser suggested 3rd option is \"only change a bit\" which CodeIgniter has been doing for a while, which still bores people who want the excitement of the bleeding edge.</p>\n\n<p>It's pretty safe to say that Laravel is on the bleeding edge. Taylor has created one of the nicest looking frameworks around by building 3 major versions within the year, most of which have required a fair bit of application redevelopment. v3.x is looking amazing, but what happens when v4.x comes out? Will it require a lot of work? I don't know, but with all due respect to Taylor: that is something that worries me a little bit.</p>\n\n<h3>So you'll never use it?</h3>\n\n<p>I wouldn't say that. When I know that the API has settled down I will be happy to dive in and have a go. If Laravel support Composer packages like FuelPHP 2.0 plan on doing then I'll be able to drag and drop components between the two easily, so my framework choice will be far less important and I can play with either one.</p>\n\n<h3>Final Thoughts</h3>\n\n<p>Laravel has become the new, snazzy framework which gives bored PHP developers a new way to do things. CodeIgniter (and FuelPHP for that matter) are both similar projects which handle things in very similar ways. </p>\n\n<p>What right minded developer wants to work in the same way for 5+ years without exploring other options? Not me that's for sure, and most developers eventually reach the same level. For years the solution for these bored PHP developers was \"Fuck it, I am going to learn Rails\", or Python, or Node, or whatever the hell else is a bit different - just to stop the boredom. </p>\n\n<p>The thing that makes me truly happy for Laravel's existence is the fact that the project has now started acting as a catchment base for those developers and keeping them in the language. Instead of developers outgrowing the simplicity of CodeIgniter - which most of them cut their teeth using - and wondering off into the \"grown up world\" of Python/Ruby/etc, we're keeping a lot of smart developers in the PHP community to build cool stuff.</p>\n\n<p>If Laravel start playing ball with the <a href=\"https://groups.google.com/group/php-standards\">PHP-FIG group</a> and building their components as <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\">PSR-0</a> and using Composer -much like FuelPHP 2.0 will be doing - then we'll start to see the whole PHP community really improving together instead of silioing our efforts into fragmented framework communities. We aren't CI devs, or Laravel devs, or FuelPHP devs, we are PHP developers and it's time to make that mean something respectable.</p>\n\n<p>Interoperability for the win.\nTrolling for the lose.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "125",
    "created": "2012-07-10 16:17:00",
    "updated": "2012-07-10 17:21:28",
    "created_by": "2",
    "ordering_count": null,
    "title": "PHP: Ecosystem Update",
    "slug": "php-ecosystem-update",
    "category_id": "2",
    "attachment": "",
    "intro": "Don't worry guys, this isn't another PHP apologist or PHP hater blog. We've all had enough of those recently. This is a quick heads up on two projects that are doing what they can to make the PHP ecosystem a better place.",
    "body": "Don't worry guys, this isn't another PHP apologist or PHP hater blog. We've all had enough of those recently. This is a quick heads up on two projects that are doing what they can to make the PHP ecosystem a better place.\n\n## Framework Interoperability Group (PHP-FIG)\n\nI think most of you by now will have heard of the PHP-FIG or PSR-1 and PSR-2 in some form or another. There have been loads of arguments about this for and against, with the good old fashioned snake_case v camelCase and tabs v spaces arguments coming back for a new round. Nobody agrees - go figure. \n\nThese silly arguments about brackets and spaces really clouded the point of what the FIG is trying to do and as member I felt I should help out however I could along with the other members to fix the FUD going around. Paul M Jones wrote an awesome FAQ style blog post that answered a lot of these questions when [PSR-1 and PSR-2 were accepted](http://paul-m-jones.com/archives/2420) but to many people this was just \"some guys blog\", we really needed some central location for all this information.\n\nSo, on a mission to help people know what the hell the FIG are up to, I grabbed a domain, pestered a few people to set something up on GitHub pretty soon they had a website set up on GitHub Pages: [http://php-fig.org/][fig-site]. A few of the guys chipped in with the content, and now there is a shiny new [PHP-FIG FAQ][fig-faq] page!\n\nIf you still have any questions, doubts or concerns about the FIG then please just comment here, raise issues on GitHub, make suggestions in the form of pull requests, whatever. The point of this page is that it answers questions and stops everyone running around going \"THE MEAN MAN ON THE INTERNET IS TELLING ME I CANT PUT BRACKETS ON A NEW LINE!!1!1\". \n\nSeriously, nobody cares, that is not the point.\n\nThe point is that the frameworks and component developers have come together to build usable recommendations for interoperable code, so I can build my projects using a little bit of Symfony (love their YAML parser) and a little bit of FuelPHP (grabbing me some Validation) and throw it all into some other framework, and everything is the same. \n\nBeyond the basic interop factor, the way I see it, by reducing the number of active style guides around we'll have less of these religious battles in the future. Right now you love coding in a certain way, probably because the framework or CMS you develop with always did things in a certain way. If all of these frameworks used the same style new developers are more likely to code in the same way, meaning there will be less of those office arguments about where brackets are going and everything else.\n\nRuby, Python, etc are all pretty much on the same page with coding style, if PHP can get there too that that is one nice tick in the box for PHP (even if it doesn't change the world).\n\n[fig-site]: http://www.php-fig.org/\n[fig-faq]: http://www.php-fig.org/faq/\n\n## PHP The Right Way\n\nAs a PHP developer I often have friends ask \"What is the best way to get started with PHP?\". My usual answer is \"I don't know, that was 12 years ago, look at tutorials or something.\". I can barely remember what sites I looked at, or what blogs gave me bits of advice. I have no idea where to send them and its been like that for years.\n\nAbout 3 days ago [Josh Lockhart][josh] (author of the micro-framework [Slim][slim]) made an initial commit on a new website, which was another GitHub Pages public repository, with the URL [phptherightway.com][phptrw]. He sets out to solve exactly this problem by collating together all the best bits of advice, best practises, resources and whatever else seems relevant.\n\nI found this on Reddit /r/PHP and there was a massive fight about PSR-1 and PSR-2 with the usual \"You'll pry allman brackets from my cold dead fingers\" bullcrap, so I jumped in and send a pull request to fix up the FIG explanations. Then I kinda got hooked, and I've sent in enough pull requests to get push access and my name on the footer. Cheers Josh!\n\nIt has grown exponentially since he set it up and there has been a constant stream of issues, pull requests, comments and improvements. Today it had tweets from [Smashing Mag][smashing] and [Gina Trapani][gina] (from Lifehacker) and a bunch of other folks are happy to see it and so am I. It's a great resource that focuses very much on how to do things properly.\n\nThe main focus here is that PHP 5.4 is a real option, and you should be using it. The latest bout of \"PHP 5.4 sux\" comments going around are mainly focused on what PHP 5 was. I am forced to work with PHP 5.2 for distributed apps as there are still about 20% of PyroCMS users on that branch. Only about 3% are on PHP 5.4 even though it's nearly half way through its lifetime! Hosts are fun. But while I am stuck on this version, most people aren't. If you are building for clients and you have enough sway then set them up with PHP 5.4. Just tell them its more secure, or faster, or cheaper, or more \"social\" - whatever you have to say to make them go for it.\n\nIt drives me mad on a daily basis that I have to use this archaic version of PHP because... wait for it... PHP 5.4 is awesome!\n\nPHP 5.2, 5.3 and PHP 5.4 all represent MASSIVE jumps forward in the language. Yes we still need primitive types, yes there are still plenty of quirks, but in every single version PHP gets a huge amount better. \n\nFollowing the advice on this site you will almost certainly learn new things and hopefully it will help new people coming to PHP: The Best Worst Language around.\n\n[josh]: https://twitter.com/codeguy\n[slim]: http://www.slimframework.com/\n[phptrw]: http://phptherightway.com\n[smashing]: https://twitter.com/smashingmag/status/222585989426716674\n[gina]: https://twitter.com/ginatrapani\n[lifehacker]: http://lifehacker.com/",
    "created_on": "1341937020",
    "updated_on": "1341940888",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "d41987265f92c08f9de68e397f86ce77",
    "type": "markdown",
    "parsed": "<p>Don't worry guys, this isn't another PHP apologist or PHP hater blog. We've all had enough of those recently. This is a quick heads up on two projects that are doing what they can to make the PHP ecosystem a better place.</p>\n\n<h2>Framework Interoperability Group (PHP-FIG)</h2>\n\n<p>I think most of you by now will have heard of the PHP-FIG or PSR-1 and PSR-2 in some form or another. There have been loads of arguments about this for and against, with the good old fashioned snake_case v camelCase and tabs v spaces arguments coming back for a new round. Nobody agrees - go figure. </p>\n\n<p>These silly arguments about brackets and spaces really clouded the point of what the FIG is trying to do and as member I felt I should help out however I could along with the other members to fix the FUD going around. Paul M Jones wrote an awesome FAQ style blog post that answered a lot of these questions when <a href=\"http://paul-m-jones.com/archives/2420\">PSR-1 and PSR-2 were accepted</a> but to many people this was just \"some guys blog\", we really needed some central location for all this information.</p>\n\n<p>So, on a mission to help people know what the hell the FIG are up to, I grabbed a domain, pestered a few people to set something up on GitHub pretty soon they had a website set up on GitHub Pages: <a href=\"http://www.php-fig.org/\">http://php-fig.org/</a>. A few of the guys chipped in with the content, and now there is a shiny new <a href=\"http://www.php-fig.org/faq/\">PHP-FIG FAQ</a> page!</p>\n\n<p>If you still have any questions, doubts or concerns about the FIG then please just comment here, raise issues on GitHub, make suggestions in the form of pull requests, whatever. The point of this page is that it answers questions and stops everyone running around going \"THE MEAN MAN ON THE INTERNET IS TELLING ME I CANT PUT BRACKETS ON A NEW LINE!!1!1\". </p>\n\n<p>Seriously, nobody cares, that is not the point.</p>\n\n<p>The point is that the frameworks and component developers have come together to build usable recommendations for interoperable code, so I can build my projects using a little bit of Symfony (love their YAML parser) and a little bit of FuelPHP (grabbing me some Validation) and throw it all into some other framework, and everything is the same. </p>\n\n<p>Beyond the basic interop factor, the way I see it, by reducing the number of active style guides around we'll have less of these religious battles in the future. Right now you love coding in a certain way, probably because the framework or CMS you develop with always did things in a certain way. If all of these frameworks used the same style new developers are more likely to code in the same way, meaning there will be less of those office arguments about where brackets are going and everything else.</p>\n\n<p>Ruby, Python, etc are all pretty much on the same page with coding style, if PHP can get there too that that is one nice tick in the box for PHP (even if it doesn't change the world).</p>\n\n<h2>PHP The Right Way</h2>\n\n<p>As a PHP developer I often have friends ask \"What is the best way to get started with PHP?\". My usual answer is \"I don't know, that was 12 years ago, look at tutorials or something.\". I can barely remember what sites I looked at, or what blogs gave me bits of advice. I have no idea where to send them and its been like that for years.</p>\n\n<p>About 3 days ago <a href=\"https://twitter.com/codeguy\">Josh Lockhart</a> (author of the micro-framework <a href=\"http://www.slimframework.com/\">Slim</a>) made an initial commit on a new website, which was another GitHub Pages public repository, with the URL <a href=\"http://phptherightway.com\">phptherightway.com</a>. He sets out to solve exactly this problem by collating together all the best bits of advice, best practises, resources and whatever else seems relevant.</p>\n\n<p>I found this on Reddit /r/PHP and there was a massive fight about PSR-1 and PSR-2 with the usual \"You'll pry allman brackets from my cold dead fingers\" bullcrap, so I jumped in and send a pull request to fix up the FIG explanations. Then I kinda got hooked, and I've sent in enough pull requests to get push access and my name on the footer. Cheers Josh!</p>\n\n<p>It has grown exponentially since he set it up and there has been a constant stream of issues, pull requests, comments and improvements. Today it had tweets from <a href=\"https://twitter.com/smashingmag/status/222585989426716674\">Smashing Mag</a> and <a href=\"https://twitter.com/ginatrapani\">Gina Trapani</a> (from Lifehacker) and a bunch of other folks are happy to see it and so am I. It's a great resource that focuses very much on how to do things properly.</p>\n\n<p>The main focus here is that PHP 5.4 is a real option, and you should be using it. The latest bout of \"PHP 5.4 sux\" comments going around are mainly focused on what PHP 5 was. I am forced to work with PHP 5.2 for distributed apps as there are still about 20% of PyroCMS users on that branch. Only about 3% are on PHP 5.4 even though it's nearly half way through its lifetime! Hosts are fun. But while I am stuck on this version, most people aren't. If you are building for clients and you have enough sway then set them up with PHP 5.4. Just tell them its more secure, or faster, or cheaper, or more \"social\" - whatever you have to say to make them go for it.</p>\n\n<p>It drives me mad on a daily basis that I have to use this archaic version of PHP because... wait for it... PHP 5.4 is awesome!</p>\n\n<p>PHP 5.2, 5.3 and PHP 5.4 all represent MASSIVE jumps forward in the language. Yes we still need primitive types, yes there are still plenty of quirks, but in every single version PHP gets a huge amount better. </p>\n\n<p>Following the advice on this site you will almost certainly learn new things and hopefully it will help new people coming to PHP: The Best Worst Language around.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "126",
    "created": "2012-07-24 12:57:00",
    "updated": "2012-07-24 15:21:16",
    "created_by": "2",
    "ordering_count": null,
    "title": "Blooie: Chat has Changed",
    "slug": "blooie-chat-has-changed",
    "category_id": "20",
    "attachment": "",
    "intro": "The last few months have been pretty mad for me. As well as the usual client work for HappyNinjas, I've been flying backwards and forwards to America for various reasons, building business around PyroCMS as it spins off into its own American \"LLC\", creating a 15-part screencast series for FuelPHP and the most exciting: working on a few startups with friends.",
    "body": "The last few months have been pretty mad for me. As well as the usual client work for [HappyNinjas][hn], I've been flying backwards and forwards to America for various reasons, building business around [PyroCMS][pyro] as it spins off into its own American \"LLC\", creating a 15-part [screencast series for FuelPHP][tutsplus] and the most exciting: working on a few startups with friends.\n\nThe main startup I have been involved with these last few months is [Blooie][blooie], and while it is still early days I am incredibly excited to tell you: it has launched! \n\n<div style=\"width: 100%; padding: 10px 0; text-align:center\">\n<iframe id=\"youtube\" width=\"496\" height=\"279\" src=\"https://www.youtube.com/embed/CA6UTg52mN4?&theme=light&showinfo=0&controls=1&autohide=1&rel=0&amp;wmode=transparent\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n[Blooie][blooie] is a conversational platform that integrates with blogs and content rich websites, to help deliver an experience that is vastly more engaging than the usual comment threads or Twitter conversations. Think about when you read that awesome new post on Lifehacker, or see a new post about what the next iPhone might look like on MacRumours. If you like it you might leave a comment, but that is mainly for formed opinions and there is rarely any sort of conversation other than a free-for-all of people repeating their opinion. It's not much of a conversation.\n\nAnother regular habit is to push these pieces of content out to social networks, but when you throw up a link on Twitter anyone wishing to give their opinion in return only gets about 135 characters, or less if they have a long name. If a third follower gets involved you're trying to fit a conversation into about 100 characters, or less if they have long names. Even if you write multiple tweets, you're just spamming your timeline with loads of tweets about the same thing. Not great.\n\nYou could talk about it on Facebook, but what if you don't have many friends who are interested in that content? I am very interested in computers and kayaking, and only a few of my friends share those interests. If I post an article about an awesome command-line static code testing tool I have discovered, or want a second opinion on some obscure gear I have read a review about then the usual Facebook reply is \"What the f**k are you talking about Phil?\"\n\nSo, Blooie manages to fill this gap nicely. Blooie is being installed on a large number of blogs and other websites and sits there unassumingly just like the Facebook and Twitter \"Share\" widgets. When you click the \"Blooie button\" you'll be asked to create a Blooie account with Twitter or Facebook (or Vintage Mode) then log in and click Start and you're away! That social integration code is all done using FuelPHP and my [OAuth][oauth], [OAuth 2][oauth2] and [NinjAuth][ninjauth] packages.\n\nAfter that everything gets handed off to [NodeJS][node] where all sorts of crazy madness is happening in the background. You're automatically connected to somebody else who you don't know, but unlike randomised chat platforms Blooie actually pairs you up with your potential new best friend. By analysing the content of the site, chewing through the meta data and doing some magic on your conversations, it's able to find somebody who is engaged with not just the exact same page, but with similar content too. This is all done with web-sockets and the chat is real-time, which NodeJS is very very good at.\n\nWhen this concept was explained to me months ago I was concerned about the potential big-brother angle but the actual conversations are never saved. They aren't even backed up! The conversations are analysed for keywords and various metrics are recorded to see how interested in the conversation you were. After that everything goes in the bin.\n\nThis has been an amazing project to work on and the team is awesome. If you have a website then [sign up][signup] for access to the BETA. If you want to give it a try just click the Blooie button below. Follow [@Bloo\\_ie][twit-blooie] and I'd recommend following the two main guys [@Mark\\_V\\_Ryan][twit-mark] and [@real\\_ate][twit-chris] too. \n\n  [pyro]: http://www.pyrocms.com/\n  [hn]: http://happyninjas.com/\n  [tutsplus]: https://tutsplus.com/course/fuelphp-essentials/\n  [blooie]: http://bloo.ie/\n  [signup]: http://client.bloo.ie/signup/\n  [oauth]: https://github.com/fuel-packages/fuel-oauth\n  [oauth2]: https://github.com/fuel-packages/fuel-oauth2\n  [ninjauth]: https://github.com/happyninjas/fuel-ninjauth\n  [node]: http://nodejs.org/\n  [twit-blooie]: https://twitter.com/bloo_ie\n  [twit-mark]: https://twitter.com/Mark_V_Ryan\n  [twit-chris]: https://twitter.com/real_ate",
    "created_on": "1343134620",
    "updated_on": "1343143276",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "bd473bc4d3d690003b183c0aca15b323",
    "type": "markdown",
    "parsed": "<p>The last few months have been pretty mad for me. As well as the usual client work for <a href=\"http://happyninjas.com/\">HappyNinjas</a>, I've been flying backwards and forwards to America for various reasons, building business around <a href=\"http://www.pyrocms.com/\">PyroCMS</a> as it spins off into its own American \"LLC\", creating a 15-part <a href=\"https://tutsplus.com/course/fuelphp-essentials/\">screencast series for FuelPHP</a> and the most exciting: working on a few startups with friends.</p>\n\n<p>The main startup I have been involved with these last few months is <a href=\"http://bloo.ie/\">Blooie</a>, and while it is still early days I am incredibly excited to tell you: it has launched! </p>\n\n<div style=\"width: 100%; padding: 10px 0; text-align:center\">\n<iframe id=\"youtube\" width=\"496\" height=\"279\" src=\"https://www.youtube.com/embed/CA6UTg52mN4?&theme=light&showinfo=0&controls=1&autohide=1&rel=0&amp;wmode=transparent\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n<p><a href=\"http://bloo.ie/\">Blooie</a> is a conversational platform that integrates with blogs and content rich websites, to help deliver an experience that is vastly more engaging than the usual comment threads or Twitter conversations. Think about when you read that awesome new post on Lifehacker, or see a new post about what the next iPhone might look like on MacRumours. If you like it you might leave a comment, but that is mainly for formed opinions and there is rarely any sort of conversation other than a free-for-all of people repeating their opinion. It's not much of a conversation.</p>\n\n<p>Another regular habit is to push these pieces of content out to social networks, but when you throw up a link on Twitter anyone wishing to give their opinion in return only gets about 135 characters, or less if they have a long name. If a third follower gets involved you're trying to fit a conversation into about 100 characters, or less if they have long names. Even if you write multiple tweets, you're just spamming your timeline with loads of tweets about the same thing. Not great.</p>\n\n<p>You could talk about it on Facebook, but what if you don't have many friends who are interested in that content? I am very interested in computers and kayaking, and only a few of my friends share those interests. If I post an article about an awesome command-line static code testing tool I have discovered, or want a second opinion on some obscure gear I have read a review about then the usual Facebook reply is \"What the f**k are you talking about Phil?\"</p>\n\n<p>So, Blooie manages to fill this gap nicely. Blooie is being installed on a large number of blogs and other websites and sits there unassumingly just like the Facebook and Twitter \"Share\" widgets. When you click the \"Blooie button\" you'll be asked to create a Blooie account with Twitter or Facebook (or Vintage Mode) then log in and click Start and you're away! That social integration code is all done using FuelPHP and my <a href=\"https://github.com/fuel-packages/fuel-oauth\">OAuth</a>, <a href=\"https://github.com/fuel-packages/fuel-oauth2\">OAuth 2</a> and <a href=\"https://github.com/happyninjas/fuel-ninjauth\">NinjAuth</a> packages.</p>\n\n<p>After that everything gets handed off to <a href=\"http://nodejs.org/\">NodeJS</a> where all sorts of crazy madness is happening in the background. You're automatically connected to somebody else who you don't know, but unlike randomised chat platforms Blooie actually pairs you up with your potential new best friend. By analysing the content of the site, chewing through the meta data and doing some magic on your conversations, it's able to find somebody who is engaged with not just the exact same page, but with similar content too. This is all done with web-sockets and the chat is real-time, which NodeJS is very very good at.</p>\n\n<p>When this concept was explained to me months ago I was concerned about the potential big-brother angle but the actual conversations are never saved. They aren't even backed up! The conversations are analysed for keywords and various metrics are recorded to see how interested in the conversation you were. After that everything goes in the bin.</p>\n\n<p>This has been an amazing project to work on and the team is awesome. If you have a website then <a href=\"http://client.bloo.ie/signup/\">sign up</a> for access to the BETA. If you want to give it a try just click the Blooie button below. Follow <a href=\"https://twitter.com/bloo_ie\">@Bloo&#95;ie</a> and I'd recommend following the two main guys <a href=\"https://twitter.com/Mark_V_Ryan\">@Mark&#95;V&#95;Ryan</a> and <a href=\"https://twitter.com/real_ate\">@real&#95;ate</a> too. </p>\n",
    "preview_hash": ""
  },
  {
    "id": "127",
    "created": "2012-08-01 15:12:00",
    "updated": "2012-08-04 07:01:22",
    "created_by": "2",
    "ordering_count": null,
    "title": "Why PHP DateTime Rocks",
    "slug": "why-php-datetime-rocks",
    "category_id": "2",
    "attachment": "",
    "intro": "Working as a freelancer and contracter sometimes I come accross some code that is so terrible I have to laugh, then immediately tweet a screenshot for others to laugh. I think this is fairly healthy, but one reaction I get fairly often is \"Yuck, PHP!\". Really that should be \"Yuck, PHP 4!\" I've been using PHP since 4.0.1 and I remember it well. It was terrible. Whenever I see these chunks of code I like to see how clean I can make them with PHP 5.3 + code and DateTime has saved me a lot of lines.",
    "body": "Working as a freelancer and contracter sometimes I come accross some code that is so terrible I have to laugh, then immediately tweet a screenshot for others to laugh. I think this is fairly healthy, but one reaction I get fairly often is \"Yuck, PHP!\". Really that should be \"Yuck, PHP 4!\" I've been using PHP since 4.0.1 and I remember it well. It was terrible. Whenever I see these chunks of code I like to see how clean I can make them with PHP 5.3 + code and DateTime has saved me a lot of lines.\n\nDateTime is nothing new, but it's definitely under-used by many. It was made available in PHP 5.2.0 but got some of its best features until PHP 5.3.0. PHP 5.3.0 is pretty old now, but I learned about <a href=\"http://uk.php.net/manual/en/datetime.createfromformat.php\">DateFormat::createFromFormat()</a> after reading a new addition to [PHP The Right Way: Date and Time](http://www.phptherightway.com/#date_and_time).\n\nRight, down to business.\n\n## First Offender\n\nFormat one crazy date into the standard MySQL date format.\n\n<script src=\"https://gist.github.com/3228301.js?file=gistfile1.php\"></script>\n\nYuck. Using DateFormat::createFromFormat() we can ditch all of that code and instead just use this:\n\n<script src=\"https://gist.github.com/3228398.js?file=gistfile1.php\"></script>\n\nThat's much better. But how about comparing dates? \n\n## Second Offender\n\nUse mktime() to build them both into unix timestamps, then find out how many seconds right? \n\n<script src=\"https://gist.github.com/3228471.js?file=gistfile1.php\"></script>\n\nDid you just throw up in your mouth a little? \n\nThis sort of stuff is way too common and is totally unnecessary. If we want to stop pretending it's the 90's we could instead write it like this:\n\n<script src=\"https://gist.github.com/3228499.js?file=gistfile1.php\"></script>\n\nAnd there we have it! \n\nWe have cleaner, more readable, more reliable code. A perfect example of why you need to be upgrading to PHP 5.3 and a perfect example of PHP making massive leaps forward over time.\n\n**Update:** Some people here and on Reddit are assuming I've never heard of strtotime() before. My mistake here was not being able to for-see EVERY possible angle for the article, which a common problem for bloggers.\n\nSo, why not use strtotime()? Firstly, using date('Y-m-d H:i:s', strtotime($strDate)) is the same as doing $date = new DateTime($strDate)->format('Y-m-d H:i:s') but of course with the objects you get more potentially useful methods than just an integer - which can lead to less code. Secondly, read the [documentation](http://php.net/manual/en/function.strtotime.php)\n\n> Dates in the m/d/y or d-m-y formats are disambiguated by looking at the separator between the various components: if the separator is a slash (/), then the American m/d/y is assumed; whereas if the separator is a dash (-) or a dot (.), then the European d-m-y format is assumed.\n\n> To avoid potential ambiguity, it's best to use ISO 8601 (YYYY-MM-DD) dates or DateTime::createFromFormat() when possible.\n\nstrtotime() is only useful if it KNOWS the format but what is happening here: 7/7/2011? Is that UK or US, because that could be m/d or d/m. When you are dealing with code that comes in from a wide array of random sources (horrible ADF feeds in this case) then the date formats are MENTAL, and telling it WHAT the data is means it can be parsed correctly.",
    "created_on": "1343833920",
    "updated_on": "1344063682",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "f1db444be14a53af35f3f3e1dc17a63b",
    "type": "markdown",
    "parsed": "<p>Working as a freelancer and contracter sometimes I come accross some code that is so terrible I have to laugh, then immediately tweet a screenshot for others to laugh. I think this is fairly healthy, but one reaction I get fairly often is \"Yuck, PHP!\". Really that should be \"Yuck, PHP 4!\" I've been using PHP since 4.0.1 and I remember it well. It was terrible. Whenever I see these chunks of code I like to see how clean I can make them with PHP 5.3 + code and DateTime has saved me a lot of lines.</p>\n\n<p>DateTime is nothing new, but it's definitely under-used by many. It was made available in PHP 5.2.0 but got some of its best features until PHP 5.3.0. PHP 5.3.0 is pretty old now, but I learned about <a href=\"http://uk.php.net/manual/en/datetime.createfromformat.php\">DateFormat::createFromFormat()</a> after reading a new addition to <a href=\"http://www.phptherightway.com/#date_and_time\">PHP The Right Way: Date and Time</a>.</p>\n\n<p>Right, down to business.</p>\n\n<h2>First Offender</h2>\n\n<p>Format one crazy date into the standard MySQL date format.</p>\n\n<script src=\"https://gist.github.com/3228301.js?file=gistfile1.php\"></script>\n\n<p>Yuck. Using DateFormat::createFromFormat() we can ditch all of that code and instead just use this:</p>\n\n<script src=\"https://gist.github.com/3228398.js?file=gistfile1.php\"></script>\n\n<p>That's much better. But how about comparing dates? </p>\n\n<h2>Second Offender</h2>\n\n<p>Use mktime() to build them both into unix timestamps, then find out how many seconds right? </p>\n\n<script src=\"https://gist.github.com/3228471.js?file=gistfile1.php\"></script>\n\n<p>Did you just throw up in your mouth a little? </p>\n\n<p>This sort of stuff is way too common and is totally unnecessary. If we want to stop pretending it's the 90's we could instead write it like this:</p>\n\n<script src=\"https://gist.github.com/3228499.js?file=gistfile1.php\"></script>\n\n<p>And there we have it! </p>\n\n<p>We have cleaner, more readable, more reliable code. A perfect example of why you need to be upgrading to PHP 5.3 and a perfect example of PHP making massive leaps forward over time.</p>\n\n<p><strong>Update:</strong> Some people here and on Reddit are assuming I've never heard of strtotime() before. My mistake here was not being able to for-see EVERY possible angle for the article, which a common problem for bloggers.</p>\n\n<p>So, why not use strtotime()? Firstly, using date('Y-m-d H:i:s', strtotime($strDate)) is the same as doing $date = new DateTime($strDate)->format('Y-m-d H:i:s') but of course with the objects you get more potentially useful methods than just an integer - which can lead to less code. Secondly, read the <a href=\"http://php.net/manual/en/function.strtotime.php\">documentation</a></p>\n\n<blockquote>\n  <p>Dates in the m/d/y or d-m-y formats are disambiguated by looking at the separator between the various components: if the separator is a slash (/), then the American m/d/y is assumed; whereas if the separator is a dash (-) or a dot (.), then the European d-m-y format is assumed.</p>\n  \n  <p>To avoid potential ambiguity, it's best to use ISO 8601 (YYYY-MM-DD) dates or DateTime::createFromFormat() when possible.</p>\n</blockquote>\n\n<p>strtotime() is only useful if it KNOWS the format but what is happening here: 7/7/2011? Is that UK or US, because that could be m/d or d/m. When you are dealing with code that comes in from a wide array of random sources (horrible ADF feeds in this case) then the date formats are MENTAL, and telling it WHAT the data is means it can be parsed correctly.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "128",
    "created": "2012-08-21 07:07:00",
    "updated": "2012-08-21 15:25:59",
    "created_by": "2",
    "ordering_count": null,
    "title": "CICONF - Mission Complete",
    "slug": "ciconf-mission-complete",
    "category_id": "18",
    "attachment": "",
    "intro": "Another trip to the States and another CodeIgniter Conference complete. This is a quick roundup for anyone who didn't make it to the conference this year.",
    "body": "This year the low-to-middle budget CodeIgniter Conference was held in San Francisco in a brilliant co-working space called [Citizen Space](http://citizenspace.us/). I didn't know at the time but this space is actually a partner of [New Work City](http://nwc.co/), the venue for CICON2011, so it was great to \"keep it in the family\".\n\nCo-working spaces are generally pretty reliable for conferences as you already know they have some decent network connections, they have all the gadgets you'll ever need and they don't put stupid restrictions on being able to bring food into the building unlike CICONF 2012 UK where I ended up paying through the nose for some REALLY crap sandwiches.\n\nThis year we had some great speakers:\n\n* [Aaron Kuzemchak](http://kuzemchak.net) - [eecoder](http://eecoder.com/)\n* Adam Jackett] - [Dark House](http://darkhouse.ca/) (and [PancakeApp](http://pancakeapp.com/))\n* [Ben Edmunds](http://benedmunds.com/) - [Appstucco](http://appstucco.com/) and [DblTap Labs](http://dbltaplabs.com/)\n* [Calvin Froedge](http://calvinfroedge.com/) - Freelance / Stuff\n* [Chris Miller](http://ee99ee.com/) - [The Huffington Post](http://www.huffingtonpost.com)\n* [Erik Giberti](http://twitter.com/giberti/) - [AF-Design](http://af-design.com)\n* [John Crepezzi](http://seejohncode.com/) - [Brewster](https://www.brewster.com/)\n* [Kenny Katzguru](http://codefury.net) - Mozilla / Freelance\n* Tyler Flint - [Pagoda Box](http://pagodabox.com)\n\nI kicked things off with a CodeIgniter 3.0 run-down. I had hoped we'd be able to announce the launch of CodeIgniter 3.0 at the event but the PDO DB Forge drivers still need a little work and the new user-guide is still waiting on the design work (I hear its about a week off) so that slipped, and my talk just had to be about what new features were in there. It was fairly short, but I ended up spending the whole preceeding week in SF running around like a madman trying to sort out the hotel's f**k-ups instead of having any time to prepare. Wonderful.\n\nAnother problem we suffered was Tyler sadly having a scheduling conflict at the very last minute, meaning he could not make it to the site. I managed to just about get him up on Skype but this was the most difficult part of the whole damn conference as technically stuff just wasn't working! We ordered people to browse to http://presentations.pagodabox.com/ to use some event-driven slide share system, where the screen would change as Tyler moved through the slides. That sadly didn't seem to work with 60 people hitting it, so we ditched that and put slides up on the screen with Tyler in a small window. That still didn't work as video was chewing bandwidth, so we switched to Skype and THAT had some duplexing problems, so in the end I had to sit on the damn floor sliding the microphone volume up to ask questions and back down to let him talk. Mess.\n\nThe result was that Tyler was blind and deaf, battling to give a talk to the crowd but it took so long to get through the background and covering what Pagoda Box is, the awesome tech parts were rushed. It was unfortunate because Tyler is a GREAT speaker!\n\nThe rest of the day was a fair bit easier. Kenny spoke about how to use Chef to rule the world, Erik covered using Gearman to create Work Queues (I loved this, you really should be using work queues more than you do), and John gave a talk about how everything you've ever known about anything to do with performance is wrong, even covering CSS selectors!\n\nWe hit a bar called Jillians, stuffed our faces on food and drink (thanks to all our sponsors, especially [eecoder](http://eecoder.com/) and [Mindfulware](mindfulware.com)) and played some pool. It was a good night until they kicked us out of the room at 9 oclock for the sake of it, even though nobody else was going in there. Meh.\n\nDay 2 got off to a start with Ben Edmunds covering RESTful API's using my [REST server](http://github.com/philsturgeon/codeigniter-restserver), and sneaking in a few photographs of my from Facebook where I mistakenly tried growing a mustache. It didn't work, and I walk in from ordering everyone pizza to see the entire conference laughing at me. THANKS BEN!\n\n[Jerel Unruh](http://unruhdesigns.com/) from the [PyroCMS](https://www.pyrocms.com/) team then hopped up to the stage to show off some cool new PyroCMS features, especially on the [PyroCMS Hosting](https://www.pyrocms.com/hosting) side of things.\n\nThe supremely laid-back Calvin Froedge gave his second CICONF talk this year, covering some extremely complicated coding practises and OOP design patterns in a very simple way. He essentially read a LOT of books on the subject, digested it all and gave us back what we needed, along with the required reading list with the time-wasters rejected. This was a great talk and probably gave us all something to think about, especially as we start to move towards writing auto-loaded PSR code and not just single-class CodeIgniter libraries.\n\nFollowing Calvin was Chris Miller from the Huffington Post - who is an absolute legend. We had a few speakers drop out just before the event, but Chris - an attendee - with about a weeks notice just offered to pull a talk out of thin air and gave one of the best talks, on using Varnish to cache the f**k out of your website. That site is 87th most visited site in the world, and is the 3rd most popular news site, so it was damn good to get a talk on scalability from him.\n\nFinishing up was the slightly nervous Adam Jackett, who was giving his first talk but still nailed it. He was essentially talking about how he increases his productivity when using CodeIgniter, with tools like HMVC, Base Controllers, Migrations, etc - not always showing BEST practises, but showing how to get things done quickly. It was a good talk which ended a little quickly, but we all just went to get beer 30 minutes ahead of time so nobody minded.\n\nIt turned out to be a great conference with lots being learned. We had a few less than the last two events, but it meant for a way more casual experience and people still got what they wanted from the conference.\n\nFor more coverage please follow the [conference on Lanyrd](http://lanyrd.com/2012/codeigniter-conference-us/). I've got all the slides up and most of the videos are already online. I didn't manage to get all of the talks recorded (seriously, it was a one-man show and I was running around like a lunatic, so I just plain forgot to record some) but we have Calvin, John, Ben, Adam and Chris recorded who all gave great talks. \n\nThis will be the last conference I run for a long time, and it's definitely the end of CICONF for me. If somebody is looking to take it over they are welcome to get in touch, but with me just starting a new full-time job and no longer requiring CodeIgniter for that my usage of the framework as well as my time for running confereneces are all running pretty low. It's all about priorities and my just changed quite substantially.\n\nI've enjoyed the challenges involved with running conferences, and I'm glad I took it over from the previous owners as the Bristol event - which I was only meant to be helping get speakers and sponsors to - sucked. Taking it from a mess to a successful 100+ attendee conference twice (and getting 60ish to SF against all odds and a huge number of problems) has been an awesome road, and the events have always been fun on the day, but I certainly won't miss the stress.\n\nA massive thank you once again to all of the sponsors, everyone who attended and a massive thank you to everyone who helped in any way. You know who you are!",
    "created_on": "1345532820",
    "updated_on": "1345562759",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "10f1a03317dad96c7f9a54b23117c115",
    "type": "markdown",
    "parsed": "<p>This year the low-to-middle budget CodeIgniter Conference was held in San Francisco in a brilliant co-working space called <a href=\"http://citizenspace.us/\">Citizen Space</a>. I didn't know at the time but this space is actually a partner of <a href=\"http://nwc.co/\">New Work City</a>, the venue for CICON2011, so it was great to \"keep it in the family\".</p>\n\n<p>Co-working spaces are generally pretty reliable for conferences as you already know they have some decent network connections, they have all the gadgets you'll ever need and they don't put stupid restrictions on being able to bring food into the building unlike CICONF 2012 UK where I ended up paying through the nose for some REALLY crap sandwiches.</p>\n\n<p>This year we had some great speakers:</p>\n\n<ul>\n<li><a href=\"http://kuzemchak.net\">Aaron Kuzemchak</a> - <a href=\"http://eecoder.com/\">eecoder</a></li>\n<li>Adam Jackett] - <a href=\"http://darkhouse.ca/\">Dark House</a> (and <a href=\"http://pancakeapp.com/\">PancakeApp</a>)</li>\n<li><a href=\"http://benedmunds.com/\">Ben Edmunds</a> - <a href=\"http://appstucco.com/\">Appstucco</a> and <a href=\"http://dbltaplabs.com/\">DblTap Labs</a></li>\n<li><a href=\"http://calvinfroedge.com/\">Calvin Froedge</a> - Freelance / Stuff</li>\n<li><a href=\"http://ee99ee.com/\">Chris Miller</a> - <a href=\"http://www.huffingtonpost.com\">The Huffington Post</a></li>\n<li><a href=\"http://twitter.com/giberti/\">Erik Giberti</a> - <a href=\"http://af-design.com\">AF-Design</a></li>\n<li><a href=\"http://seejohncode.com/\">John Crepezzi</a> - <a href=\"https://www.brewster.com/\">Brewster</a></li>\n<li><a href=\"http://codefury.net\">Kenny Katzguru</a> - Mozilla / Freelance</li>\n<li>Tyler Flint - <a href=\"http://pagodabox.com\">Pagoda Box</a></li>\n</ul>\n\n<p>I kicked things off with a CodeIgniter 3.0 run-down. I had hoped we'd be able to announce the launch of CodeIgniter 3.0 at the event but the PDO DB Forge drivers still need a little work and the new user-guide is still waiting on the design work (I hear its about a week off) so that slipped, and my talk just had to be about what new features were in there. It was fairly short, but I ended up spending the whole preceeding week in SF running around like a madman trying to sort out the hotel's f**k-ups instead of having any time to prepare. Wonderful.</p>\n\n<p>Another problem we suffered was Tyler sadly having a scheduling conflict at the very last minute, meaning he could not make it to the site. I managed to just about get him up on Skype but this was the most difficult part of the whole damn conference as technically stuff just wasn't working! We ordered people to browse to http://presentations.pagodabox.com/ to use some event-driven slide share system, where the screen would change as Tyler moved through the slides. That sadly didn't seem to work with 60 people hitting it, so we ditched that and put slides up on the screen with Tyler in a small window. That still didn't work as video was chewing bandwidth, so we switched to Skype and THAT had some duplexing problems, so in the end I had to sit on the damn floor sliding the microphone volume up to ask questions and back down to let him talk. Mess.</p>\n\n<p>The result was that Tyler was blind and deaf, battling to give a talk to the crowd but it took so long to get through the background and covering what Pagoda Box is, the awesome tech parts were rushed. It was unfortunate because Tyler is a GREAT speaker!</p>\n\n<p>The rest of the day was a fair bit easier. Kenny spoke about how to use Chef to rule the world, Erik covered using Gearman to create Work Queues (I loved this, you really should be using work queues more than you do), and John gave a talk about how everything you've ever known about anything to do with performance is wrong, even covering CSS selectors!</p>\n\n<p>We hit a bar called Jillians, stuffed our faces on food and drink (thanks to all our sponsors, especially <a href=\"http://eecoder.com/\">eecoder</a> and <a href=\"mindfulware.com\">Mindfulware</a>) and played some pool. It was a good night until they kicked us out of the room at 9 oclock for the sake of it, even though nobody else was going in there. Meh.</p>\n\n<p>Day 2 got off to a start with Ben Edmunds covering RESTful API's using my <a href=\"http://github.com/philsturgeon/codeigniter-restserver\">REST server</a>, and sneaking in a few photographs of my from Facebook where I mistakenly tried growing a mustache. It didn't work, and I walk in from ordering everyone pizza to see the entire conference laughing at me. THANKS BEN!</p>\n\n<p><a href=\"http://unruhdesigns.com/\">Jerel Unruh</a> from the <a href=\"https://www.pyrocms.com/\">PyroCMS</a> team then hopped up to the stage to show off some cool new PyroCMS features, especially on the <a href=\"https://www.pyrocms.com/hosting\">PyroCMS Hosting</a> side of things.</p>\n\n<p>The supremely laid-back Calvin Froedge gave his second CICONF talk this year, covering some extremely complicated coding practises and OOP design patterns in a very simple way. He essentially read a LOT of books on the subject, digested it all and gave us back what we needed, along with the required reading list with the time-wasters rejected. This was a great talk and probably gave us all something to think about, especially as we start to move towards writing auto-loaded PSR code and not just single-class CodeIgniter libraries.</p>\n\n<p>Following Calvin was Chris Miller from the Huffington Post - who is an absolute legend. We had a few speakers drop out just before the event, but Chris - an attendee - with about a weeks notice just offered to pull a talk out of thin air and gave one of the best talks, on using Varnish to cache the f**k out of your website. That site is 87th most visited site in the world, and is the 3rd most popular news site, so it was damn good to get a talk on scalability from him.</p>\n\n<p>Finishing up was the slightly nervous Adam Jackett, who was giving his first talk but still nailed it. He was essentially talking about how he increases his productivity when using CodeIgniter, with tools like HMVC, Base Controllers, Migrations, etc - not always showing BEST practises, but showing how to get things done quickly. It was a good talk which ended a little quickly, but we all just went to get beer 30 minutes ahead of time so nobody minded.</p>\n\n<p>It turned out to be a great conference with lots being learned. We had a few less than the last two events, but it meant for a way more casual experience and people still got what they wanted from the conference.</p>\n\n<p>For more coverage please follow the <a href=\"http://lanyrd.com/2012/codeigniter-conference-us/\">conference on Lanyrd</a>. I've got all the slides up and most of the videos are already online. I didn't manage to get all of the talks recorded (seriously, it was a one-man show and I was running around like a lunatic, so I just plain forgot to record some) but we have Calvin, John, Ben, Adam and Chris recorded who all gave great talks. </p>\n\n<p>This will be the last conference I run for a long time, and it's definitely the end of CICONF for me. If somebody is looking to take it over they are welcome to get in touch, but with me just starting a new full-time job and no longer requiring CodeIgniter for that my usage of the framework as well as my time for running confereneces are all running pretty low. It's all about priorities and my just changed quite substantially.</p>\n\n<p>I've enjoyed the challenges involved with running conferences, and I'm glad I took it over from the previous owners as the Bristol event - which I was only meant to be helping get speakers and sponsors to - sucked. Taking it from a mess to a successful 100+ attendee conference twice (and getting 60ish to SF against all odds and a huge number of problems) has been an awesome road, and the events have always been fun on the day, but I certainly won't miss the stress.</p>\n\n<p>A massive thank you once again to all of the sponsors, everyone who attended and a massive thank you to everyone who helped in any way. You know who you are!</p>\n",
    "preview_hash": ""
  },
  {
    "id": "129",
    "created": "2012-08-21 23:58:00",
    "updated": "2012-08-22 11:49:37",
    "created_by": "2",
    "ordering_count": null,
    "title": "Understanding Circumstance",
    "slug": "understanding-circumstance",
    "category_id": "0",
    "attachment": "",
    "intro": "\"I have been working for years in this industry and I have never needed to do what you do. Therefore your opinion is obviously wrong.\"",
    "body": "I have been working for years in this industry and I have never needed to do what you do. Therefore your opinion is obviously wrong.\n\n> Unless...\n\nWhat is it you do as a developer? As I see it in web dev there are a few different types:\n\n* Hobbiest\n* Client Web Dev\n* Distributed Application Devs\n* Web App Developer (SaaS)\n* Corporate Dev\n\nWhat do they all have in common? They're all using some sort of language to make some sort of system for somebody somewhere. That is about the last connecting factor that most of us developers actually share.\n\nNow, if you're a web app developer who is working for yourself then you can literally use whatever you like. The crazy thing here is that most developers who are in a situation where they can use whatever system they like, often end up picking a specific tool and using it to death. This is ridiculous, as every developer should use the best tool for the job. If its a project that involves real-time chat then not using NodeJS with some SocketIO would be a huge oversight.\n\nThe web app developers are the kind of guys I expect to be the smartest, most well informed types out of the lot, but they often end up being the most elitist. \"I've been using Ruby to build applications for the last 5 years, and it always works out well for me\". Right, does that make it the right tool for the job EVERY time? I doubt it!\n\nSo we have the hobbyists. They just do whatever seems fun at the time, so lets discount them straight off the bat. They aren't being paid to make anything, so they can just kick around having fun with code. *envy*\n\nWe're only half way through the list. Who else is left? Client Web Devs. These guys (myself included for the last year or two) are some of the unluckiest buggers. Working for a client that EXPLICITLY requires PHP, or even a specific framework? You won't convince them to use Ruby, or Python, or Node, even if it does provide a better solution for the situation. You can try, but 9/10 they are already set, because their cousins nephew said that this one thing was better once. It probably means you're using WordPress for the job or something...\n\nEven if you want to use PHP these bastard clients require you to use PHP 5.2, because they are on a shit old server that requires it. PHP 5.3 is awesome, supports Namespaces and all sorts of features that bring it into the correct century, but this client says \"Nope, tough, you need to use PHP 5.2\". In these situations I am OVER THE MOON that PHP frameworks still exist for PHP 5.2, like CodeIgniter and Kohana. If those guys had changed their requirements to be PHP 5.3 only I'd be screwed here. You wouldn't believe how many clients force PHP 5.2 on me, even if it's way out of date. Hell, I even know developers who have PHP 5.1 forced on them. It's horrendous, but it happens.\n\nDespite these unfortunate paid developers, who need to make things work on old-school servers, you also have the distributed application developers. This is me too. Besides knowing that PHP 5.4 is obviously the best version of PHP to ever exist, I am stuck knowing that more than 70% of my users [for PyroCMS] are using PHP 5.3, and another 20% are on PHP 5.2. So, should I just tell 20% of my users to fuck off? No, I have to keep supporting them - for now at least. If I used PHP 5.3 I could use SO MANY COOL NEW THINGS, but I would also have to fire my part-time support developer. That doesn't sound worth it to me.\n\nThen you have the corporate developers, who have to maintain whatever crazy system is already there. You would be scared by what percentage of the entire worlds financial systems run on Fortran and Cobalt. Are they going to replace it all with NodeJS just because its trendy? No, they are going to learn Fortran so they can maintain it, probably until the end of time. This stuff hasn't changed since the 70's so I doubt it will change next month.\n\nThe point I am trying to make in all of this, is that while you might have really strong opinions about what language, framework, version of the framework or version of the language you use, EVERYONE has a totally different situation to you. I have a different situation to many other CodeIgniter developers, and a very different situation to most PHP developers, so when I get to talking with my Ruby zealot buddies its amazing to me that they just don't understand why we use different tools. If you don't agree, consider their environment, their requirements and what they do for a job before you throw an opinion at their face. \n\nI am really tired of short sighted people throwing around inexperienced opinons as fact on Reddit, IRC, Twitter, Email and Forums. Generally if you think somebody is an idiot for using whatever they do then think for a minute. It may well turn out that their situation is TOTALLY different to yours, because you probably have very little in common apart from the fact you are both web developers who both want to get shit done.",
    "created_on": "1345593480",
    "updated_on": "1345636177",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "e8ead0836cb559d2058a534de6ba647b",
    "type": "markdown",
    "parsed": "<p>I have been working for years in this industry and I have never needed to do what you do. Therefore your opinion is obviously wrong.</p>\n\n<blockquote>\n  <p>Unless...</p>\n</blockquote>\n\n<p>What is it you do as a developer? As I see it in web dev there are a few different types:</p>\n\n<ul>\n<li>Hobbiest</li>\n<li>Client Web Dev</li>\n<li>Distributed Application Devs</li>\n<li>Web App Developer (SaaS)</li>\n<li>Corporate Dev</li>\n</ul>\n\n<p>What do they all have in common? They're all using some sort of language to make some sort of system for somebody somewhere. That is about the last connecting factor that most of us developers actually share.</p>\n\n<p>Now, if you're a web app developer who is working for yourself then you can literally use whatever you like. The crazy thing here is that most developers who are in a situation where they can use whatever system they like, often end up picking a specific tool and using it to death. This is ridiculous, as every developer should use the best tool for the job. If its a project that involves real-time chat then not using NodeJS with some SocketIO would be a huge oversight.</p>\n\n<p>The web app developers are the kind of guys I expect to be the smartest, most well informed types out of the lot, but they often end up being the most elitist. \"I've been using Ruby to build applications for the last 5 years, and it always works out well for me\". Right, does that make it the right tool for the job EVERY time? I doubt it!</p>\n\n<p>So we have the hobbyists. They just do whatever seems fun at the time, so lets discount them straight off the bat. They aren't being paid to make anything, so they can just kick around having fun with code. <em>envy</em></p>\n\n<p>We're only half way through the list. Who else is left? Client Web Devs. These guys (myself included for the last year or two) are some of the unluckiest buggers. Working for a client that EXPLICITLY requires PHP, or even a specific framework? You won't convince them to use Ruby, or Python, or Node, even if it does provide a better solution for the situation. You can try, but 9/10 they are already set, because their cousins nephew said that this one thing was better once. It probably means you're using WordPress for the job or something...</p>\n\n<p>Even if you want to use PHP these bastard clients require you to use PHP 5.2, because they are on a shit old server that requires it. PHP 5.3 is awesome, supports Namespaces and all sorts of features that bring it into the correct century, but this client says \"Nope, tough, you need to use PHP 5.2\". In these situations I am OVER THE MOON that PHP frameworks still exist for PHP 5.2, like CodeIgniter and Kohana. If those guys had changed their requirements to be PHP 5.3 only I'd be screwed here. You wouldn't believe how many clients force PHP 5.2 on me, even if it's way out of date. Hell, I even know developers who have PHP 5.1 forced on them. It's horrendous, but it happens.</p>\n\n<p>Despite these unfortunate paid developers, who need to make things work on old-school servers, you also have the distributed application developers. This is me too. Besides knowing that PHP 5.4 is obviously the best version of PHP to ever exist, I am stuck knowing that more than 70% of my users [for PyroCMS] are using PHP 5.3, and another 20% are on PHP 5.2. So, should I just tell 20% of my users to fuck off? No, I have to keep supporting them - for now at least. If I used PHP 5.3 I could use SO MANY COOL NEW THINGS, but I would also have to fire my part-time support developer. That doesn't sound worth it to me.</p>\n\n<p>Then you have the corporate developers, who have to maintain whatever crazy system is already there. You would be scared by what percentage of the entire worlds financial systems run on Fortran and Cobalt. Are they going to replace it all with NodeJS just because its trendy? No, they are going to learn Fortran so they can maintain it, probably until the end of time. This stuff hasn't changed since the 70's so I doubt it will change next month.</p>\n\n<p>The point I am trying to make in all of this, is that while you might have really strong opinions about what language, framework, version of the framework or version of the language you use, EVERYONE has a totally different situation to you. I have a different situation to many other CodeIgniter developers, and a very different situation to most PHP developers, so when I get to talking with my Ruby zealot buddies its amazing to me that they just don't understand why we use different tools. If you don't agree, consider their environment, their requirements and what they do for a job before you throw an opinion at their face. </p>\n\n<p>I am really tired of short sighted people throwing around inexperienced opinons as fact on Reddit, IRC, Twitter, Email and Forums. Generally if you think somebody is an idiot for using whatever they do then think for a minute. It may well turn out that their situation is TOTALLY different to yours, because you probably have very little in common apart from the fact you are both web developers who both want to get shit done.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "130",
    "created": "2012-09-05 12:30:00",
    "updated": "2012-09-05 14:46:46",
    "created_by": "2",
    "ordering_count": null,
    "title": "Moving On",
    "slug": "moving-on",
    "category_id": "2",
    "attachment": "",
    "intro": "My entire career seems to have come from being a CodeIgniter developer, and a vocal one at that. Since then I have risen up through the ranks of CodeIgniter developers to be active in maintaining it, but with my new job I just don't need to be on the team anymore. PHP 5.2 is finally dead to me, and as such I do not need to be part of a framework which focuses of PHP 5.2 compatability! It's not just CodeIgniter though, I am dropping as many of my responsibilities as I can to make way for an exciting [secret] new job.",
    "body": "My entire career seems to have come from being a CodeIgniter developer, and a vocal one at that. Since then I have risen up through the ranks of CodeIgniter developers to be active in maintaining it, but with my new job I just don't need to be on the team anymore. PHP 5.2 is finally dead to me, and as such I do not need to be part of a framework which focuses of PHP 5.2 compatability! It's not just CodeIgniter though, I am dropping as many of my responsibilities as I can to make way for an exciting [secret] new job.\n\n## Vaguely Relevant History\n\nWhen I first started using CodeIgniter in 2007ish I wrote a whole bunch of libraries: Assets, Curl, REST, CLI, GitHub API, Unzip, Cache, Template, OAuth, OAuth 2, and probably a few more which have come and gone in that time. \n\nI was building projects and when I realised that a feature was not in CodeIgniter and nobody else had released a library - or the library was old or buggy - I'd build my own. When it was built I'd blog about it, so other people could avoid having to write the same stuff out and could potentially help me improve my own.\n\nOver time I realised that CodeIgniter was missing things in the core that were not something I could make into a library, and so I started blogging about how you could accomplish these various tasks. Base Controllers for Admin and Public areas, multi-site, multi-environment, REST API's, etc all ended up as a blog which people would use to answer almost any StackOverflow or IRC question you could ask.\n\nWith all this blogging I ended up with quite a reputation as somebody who knows whats what in the CodeIgniter community, but it frustrated me that some features just weren't in the core. Other people were frustrated too, and the community wanted more control. I wrote an article two years ago that got a f**kload of attention, asking \"[What Happens Next?][next]\" and suggested that CodeIgniter would not go much further without community input.\n\n## FuelPHP To The Rescue?\n\nI ended up getting involved with FuelPHP - in the hope that if CodeIgniter were to \"die\" I would have another \"favourite framework\" which I could use for my PHP projects (which most of my clients request specifically). At the time working on FuelPHP was awesome fun as it meant I could play with PHP 5.3 features like namespaces, more command line utilities (like Oil) and other things that just didn't fit in with the CodeIgniter philosophy - as a slow moving, backwards compatability focused framework. It also meant that all of these hacks and tweaks I was blogging about could be rolled into the core. FuelPHP could handle multiple environments, base controllers, autoloading, etc all out of the box meaning each time I started a project I didn't need to hack it in!\n\nEventually EllisLab let the community have what it had been asking for. They assigned a team of \"Reactor Engineers\" from the community (myself included) to help develop features and peer-review pull requests. This was *awesome* and 2.1 had a whole bunch of great new features come in - including many of those various tweaks and tricks myself and many others had been blogging about, and 3.0-dev (as yet unreleased) has had about x40 the number of commits that any version of CodeIgniter has had in any previous version - all still without breaking the API.\n\n## CodeIgniter AND FuelPHP?\n\nThis meant for a while I used both CodeIgniter and FuelPHP, which confused a lot of people. Simply put I would mainly use CodeIgniter when I was stuck using PHP 5.2 and FuelPHP when I was able to use PHP 5.3. Things like PyroCMS (a distributed application) and crummy old client servers (dear God why won't they let me upgrade them) meant that using PHP 5.2 (and therefore CodeIgniter) was a must for me, and so being in a position to fix bugs and add features was a massive oppertunity for me - and meant I wouldn't need to maintain my own \"fork\" of CodeIgniter.\n\nWith this reputation in the CodeIgniter community, and with this position on the team, I started getting a lot of CodeIgniter jobs off the back of it. It was pretty cool being flown out to places like Chicago to work on projects for people using CodeIgniter, but I also ended up getting typecast. The number of CodeIgniter + Bootstrap dashboards I have made is only topped by the number of f**king CodeIgniter RESTful API's I've built. It's a lot.\n\nAs of a few weeks ago I have a new job and my whole situation has changed. I am in a position where suddently I only have one main focus: building and maintaing the backend for an iPhone app, to handle as much load as possible. No more PHP 5.2 for me then, and not as much PHP in general. PHP 5.4 for the API (specifically requested) and JavaScript frontends with EmberJS to help reduce the amount of work the servers are forced to do. If the PHP starts to get slow, we can play with HipHop or even swap out the next version of the API for NodeJS. \n\n## Sacking Off Work\n\nSo with that big-ass changearound it seemed like a decent time to quit the CodeIgniter team. After-all I won't be using it, so why spend my own time working on it more than I have in the past? Just peer-reviewing incoming requests takes up about an hour a day and I just can't spare that time anymore. After-all, investing that time used to directly reflect in the freelance offers I would get, but I don't need to anymore. It might be selfish, but thats how it works.\n\nWhile I am at it I decided to quit the FuelPHP team too; I'm cutting right back.\n\nNow I can go back to just being a user, and not have to spend hours going through emails from GitHub about bugs and feature requests.\n\nIn yet another move to shirk responsibilities I have open-sourced my two ExpressionEngine add-ons which I used to sell:\n\n* [Rest][eerest]\n* [Widgets][eewidgets]\n\nI know people have been paying for that code, but the best I can do here is to open it up. I've been in touch with several customers who are over-the-moon to see it open-sourced, so I don't feel bad about this at all. If anybody wants to take them over they're welcome, otherwise send in pull requests and I'll get them merged as and when I have the time.\n\n## What next?\n\nThe only team I won't be dumping is PyroCMS - which is just getting started. There are some massive plans coming, and we'll be switching to PHP 5.3 soon meaning great new things.\n\nI've also been bashing together a basic admin panel for the new job using Laravel 4 (still pre-BETA) and this new framework fits in exactly with how I imagined FuelPHP 2 ending up. The difference is that Laravel has a company behind it, and Taylor has been ridiculously active. This whole last week or two he has been on Skype with me fixing bugs as I find them, and they already have a lot more done than the FuelPHP team could in the same amount of time. Laravel 3 was ok, but Laravel 4 is going to be epic. \n\nBasically, anything using Composer packages is a huge winner for me, even Symfony is starting to look much more attractive now that I've taken the time to learn about the benefits of dependency injection, instead of just discounting it based on it looking \"too complicated\".\n\nAnyway: \"The Times They Are a-Changin'\", so if you're a PHP Framework user: keep your eyes out for change and be receptive to it. \n\nIf you're releasing code make it [PSR-2][psr2] and distribute it using [Composer][composer], write [unit tests][phpunit] and shove it on [Travis-CI][travis]. Try to make it work on as many frameworks as you can. Be smart. It takes a little extra work to implement initially, but you can double or quadruple your user-base, which can reduce ongoing work for you while increasing adoption.\n\nIf you're looking for code packages make sure they do all of that. [Packagist][packagist] is a good place to start looking. You want tested, well documented, re-usable code, not just some random library somebody dumped together for your specific framework that might not be maintained as soon as they switch frameworks.\n\n**Update:** A lot of people are reading a lot into the mention of Laravel. I am not interested _at all_ in Laravel 3 (the current version). I am interested in PSR-2 and Composer, which Laravel 4 (the version still in development) is entriely. I want a basic framework, with no frills whatsoever. No ORM bundled in the core, and some really simple routing and config management. That is it. \n\nLaravel 4 keeps Blade, Eloquent, even the Validation code in their own packages which you can chose to include if you wish. I could just as easily use Silex, Slim or any micro-framework for that, then bundle a few packages. For API work I probably will be using Silex or Slim with a few PSR components bundled in, but for this dashboard application I am using a lot of Laravel components so decided to use the whole lot.\n\nThe next generation of frameworks are not what you're used to. Don't use one framework for everything, use whatever is right for the job, and use components to stop this whole \"I build everything with X\" mentality. It's childish and damaging to you and your projects.\n\n  [next]: http://philsturgeon.co.uk/blog/2010/10/what-happens-next\n  [dry]: http://philsturgeon.co.uk/blog/2010/02/CodeIgniter-Base-Classes-Keeping-it-DRY\n  [eewidgets]: https://github.com/philsturgeon/ee2-widgets\n  [eerest]: https://github.com/philsturgeon/ee2-rest\n  [psr2]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\n  [composer]: http://getcomposer.org\n  [travis]: http://travis-ci.org/\n  [phpunit]: http://www.phpunit.de/\n  [packagist]: http://packagist.org",
    "created_on": "1346848200",
    "updated_on": "1346856406",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "45caad3c72c39a3660882aee2617afd1",
    "type": "markdown",
    "parsed": "<p>My entire career seems to have come from being a CodeIgniter developer, and a vocal one at that. Since then I have risen up through the ranks of CodeIgniter developers to be active in maintaining it, but with my new job I just don't need to be on the team anymore. PHP 5.2 is finally dead to me, and as such I do not need to be part of a framework which focuses of PHP 5.2 compatability! It's not just CodeIgniter though, I am dropping as many of my responsibilities as I can to make way for an exciting [secret] new job.</p>\n\n<h2>Vaguely Relevant History</h2>\n\n<p>When I first started using CodeIgniter in 2007ish I wrote a whole bunch of libraries: Assets, Curl, REST, CLI, GitHub API, Unzip, Cache, Template, OAuth, OAuth 2, and probably a few more which have come and gone in that time. </p>\n\n<p>I was building projects and when I realised that a feature was not in CodeIgniter and nobody else had released a library - or the library was old or buggy - I'd build my own. When it was built I'd blog about it, so other people could avoid having to write the same stuff out and could potentially help me improve my own.</p>\n\n<p>Over time I realised that CodeIgniter was missing things in the core that were not something I could make into a library, and so I started blogging about how you could accomplish these various tasks. Base Controllers for Admin and Public areas, multi-site, multi-environment, REST API's, etc all ended up as a blog which people would use to answer almost any StackOverflow or IRC question you could ask.</p>\n\n<p>With all this blogging I ended up with quite a reputation as somebody who knows whats what in the CodeIgniter community, but it frustrated me that some features just weren't in the core. Other people were frustrated too, and the community wanted more control. I wrote an article two years ago that got a f**kload of attention, asking \"<a href=\"http://philsturgeon.co.uk/blog/2010/10/what-happens-next\">What Happens Next?</a>\" and suggested that CodeIgniter would not go much further without community input.</p>\n\n<h2>FuelPHP To The Rescue?</h2>\n\n<p>I ended up getting involved with FuelPHP - in the hope that if CodeIgniter were to \"die\" I would have another \"favourite framework\" which I could use for my PHP projects (which most of my clients request specifically). At the time working on FuelPHP was awesome fun as it meant I could play with PHP 5.3 features like namespaces, more command line utilities (like Oil) and other things that just didn't fit in with the CodeIgniter philosophy - as a slow moving, backwards compatability focused framework. It also meant that all of these hacks and tweaks I was blogging about could be rolled into the core. FuelPHP could handle multiple environments, base controllers, autoloading, etc all out of the box meaning each time I started a project I didn't need to hack it in!</p>\n\n<p>Eventually EllisLab let the community have what it had been asking for. They assigned a team of \"Reactor Engineers\" from the community (myself included) to help develop features and peer-review pull requests. This was <em>awesome</em> and 2.1 had a whole bunch of great new features come in - including many of those various tweaks and tricks myself and many others had been blogging about, and 3.0-dev (as yet unreleased) has had about x40 the number of commits that any version of CodeIgniter has had in any previous version - all still without breaking the API.</p>\n\n<h2>CodeIgniter AND FuelPHP?</h2>\n\n<p>This meant for a while I used both CodeIgniter and FuelPHP, which confused a lot of people. Simply put I would mainly use CodeIgniter when I was stuck using PHP 5.2 and FuelPHP when I was able to use PHP 5.3. Things like PyroCMS (a distributed application) and crummy old client servers (dear God why won't they let me upgrade them) meant that using PHP 5.2 (and therefore CodeIgniter) was a must for me, and so being in a position to fix bugs and add features was a massive oppertunity for me - and meant I wouldn't need to maintain my own \"fork\" of CodeIgniter.</p>\n\n<p>With this reputation in the CodeIgniter community, and with this position on the team, I started getting a lot of CodeIgniter jobs off the back of it. It was pretty cool being flown out to places like Chicago to work on projects for people using CodeIgniter, but I also ended up getting typecast. The number of CodeIgniter + Bootstrap dashboards I have made is only topped by the number of f**king CodeIgniter RESTful API's I've built. It's a lot.</p>\n\n<p>As of a few weeks ago I have a new job and my whole situation has changed. I am in a position where suddently I only have one main focus: building and maintaing the backend for an iPhone app, to handle as much load as possible. No more PHP 5.2 for me then, and not as much PHP in general. PHP 5.4 for the API (specifically requested) and JavaScript frontends with EmberJS to help reduce the amount of work the servers are forced to do. If the PHP starts to get slow, we can play with HipHop or even swap out the next version of the API for NodeJS. </p>\n\n<h2>Sacking Off Work</h2>\n\n<p>So with that big-ass changearound it seemed like a decent time to quit the CodeIgniter team. After-all I won't be using it, so why spend my own time working on it more than I have in the past? Just peer-reviewing incoming requests takes up about an hour a day and I just can't spare that time anymore. After-all, investing that time used to directly reflect in the freelance offers I would get, but I don't need to anymore. It might be selfish, but thats how it works.</p>\n\n<p>While I am at it I decided to quit the FuelPHP team too; I'm cutting right back.</p>\n\n<p>Now I can go back to just being a user, and not have to spend hours going through emails from GitHub about bugs and feature requests.</p>\n\n<p>In yet another move to shirk responsibilities I have open-sourced my two ExpressionEngine add-ons which I used to sell:</p>\n\n<ul>\n<li><a href=\"https://github.com/philsturgeon/ee2-rest\">Rest</a></li>\n<li><a href=\"https://github.com/philsturgeon/ee2-widgets\">Widgets</a></li>\n</ul>\n\n<p>I know people have been paying for that code, but the best I can do here is to open it up. I've been in touch with several customers who are over-the-moon to see it open-sourced, so I don't feel bad about this at all. If anybody wants to take them over they're welcome, otherwise send in pull requests and I'll get them merged as and when I have the time.</p>\n\n<h2>What next?</h2>\n\n<p>The only team I won't be dumping is PyroCMS - which is just getting started. There are some massive plans coming, and we'll be switching to PHP 5.3 soon meaning great new things.</p>\n\n<p>I've also been bashing together a basic admin panel for the new job using Laravel 4 (still pre-BETA) and this new framework fits in exactly with how I imagined FuelPHP 2 ending up. The difference is that Laravel has a company behind it, and Taylor has been ridiculously active. This whole last week or two he has been on Skype with me fixing bugs as I find them, and they already have a lot more done than the FuelPHP team could in the same amount of time. Laravel 3 was ok, but Laravel 4 is going to be epic. </p>\n\n<p>Basically, anything using Composer packages is a huge winner for me, even Symfony is starting to look much more attractive now that I've taken the time to learn about the benefits of dependency injection, instead of just discounting it based on it looking \"too complicated\".</p>\n\n<p>Anyway: \"The Times They Are a-Changin'\", so if you're a PHP Framework user: keep your eyes out for change and be receptive to it. </p>\n\n<p>If you're releasing code make it <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\">PSR-2</a> and distribute it using <a href=\"http://getcomposer.org\">Composer</a>, write <a href=\"http://www.phpunit.de/\">unit tests</a> and shove it on <a href=\"http://travis-ci.org/\">Travis-CI</a>. Try to make it work on as many frameworks as you can. Be smart. It takes a little extra work to implement initially, but you can double or quadruple your user-base, which can reduce ongoing work for you while increasing adoption.</p>\n\n<p>If you're looking for code packages make sure they do all of that. <a href=\"http://packagist.org\">Packagist</a> is a good place to start looking. You want tested, well documented, re-usable code, not just some random library somebody dumped together for your specific framework that might not be maintained as soon as they switch frameworks.</p>\n\n<p><strong>Update:</strong> A lot of people are reading a lot into the mention of Laravel. I am not interested <em>at all</em> in Laravel 3 (the current version). I am interested in PSR-2 and Composer, which Laravel 4 (the version still in development) is entriely. I want a basic framework, with no frills whatsoever. No ORM bundled in the core, and some really simple routing and config management. That is it. </p>\n\n<p>Laravel 4 keeps Blade, Eloquent, even the Validation code in their own packages which you can chose to include if you wish. I could just as easily use Silex, Slim or any micro-framework for that, then bundle a few packages. For API work I probably will be using Silex or Slim with a few PSR components bundled in, but for this dashboard application I am using a lot of Laravel components so decided to use the whole lot.</p>\n\n<p>The next generation of frameworks are not what you're used to. Don't use one framework for everything, use whatever is right for the job, and use components to stop this whole \"I build everything with X\" mentality. It's childish and damaging to you and your projects.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "131",
    "created": "2012-09-18 20:33:00",
    "updated": "2012-09-18 20:53:11",
    "created_by": "2",
    "ordering_count": null,
    "title": "No-DB Content Management Systems",
    "slug": "no-db-content-management-systems",
    "category_id": "0",
    "attachment": "",
    "intro": "If you're following many designers on Twitter then you'll notice that they've just started noticing flat-file (or \"No-DB\") content management systems. The basic idea is you swap out the database and complicated admin panels for a simple file and folder structure and use Markdown files instead of clunky WYSIWYG boxes to manage your content. These have some pros and cons, but can definitely be an awesome tool to have in your arsenal.",
    "body": "If you're following many designers on Twitter then you'll notice that they've just started noticing flat-file (or \"No-DB\") content management systems. The basic idea is you swap out the database and complicated admin panels for a simple file and folder structure and use Markdown files instead of clunky WYSIWYG boxes to manage your content.\n\nThis is a great idea as it means you can knock the database requirement out of your site, and run a blog and basic page structure with barely any effort what-so-ever. \n\n## Hitched to that bandwagon\n\nTwo notable projects I've worked on recently using flat-file CMS' are [PHP The Right Way][phptrw] and [PHP-FIG][phpfig]. Both of these sites are using the Ruby system [Jekyll][jekyll].\n\n> What now? PHP websites run using a Ruby CMS? Heresy! \n\nSssh there troll, it makes perfect sense. GitHub Pages support Jekyll, meaning we can make an entire website just by pushing some text-files to GitHub. We can therefore skip the process of working out who has admin access to the control panel, who looks after the root passwords, who is in charge of making changes, and people can send in pull requests to add new content or fix spelling mistakes. The best part is that all of the hosting is free. EPIC!\n\nFor a decreased workload like that I couldn't care less what language it was written in, even if it does seem a little ironic.\n\n## PHP is cool too\n\nI know of a few that have been around in PHP for ages now:\n\n* **Rick Ellis** (from CodeIgniter, [FileDriver][filedriver])\n* **Adam Fairholm** (from PyroCMS, called [Fizl][fizl])\n* **Ian Lindsman** (from Laravel, called [Kudos][kudos])\n\nSome have slightly different features and got to various different stages, but are for the most part the same as Jekyll.\n\nI've been using Fizl for the [PyroCMS Documentation][pyrodocs] as flat-files allow documentation to be distributed with ease, but Jekyll was out of the question as it needed to share most of the requirements as PyroCMS itself - therefore requiring PHP so folks could run it locally. \n\nIn both situations this is done so the content is easily accessable, can be modified via Git and skips the need for a database. This all makes sense so far.\n\n## New kids on the block\n\nTwo systems making waves right now are [Statamic][statamic] and [Kirby][kirby]. Both are closed-source with price-tags from $19 to $99. Kirby seems like a PHP port of Jekyll, no different from many of the ones listed above. \n\nKirby requires you to have hosting and a FTP client to send the code up, so you've paid for the software + a VPS, instead of running your site _entirely free_ using GitHub Pages.\n\nWell ok, we're not all nerds who love Git and they've said they are aimed at designers, but I know plenty of designers who are happily using Git with tools like [SourceTree][sourcetree] or [GitHub for Mac][gitformac]. \n\nSo back to Statamic. This one has a Control Panel, which means instead of opening a FTP client you can drag and drop your navigation items around. This cuts out the need for a FTP client to move things, and the Control Panel does seem handy, but now we have to worry about user authentication - something I loved not having in flat-file content management systems. It looks like we've looped back around.\n\n## Blogging First\n\nWell here we are with some tools that are getting a lot of hype from designers, which are very good at basic blogging and page management, but not a lot else. That sounds like...\n\nHoly shitballs these guys just invented WordPress without a database!\n\nWordPress has only recently got to a point where it's starting to get decent at doing things other than blogs and pages, and we've swung back around to square one.\n\nThe only difference this time, is what happens when you want to add in more? In the past you could install an addon, which would have access to a MySQL database and therefore could do pretty much anything. e-Commerce, Social Integration (storing tokens and whatnot), image galleries, whitepaper downloads and all of the other random things that clients decide they \"need\" a few months down the line?\n\nWell the two suggestions from Statamic fans are:\n\n* Recode it with something else\n* Add a Database\n\nHuh...\n\n## Use Cases\n\nChoosing the CMS for the job - like everything - comes down to the project. \n\nIf you're happy with Git then you might as well do it for free using Jekyll and GitHub.\n\nIf you're a designer who wants to get something basic running on your favourite site and you're cool with Coda's FTP syncing then use something like Kirby - but that's going to suck as soon as you've got two people on the site, as FTP syncing is well known for wiping out changes when two folks edit a file.\n\nIf you're not going to be FTP syncing (*headpat*) then Statamic might make sense, and if you need more power under the hood then use a more classic CMS. \n\n## Summary \n\nWhile this surely looks like I am just hating on any project not coded by me, my main point here is to think about which tool is right for the job and raise the questions you should be asking yourself during the selection process.\n\nDon't make the mistake of falling into the \"WordPress & Co.\" trap again where you have an awesome blog built on a trendy system but have to sacrifice a goat, install a bazillion add-ons or screw around with nasty code to make it do anything useful. \n\nThat said while it is great that different systems approach the same goal in different ways a lot of this does feel like buzzword bingo. \n\nNext these guys will add a MongoDB database and act like that is some AWESOME new advance in CMS, which has a heap of its own quirks and use-cases too - and of course nullifies the primary benefit of using a flat-file system in the first place.\n\nTry everything, use what you like, just don't fall victim to buzz-word bingo and try things out before you start putting clients on a product.\n\n  [fizl]: http://parse19.com/fizl/\n  [filedriver]: https://vimeo.com/20223857\n  [kudos]: https://github.com/ianlandsman/Kudos\n  [pyrodocs]: http://docs.pyrocms.com/2.1/manual/\n  [phptrw]: http://phptherightway.com/\n  [phpfig]: http://www.php-fig.org/\n  [jekyll]: https://github.com/mojombo/jekyll/wiki\n  [adam]: https://twitter.com/adamfairholm\n  [kirby]: http://getkirby.com/\n  [statamic]: http://statamic.com/\n  [sourcetree]: http://www.sourcetreeapp.com/\n  [gitformac]: http://mac.github.com/",
    "created_on": "1348000380",
    "updated_on": "1348001591",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "841a6a7b34c8388f8937004fd14e50bb",
    "type": "markdown",
    "parsed": "<p>If you're following many designers on Twitter then you'll notice that they've just started noticing flat-file (or \"No-DB\") content management systems. The basic idea is you swap out the database and complicated admin panels for a simple file and folder structure and use Markdown files instead of clunky WYSIWYG boxes to manage your content.</p>\n\n<p>This is a great idea as it means you can knock the database requirement out of your site, and run a blog and basic page structure with barely any effort what-so-ever. </p>\n\n<h2>Hitched to that bandwagon</h2>\n\n<p>Two notable projects I've worked on recently using flat-file CMS' are <a href=\"http://phptherightway.com/\">PHP The Right Way</a> and <a href=\"http://www.php-fig.org/\">PHP-FIG</a>. Both of these sites are using the Ruby system <a href=\"https://github.com/mojombo/jekyll/wiki\">Jekyll</a>.</p>\n\n<blockquote>\n  <p>What now? PHP websites run using a Ruby CMS? Heresy! </p>\n</blockquote>\n\n<p>Sssh there troll, it makes perfect sense. GitHub Pages support Jekyll, meaning we can make an entire website just by pushing some text-files to GitHub. We can therefore skip the process of working out who has admin access to the control panel, who looks after the root passwords, who is in charge of making changes, and people can send in pull requests to add new content or fix spelling mistakes. The best part is that all of the hosting is free. EPIC!</p>\n\n<p>For a decreased workload like that I couldn't care less what language it was written in, even if it does seem a little ironic.</p>\n\n<h2>PHP is cool too</h2>\n\n<p>I know of a few that have been around in PHP for ages now:</p>\n\n<ul>\n<li><strong>Rick Ellis</strong> (from CodeIgniter, <a href=\"https://vimeo.com/20223857\">FileDriver</a>)</li>\n<li><strong>Adam Fairholm</strong> (from PyroCMS, called <a href=\"http://parse19.com/fizl/\">Fizl</a>)</li>\n<li><strong>Ian Lindsman</strong> (from Laravel, called <a href=\"https://github.com/ianlandsman/Kudos\">Kudos</a>)</li>\n</ul>\n\n<p>Some have slightly different features and got to various different stages, but are for the most part the same as Jekyll.</p>\n\n<p>I've been using Fizl for the <a href=\"http://docs.pyrocms.com/2.1/manual/\">PyroCMS Documentation</a> as flat-files allow documentation to be distributed with ease, but Jekyll was out of the question as it needed to share most of the requirements as PyroCMS itself - therefore requiring PHP so folks could run it locally. </p>\n\n<p>In both situations this is done so the content is easily accessable, can be modified via Git and skips the need for a database. This all makes sense so far.</p>\n\n<h2>New kids on the block</h2>\n\n<p>Two systems making waves right now are <a href=\"http://statamic.com/\">Statamic</a> and <a href=\"http://getkirby.com/\">Kirby</a>. Both are closed-source with price-tags from $19 to $99. Kirby seems like a PHP port of Jekyll, no different from many of the ones listed above. </p>\n\n<p>Kirby requires you to have hosting and a FTP client to send the code up, so you've paid for the software + a VPS, instead of running your site <em>entirely free</em> using GitHub Pages.</p>\n\n<p>Well ok, we're not all nerds who love Git and they've said they are aimed at designers, but I know plenty of designers who are happily using Git with tools like <a href=\"http://www.sourcetreeapp.com/\">SourceTree</a> or <a href=\"http://mac.github.com/\">GitHub for Mac</a>. </p>\n\n<p>So back to Statamic. This one has a Control Panel, which means instead of opening a FTP client you can drag and drop your navigation items around. This cuts out the need for a FTP client to move things, and the Control Panel does seem handy, but now we have to worry about user authentication - something I loved not having in flat-file content management systems. It looks like we've looped back around.</p>\n\n<h2>Blogging First</h2>\n\n<p>Well here we are with some tools that are getting a lot of hype from designers, which are very good at basic blogging and page management, but not a lot else. That sounds like...</p>\n\n<p>Holy shitballs these guys just invented WordPress without a database!</p>\n\n<p>WordPress has only recently got to a point where it's starting to get decent at doing things other than blogs and pages, and we've swung back around to square one.</p>\n\n<p>The only difference this time, is what happens when you want to add in more? In the past you could install an addon, which would have access to a MySQL database and therefore could do pretty much anything. e-Commerce, Social Integration (storing tokens and whatnot), image galleries, whitepaper downloads and all of the other random things that clients decide they \"need\" a few months down the line?</p>\n\n<p>Well the two suggestions from Statamic fans are:</p>\n\n<ul>\n<li>Recode it with something else</li>\n<li>Add a Database</li>\n</ul>\n\n<p>Huh...</p>\n\n<h2>Use Cases</h2>\n\n<p>Choosing the CMS for the job - like everything - comes down to the project. </p>\n\n<p>If you're happy with Git then you might as well do it for free using Jekyll and GitHub.</p>\n\n<p>If you're a designer who wants to get something basic running on your favourite site and you're cool with Coda's FTP syncing then use something like Kirby - but that's going to suck as soon as you've got two people on the site, as FTP syncing is well known for wiping out changes when two folks edit a file.</p>\n\n<p>If you're not going to be FTP syncing (<em>headpat</em>) then Statamic might make sense, and if you need more power under the hood then use a more classic CMS. </p>\n\n<h2>Summary</h2>\n\n<p>While this surely looks like I am just hating on any project not coded by me, my main point here is to think about which tool is right for the job and raise the questions you should be asking yourself during the selection process.</p>\n\n<p>Don't make the mistake of falling into the \"WordPress &amp; Co.\" trap again where you have an awesome blog built on a trendy system but have to sacrifice a goat, install a bazillion add-ons or screw around with nasty code to make it do anything useful. </p>\n\n<p>That said while it is great that different systems approach the same goal in different ways a lot of this does feel like buzzword bingo. </p>\n\n<p>Next these guys will add a MongoDB database and act like that is some AWESOME new advance in CMS, which has a heap of its own quirks and use-cases too - and of course nullifies the primary benefit of using a flat-file system in the first place.</p>\n\n<p>Try everything, use what you like, just don't fall victim to buzz-word bingo and try things out before you start putting clients on a product.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "132",
    "created": "2012-09-19 07:19:00",
    "updated": "2012-09-19 21:47:22",
    "created_by": "2",
    "ordering_count": null,
    "title": "Package Watch: Image Management",
    "slug": "package-watch-image-management",
    "category_id": "2",
    "attachment": "",
    "intro": "For years I was locked into using the same frameworks for everything, mainly because my clients were hiring me specifically to use CodeIgniter based on my reputation within the community. &nbsp;Now that is not the case and I can build things however I damn well like, so I am doing it properly and that is using Composer. I tweeted about some useful libraries I found, so here is what they are with an explanation of the approach and why I used it.",
    "body": "Sorry if I sound like a broken record, but packages are f**king brilliant. I've mentioned before that [packages are the future of PHP][future] and plenty of [other developers][brad] are [thinking the same thing][fortr].\n\nFor years I was locked into using the same frameworks for everything, mainly because my clients were hiring me specifically to use CodeIgniter based on my reputation within the community. \n\nNow that is not the case and I can build things however I damn well like, so I am doing it _properly_ and that is using Composer.\n\n## No Framework?\n\nAny project needs some sort of base; something needs to handle your HTTP requests, route them to a callback, or a controller, or something. \n\nThis is one of the most basic objectives of a framework, and really it should be one of it's primary concerns. I could write all of this myself, but I have more interesting things to do so I needed to pick a framework.\n\nIf this was an API I would have used Slim or Silex, but this project needed a lot of CRUD, form validation and database interaction so I decided to use something that had a lot of that already: Laravel 4. \n\n## Why Laravel 4?\n\nTaylor Otwell gets PSR packages. Laravel 4 is entirely built on top of Composer. The validation, sessions, database (Query Builder and Eloquent ORM), routing, etc are ALL Composer packages so I can pick and chose the bits that I need. \n\nIt makes the choice of framework considerably less important, because I can use the Laravel ORM with… anything.\n\n## But X framework doesn't do Y\n\nA PHP framework should focus its attention on its core responsibilities, like routing, request, response, sessions, views, etc and NOT on random edge-case stuff. Much like the CodeIgniter Cart library which I want to see [killed off](https://github.com/EllisLab/CodeIgniter/issues/214), ORM's or even in this case image management.\n\nLaravel 4 doesn't handle it, so I had to use some extra packages.\n\n## Image Uploads & Management\n\nTo get this extra functionality I added two packages to my composer.json:\n\n<script src=\"https://gist.github.com/3748717.js?file=full composer.json\"></script>\n\nThe first is [Upload][upload] by [Josh Lockhart][josh] (who built [Slim][slim] and started [PHP The Right Way][phptrw]). It's currently very basic as it's not been alive long, but for the job I needed to do it worked perfectly:\n\n<script src=\"https://gist.github.com/3748717.js?file=upload\"></script>\n\t\nPerfect. It's helped me validate size and mime-type with much less boilerplate code than native PHP would have required. This same package will work anywhere, and soon enough it will have other storage drivers so  this file can go straight to S3 when I hit upload. Nice.\n\nMoving on, one it's uploaded I want to resize it and add a watermark to the corner. Erf, ok so getimagesize() then check if the height or width is larger, then try to resize in ratio if its bigger than a certain size, then add a new image by calculating the size of the new image, minus 10 pixels to offset it and… IM SO BORED ALREADY! \n\nLet's use a package:\n\n<script src=\"https://gist.github.com/3748717.js?file=watermark\"></script>\n\t\nPhew, I almost had to think for a minute there. Thanks [Clément Guillemain](https://github.com/Sybio).\n\nThe think I love is that all of these packages fit into my application perfectly, and there is no \"I wonder if they've updated recently, I'd better go back to their blog and check to see\". Even more recently with GitHub managing all of those as Git submodules would have been a ballache.\n\nHere is my entire composer.json for this project:\n\n<script src=\"https://gist.github.com/3748717.js?file=composer.json\"></script>\n   \nEasy right?\n\n## Final Thoughts\n\nI know it's early days but this is PHP renaissance. People are building an [ActiveMerchant port](https://github.com/adrianmacneil/tala-payments) (payment with 12+ gateways that will work perfectly in any framework), Alex Bilbie is combining all of our OAuth 2 client and server logic for CodeIgniter and FuelPHP to make one **epic** OAuth 2 package that will do everything, there are [Asset pipelines](https://github.com/CHH/pipe), [command line controllers](https://github.com/nategood/commando), [IMAP inbox readers](https://github.com/tedivm/Fetch), and all sorts of crazy and useful things.\n\nStart using Composer on your next project and say \"fuck you\" to the frameworks that lock you in. If you spend all your time using that one framework, you'll have a horrible time using a different one. If you use packages you can take them with you to whatever framework you use for the next project. That reduces time wasted re-learning how YetAnotherORM works, or how YET ANOTHER ASSET LIBRARY works, helps reduce wasted code, help reduce bullshit tribalism in framework users, and helps PHP move forward as an ecosystem.  \n\n\n\n  [future]: http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php\n  [brad]: http://www.bradleyproctor.com/composer-the-future-of-php/\n  [fortr]: http://blog.fortrabbit.com/handle-your-dependencies-with-php-composer/\n  [upload]: https://github.com/codeguy/Upload\n  [josh]: https://www.joshlockhart.com/\n  [slim]: https://github.com/codeguy/slim\n  [phptrw]: http://www.phptherightway.com/",
    "created_on": "1348039140",
    "updated_on": "1348091242",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "1a86e991bf2a615c6d71f13925a8b484",
    "type": "markdown",
    "parsed": "<p>Sorry if I sound like a broken record, but packages are f**king brilliant. I've mentioned before that <a href=\"http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php\">packages are the future of PHP</a> and plenty of <a href=\"http://www.bradleyproctor.com/composer-the-future-of-php/\">other developers</a> are <a href=\"http://blog.fortrabbit.com/handle-your-dependencies-with-php-composer/\">thinking the same thing</a>.</p>\n\n<p>For years I was locked into using the same frameworks for everything, mainly because my clients were hiring me specifically to use CodeIgniter based on my reputation within the community. </p>\n\n<p>Now that is not the case and I can build things however I damn well like, so I am doing it <em>properly</em> and that is using Composer.</p>\n\n<h2>No Framework?</h2>\n\n<p>Any project needs some sort of base; something needs to handle your HTTP requests, route them to a callback, or a controller, or something. </p>\n\n<p>This is one of the most basic objectives of a framework, and really it should be one of it's primary concerns. I could write all of this myself, but I have more interesting things to do so I needed to pick a framework.</p>\n\n<p>If this was an API I would have used Slim or Silex, but this project needed a lot of CRUD, form validation and database interaction so I decided to use something that had a lot of that already: Laravel 4. </p>\n\n<h2>Why Laravel 4?</h2>\n\n<p>Taylor Otwell gets PSR packages. Laravel 4 is entirely built on top of Composer. The validation, sessions, database (Query Builder and Eloquent ORM), routing, etc are ALL Composer packages so I can pick and chose the bits that I need. </p>\n\n<p>It makes the choice of framework considerably less important, because I can use the Laravel ORM with… anything.</p>\n\n<h2>But X framework doesn't do Y</h2>\n\n<p>A PHP framework should focus its attention on its core responsibilities, like routing, request, response, sessions, views, etc and NOT on random edge-case stuff. Much like the CodeIgniter Cart library which I want to see <a href=\"https://github.com/EllisLab/CodeIgniter/issues/214\">killed off</a>, ORM's or even in this case image management.</p>\n\n<p>Laravel 4 doesn't handle it, so I had to use some extra packages.</p>\n\n<h2>Image Uploads &amp; Management</h2>\n\n<p>To get this extra functionality I added two packages to my composer.json:</p>\n\n<script src=\"https://gist.github.com/3748717.js?file=full composer.json\"></script>\n\n<p>The first is <a href=\"https://github.com/codeguy/Upload\">Upload</a> by <a href=\"https://www.joshlockhart.com/\">Josh Lockhart</a> (who built <a href=\"https://github.com/codeguy/slim\">Slim</a> and started <a href=\"http://www.phptherightway.com/\">PHP The Right Way</a>). It's currently very basic as it's not been alive long, but for the job I needed to do it worked perfectly:</p>\n\n<script src=\"https://gist.github.com/3748717.js?file=upload\"></script>\n\n<p>Perfect. It's helped me validate size and mime-type with much less boilerplate code than native PHP would have required. This same package will work anywhere, and soon enough it will have other storage drivers so  this file can go straight to S3 when I hit upload. Nice.</p>\n\n<p>Moving on, one it's uploaded I want to resize it and add a watermark to the corner. Erf, ok so getimagesize() then check if the height or width is larger, then try to resize in ratio if its bigger than a certain size, then add a new image by calculating the size of the new image, minus 10 pixels to offset it and… IM SO BORED ALREADY! </p>\n\n<p>Let's use a package:</p>\n\n<script src=\"https://gist.github.com/3748717.js?file=watermark\"></script>\n\n<p>Phew, I almost had to think for a minute there. Thanks <a href=\"https://github.com/Sybio\">Clément Guillemain</a>.</p>\n\n<p>The think I love is that all of these packages fit into my application perfectly, and there is no \"I wonder if they've updated recently, I'd better go back to their blog and check to see\". Even more recently with GitHub managing all of those as Git submodules would have been a ballache.</p>\n\n<p>Here is my entire composer.json for this project:</p>\n\n<script src=\"https://gist.github.com/3748717.js?file=composer.json\"></script>\n\n<p>Easy right?</p>\n\n<h2>Final Thoughts</h2>\n\n<p>I know it's early days but this is PHP renaissance. People are building an <a href=\"https://github.com/adrianmacneil/tala-payments\">ActiveMerchant port</a> (payment with 12+ gateways that will work perfectly in any framework), Alex Bilbie is combining all of our OAuth 2 client and server logic for CodeIgniter and FuelPHP to make one <strong>epic</strong> OAuth 2 package that will do everything, there are <a href=\"https://github.com/CHH/pipe\">Asset pipelines</a>, <a href=\"https://github.com/nategood/commando\">command line controllers</a>, <a href=\"https://github.com/tedivm/Fetch\">IMAP inbox readers</a>, and all sorts of crazy and useful things.</p>\n\n<p>Start using Composer on your next project and say \"fuck you\" to the frameworks that lock you in. If you spend all your time using that one framework, you'll have a horrible time using a different one. If you use packages you can take them with you to whatever framework you use for the next project. That reduces time wasted re-learning how YetAnotherORM works, or how YET ANOTHER ASSET LIBRARY works, helps reduce wasted code, help reduce bullshit tribalism in framework users, and helps PHP move forward as an ecosystem.  </p>\n",
    "preview_hash": ""
  },
  {
    "id": "133",
    "created": "2012-10-03 12:56:00",
    "updated": "2012-10-03 16:25:28",
    "created_by": "2",
    "ordering_count": null,
    "title": "Cloud Hosting for PHP: The Eternal Pipe Dream",
    "slug": "cloud-hosting-php-pipe-dream",
    "category_id": "2",
    "attachment": "",
    "intro": "This time last year I was extremely excited about the future of Heroku-style PHP hosting services (or PaaS), which would allow developers to quickly and easily set up small hosting environmemnts that grow and scale horizontally and vertically to allow ridiculous levels of traffic. I was so excited I posted an article saying 2012 would be the year for PHP to move to the cloud. This is an account of why after a year it still sucks.",
    "body": "I posted an article at the start of the year called [2012: The year of PHP cloud hosting][2012]. Well, not really. Sure there are two months left in the year, maybe the problems will get fixed? Before I go onto explain the problems, what is all this fuss about PaaS anyway?\n\n## Server Provisioning\n\nI would much rather be doing anything other than sysadmin. Sure it only takes a few minutes to fire up a VPS and run \"sudo apt-get install lamp-server\", and you don't need a neck-beard to configure some PHP extensions to use and enable mod_rewrite, but if you could do it all with one single file… why wouldn't you? On Pagoda Box you can do this:\n\n    web1:\n        shared_writable_dirs: [/system/cms/cache, /system/cms/logs, /uploads, /assets/cache]\n        \n        php_version: 5.3.10\n        php_extensions: [mysqli, curl, gd, mbstring, eaccelerator, memcached]\n        \n        php_date_timezone: Europe/London\n        php_max_execution_time: 30\n        php_max_input_time: 60\n        php_post_max_size: 50M\n        php_file_uploads: On\n        php_upload_max_filesize: 20M\n        php_max_file_uploads: 20\n        \n    db1:\n    \tname: 'site'\n\nThat means I know exactly what version of PHP it will use, and I can configure other extensions to be installed. You can do this using tools like Chef or Puppet, but the overhead of setting all of that up is massive. You need to set up Chef Server or set up a Chef Solo on a cron or hook and do all sorts of arsing around - which is absolutely fine if you're building a big project that needs it, but not for some little blog.\n\nIf you don't use Chef, Puppet or a PaaS built-in provisioning tool like the Boxfile then you run the risk of forgetting about certain extensions when you move the application - which is a ballache and probably results in errors on your live site being reported by users. How many of you really remember to install mbstring or gd first time around?\n\n## Deployment\n\nGetting your code from your computer to the live site is another thing a good PaaS will take care of. I love that for simple sites I can make a tweak then hit \"git push production master\" and forget about it. I can replicate that functionality using other tools, but again it's all about having it in one place. \n\nFor example: A large project I've been working on recently is using Chef Server for provisioning and EC2 to host the staging and production servers. We then deploy new builds with a custom script that will fire up a new server via the Chef's Knife tool and a EC2 plugin, deploy the code from GitHub to the server, permission everything, set up configuration, transfer the Elastic IP over to the new server once its done, then terminate the old server.\n\nSound complicated? Sure is, but it is exactly how Pagoda Box works in the background. You just do a \"git push\" and it will use your Boxfile to build you your server, create a new instance, deploy the code, switch the network to look at your new instance, then terminate the old instance. \n\nThe whole point of these systems is giving you the advantages of these manually put together very complex systems, without asking you to spend all the time setting it up. If you only work on one or two websites, then you might not need deployment or provisioning, and if you do you might not mind setting it up. But if you work on a f**kload of sites and want to be able to do the same sort of things, you need a decent PaaS to help you out.\n\n## Collaboration\n\nWhat did you do before GitHub or the hosted Subversion repo systems like CodeBaseHQ and Unfuddle? Did you set up your own Subversion/Git repos on your own networks? Setting them all up sucked. Managing them when a bug came up was annoying. Adding new users was time intensive, and if you wanted to give somebody remote access you had to serve your repo up online.\n\nGitHub did the same for code sharing that PaaS does for hosting. In a team of developers you can just enter \"jerelunruh\" and click \"Add user\" to the project and they can deploy changes to your server. Again, if you have a LOT of projects where you work with various different teams, developers and clients, this is an unbelievable blessing.\n\n## Horizontal and Vertical Scaling\n\nIf you're running a little $12 VPS because your site has not been getting much traffic, then suddenly your site get listed somewhere popular and you get a flood of traffic what happens? You're going down. Downtown!\n\nSome PaaS systems allow auto-scaling. That sounds pretty nice right? You get a lot of traffic, so you get more machines. Other PaaS systems don't have an automatic solution, but PagodaBox will give you a very simple analytic board and show off when your servers are taking a hit. You can easily slide a bar up and increase your memory dramatically, or even throw more servers into it to have your site automatically load balanced. EPIC!\n\n## What else?\n\nThe fact that most PaaS handle minor details like one-click Redis server setup, easy use of Worker systems (no need to set up Gearman or RabbitMQ - which can be a bitch) is handy extra to this already awesome list of features. \n\nI know I've been suggesting PaaS is great for basic sites and basic sites might not need Redis or workers you say, but as those sites grow or the CMS they're using releases \"Redis Support\", it's nice to be able to take care of that in one click and not arse around setting it up. That makes clients happy, and I'm happy because I don't have to do any sysadmin shit.\n\n## Pagoda Box sounds great then!\n\nPagoda Box is everything I want a PaaS product to be. It would be even better if it worked.\n\nI have been using Pagoda Box since the early BETA's and it started off very shaky. That's ok though, thats what BETA is for - but a year or two later they're still horrendously unstable with no real signs of improvement. I feel horrible saying this because I the team are great people, but I can't sit around happily using a product that has caused two major issues in two days:\n\n### happyninjas.com\n\nRandomly my company site disappeared. I have two apps running on the domain, the main site and my billing area ([PancakeApp][pancake]) running in a submodule folder. The entire main site was deleted, but the billing submodule was still there - only not responding to Apache. It was just a file system and anyone could click around looking at the files. \n\n> Somebody even sent me the URL to my PayPal IPN log which shows how much my clients have been paying me recently.\n\nWHAT THE FUCK?!\n\nThis would never normally happen with PancakeApp as Apache would read the .htaccess rules and never display that file, but because the .htaccess was ignored and this was being treated as a file system, anyone could read whatever they liked. Not cool.\n\n### philsturgeon.co.uk\n\nI did the usual Twitter-check-before-bed and saw somebody reporting an error that has come up a few times before about sessions not being writable to \"/tmp/pagoda/djsfhihep4o\". I responded with an all-to0-familiar \"That's a common Pagoda Box bug, it should be working again in a few minutes.\". I wake up after 6 hours and my site is still down. \n\nThere have been other errors on other sites (I have about 20 hosted with Pagoda Box from client PyroCMS sites to the API backend for iPhone app Bus Live: London). Some of the times I've tweeted about \"Pagoda Box Bugs\" it's actually been my fault and the team have helped me out brilliantly, but a lot of the the problems have just been ridiculous; like when I took a backup of a large database and crashed the site... The other trouble here is that they are an American company with American support staff, so if I wake up and things are broken I have nobody to ask for help until my afternoon when the yanks are sipping their morning coffee.\n\nI've been actively reporting bugs to Pagoda Box for the entire time I've used them and they've fixed most - but I've been paying through the nose to mine-sweep for them and I'm fed up with it.\n\n## Alternatives\n\nI planned on having a fairly interesting morning of hiking up a nice little mountain near my hostel in Norway before getting on with the meat of my development work today. Instead I have gone through 6 well known PaaS systems and I can't use any of them.\n\n### PHPFog / AppFog\n\nPHP Fog was the first on the scene that was usable well over a year ago. I used that since it was in early beta too and it was great for a while - until I tried to scale. The choices were \"Gold, Silver or Bronze\". I was on Bronze and my site just got nailed with traffic when some article hit #1 on HackerNews. Ironically I think it was \"2012: The Year of Cloud Hosting\", but it meant I needed to scale and quickly. When I selected Silver I saw a little message saying \"Your cloud will be upgraded to Silver within 24 hours, please be patient\". I was on Pagoda Box before waiting even one hour.\n\nI can't blame PHPFog for this, as they were a start-up company building a minimal viable product. They then got given a whopping $9.8 million investment and pivoted to be generic PaaS, supporting Ruby, Node, Java, Python, etc as well as PHP. The features in AppFog are immense and it really looks like money has been spent on it, but it has its own problems.\n\nUntil two days ago App Fog didn't have root-domains. That means I could not have philsturgeon.co.uk but I could have www.philsturgeon.co.uk. They fixed that, so awesome. But they have no writable folders. \n\nNow I know people always say: \"Yeah but you should be uploading your files to S3 so you don't need writable folders\". Ok smart-ass, what about log files and caching? I can send my logs through RabbitMQ or store them in Mongo, and I can use Redis for my caching, but that's not exactly helpful for stock applications. PyroCMS can handle that thanks to some improvements made recently which will be available in a later version, but most systems will fall if it can't write anything anywhere at all. PHP Fog used to allow you to enter folder paths of folders that should be writable. Why doesn't AppFog?\n\nPagoda Box dealt with this by allowing \"shared writable folders\" which were not only writable by the server by they would be shared between all servers - so when you added more servers you'd keep all of your logs and they'd all use the same cache instead of hitting the DB once per server.\n\nBeyond the problems with AppFog's feature-set the stability of its website and dashboard also worry me. Login attempts were taking about a minute and giving empty responses while the rest of their site loaded instantly. It took 6 attempts it log in to the site.\n\nCreating new apps was giving a 500 error with their generic error page. After 7 attempts it let me create an application. \n\nI'll come back to AppFog in the future. I still happily wear my PHPFog t-shirt and drink coffee from my AppFog mug, but for now I can't use them for any of the sites I look after. Next!\n\n### Orchestra\n\n[Orchestra](http://www.engineyard.com/products/orchestra/) is a very simple little PaaS founded by [Eamon Leonard](http://eamo.net/) which was later acquired by [EngineYard](http://www.engineyard.com/) - who are very big in PaaS but mainly in the Ruby world.\n\nI had a demo of Orchestra before it launched from Eamon himself and it looked really cool, but the feature-set is just not on the level with some of the competition. You can control where nginx will look for index.php and that is about it. No writable folders (especially not shared writable folders), no control over extensions, nothing. They suggested over twitter after my rants this morning that I use their Redis extension to send out all my logs and cache. That's fine if I am building an application specifically to use with Orchestra but deploying existing applications is pretty tough. One of their selling points is:\n\n> Build your app with a range of popular PHP frameworks\n\nI don't know many frameworks that have Redis logging built in. I'm sure Symfony does, but that's not \"a range\" of popular frameworks. If I have to build my application specifically to work with the provider then the point of this simple hosting has been missed.\n\nThe other gripe I have with the system is that your deployment is done with a hook - overwhich you have no real-time feedback. When you push to your repo a hook will fire, then \"at some point\" the code is live, meaning its hard to tell if a change was successful. Other systems provide real-time feedback in the command line, or via the interface so you actually know if its deployed or not.\n\n### FortRabbit\n\n[FortRabbit](http://fortrabbit.com) certainly looks interesting and has some very useful performance analytics on the dashboard. I'd suggest you guys take a look but it's still got a BETA tag on there and I'm not going through that again.\n\n### AppliHQ\n\nI was excited by the idea of [AppliHQ][applihq] as I am a big fan of aTech products and have used PointHQ and CodeBaseHQ a lot in the past. Sadly after scouring their site I couldn't find a signup button, and they eventually tweeted to let me know they were not accepting new sign-ups. Erf.\n\n### Heroku\n\nI looked into this and know a few people running PHP happily on [Heroku](https://www.heroku.com/), but it's a hack. If these companies cannot get things right after two years then I don't know how Heroku expect to get PHP right in the first year - especially if you have to hack in support by saying it's a \"Facebook App\". I've seen some articles that show how I can do this, but I don't need my hosting solution to be posted on [There I Fixed It](https://failblog.cheezburger.com/thereifixedit).\n\n### AWS Elastic Beanstalk\n\n[Elastic Beanstalk](https://aws.amazon.com/elasticbeanstalk/) is essentially Pagoda Box but with WAY more flexibility, but that flexibility of course comes with a loss of simiplicity. It is also 5x the cost and really not meant for hosting a little blog. The process is essentially the same as the initial EC2 + Chef process I described above. It looses the advantages of \"adding users\" easily like this other GitHubescque systems do and of course it is in BETA itself.\n\n## Next?\n\nI've moved this blog to a little EC2 instance, left some low-traffic client sites on Pagoda Box, I'll be moving pyrocms.com to EC2/Chef deployments much like the first example and I'll be hoping that AppFog add shared writeable directories soon.\n\nThis comment section will doubtlessly be filled up with people linking up other PaaS solutions as there are a LOT (about 50) but most of them are developed by very small teams, not yet complete, still in beta or just too lame to even mention. The way I see it, if a company with $9.8 million in the bank hasn't quite got it right yet then I doubt a bootstrapped-in-the-garage product will.\n\nMaybe Pagoda Box will fix itself; That would be ideal because they have absolutely nailed the features but their service just doesn't stay up. I've been assuming their problems will just stop for well over a year and it hasn't happened yet.\n\nFinally to everyone suggesting I just use Linode/CheapVPS4U/whatever: I've spent the last 2 years driving a hover-car. I don't want to go back to driving a normal car, I just want another hover-car that doesn't keep crashing.\n\n  [2012]: http://philsturgeon.co.uk/blog/2012/01/2012-the-year-of-php-cloud-hosting\n  [applihq]: http://www.applihq.com/\n  [pancake]: http://pancakeapp.com/",
    "created_on": "1349268960",
    "updated_on": "1349281528",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "52bcbef3ea9b9fb2d02ecafe1f65cebc",
    "type": "markdown",
    "parsed": "<p>I posted an article at the start of the year called <a href=\"http://philsturgeon.co.uk/blog/2012/01/2012-the-year-of-php-cloud-hosting\">2012: The year of PHP cloud hosting</a>. Well, not really. Sure there are two months left in the year, maybe the problems will get fixed? Before I go onto explain the problems, what is all this fuss about PaaS anyway?</p>\n\n<h2>Server Provisioning</h2>\n\n<p>I would much rather be doing anything other than sysadmin. Sure it only takes a few minutes to fire up a VPS and run \"sudo apt-get install lamp-server\", and you don't need a neck-beard to configure some PHP extensions to use and enable mod_rewrite, but if you could do it all with one single file… why wouldn't you? On Pagoda Box you can do this:</p>\n\n<pre><code>web1:\n    shared_writable_dirs: [/system/cms/cache, /system/cms/logs, /uploads, /assets/cache]\n\n    php_version: 5.3.10\n    php_extensions: [mysqli, curl, gd, mbstring, eaccelerator, memcached]\n\n    php_date_timezone: Europe/London\n    php_max_execution_time: 30\n    php_max_input_time: 60\n    php_post_max_size: 50M\n    php_file_uploads: On\n    php_upload_max_filesize: 20M\n    php_max_file_uploads: 20\n\ndb1:\n    name: 'site'\n</code></pre>\n\n<p>That means I know exactly what version of PHP it will use, and I can configure other extensions to be installed. You can do this using tools like Chef or Puppet, but the overhead of setting all of that up is massive. You need to set up Chef Server or set up a Chef Solo on a cron or hook and do all sorts of arsing around - which is absolutely fine if you're building a big project that needs it, but not for some little blog.</p>\n\n<p>If you don't use Chef, Puppet or a PaaS built-in provisioning tool like the Boxfile then you run the risk of forgetting about certain extensions when you move the application - which is a ballache and probably results in errors on your live site being reported by users. How many of you really remember to install mbstring or gd first time around?</p>\n\n<h2>Deployment</h2>\n\n<p>Getting your code from your computer to the live site is another thing a good PaaS will take care of. I love that for simple sites I can make a tweak then hit \"git push production master\" and forget about it. I can replicate that functionality using other tools, but again it's all about having it in one place. </p>\n\n<p>For example: A large project I've been working on recently is using Chef Server for provisioning and EC2 to host the staging and production servers. We then deploy new builds with a custom script that will fire up a new server via the Chef's Knife tool and a EC2 plugin, deploy the code from GitHub to the server, permission everything, set up configuration, transfer the Elastic IP over to the new server once its done, then terminate the old server.</p>\n\n<p>Sound complicated? Sure is, but it is exactly how Pagoda Box works in the background. You just do a \"git push\" and it will use your Boxfile to build you your server, create a new instance, deploy the code, switch the network to look at your new instance, then terminate the old instance. </p>\n\n<p>The whole point of these systems is giving you the advantages of these manually put together very complex systems, without asking you to spend all the time setting it up. If you only work on one or two websites, then you might not need deployment or provisioning, and if you do you might not mind setting it up. But if you work on a f**kload of sites and want to be able to do the same sort of things, you need a decent PaaS to help you out.</p>\n\n<h2>Collaboration</h2>\n\n<p>What did you do before GitHub or the hosted Subversion repo systems like CodeBaseHQ and Unfuddle? Did you set up your own Subversion/Git repos on your own networks? Setting them all up sucked. Managing them when a bug came up was annoying. Adding new users was time intensive, and if you wanted to give somebody remote access you had to serve your repo up online.</p>\n\n<p>GitHub did the same for code sharing that PaaS does for hosting. In a team of developers you can just enter \"jerelunruh\" and click \"Add user\" to the project and they can deploy changes to your server. Again, if you have a LOT of projects where you work with various different teams, developers and clients, this is an unbelievable blessing.</p>\n\n<h2>Horizontal and Vertical Scaling</h2>\n\n<p>If you're running a little $12 VPS because your site has not been getting much traffic, then suddenly your site get listed somewhere popular and you get a flood of traffic what happens? You're going down. Downtown!</p>\n\n<p>Some PaaS systems allow auto-scaling. That sounds pretty nice right? You get a lot of traffic, so you get more machines. Other PaaS systems don't have an automatic solution, but PagodaBox will give you a very simple analytic board and show off when your servers are taking a hit. You can easily slide a bar up and increase your memory dramatically, or even throw more servers into it to have your site automatically load balanced. EPIC!</p>\n\n<h2>What else?</h2>\n\n<p>The fact that most PaaS handle minor details like one-click Redis server setup, easy use of Worker systems (no need to set up Gearman or RabbitMQ - which can be a bitch) is handy extra to this already awesome list of features. </p>\n\n<p>I know I've been suggesting PaaS is great for basic sites and basic sites might not need Redis or workers you say, but as those sites grow or the CMS they're using releases \"Redis Support\", it's nice to be able to take care of that in one click and not arse around setting it up. That makes clients happy, and I'm happy because I don't have to do any sysadmin shit.</p>\n\n<h2>Pagoda Box sounds great then!</h2>\n\n<p>Pagoda Box is everything I want a PaaS product to be. It would be even better if it worked.</p>\n\n<p>I have been using Pagoda Box since the early BETA's and it started off very shaky. That's ok though, thats what BETA is for - but a year or two later they're still horrendously unstable with no real signs of improvement. I feel horrible saying this because I the team are great people, but I can't sit around happily using a product that has caused two major issues in two days:</p>\n\n<h3>happyninjas.com</h3>\n\n<p>Randomly my company site disappeared. I have two apps running on the domain, the main site and my billing area (<a href=\"http://pancakeapp.com/\">PancakeApp</a>) running in a submodule folder. The entire main site was deleted, but the billing submodule was still there - only not responding to Apache. It was just a file system and anyone could click around looking at the files. </p>\n\n<blockquote>\n  <p>Somebody even sent me the URL to my PayPal IPN log which shows how much my clients have been paying me recently.</p>\n</blockquote>\n\n<p>WHAT THE FUCK?!</p>\n\n<p>This would never normally happen with PancakeApp as Apache would read the .htaccess rules and never display that file, but because the .htaccess was ignored and this was being treated as a file system, anyone could read whatever they liked. Not cool.</p>\n\n<h3>philsturgeon.co.uk</h3>\n\n<p>I did the usual Twitter-check-before-bed and saw somebody reporting an error that has come up a few times before about sessions not being writable to \"/tmp/pagoda/djsfhihep4o\". I responded with an all-to0-familiar \"That's a common Pagoda Box bug, it should be working again in a few minutes.\". I wake up after 6 hours and my site is still down. </p>\n\n<p>There have been other errors on other sites (I have about 20 hosted with Pagoda Box from client PyroCMS sites to the API backend for iPhone app Bus Live: London). Some of the times I've tweeted about \"Pagoda Box Bugs\" it's actually been my fault and the team have helped me out brilliantly, but a lot of the the problems have just been ridiculous; like when I took a backup of a large database and crashed the site... The other trouble here is that they are an American company with American support staff, so if I wake up and things are broken I have nobody to ask for help until my afternoon when the yanks are sipping their morning coffee.</p>\n\n<p>I've been actively reporting bugs to Pagoda Box for the entire time I've used them and they've fixed most - but I've been paying through the nose to mine-sweep for them and I'm fed up with it.</p>\n\n<h2>Alternatives</h2>\n\n<p>I planned on having a fairly interesting morning of hiking up a nice little mountain near my hostel in Norway before getting on with the meat of my development work today. Instead I have gone through 6 well known PaaS systems and I can't use any of them.</p>\n\n<h3>PHPFog / AppFog</h3>\n\n<p>PHP Fog was the first on the scene that was usable well over a year ago. I used that since it was in early beta too and it was great for a while - until I tried to scale. The choices were \"Gold, Silver or Bronze\". I was on Bronze and my site just got nailed with traffic when some article hit #1 on HackerNews. Ironically I think it was \"2012: The Year of Cloud Hosting\", but it meant I needed to scale and quickly. When I selected Silver I saw a little message saying \"Your cloud will be upgraded to Silver within 24 hours, please be patient\". I was on Pagoda Box before waiting even one hour.</p>\n\n<p>I can't blame PHPFog for this, as they were a start-up company building a minimal viable product. They then got given a whopping $9.8 million investment and pivoted to be generic PaaS, supporting Ruby, Node, Java, Python, etc as well as PHP. The features in AppFog are immense and it really looks like money has been spent on it, but it has its own problems.</p>\n\n<p>Until two days ago App Fog didn't have root-domains. That means I could not have philsturgeon.co.uk but I could have www.philsturgeon.co.uk. They fixed that, so awesome. But they have no writable folders. </p>\n\n<p>Now I know people always say: \"Yeah but you should be uploading your files to S3 so you don't need writable folders\". Ok smart-ass, what about log files and caching? I can send my logs through RabbitMQ or store them in Mongo, and I can use Redis for my caching, but that's not exactly helpful for stock applications. PyroCMS can handle that thanks to some improvements made recently which will be available in a later version, but most systems will fall if it can't write anything anywhere at all. PHP Fog used to allow you to enter folder paths of folders that should be writable. Why doesn't AppFog?</p>\n\n<p>Pagoda Box dealt with this by allowing \"shared writable folders\" which were not only writable by the server by they would be shared between all servers - so when you added more servers you'd keep all of your logs and they'd all use the same cache instead of hitting the DB once per server.</p>\n\n<p>Beyond the problems with AppFog's feature-set the stability of its website and dashboard also worry me. Login attempts were taking about a minute and giving empty responses while the rest of their site loaded instantly. It took 6 attempts it log in to the site.</p>\n\n<p>Creating new apps was giving a 500 error with their generic error page. After 7 attempts it let me create an application. </p>\n\n<p>I'll come back to AppFog in the future. I still happily wear my PHPFog t-shirt and drink coffee from my AppFog mug, but for now I can't use them for any of the sites I look after. Next!</p>\n\n<h3>Orchestra</h3>\n\n<p><a href=\"http://www.engineyard.com/products/orchestra/\">Orchestra</a> is a very simple little PaaS founded by <a href=\"http://eamo.net/\">Eamon Leonard</a> which was later acquired by <a href=\"http://www.engineyard.com/\">EngineYard</a> - who are very big in PaaS but mainly in the Ruby world.</p>\n\n<p>I had a demo of Orchestra before it launched from Eamon himself and it looked really cool, but the feature-set is just not on the level with some of the competition. You can control where nginx will look for index.php and that is about it. No writable folders (especially not shared writable folders), no control over extensions, nothing. They suggested over twitter after my rants this morning that I use their Redis extension to send out all my logs and cache. That's fine if I am building an application specifically to use with Orchestra but deploying existing applications is pretty tough. One of their selling points is:</p>\n\n<blockquote>\n  <p>Build your app with a range of popular PHP frameworks</p>\n</blockquote>\n\n<p>I don't know many frameworks that have Redis logging built in. I'm sure Symfony does, but that's not \"a range\" of popular frameworks. If I have to build my application specifically to work with the provider then the point of this simple hosting has been missed.</p>\n\n<p>The other gripe I have with the system is that your deployment is done with a hook - overwhich you have no real-time feedback. When you push to your repo a hook will fire, then \"at some point\" the code is live, meaning its hard to tell if a change was successful. Other systems provide real-time feedback in the command line, or via the interface so you actually know if its deployed or not.</p>\n\n<h3>FortRabbit</h3>\n\n<p><a href=\"http://fortrabbit.com\">FortRabbit</a> certainly looks interesting and has some very useful performance analytics on the dashboard. I'd suggest you guys take a look but it's still got a BETA tag on there and I'm not going through that again.</p>\n\n<h3>AppliHQ</h3>\n\n<p>I was excited by the idea of <a href=\"http://www.applihq.com/\">AppliHQ</a> as I am a big fan of aTech products and have used PointHQ and CodeBaseHQ a lot in the past. Sadly after scouring their site I couldn't find a signup button, and they eventually tweeted to let me know they were not accepting new sign-ups. Erf.</p>\n\n<h3>Heroku</h3>\n\n<p>I looked into this and know a few people running PHP happily on <a href=\"https://www.heroku.com/\">Heroku</a>, but it's a hack. If these companies cannot get things right after two years then I don't know how Heroku expect to get PHP right in the first year - especially if you have to hack in support by saying it's a \"Facebook App\". I've seen some articles that show how I can do this, but I don't need my hosting solution to be posted on <a href=\"https://failblog.cheezburger.com/thereifixedit\">There I Fixed It</a>.</p>\n\n<h3>AWS Elastic Beanstalk</h3>\n\n<p><a href=\"https://aws.amazon.com/elasticbeanstalk/\">Elastic Beanstalk</a> is essentially Pagoda Box but with WAY more flexibility, but that flexibility of course comes with a loss of simiplicity. It is also 5x the cost and really not meant for hosting a little blog. The process is essentially the same as the initial EC2 + Chef process I described above. It looses the advantages of \"adding users\" easily like this other GitHubescque systems do and of course it is in BETA itself.</p>\n\n<h2>Next?</h2>\n\n<p>I've moved this blog to a little EC2 instance, left some low-traffic client sites on Pagoda Box, I'll be moving pyrocms.com to EC2/Chef deployments much like the first example and I'll be hoping that AppFog add shared writeable directories soon.</p>\n\n<p>This comment section will doubtlessly be filled up with people linking up other PaaS solutions as there are a LOT (about 50) but most of them are developed by very small teams, not yet complete, still in beta or just too lame to even mention. The way I see it, if a company with $9.8 million in the bank hasn't quite got it right yet then I doubt a bootstrapped-in-the-garage product will.</p>\n\n<p>Maybe Pagoda Box will fix itself; That would be ideal because they have absolutely nailed the features but their service just doesn't stay up. I've been assuming their problems will just stop for well over a year and it hasn't happened yet.</p>\n\n<p>Finally to everyone suggesting I just use Linode/CheapVPS4U/whatever: I've spent the last 2 years driving a hover-car. I don't want to go back to driving a normal car, I just want another hover-car that doesn't keep crashing.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "134",
    "created": "2012-10-11 11:43:00",
    "updated": "2012-10-11 12:26:59",
    "created_by": "2",
    "ordering_count": null,
    "title": "Bye Bye PHP 5.2",
    "slug": "bye-bye-php-5-2",
    "category_id": "2",
    "attachment": "",
    "intro": "<div>\n\tThe reason these applications do well is because PHP hosting has been widely available for over a decade. Because PHP is on 90% of hosting setups from dedicated systems to cheap $4 a month deals, application developers have targeted PHP to help them reach their highest audience.&nbsp;Sadly, PHP hosts have always been slow to upgrade, but now it seems like the vast majority have finally made PHP 5.3 a viable option not just for in-house teams but for those building distributable applications too. Finally bidding farewell to PHP 5.2 feels good!</div>",
    "body": "PHP is undeniably the most used language when it comes to building web applications. Around [78% of the internet is powered by PHP](http://w3techs.com/technologies/overview/programming_language/all) and the most popular web applications and content management systems are all still PHP.\n\nThe reason these applications do well is because PHP hosting has been widely available for over a decade. Because PHP is on 90% of hosting setups from dedicated systems to cheap $4 a month deals, application developers have targeted PHP to help them reach their highest audience. This makes the hosting companies keep their interest in PHP and its a circular effect that keeps it at the top - even if it's not the shiniest language in the world.\n\nSadly, PHP hosts have _always_ been slow to upgrade, which can be attributed to a wide variety of (occasionally fictional) reasons. PHP 5.3 was the worst, with huge companies like Rackspace taking three years to even make PHP 5.3 available as an option on their \"Cloud Site\" product.\n\n## Who cares?\n\nThe prominence of specific versions of PHP effects all developers on a scale from \"not at all\" to \"an infuriating amount\". If you work for a company that manages their own servers (be it physical or virtual) then you don't need to care. I expect you upgraded to PHP 5.3 within a few months of release and you're probably rocking PHP 5.4 already or at least have a testing server set up to see how your code works.\n\nThat is great for you, but distributed application developers are stuck working for the lowest reasonable common denominator. That means every project has to look at their target audience, crunch usage stats and work out where they draw the line. For example, PyroCMS had 23% of its users running PHP 5.2 only 3 months ago. Now I've seen that drop to 15% and with [MediaTemple][mediatemple-upgrade] and [Rackspace Cloud Sites][rackspace-53] making the jump to PHP 5.3 I can safely say something now that I've wanted to say for years:\n\n> FAREFUCKINGWELL PHP 5.2!\n\nMy personal and professional projects have all been up on Pagoda Box ([for better or worse][pipe-dream]) where 5.3 is an option or EC2 where PHP 5.4 or dev builds of PHP 5.5-dev work just fine if i'm feeling fancy.\n\nThe only time PHP 5.2 has ever become a factor for me is working with PyroCMS and occasionally PancakeApp.\n\n## Why the noise about a 0.x move?\n\nPHP 5.3 is not a trivial update. If you guys remember, what became PHP 5.3 was originally intended to be PHP 6.0. The dev team hit troubles working out the Unicode support and basically every other feature (Namespaces, anonymous functions, late static bindings, etc) got back-ported and PHP 5.3 was born. It's thanks to these features that Composer has taken off massively and with PSR-0/1/2 we're seeing PHP grow up out of its ugly little teenager stage into something considerably more mature. \n\nWell tested, reusable, framework agnostic packages are being built which can be used to build much more stable applications. It's thanks to this that I can move PyroCMS over to PHP 5.3 and really not be concerned.\n\n* PyroCMS 2.2 will be out within a few weeks still on PHP 5.2 (no point changing things at the last minute).\n* PyroCMS 2.3 will be using a number of PSR components to clean up the existing code-base (for example, replacing some messy models with Eloquent ORM)\n* PyroCMS 3.0 will be a rewrite, entirely PHP 5.3 using components from Laravel 4.0, a few from FuelPHP 2.0 and a few third party components.\n\nThanks to most of them supporting at least PSR-1 (where people have complained that camelCase is enforced) all of these components will look and play exactly the same on the outside, so PyroCMS won't be stuck with some under_score and some camelCase methods. See, this PHP-FIG/PSR stuff is well thought out after-all.\n\nIt's a tough road but it will be possible to walk it without breaking everything. By January 2013 PyroCMS will be PHP 5.3 without losing market share, and the awesome tools being rolled into the core will only improve our uptake as developers rush to play with amazing tools like Monolog, Eloquent, Events and QuickCache.\n\n## PHP 5.3 Hosts\n\nI hate it when people try to wrap their own opinions off as fact, so there are plenty of you that will still need to think about whether or not your applications can make the move, and of course you need to weigh up why too - but with so many standard hosting companies offering PHP 5.3 it currently seems silly not to:\n\n* [Rackspace Cloud Sites](http://www.rackspace.com/cloud/public/sites/)\n* [Hostgator](http://support.hostgator.com/articles/hosting-guide/hardware-software/php-5-3)\n* [Heart Internet](http://www.heartinternet.co.uk/blog/2011/02/introducing-php-5-3-5/)\n* [Hostek](http://hostek.com/hosting/linux/cpanel/php5.3-hosting.asp)\n* [Web Faction](https://www.webfaction.com/services/hosting)\n* [SiteGround](https://www.siteground.com/php-hosting.htm)\n* [ServerGrove](http://servergrove.com/)\n* [apis networks ](http://apisnetworks.com/web-hosting-packages)\n* [EngineHosting](http://www.enginehosting.com/)\n* [crucial webhosting](http://www.crucialwebhost.com/)\n* [Vidahost](https://www.vidahost.com/)\n* [Tsohost](https://www.tsohost.com/)\n* [servage](http://servage.net/)\n\n_More [here](http://nephtaliproject.com/php53hosts/)_\n\nAll of the hosting companies adopted this at different rates, with Rackspace Cloud and Media Temple only playing catchup in the last month or two. Crucial very proudly told me on Twitter they've been supporting PHP 5.3 since July 2011 (2 years after it came out) but they seem on the ball now, and have been supporting PHP 5.4 \"since it came out\". \n\nImmediate (but not rushed) or even speedy adoption is all we can ask for. Being stuck with a 4 year lag between release and real-world usage kills me every time.\n\n## Wait, cheap PHP 5.4 hosting too?!\n\nThere are a few places to get simple PHP 5.4 applications running but not many at this point:\n\n* [A2 Hosting](http://www.a2hosting.com/php-hosting)\n* [crucial webhosting](http://www.crucialwebhost.com/)\n* [Orchestra](http://orchestra.io)\n* [HawkHost](http://hawkhost.com)\n* [servage](http://servage.net/)\n\nI don't know of any more, and yes I realise Orchestra is a PaaS and not a standard hosting company, but there are not many PHP 5.4 hosts around so figured I should mention them. [Pagoda Box](http://pagodabox.com) have also been talking about getting PHP 5.4 in and [Rackspace are not TOO far from it][rackspace-54].\n\nIt'll be another 2 or 3 years before developers can use traits and other cool PHP 5.4 features in distributed applications, but moving to PHP 5.3 is more than enough to totally refresh my love of PHP.\n\n## Get in touch\n\nIf you represent a hosting company that offers PHP 5.3 or PHP 5.4 hosting let me know on Twitter or in the comments and I'll update these lists above. Anything I can do to get people off PHP 5.2 literally makes my life better. I'll be starting the PyroCMS 2.3/develop branch in a week or so then I never have to care about PHP 5.3 again.\n\nIf you're stuck with PHP 5.2, let me know as to why in the comments. For example, I know there are lots of ExpressionEngine users are trapped in 1.6.x and unable to upgrade. EE 1.6.x does badly on PHP 5.3 and upgrading to EE 2.0 is a mammoth task, but they have to upgrade the software at some point - or at least use PHP 5.3 for new projects.\n\nI'd also be really interested to hear from other open-source and distributed app developers, to hear how they're managing the move.\n\n  [mediatemple-upgrade]: http://weblog.mediatemple.net/2012/02/28/gs-update-php-spring-cleaning/\n  [rackspace-53]: http://feedback.rackspace.com/forums/71021-product-feedback/suggestions/997049-php-5-3-support-in-cloud-sites\n  [rackspace-54]: http://feedback.rackspace.com/forums/71021-product-feedback/suggestions/2642991-php-5-4-support-in-cloud-sites\n  [pipe-dream]: http://philsturgeon.co.uk/blog/2012/10/cloud-hosting-php-pipe-dream",
    "created_on": "1349955780",
    "updated_on": "1349958419",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "4bec3990d08a4cb1900569c4a11a0513",
    "type": "markdown",
    "parsed": "<p>PHP is undeniably the most used language when it comes to building web applications. Around <a href=\"http://w3techs.com/technologies/overview/programming_language/all\">78% of the internet is powered by PHP</a> and the most popular web applications and content management systems are all still PHP.</p>\n\n<p>The reason these applications do well is because PHP hosting has been widely available for over a decade. Because PHP is on 90% of hosting setups from dedicated systems to cheap $4 a month deals, application developers have targeted PHP to help them reach their highest audience. This makes the hosting companies keep their interest in PHP and its a circular effect that keeps it at the top - even if it's not the shiniest language in the world.</p>\n\n<p>Sadly, PHP hosts have <em>always</em> been slow to upgrade, which can be attributed to a wide variety of (occasionally fictional) reasons. PHP 5.3 was the worst, with huge companies like Rackspace taking three years to even make PHP 5.3 available as an option on their \"Cloud Site\" product.</p>\n\n<h2>Who cares?</h2>\n\n<p>The prominence of specific versions of PHP effects all developers on a scale from \"not at all\" to \"an infuriating amount\". If you work for a company that manages their own servers (be it physical or virtual) then you don't need to care. I expect you upgraded to PHP 5.3 within a few months of release and you're probably rocking PHP 5.4 already or at least have a testing server set up to see how your code works.</p>\n\n<p>That is great for you, but distributed application developers are stuck working for the lowest reasonable common denominator. That means every project has to look at their target audience, crunch usage stats and work out where they draw the line. For example, PyroCMS had 23% of its users running PHP 5.2 only 3 months ago. Now I've seen that drop to 15% and with <a href=\"http://weblog.mediatemple.net/2012/02/28/gs-update-php-spring-cleaning/\">MediaTemple</a> and <a href=\"http://feedback.rackspace.com/forums/71021-product-feedback/suggestions/997049-php-5-3-support-in-cloud-sites\">Rackspace Cloud Sites</a> making the jump to PHP 5.3 I can safely say something now that I've wanted to say for years:</p>\n\n<blockquote>\n  <p>FAREFUCKINGWELL PHP 5.2!</p>\n</blockquote>\n\n<p>My personal and professional projects have all been up on Pagoda Box (<a href=\"http://philsturgeon.co.uk/blog/2012/10/cloud-hosting-php-pipe-dream\">for better or worse</a>) where 5.3 is an option or EC2 where PHP 5.4 or dev builds of PHP 5.5-dev work just fine if i'm feeling fancy.</p>\n\n<p>The only time PHP 5.2 has ever become a factor for me is working with PyroCMS and occasionally PancakeApp.</p>\n\n<h2>Why the noise about a 0.x move?</h2>\n\n<p>PHP 5.3 is not a trivial update. If you guys remember, what became PHP 5.3 was originally intended to be PHP 6.0. The dev team hit troubles working out the Unicode support and basically every other feature (Namespaces, anonymous functions, late static bindings, etc) got back-ported and PHP 5.3 was born. It's thanks to these features that Composer has taken off massively and with PSR-0/1/2 we're seeing PHP grow up out of its ugly little teenager stage into something considerably more mature. </p>\n\n<p>Well tested, reusable, framework agnostic packages are being built which can be used to build much more stable applications. It's thanks to this that I can move PyroCMS over to PHP 5.3 and really not be concerned.</p>\n\n<ul>\n<li>PyroCMS 2.2 will be out within a few weeks still on PHP 5.2 (no point changing things at the last minute).</li>\n<li>PyroCMS 2.3 will be using a number of PSR components to clean up the existing code-base (for example, replacing some messy models with Eloquent ORM)</li>\n<li>PyroCMS 3.0 will be a rewrite, entirely PHP 5.3 using components from Laravel 4.0, a few from FuelPHP 2.0 and a few third party components.</li>\n</ul>\n\n<p>Thanks to most of them supporting at least PSR-1 (where people have complained that camelCase is enforced) all of these components will look and play exactly the same on the outside, so PyroCMS won't be stuck with some under_score and some camelCase methods. See, this PHP-FIG/PSR stuff is well thought out after-all.</p>\n\n<p>It's a tough road but it will be possible to walk it without breaking everything. By January 2013 PyroCMS will be PHP 5.3 without losing market share, and the awesome tools being rolled into the core will only improve our uptake as developers rush to play with amazing tools like Monolog, Eloquent, Events and QuickCache.</p>\n\n<h2>PHP 5.3 Hosts</h2>\n\n<p>I hate it when people try to wrap their own opinions off as fact, so there are plenty of you that will still need to think about whether or not your applications can make the move, and of course you need to weigh up why too - but with so many standard hosting companies offering PHP 5.3 it currently seems silly not to:</p>\n\n<ul>\n<li><a href=\"http://www.rackspace.com/cloud/public/sites/\">Rackspace Cloud Sites</a></li>\n<li><a href=\"http://support.hostgator.com/articles/hosting-guide/hardware-software/php-5-3\">Hostgator</a></li>\n<li><a href=\"http://www.heartinternet.co.uk/blog/2011/02/introducing-php-5-3-5/\">Heart Internet</a></li>\n<li><a href=\"http://hostek.com/hosting/linux/cpanel/php5.3-hosting.asp\">Hostek</a></li>\n<li><a href=\"https://www.webfaction.com/services/hosting\">Web Faction</a></li>\n<li><a href=\"https://www.siteground.com/php-hosting.htm\">SiteGround</a></li>\n<li><a href=\"http://servergrove.com/\">ServerGrove</a></li>\n<li><a href=\"http://apisnetworks.com/web-hosting-packages\">apis networks </a></li>\n<li><a href=\"http://www.enginehosting.com/\">EngineHosting</a></li>\n<li><a href=\"http://www.crucialwebhost.com/\">crucial webhosting</a></li>\n<li><a href=\"https://www.vidahost.com/\">Vidahost</a></li>\n<li><a href=\"https://www.tsohost.com/\">Tsohost</a></li>\n<li><a href=\"http://servage.net/\">servage</a></li>\n</ul>\n\n<p><em>More <a href=\"http://nephtaliproject.com/php53hosts/\">here</a></em></p>\n\n<p>All of the hosting companies adopted this at different rates, with Rackspace Cloud and Media Temple only playing catchup in the last month or two. Crucial very proudly told me on Twitter they've been supporting PHP 5.3 since July 2011 (2 years after it came out) but they seem on the ball now, and have been supporting PHP 5.4 \"since it came out\". </p>\n\n<p>Immediate (but not rushed) or even speedy adoption is all we can ask for. Being stuck with a 4 year lag between release and real-world usage kills me every time.</p>\n\n<h2>Wait, cheap PHP 5.4 hosting too?!</h2>\n\n<p>There are a few places to get simple PHP 5.4 applications running but not many at this point:</p>\n\n<ul>\n<li><a href=\"http://www.a2hosting.com/php-hosting\">A2 Hosting</a></li>\n<li><a href=\"http://www.crucialwebhost.com/\">crucial webhosting</a></li>\n<li><a href=\"http://orchestra.io\">Orchestra</a></li>\n<li><a href=\"http://hawkhost.com\">HawkHost</a></li>\n<li><a href=\"http://servage.net/\">servage</a></li>\n</ul>\n\n<p>I don't know of any more, and yes I realise Orchestra is a PaaS and not a standard hosting company, but there are not many PHP 5.4 hosts around so figured I should mention them. <a href=\"http://pagodabox.com\">Pagoda Box</a> have also been talking about getting PHP 5.4 in and <a href=\"http://feedback.rackspace.com/forums/71021-product-feedback/suggestions/2642991-php-5-4-support-in-cloud-sites\">Rackspace are not TOO far from it</a>.</p>\n\n<p>It'll be another 2 or 3 years before developers can use traits and other cool PHP 5.4 features in distributed applications, but moving to PHP 5.3 is more than enough to totally refresh my love of PHP.</p>\n\n<h2>Get in touch</h2>\n\n<p>If you represent a hosting company that offers PHP 5.3 or PHP 5.4 hosting let me know on Twitter or in the comments and I'll update these lists above. Anything I can do to get people off PHP 5.2 literally makes my life better. I'll be starting the PyroCMS 2.3/develop branch in a week or so then I never have to care about PHP 5.3 again.</p>\n\n<p>If you're stuck with PHP 5.2, let me know as to why in the comments. For example, I know there are lots of ExpressionEngine users are trapped in 1.6.x and unable to upgrade. EE 1.6.x does badly on PHP 5.3 and upgrading to EE 2.0 is a mammoth task, but they have to upgrade the software at some point - or at least use PHP 5.3 for new projects.</p>\n\n<p>I'd also be really interested to hear from other open-source and distributed app developers, to hear how they're managing the move.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "135",
    "created": "2012-10-28 20:13:00",
    "updated": "2012-10-28 20:13:00",
    "created_by": "2",
    "ordering_count": null,
    "title": "Puppet or Chef?",
    "slug": "puppet-or-chef",
    "category_id": "21",
    "attachment": "",
    "intro": "Back in the UK at PHPNE this May I saw an awesome talk from Ian Chilton, who explained very simply why using Vagrant for your development environments was a good idea. He mentioned briefly server provisioning but didn&#39;t get fully into it, and suggested we go out and play with Puppet and Chef to see which fit our needs.&nbsp;",
    "body": "Back in the UK at [PHPNE][phpne] this May I saw an awesome talk from [Ian Chilton][ian], who explained very simply why using Vagrant for your development environments was a good idea. He mentioned briefly server provisioning but didn't get fully into it, and suggested we go out and play with Puppet and Chef to see which fit our needs.\n\nI started off using Puppet to build up development boxes, with the use-case of testing how [PyroCMS][pyro] worked with different combinations of PHP 5.3 and PHP 5.4, Apache, Nginx, PHP-FPM, Postgres, etc without having to utterly bastardise the built in OSX LAMP stack or try to make MAMP do something useful. \n\nSo, if you're hopping on the \"devops\" train and would like to learn a server provisioning tool, which should you learn?\n\n<img src=\"http://www.jaesharp.com/assets/images/posts/2012-10-18-Defining-DevOps/weputdevinyourops.jpg\" style=\"float: right; margin: 10px 0 10px 10px\" />\n\n### Syntax\n\nPuppet uses a <s>proprietary</s> custom language, while Chef uses Ruby. This straight off the bat means a lot of Ruby developers prefer Chef as they can build out in a familiar language, but the Puppet language is so incredibly simple it should not be seen as a barrier to entry. \n\n<em><strong>Update:</strong> Turns out there is a [Ruby DSL][rubydsl] for Puppet too, released in November 2010. I missed that entirely.</em>\n\nOften the same code written in Puppet or Chef will look cleaner in Puppet, but in Chef you can do some pretty crazy stuff. As it's using Ruby you can use programming structures like loops and if statements, which is not possible with Puppet.\n\n### Manifest / Cookbook Flow\n\nManifests (Puppet) and Cookbooks (Chef) are essentially the same thing. You write in these documents what you want to ensure is installed, created, running, etc and through the glory of idempotence these can be run as many times as you like without barfing all over your server.\n\nWhile the two ideas are similar, they have one major difference. Puppet will evaluate all of the manifest files then run it in whatever order it deems best to ensure requirements are met. Chef will simply do things in whatever order it's defined, running top to bottom through each of your cookbooks - which I'm pretty sure run alphabetically for each node. For many programmers Chef is more logical, while the Puppet approach takes a little mental acrobatics to understand at first but makes a lot of sense when you get the hang of it.\n\nI myself am not sure which I prefer here. The \"do X then Y\" approach does make debugging a very simple process, but you need to be careful that you're actually creating idempotence recipes - which is the whole point of this.\n\n### Modules\n\nBoth systems have a f**kload of modules available for software like PHP, MySQL, RabbitMQ, Postgres, whatever. Most of the modules are third-party and have been configured to work nicely with Debian, Ubuntu, Fedora, RedHat, etc using several layers of abstraction. \n\nThe only real difference here is that Chef has a [community repository][chef-community] where people can submit these modules and show ratings and installation counts, whereas Puppet relies on a Google search and probably a relatively out of date GitHub repository. I've had to send multiple pull requests to various popular Puppet modules just to get them to actually install on an Ubuntu 12.04 box.\n\n<em><strong>Update:</strong> Yet another error on my part. Puppet has a Forge, which is the same as the Chef community repository. That said, I don't remember ever landing on it when looking for modules. Searching \"Puppet PHP\" puts a result in 6th place, with GitHub being all of the results before it. Sorry about that.</em>\n\n### Environments\n\nMost projects have multiple environments; unless you're a cowboy coder who enjoys life on the edge and does all of his coding using vim through a SSH tunnel.\n\n<s>Puppet doesn't really provide any sort of solution for this. I'm not hating on Puppet, I just don't think this was ever really one of its goals in life.</s> \n\n<em><strong>Update:</strong> Puppet does have environments, but you won't get that working with Vagrant. The Puppet / Vagrant integration only allows for the \"manifests\" and \"modules\" folders, but environments sit in their own folder at that level - meaning you can only work overrides for your other environments like Staging and Production. This might be ok for you, but it should be watched out for.</em>\n\nChef offers \"environments\", which are a little ruby file where you give each environment a name and maybe a description. I have dev.rb, stag.rb and prod.rb. Prod and staging dont really do anything, but my develop has a few overridden attributes:\n\n    name \"dev\"\n    description \"The development environment\"\n    \n    override_attributes ({\n        \"api\" => {\n            \"db_host\" => \"localhost\",\n            \"server_name\" => \"dev.api.example.re\",\n            \"docroot\" => \"/vagrant/www/api/public\",\n            \"config_dir\" => \"/vagrant/www/api/fuel/app/config\"\n        },\n        \"frontend\" => {\n            \"db_host\" => \"localhost\",\n            \"server_name\" => \"dev.example.com\",\n            \"docroot\" => \"/vagrant/www/frontend/public\",\n            \"config_dir\" => \"/vagrant/www/frontend/fuel/app/config\"\n        }\n    })\n    \n    ENV['FUEL_ENV'] = 'development'\n   \nAwesome sauce.\n\n### Multiple Tools\n\n#### Puppet & Chef Solo\n\nBoth Puppet and Chef Solo run on a single machine and that is that. Chef Solo and Puppet are for the same use case, but the difference is really this; Puppet's language is simplistic and often quite elegant, where as Chef is an pile of really powerful functions, methods and arrays.\n\n#### Puppet Master & Chef Server\n\nThis at first seems a little crazy, but with Chef Server you have your local \"workstation\" which has a command line tool called \"knife\". You use knife to move your cookbooks, recipes, roles, environments, etc up onto the \"Chef Server\". This chef server can be your own EC2 instance, VPS, whatever running Chef - or you can pay to use Opscode's servers. I have friends running their own chef server to avoid paying the monthly subscription, but no servers anywhere are free. For now I'm using the service and it's only gone down the once - but that was on Friday while half of the internet seemed to be broken so I can't really blame them. \n\nI haven't played with Puppet Master at all, I only found out it existed it got linked up in the comments on Reddit. Sure its on the homepage, but it's below the fold and that is a huge site with a lot of information. Also [this](http://d.pr/i/YeI1).\n\n### Encrypted Data Bags\n\nThere are lof of funky little extras in Chef Server, one of which is called [Encrypted Data Bags][databags]. Instead of storing API credentials and passwords in git where anyone in the team can see them you can put them in a secure location. Why is that a big deal? Well maybe that guy you fired still has a copy of the code at home and wants to play a \"hilarious prank\" on you.\n\nI expect Puppet can do this too, but it looks like you need to do some [manual work][puppet-bags] to get it going. I didn't need to use this feature for my Puppet project.\n\n### Knife\n\nKnife is amazing. I don't mean that in the over-used \"everything good is amazing\" sort I way, I mean I was genuinely amazed by this too. Knife works with Chef Server to manage your servers. Here are some cool commands:\n\n\t$ knife ec2 server create \\\n        -S projectname -i ~/.ssh/projectname.pem \\\n        -G www,default \\\n        -x ubuntu \\\n        -d ubuntu12.04-gems \\\n        -E prod \\\n        -I ami-82fa58eb \\\n        -f m1.small \\\n        -r \"role[base],role[frontend]\" \n    \nThat makes me a frontend production server with the exact specs that I need. I walk off and get a coffee, come back and that server is sat there ready to go. \n\n\t$ knife ssh -E stag \"roles:base\" \"sudo chef-client\"\n\t\nUpdate my entire staging environment, with the latest code pulled from GitHub and whatever software I need to run.\n\n\t$ knife ec2 server list\n\t\nGets a list of all servers on the account. This is amazeballs when you have a whole bunch of servers hiding behind load balancers and you want to know whats what.\n\n### Summary\n\nServer provisioning is brilliant. While some people think it might be overcomplicating setting up a server, it's amazingly useful and I would be having a hard time doing my new job properly without it. \n\nIt means I can provision my local VM to be identical to my staging servers, use the exact same versions of software, keep my workstation clean, package and bundle all of the tech for the whole company into one repo with a few submodules, distribute that same code to multiple servers and set up freelancers no matter what OS they have in minutes instead of hours or days, all thanks to some crazy Ruby code.\n\nAs for \"Puppet or Chef\" there is no real answer, they are two different tools that do the same thing in slightly different ways, to make a better environment for yourself than just running (W|X|M)AMP and assuming your code will work when its deployed. Ideally you'd be provisioning your production site too (and I know its not always possible). Provisioning a large network of sites with Chef Server does seem to work very nicely, specially if you are using EC2 with the knife plugin. Give them both a whirl and see what tickles your fancy.\n\n### Further Reading\n\n* [Vagrant: What, Why, and How][vagrant]\n* [Managing LAMP environments with Chef, Vagrant, and EC2][lampchef]\n\n  [phpne]: http://phpne.org.uk/\n  [rubydsl]: http://puppetlabs.com/blog/ruby-dsl/\n  [pyro]: http://pyrocms.com/\n  [ian]: http://www.ichilton.co.uk/blog/virtualization/my-phpne-talk-on-vagrant-496.html\n  [vagrant]: http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/\n  [lampchef]: http://www.jasongrimes.org/2012/06/managing-lamp-environments-with-chef-vagrant-and-ec2-1-of-3/\n  [chef-community]: http://community.opscode.com/cookbooks/php\n  [puppetmaster]: \n  [puppet-bags]: http://www.craigdunn.org/2011/10/secret-variables-in-puppet-with-hiera-and-gpg/\n  [databags]: http://wiki.opscode.com/display/chef/Encrypted+Data+Bags",
    "created_on": "1351455180",
    "updated_on": "1351455180",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "4fa88806a02c966fbb0e1d77b65d88f5",
    "type": "markdown",
    "parsed": "<p>Back in the UK at <a href=\"http://phpne.org.uk/\">PHPNE</a> this May I saw an awesome talk from <a href=\"http://www.ichilton.co.uk/blog/virtualization/my-phpne-talk-on-vagrant-496.html\">Ian Chilton</a>, who explained very simply why using Vagrant for your development environments was a good idea. He mentioned briefly server provisioning but didn't get fully into it, and suggested we go out and play with Puppet and Chef to see which fit our needs.</p>\n\n<p>I started off using Puppet to build up development boxes, with the use-case of testing how <a href=\"http://pyrocms.com/\">PyroCMS</a> worked with different combinations of PHP 5.3 and PHP 5.4, Apache, Nginx, PHP-FPM, Postgres, etc without having to utterly bastardise the built in OSX LAMP stack or try to make MAMP do something useful. </p>\n\n<p>So, if you're hopping on the \"devops\" train and would like to learn a server provisioning tool, which should you learn?</p>\n\n<p><img src=\"http://www.jaesharp.com/assets/images/posts/2012-10-18-Defining-DevOps/weputdevinyourops.jpg\" style=\"float: right; margin: 10px 0 10px 10px\" /></p>\n\n<h3>Syntax</h3>\n\n<p>Puppet uses a <s>proprietary</s> custom language, while Chef uses Ruby. This straight off the bat means a lot of Ruby developers prefer Chef as they can build out in a familiar language, but the Puppet language is so incredibly simple it should not be seen as a barrier to entry. </p>\n\n<p><em><strong>Update:</strong> Turns out there is a <a href=\"http://puppetlabs.com/blog/ruby-dsl/\">Ruby DSL</a> for Puppet too, released in November 2010. I missed that entirely.</em></p>\n\n<p>Often the same code written in Puppet or Chef will look cleaner in Puppet, but in Chef you can do some pretty crazy stuff. As it's using Ruby you can use programming structures like loops and if statements, which is not possible with Puppet.</p>\n\n<h3>Manifest / Cookbook Flow</h3>\n\n<p>Manifests (Puppet) and Cookbooks (Chef) are essentially the same thing. You write in these documents what you want to ensure is installed, created, running, etc and through the glory of idempotence these can be run as many times as you like without barfing all over your server.</p>\n\n<p>While the two ideas are similar, they have one major difference. Puppet will evaluate all of the manifest files then run it in whatever order it deems best to ensure requirements are met. Chef will simply do things in whatever order it's defined, running top to bottom through each of your cookbooks - which I'm pretty sure run alphabetically for each node. For many programmers Chef is more logical, while the Puppet approach takes a little mental acrobatics to understand at first but makes a lot of sense when you get the hang of it.</p>\n\n<p>I myself am not sure which I prefer here. The \"do X then Y\" approach does make debugging a very simple process, but you need to be careful that you're actually creating idempotence recipes - which is the whole point of this.</p>\n\n<h3>Modules</h3>\n\n<p>Both systems have a f**kload of modules available for software like PHP, MySQL, RabbitMQ, Postgres, whatever. Most of the modules are third-party and have been configured to work nicely with Debian, Ubuntu, Fedora, RedHat, etc using several layers of abstraction. </p>\n\n<p>The only real difference here is that Chef has a <a href=\"http://community.opscode.com/cookbooks/php\">community repository</a> where people can submit these modules and show ratings and installation counts, whereas Puppet relies on a Google search and probably a relatively out of date GitHub repository. I've had to send multiple pull requests to various popular Puppet modules just to get them to actually install on an Ubuntu 12.04 box.</p>\n\n<p><em><strong>Update:</strong> Yet another error on my part. Puppet has a Forge, which is the same as the Chef community repository. That said, I don't remember ever landing on it when looking for modules. Searching \"Puppet PHP\" puts a result in 6th place, with GitHub being all of the results before it. Sorry about that.</em></p>\n\n<h3>Environments</h3>\n\n<p>Most projects have multiple environments; unless you're a cowboy coder who enjoys life on the edge and does all of his coding using vim through a SSH tunnel.</p>\n\n<p><s>Puppet doesn't really provide any sort of solution for this. I'm not hating on Puppet, I just don't think this was ever really one of its goals in life.</s> </p>\n\n<p><em><strong>Update:</strong> Puppet does have environments, but you won't get that working with Vagrant. The Puppet / Vagrant integration only allows for the \"manifests\" and \"modules\" folders, but environments sit in their own folder at that level - meaning you can only work overrides for your other environments like Staging and Production. This might be ok for you, but it should be watched out for.</em></p>\n\n<p>Chef offers \"environments\", which are a little ruby file where you give each environment a name and maybe a description. I have dev.rb, stag.rb and prod.rb. Prod and staging dont really do anything, but my develop has a few overridden attributes:</p>\n\n<pre><code>name \"dev\"\ndescription \"The development environment\"\n\noverride_attributes ({\n    \"api\" =&gt; {\n        \"db_host\" =&gt; \"localhost\",\n        \"server_name\" =&gt; \"dev.api.example.re\",\n        \"docroot\" =&gt; \"/vagrant/www/api/public\",\n        \"config_dir\" =&gt; \"/vagrant/www/api/fuel/app/config\"\n    },\n    \"frontend\" =&gt; {\n        \"db_host\" =&gt; \"localhost\",\n        \"server_name\" =&gt; \"dev.example.com\",\n        \"docroot\" =&gt; \"/vagrant/www/frontend/public\",\n        \"config_dir\" =&gt; \"/vagrant/www/frontend/fuel/app/config\"\n    }\n})\n\nENV['FUEL_ENV'] = 'development'\n</code></pre>\n\n<p>Awesome sauce.</p>\n\n<h3>Multiple Tools</h3>\n\n<h4>Puppet &amp; Chef Solo</h4>\n\n<p>Both Puppet and Chef Solo run on a single machine and that is that. Chef Solo and Puppet are for the same use case, but the difference is really this; Puppet's language is simplistic and often quite elegant, where as Chef is an pile of really powerful functions, methods and arrays.</p>\n\n<h4>Puppet Master &amp; Chef Server</h4>\n\n<p>This at first seems a little crazy, but with Chef Server you have your local \"workstation\" which has a command line tool called \"knife\". You use knife to move your cookbooks, recipes, roles, environments, etc up onto the \"Chef Server\". This chef server can be your own EC2 instance, VPS, whatever running Chef - or you can pay to use Opscode's servers. I have friends running their own chef server to avoid paying the monthly subscription, but no servers anywhere are free. For now I'm using the service and it's only gone down the once - but that was on Friday while half of the internet seemed to be broken so I can't really blame them. </p>\n\n<p>I haven't played with Puppet Master at all, I only found out it existed it got linked up in the comments on Reddit. Sure its on the homepage, but it's below the fold and that is a huge site with a lot of information. Also <a href=\"http://d.pr/i/YeI1\">this</a>.</p>\n\n<h3>Encrypted Data Bags</h3>\n\n<p>There are lof of funky little extras in Chef Server, one of which is called <a href=\"http://wiki.opscode.com/display/chef/Encrypted+Data+Bags\">Encrypted Data Bags</a>. Instead of storing API credentials and passwords in git where anyone in the team can see them you can put them in a secure location. Why is that a big deal? Well maybe that guy you fired still has a copy of the code at home and wants to play a \"hilarious prank\" on you.</p>\n\n<p>I expect Puppet can do this too, but it looks like you need to do some <a href=\"http://www.craigdunn.org/2011/10/secret-variables-in-puppet-with-hiera-and-gpg/\">manual work</a> to get it going. I didn't need to use this feature for my Puppet project.</p>\n\n<h3>Knife</h3>\n\n<p>Knife is amazing. I don't mean that in the over-used \"everything good is amazing\" sort I way, I mean I was genuinely amazed by this too. Knife works with Chef Server to manage your servers. Here are some cool commands:</p>\n\n<pre><code>$ knife ec2 server create \\\n    -S projectname -i ~/.ssh/projectname.pem \\\n    -G www,default \\\n    -x ubuntu \\\n    -d ubuntu12.04-gems \\\n    -E prod \\\n    -I ami-82fa58eb \\\n    -f m1.small \\\n    -r \"role[base],role[frontend]\" \n</code></pre>\n\n<p>That makes me a frontend production server with the exact specs that I need. I walk off and get a coffee, come back and that server is sat there ready to go. </p>\n\n<pre><code>$ knife ssh -E stag \"roles:base\" \"sudo chef-client\"\n</code></pre>\n\n<p>Update my entire staging environment, with the latest code pulled from GitHub and whatever software I need to run.</p>\n\n<pre><code>$ knife ec2 server list\n</code></pre>\n\n<p>Gets a list of all servers on the account. This is amazeballs when you have a whole bunch of servers hiding behind load balancers and you want to know whats what.</p>\n\n<h3>Summary</h3>\n\n<p>Server provisioning is brilliant. While some people think it might be overcomplicating setting up a server, it's amazingly useful and I would be having a hard time doing my new job properly without it. </p>\n\n<p>It means I can provision my local VM to be identical to my staging servers, use the exact same versions of software, keep my workstation clean, package and bundle all of the tech for the whole company into one repo with a few submodules, distribute that same code to multiple servers and set up freelancers no matter what OS they have in minutes instead of hours or days, all thanks to some crazy Ruby code.</p>\n\n<p>As for \"Puppet or Chef\" there is no real answer, they are two different tools that do the same thing in slightly different ways, to make a better environment for yourself than just running (W|X|M)AMP and assuming your code will work when its deployed. Ideally you'd be provisioning your production site too (and I know its not always possible). Provisioning a large network of sites with Chef Server does seem to work very nicely, specially if you are using EC2 with the knife plugin. Give them both a whirl and see what tickles your fancy.</p>\n\n<h3>Further Reading</h3>\n\n<ul>\n<li><a href=\"http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/\">Vagrant: What, Why, and How</a></li>\n<li><p><a href=\"http://www.jasongrimes.org/2012/06/managing-lamp-environments-with-chef-vagrant-and-ec2-1-of-3/\">Managing LAMP environments with Chef, Vagrant, and EC2</a></p>\n\n<p>[puppetmaster]: </p></li>\n</ul>\n",
    "preview_hash": ""
  },
  {
    "id": "136",
    "created": "2012-12-02 02:29:00",
    "updated": "2013-01-27 18:55:25",
    "created_by": "2",
    "ordering_count": null,
    "title": "Distributed Architecture Faking with Vagrant",
    "slug": "distributed-architecture-faking-with-vagrant",
    "category_id": "21",
    "attachment": "",
    "intro": "<div>Working for Kapture I&#39;ve been charged with something I&#39;ve never really had to do before: Managing a big-ass architecture of different servers that all handle different tasks.&nbsp;Theoretically I&#39;ve always known how it works, and I&#39;ve worked in projects that have had these systems, but I&#39;ve never been put in charge of how that whole situation works out.&nbsp;So this little web developer had to do a lot of learning.</div>\n\n<div>&nbsp;</div>",
    "body": "Working at [Kapture](http://kaptu.re/) I've been charged with something I've never really had to do before: Managing a big-ass architecture of different servers that all handle different tasks. Theoretically I've always known how it works, and I've worked in projects that have had these systems, but I've never been put in charge of how that whole situation works out.\n\nSo this little web developer had to do a lot of learning.\n\nI played with [Puppet and Chef](/blog/2012/10/puppet-or-chef) to help me with provisioning the servers themselves, but then I had to work out how I was going to run the servers locally and online. This for me was a massive block.\n\nFor years until a few months ago I used MAMP Pro for pretty much everything. People always said \"Duh, why don't you use OSX's built in 'AMP stack, but I said I liked a little more control over versions. Sure I can arse around with homebrew to swap stuff out, but even then it gets complicated. MAMP at least gave me a little control and avoided screwing around with a stack that my OS relied upon for certain features. Still I had the issue of how to handle virtual hosts.\n\nScrewing around with Apache config just to get a single domain running seemed trivial enough, but when you have about 20 domains to manage it just seems like effort, so you end up getting something like VirtualHostX which isn't free, or MAMP Pro which is even more expensive.\n\nThen you realise that you need some extra extensions for a certain project, so you install them.\n\nThen you realise that a different project requires a different versions of that same extension, or needs PostgreSQL instead of MySQL. Now you have both installed on your workstation.\n\nI could go on, but this is all AAAGGGHHHHH WRONG. So stop that.\n\nThe solution for any project more complicated than some FooCMS install is to use Vagrant, which I have been [blogging about][vagrant] quite a lot recently. Vagrant wraps up each project in its own server so you can run NodeJS, Ruby, PHP, PostgreSQL, Mongo, whatever each of your projects need without them getting in each others way.\n\n## Why u uze NodEJS and PHP?!!?1\n\nPeople know me as a PHP developer, but I would prefer to think of myself as a web developer. Kapture currently uses Ruby, PHP, Python, Erlang and even some Java here and there.\n\nWhy? Because we have a bunch of different servers that do different things.\n\n* API (PHP)\n* MySQL\n* Redis\n* Admin Panel\n* Queue (RabbitMQ)\n* Workers (Some PHP and some Python: PIL)\n* Graylog2\n\nThat's a whole bunch of stuff, and they are all welcome to require whatever the hell programming language they need to get the job done - I am not only going to pick PHP based products for the sake of it.\n\n## Local Environment\n\nThis is where it gets interesting. Each of these different servers all run on the same vagrant installation.\n\nEach of the servers listed above is considered by Chef to be its own \"role\". Roles can be applied to one node each, or they can be lumped together so the same \"node\" has multiple \"roles\". \n\nWe have a \"queue\" role, an \"admin\" role, an \"api\" role, etc. In production and staging each \"role\" is applied to its own EC2 box (considered by Chef to be a \"node\"), but locally all roles are applied to the same vagrant box.\n\nSome vagrant pro's at this point will say: \"Woah, hang on a minute, why?\". Sure, vagrant can handle multiple \"hosts\" per vagrant file, but this starts to get silly when you have multiple nodes for a few reasons.\n\n### Six Virtualised Servers aint quick\n\nIf you only have two \"nodes\" then you're probably going to be ok. But if you have 6 or 7 like we do you're really going to have a bad time. 512MB assigned to each one, each web-facing server running Nginx, PHP-FPM and APC or whateverthecrap else, is all a massive waste of memory. The valuable thing about using Vagrant is that they are all running the same VERSIONS of the software you need, but who cares if they have 3 or 4 virtual host entries instead of 1? \n\nSharing the same resources makes a whole lot more sense than trying to actually replicate the full architecture on your local machine. After all, you have staging to test this stuff, so why worry about the network architecture locally?\n\n### Chef = $\n\nIf you're using Chef then they're counting your nodes and charging accordingly. We have \"vagrant-phil\", \"vagrant-dan\" and \"vagrant-john\", instead of having 7 nodes EACH.\n\nYes we could install our own Chef server, but we could manage our own Git repos instead of using GitHub and we could write our own OS instead of using an existing distribution. Whatever, we have things to do.\n\n## Vagrantfile\n\nSo to set all this up is actually pretty simple. One thing I love to do is have the main codebase(s) installed locally as submodules, then share them via NFS so they can be permissioned, chmoded, etc to run properly. Then I use 198.* as an IP address because it allows NFS to function properly while not actually hitting the outside network. If you go with 10.* as a lot of people do then some commercial networks are going to fight back, and if you pick some random IP which is shared with your dev team then as soon as a colleague fires up the vagrant box you're going to fight each other for the IP address. 198 keeps it safe. \n\n<script src=\"https://gist.github.com/4186666.js?file=Vagrantfile\"></script>\n\n## Environmental Differences\n\nSo the main difference between local and staging/production is going to be that your code is installed in different locations. Locally it's going to be /vagrant/www/whatever and in production it's going to be /var/www/. If like me you use Chef to actually deploy your code then it's actually going to be /var/www/current/ too, as they use a Capistrano-like folder system to symlink to the \"latest\" revision in your Git repo as the current version.\n\nThis can be handled with Chef \"environments\":\n\n<script src=\"https://gist.github.com/4186666.js?file=dev\"></script>\n\nSo the default \"attributes\" for the \"role\" are set to whatever staging/production expect (/var/www/current) and develop overrides that logic in the environment to be /vagrant/www/api. \n\n## MOAR CODE\n\nSorry guys but this has been mostly theory. If you want to crack on and try this stuff our for yourself then I strongly recomend reading the [three part series by Jason Grimes][lampchef]. This has been my bible for the last month or two, and I cannot recommend it enough. Read it 65 times and keep it bookmarked. Then, you will know kung fu.\n\n### Further Reading\n\n* [Vagrant: What, Why, and How][vagrant]\n* [Managing LAMP environments with Chef, Vagrant, and EC2][lampchef]\n\n  [vagrant]: http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/\n  [lampchef]: http://www.jasongrimes.org/2012/06/managing-lamp-environments-with-chef-vagrant-and-ec2-1-of-3/",
    "created_on": "1354415340",
    "updated_on": "1359312925",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "637c131da778e534e89f49cd12d0845d",
    "type": "markdown",
    "parsed": "<p>Working at <a href=\"http://kaptu.re/\">Kapture</a> I've been charged with something I've never really had to do before: Managing a big-ass architecture of different servers that all handle different tasks. Theoretically I've always known how it works, and I've worked in projects that have had these systems, but I've never been put in charge of how that whole situation works out.</p>\n\n<p>So this little web developer had to do a lot of learning.</p>\n\n<p>I played with <a href=\"/blog/2012/10/puppet-or-chef\">Puppet and Chef</a> to help me with provisioning the servers themselves, but then I had to work out how I was going to run the servers locally and online. This for me was a massive block.</p>\n\n<p>For years until a few months ago I used MAMP Pro for pretty much everything. People always said \"Duh, why don't you use OSX's built in 'AMP stack, but I said I liked a little more control over versions. Sure I can arse around with homebrew to swap stuff out, but even then it gets complicated. MAMP at least gave me a little control and avoided screwing around with a stack that my OS relied upon for certain features. Still I had the issue of how to handle virtual hosts.</p>\n\n<p>Screwing around with Apache config just to get a single domain running seemed trivial enough, but when you have about 20 domains to manage it just seems like effort, so you end up getting something like VirtualHostX which isn't free, or MAMP Pro which is even more expensive.</p>\n\n<p>Then you realise that you need some extra extensions for a certain project, so you install them.</p>\n\n<p>Then you realise that a different project requires a different versions of that same extension, or needs PostgreSQL instead of MySQL. Now you have both installed on your workstation.</p>\n\n<p>I could go on, but this is all AAAGGGHHHHH WRONG. So stop that.</p>\n\n<p>The solution for any project more complicated than some FooCMS install is to use Vagrant, which I have been <a href=\"http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/\">blogging about</a> quite a lot recently. Vagrant wraps up each project in its own server so you can run NodeJS, Ruby, PHP, PostgreSQL, Mongo, whatever each of your projects need without them getting in each others way.</p>\n\n<h2>Why u uze NodEJS and PHP?!!?1</h2>\n\n<p>People know me as a PHP developer, but I would prefer to think of myself as a web developer. Kapture currently uses Ruby, PHP, Python, Erlang and even some Java here and there.</p>\n\n<p>Why? Because we have a bunch of different servers that do different things.</p>\n\n<ul>\n<li>API (PHP)</li>\n<li>MySQL</li>\n<li>Redis</li>\n<li>Admin Panel</li>\n<li>Queue (RabbitMQ)</li>\n<li>Workers (Some PHP and some Python: PIL)</li>\n<li>Graylog2</li>\n</ul>\n\n<p>That's a whole bunch of stuff, and they are all welcome to require whatever the hell programming language they need to get the job done - I am not only going to pick PHP based products for the sake of it.</p>\n\n<h2>Local Environment</h2>\n\n<p>This is where it gets interesting. Each of these different servers all run on the same vagrant installation.</p>\n\n<p>Each of the servers listed above is considered by Chef to be its own \"role\". Roles can be applied to one node each, or they can be lumped together so the same \"node\" has multiple \"roles\". </p>\n\n<p>We have a \"queue\" role, an \"admin\" role, an \"api\" role, etc. In production and staging each \"role\" is applied to its own EC2 box (considered by Chef to be a \"node\"), but locally all roles are applied to the same vagrant box.</p>\n\n<p>Some vagrant pro's at this point will say: \"Woah, hang on a minute, why?\". Sure, vagrant can handle multiple \"hosts\" per vagrant file, but this starts to get silly when you have multiple nodes for a few reasons.</p>\n\n<h3>Six Virtualised Servers aint quick</h3>\n\n<p>If you only have two \"nodes\" then you're probably going to be ok. But if you have 6 or 7 like we do you're really going to have a bad time. 512MB assigned to each one, each web-facing server running Nginx, PHP-FPM and APC or whateverthecrap else, is all a massive waste of memory. The valuable thing about using Vagrant is that they are all running the same VERSIONS of the software you need, but who cares if they have 3 or 4 virtual host entries instead of 1? </p>\n\n<p>Sharing the same resources makes a whole lot more sense than trying to actually replicate the full architecture on your local machine. After all, you have staging to test this stuff, so why worry about the network architecture locally?</p>\n\n<h3>Chef = $</h3>\n\n<p>If you're using Chef then they're counting your nodes and charging accordingly. We have \"vagrant-phil\", \"vagrant-dan\" and \"vagrant-john\", instead of having 7 nodes EACH.</p>\n\n<p>Yes we could install our own Chef server, but we could manage our own Git repos instead of using GitHub and we could write our own OS instead of using an existing distribution. Whatever, we have things to do.</p>\n\n<h2>Vagrantfile</h2>\n\n<p>So to set all this up is actually pretty simple. One thing I love to do is have the main codebase(s) installed locally as submodules, then share them via NFS so they can be permissioned, chmoded, etc to run properly. Then I use 198.* as an IP address because it allows NFS to function properly while not actually hitting the outside network. If you go with 10.* as a lot of people do then some commercial networks are going to fight back, and if you pick some random IP which is shared with your dev team then as soon as a colleague fires up the vagrant box you're going to fight each other for the IP address. 198 keeps it safe. </p>\n\n<script src=\"https://gist.github.com/4186666.js?file=Vagrantfile\"></script>\n\n<h2>Environmental Differences</h2>\n\n<p>So the main difference between local and staging/production is going to be that your code is installed in different locations. Locally it's going to be /vagrant/www/whatever and in production it's going to be /var/www/. If like me you use Chef to actually deploy your code then it's actually going to be /var/www/current/ too, as they use a Capistrano-like folder system to symlink to the \"latest\" revision in your Git repo as the current version.</p>\n\n<p>This can be handled with Chef \"environments\":</p>\n\n<script src=\"https://gist.github.com/4186666.js?file=dev\"></script>\n\n<p>So the default \"attributes\" for the \"role\" are set to whatever staging/production expect (/var/www/current) and develop overrides that logic in the environment to be /vagrant/www/api. </p>\n\n<h2>MOAR CODE</h2>\n\n<p>Sorry guys but this has been mostly theory. If you want to crack on and try this stuff our for yourself then I strongly recomend reading the <a href=\"http://www.jasongrimes.org/2012/06/managing-lamp-environments-with-chef-vagrant-and-ec2-1-of-3/\">three part series by Jason Grimes</a>. This has been my bible for the last month or two, and I cannot recommend it enough. Read it 65 times and keep it bookmarked. Then, you will know kung fu.</p>\n\n<h3>Further Reading</h3>\n\n<ul>\n<li><a href=\"http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/\">Vagrant: What, Why, and How</a></li>\n<li><a href=\"http://www.jasongrimes.org/2012/06/managing-lamp-environments-with-chef-vagrant-and-ec2-1-of-3/\">Managing LAMP environments with Chef, Vagrant, and EC2</a></li>\n</ul>\n",
    "preview_hash": ""
  },
  {
    "id": "137",
    "created": "2012-12-02 21:02:00",
    "updated": "2012-12-03 02:14:44",
    "created_by": "2",
    "ordering_count": null,
    "title": "Why some people hate PHP",
    "slug": "why-some-people-hate-php",
    "category_id": "2",
    "attachment": "",
    "intro": "I answered a question on Quora a while ago, which was long enough to deserve it's own blog post. Basically I explain some of the reasons people hate on PHP so hard, and while some of them are founded there are plenty of unfounded reasons that people whine about that either don't matter - or are being worked on for future versions.",
    "body": "_This is a repost of my answer to the Quora question: [Do a large majority of people hate PHP solely because other people do so?](http://www.quora.com/Do-a-large-majority-of-people-hate-PHP-solely-because-other-people-do-so)_\n\nThere are a lot of reasons people \"hate\" PHP, or at least look down on it. Some of them are founded, some are not, and some of them are circumstantial.\n\n1.) \"Inconsistent haystack / needle\"\n\nYou hear a lot of people banging on about inconsistent haystack needle, but this can be read with a single rule:\n\narray: needle, haystack<br>string: haystack, needle\n\nIt's as simple as that, but people often forget and assume its more complicated.\n\n<u>Reference</u>\n\n<img src=\"http://qph.cf.quoracdn.net/main-qimg-fa201f1217c396cd88685d386714c5d7\" master_src=\"http://qph.cf.quoracdn.net/main-qimg-8cff392ef81d828c05e4437d195332db\" master_w=\"1680\" master_h=\"1050\"></div>\n\n2.) PHP is a HTML file, with logic\n\nPHP assumes the file will be HTML first, which can lead to some stupid output problems where whitespace sneaks in before or after those <?php ?> tags. There are some plans to change that, but it can lead to trouble and reminds everyone that PHP has a history of \"templating first, programming later\".\n  \n\n<b>[New File Type for Pure-Code PHP Scripts](https://wiki.php.net/rfc/phpp)</b>\n\n3.) No standards\n\nThere are a million frameworks with a million standards, people fight over snake_case v camelCase and have no clear plans as to what is correct. That means people coming from Ruby to PHP (say they have to build a PHP library for a REST API they just built) they have no idea what to do. I've seen this problem a lot, but the PHP-FIG (Previously known as the PHP Standards Group) is working on that.\n\n<b>[PHP-FIG](https://github.com/php-fig/fig-standards)</b><br><b>[Google Group](https://groups.google.com/group/php-standards)</b>\n\n4.) Lack of Quality Packages\n\nNPM, Bundler/Gems, PIP, CPAN etc all provide quality code packages for developers to plug into their code, meaning they can write less and do more. PHP does not have a consistent package system other than PEAR, which is an aging beast which most people ignore due to the low quality or old age of the packages. \n\nPSR-0 (part of the PHP-FIG) is a standard that has been generated to help code packages work together, and Composer is a project that has been built to make NPM-style dependency handling for PHP. In time we'll see the quality increase, meaning much less bad code is going to be rebuilt time and time again by every developer - and much more time can be saved instead of developers working on fragmented \"framework specific\" solutions.\n\n[<b>Packages: </b>The way forward for PHP](http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php)<br><b>[Composer](http://getcomposer.org)</b>\n\n5.) Misconception\n\nI know a bunch of incredibly smart Ruby developers who used to use PHP back in the PHP 4 days, who seem to think nothing has changed. PHP 4 to 5 was a massive jump and PHP 5.2 to PHP 5.3 was another HUGE leap forward (after-all, PHP 5.3 was meant to be PHP 6 but they back-ported every feature other than Unicode which was not going to work).\n\nThe fact that they go around telling all their Ruby friends that PHP has no \"method_missing\" (we do, it's called __call()) and complain about other things that no longer exist, or have been improved, or added, means that a lot of people who laugh about PHP are laughing about a 7 year old version of PHP. Somebody said PHP was terrible for not having a built in server like Ruby... well it does.\n\n<b>[PHP Built in Webserver](http://php.net/manual/en/features.commandline.webserver.php)</b>\n\n6.) You were doing it wrong\n\n\"You can mix MySQL, HTML and PHP in the same files. PHP is disgusting!\"\n\nI've said the same about ColdFusion and had it politely explained to me that I was just doing it wrong. This is a good point. Just because a language is flexible enough to let you do whatever you want does not make it bad.\n\nThe structure comes from a framework. I don't know many people using Ruby who aren't using Sinatra or Rails, and I don't know many Node guys who don't use Express, CanJS, etc.\n\n7.) Elitism\n\nNot using PHP is cool. Who wants to use the same language you used when you first started writing code as a kid? Who wants to use something that has loads of terrible script kiddies using it? It must not be a challenge, it's not smart enough for a smart programmer like you. \n\nYou need something that will challenge you and anyone using PHP is just not smart enough to learn something else...\n\nI hate that point of view so much. In the lift today on the way in, my colleaue overheard a conversation from two total strangers: \"You can't trust these PHP shops, why don't they learn a real language?\". This covers a lot of the views of people around, and if it's not elitist then it is at least short sighted.\n\nSo, why do people still use PHP?\n\nIf nothing else; <i>Momentum</i>\n\nThe latest stats from the W3Techs show that almost 78% of the top million sites are built with PHP. Now, while you can sniff at the quality of the language itself you can't sniff at that.\n\n<u><a href=\"http://w3techs.com/technologies/overview/programming_language/all\" rel=\"nofollow\" target=\"_blank\" class=\"external_link\">http://w3techs.com/technologies/overview/programming_language/all</a></u>\n\nI am proficient in PHP, Ruby, Python and have dabbled with NodeJS. Why am I&nbsp; using PHP? Because it has the biggest market.\n\nLots of developers want to chase \"the perfect language\", \"the perfect IDE\", \"the perfect hosting platform\". The answer is that there is no perfect tool, just options. Nobody should be \"hating\" any of them.",
    "created_on": "1354482120",
    "updated_on": "1354500884",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "4ea7893ced77a11f85872ff36fd5252b",
    "type": "markdown",
    "parsed": "<p><em>This is a repost of my answer to the Quora question: <a href=\"http://www.quora.com/Do-a-large-majority-of-people-hate-PHP-solely-because-other-people-do-so\">Do a large majority of people hate PHP solely because other people do so?</a></em></p>\n\n<p>There are a lot of reasons people \"hate\" PHP, or at least look down on it. Some of them are founded, some are not, and some of them are circumstantial.</p>\n\n<p>1.) \"Inconsistent haystack / needle\"</p>\n\n<p>You hear a lot of people banging on about inconsistent haystack needle, but this can be read with a single rule:</p>\n\n<p>array: needle, haystack<br>string: haystack, needle</p>\n\n<p>It's as simple as that, but people often forget and assume its more complicated.</p>\n\n<p><u>Reference</u></p>\n\n<p><img src=\"http://qph.cf.quoracdn.net/main-qimg-fa201f1217c396cd88685d386714c5d7\" master_src=\"http://qph.cf.quoracdn.net/main-qimg-8cff392ef81d828c05e4437d195332db\" master_w=\"1680\" master_h=\"1050\"></div></p>\n\n<p>2.) PHP is a HTML file, with logic</p>\n\n<p>PHP assumes the file will be HTML first, which can lead to some stupid output problems where whitespace sneaks in before or after those <?php ?> tags. There are some plans to change that, but it can lead to trouble and reminds everyone that PHP has a history of \"templating first, programming later\".</p>\n\n<p><b><a href=\"https://wiki.php.net/rfc/phpp\">New File Type for Pure-Code PHP Scripts</a></b></p>\n\n<p>3.) No standards</p>\n\n<p>There are a million frameworks with a million standards, people fight over snake_case v camelCase and have no clear plans as to what is correct. That means people coming from Ruby to PHP (say they have to build a PHP library for a REST API they just built) they have no idea what to do. I've seen this problem a lot, but the PHP-FIG (Previously known as the PHP Standards Group) is working on that.</p>\n\n<p><b><a href=\"https://github.com/php-fig/fig-standards\">PHP-FIG</a></b><br><b><a href=\"https://groups.google.com/group/php-standards\">Google Group</a></b></p>\n\n<p>4.) Lack of Quality Packages</p>\n\n<p>NPM, Bundler/Gems, PIP, CPAN etc all provide quality code packages for developers to plug into their code, meaning they can write less and do more. PHP does not have a consistent package system other than PEAR, which is an aging beast which most people ignore due to the low quality or old age of the packages. </p>\n\n<p>PSR-0 (part of the PHP-FIG) is a standard that has been generated to help code packages work together, and Composer is a project that has been built to make NPM-style dependency handling for PHP. In time we'll see the quality increase, meaning much less bad code is going to be rebuilt time and time again by every developer - and much more time can be saved instead of developers working on fragmented \"framework specific\" solutions.</p>\n\n<p><a href=\"http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php\"><b>Packages: </b>The way forward for PHP</a><br><b><a href=\"http://getcomposer.org\">Composer</a></b></p>\n\n<p>5.) Misconception</p>\n\n<p>I know a bunch of incredibly smart Ruby developers who used to use PHP back in the PHP 4 days, who seem to think nothing has changed. PHP 4 to 5 was a massive jump and PHP 5.2 to PHP 5.3 was another HUGE leap forward (after-all, PHP 5.3 was meant to be PHP 6 but they back-ported every feature other than Unicode which was not going to work).</p>\n\n<p>The fact that they go around telling all their Ruby friends that PHP has no \"method_missing\" (we do, it's called __call()) and complain about other things that no longer exist, or have been improved, or added, means that a lot of people who laugh about PHP are laughing about a 7 year old version of PHP. Somebody said PHP was terrible for not having a built in server like Ruby... well it does.</p>\n\n<p><b><a href=\"http://php.net/manual/en/features.commandline.webserver.php\">PHP Built in Webserver</a></b></p>\n\n<p>6.) You were doing it wrong</p>\n\n<p>\"You can mix MySQL, HTML and PHP in the same files. PHP is disgusting!\"</p>\n\n<p>I've said the same about ColdFusion and had it politely explained to me that I was just doing it wrong. This is a good point. Just because a language is flexible enough to let you do whatever you want does not make it bad.</p>\n\n<p>The structure comes from a framework. I don't know many people using Ruby who aren't using Sinatra or Rails, and I don't know many Node guys who don't use Express, CanJS, etc.</p>\n\n<p>7.) Elitism</p>\n\n<p>Not using PHP is cool. Who wants to use the same language you used when you first started writing code as a kid? Who wants to use something that has loads of terrible script kiddies using it? It must not be a challenge, it's not smart enough for a smart programmer like you. </p>\n\n<p>You need something that will challenge you and anyone using PHP is just not smart enough to learn something else...</p>\n\n<p>I hate that point of view so much. In the lift today on the way in, my colleaue overheard a conversation from two total strangers: \"You can't trust these PHP shops, why don't they learn a real language?\". This covers a lot of the views of people around, and if it's not elitist then it is at least short sighted.</p>\n\n<p>So, why do people still use PHP?</p>\n\n<p>If nothing else; <i>Momentum</i></p>\n\n<p>The latest stats from the W3Techs show that almost 78% of the top million sites are built with PHP. Now, while you can sniff at the quality of the language itself you can't sniff at that.</p>\n\n<p><u><a href=\"http://w3techs.com/technologies/overview/programming_language/all\" rel=\"nofollow\" target=\"_blank\" class=\"external_link\">http://w3techs.com/technologies/overview/programming_language/all</a></u></p>\n\n<p>I am proficient in PHP, Ruby, Python and have dabbled with NodeJS. Why am I&nbsp; using PHP? Because it has the biggest market.</p>\n\n<p>Lots of developers want to chase \"the perfect language\", \"the perfect IDE\", \"the perfect hosting platform\". The answer is that there is no perfect tool, just options. Nobody should be \"hating\" any of them.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "138",
    "created": "2012-12-05 20:00:00",
    "updated": "2012-12-06 01:16:04",
    "created_by": "2",
    "ordering_count": null,
    "title": "5 Things CodeIgniter Cannot Do (without a rewrite)",
    "slug": "5-things-codeigniter-cannot-do-without-a-rewrite",
    "category_id": "3",
    "attachment": "",
    "intro": "CodeIgniter was build a long time ago and since its inception it has maintained the same API, without making sizable breaking changes through 3 major versions. Sadly, the API is at a point where it needs to be rewritten to support several fundamental features, which most other frameworks support. This is a walk through those features with a little insight as to what why and how from an ex core contributor.",
    "body": "Now that PHP 5.2 is gone from my life entirely I am a happy man. As I don't use PHP 5.2 anymore I no longer need a 5.2 framework, so I quit the CodeIgniter team and started focusing on my new job. \n\n[Kapture](http://kaptu.re/) is all PHP 5.4, and [PyroCMS is moving to be PHP 5.3](https://www.pyrocms.com/blog/2012/11/foundations-for-our-future), so I can use anonymous functions, short ternary operators, namespaces, go fully PSR-2 and use Composer all the way. PHP 5.3 is a massive change from PHP 5.2 as of course it was meant to be PHP 6, so while it might SEEM like a small update it's really not. It opens up doors to whole new possibilities, a newer more mature style of programming and sucks SO MUCH LESS than earlier versions of PHP.\n\nMost of the features added to PHP before this have not fundamentally changed the way a framework should look. This served CodeIgniter well and it has managed to maintain the same API for as long as I can remember. Since I started using v1.4.1 back in 2007 or whatever I can name the breaking changes:\n\n* Validation was deprecated and replaced with an improved Form_validation library\n* Constructors changed to use __construct() instead of PHP 4-style constructors\n* Plugins were deleted\n* extends Controller became extends CI_Controller\n* Instead of returning FALSE for unknown data it will now return NULL (like PHP does itself)\n\nOther than that, nothing has happened to break existing applications even though we managed to add a whole bunch of features. So what features are missing from CodeIgniter that pretty much every other framework either currently has, or is working on adding?\n\n### 1. Autoloading\n\nAs features started popping in to PHP 5.1, 5.2 a rewrite was suggested by hundreds of users. The folks that wanted more static and more autoloading tried pushing it, but EllisLab put their foot down, which lead to those users rage-quitting and built Kohana, which autoloaded static classes like they were going out of fashion. \n\nCodeIgniter instead has a feature called \"Autoload\", which most other frameworks refer to as \"Always-load\" or \"Eager-load\". Basically it's an array of stuff to include - that's it.\n\nMultiple times I looked into how I could work autoloading into CodeIgniter properly, but never came up with anything feasible. The main reason here is that there is no indicator to what you are actually trying to load, so when you try \"new Foo;\" it could be a library, a model, some random third-party code you found on a blog, a Zend class you've bundled in, anything. \n\nCodeIgniter would need to do a series of file_exists() checks throughout to try and guess, then once the class is found we could generate a class-map cache (like Kohana). That not only seems like a slightly crazy solution, but would almost certainly confuse the large number of beginners in the CodeIgniter community that would not understand why their changes were not reflected instantly.\n\nOne solution is to use suffixes or prefixes on the classes (like FuelPHP) as Model_Foo is clearly a model, so that cut's things down a bit, but every time I proposed it on the forums half of the people involved were screaming that they hated it, and the rest were arguing over suffix or prefix, so I gave up trying.\n\nThe ideal solution would be to include the composer autoloader, but that won't happen because the community in general has always been extremely against command-line utilities being used. \n\n### 2. Namespaces\n\nCodeIgniter does not use namespaces at all. The requirement for namespaces can be somewhat avoided if you prefix or suffix classes, but that is just a workaround and not a solution. Really a namespace should be applied to all of the code in the core, then each \"Spark\" or package should have it's own namespace. \n\nThis drastically improves autoloading as you give the autoload class a pointer as to where it should be looking for this code, instead of how packages currently work: foreach through EVERYTHING until it finds one that matches. If two packages contain a \"Curl\" library then it's going to load the first one it finds. The second will never be loaded thanks to the \"singleton\" approach, meaning if package B requires functionality in a different version of \"Curl\" then it's going to break. \n\nThe other issue is one that can be seen in PyroCMS. Add-on developers can't create a module called \"events\". It would need a controller called \"Events\", but there is a class called \"Events\" which is a library. This is extremely frustrating and could be solved with prefix or suffix support. I would have loved to work that in, but of course namespaces are PHP 5.3 only.\n\n### 3. Database Schema Abstraction\n\nSo this kinda happened in 2.0 and actually worked by 2.1. When I say it worked, I mean if you were using PDO for MySQL you could SELECT, INSERT, UPDATE, DELETE perfectly, but DBForge does not work at all - and still doesn't in the 3.0 branch. \n\nAndrey Andreev did a great job here and created \"PDO Sub-drivers\" which mostly worked. He had a damn good try and getting everything working and as far as I know it's the last feature the team is working on before 3.0 is released, but really the DBForge system is modeled much too closely around MySQL for this to ever really work.\n\nDo you know how you create a full-text searchable field in SQLite3 using DBForge? You can't.\n\nThis almost by itself is why I have spent the last little while transitioning PyroCMS' installer over the the Laravel 4 database component, because it is capable of installing PyroCMS on MySQL, PostgreSQL and SQLite - which will be a feature in PyroCMS 2.3.\n\n### 4. Unit-Testing\n\nUntil [3.0-dev](https://github.com/EllisLab/CodeIgniter/tree/develop/tests) CodeIgniter never had any unit-tests on the core. They were added by some heroic work by [Greg Aker](http://www.gregaker.net/) (ex-Reactor team member), Pascal Kriete (EllisLab employee) and multiple contributors. I use the word heroic, because getting CodeIgniter unit-tested was a MISSION and a half. \n\nThe core is getting fairly well covered (when I left a few months ago it was 40-50% somewhere) but there is going to be a lot of CodeIgniter that you just can't test - especially your applications.\n\nTo draw yet another comparison to Laravel 4, you can [unit-test](http://vimeo.com/53029232) your applications perfectly.\n\n### 5. Good Migrations\n\nI wrote Migrations for CodeIgniter, so I am not offending anyone by saying they suck.\n\nWhy did I write shitty migrations for CodeIgniter? Because it was the best that could be done without a command-line helper much like Oil for FuelPHP or Artisan for Laravel. Really migrations should be generated with simple arguments, use a timestamp instead of a generic number and run with some command like \"php ci migrate\", but instead you need to implement $this->migration->current() in a hook or some crap to make it run on page load.\n\nI'm sorry.\n\n## So break the API!\n\nEvery project has to walk the line between \"Never Change Anything\" and \"Fuck You Start Again\". We've seen these changes rip communities apart at one end of the spectrum, and let others rot and fade away. While I am over the moon that CodeIgniter has not rewritten itself a million times (that would really screw with PyroCMS) the but there needs to be some sort of middle ground that just isn't happening.\n\nIt's not that development just isn'y happening, because it is. CodeIgniter has had more bug fixes, tweaks, improvements and new features than any other version in history.\n\n<img src=\"https://sphotos-a.xx.fbcdn.net/hphotos-ash4/292325_10152004911110607_2026055691_n.jpg\" />\n\nThe issue here, is that if it's going to move to PHP 5.3 there are only three logical outcomes.\n\n### A) Major Changes\n\nTo take advantage of the missing features I've mentioned (especially the ones that PHP 5.3 brings) and removing ALL of that old PHP 4 \"tech debt\" would essentially make it a new framework, and need serious effort to migrate an application.\n\n### B) Trivial Changes\n\nThe API will stay pretty much the same, but some new PHP 5.3 syntax will be used in the core like short ternary operators. If that happens then there would be little point updating the framework version requirement in the first place, and people will complain that the new features were not enough to warrent them having to change their code at all.\n\n### C) Change Nothing\n\nCodeIgniter keeps on as it has been and flagrantly ignores new PHP 5.3 features, ignores PSR-0, ignores Composer and ignores all the new stuff out there in PHP.\n\n## It's not \"A\"\n\nI say this for a few reasons. Firstly, who would do it? Right now Andrey and Alex Bilbie are doing an amazing job of keeping on top of issues but they are not paid to do this, they do it because they use CodeIgniter and want to make sure it stays working - the same reason I asked to be on the team.\n\nThere are other Reactor engineers, but as their friend I know what they're up to these days - and it's not CodeIgniter.\n\nThe logical question to ask next is why don't EllisLab do it? They've not rewritten it in the last 6 years, why would they start now? All of the CodeIgniter developers in EllisLab that I knew from the old days have quit the company, so who is there to do it? Derek Jones is the new CEO so he's going to be busy running the whole company, not writing a PHP framework.\n\n## Fork CodeIgniter?\n\nThat's happened three times already. Kohana and FuelPHP were both created for this reason, Kohana aiming at PHP 5.2 and FuelPHP utilizing PHP 5.3 and namespaces. Laravel 3 was also based _heavily_ on CodeIgniter, Kohana and FuelPHP - so they've already done the hard work, built a community, built a website, set up the Twitter account, trademarked a name, organized the conference - I don't see how another fork is going to help anything.\n\n## Is CodeIgniter Dead?\n\n**Absolutely not;** and nobody is in a position to suggest that it is (looking at you Shawn McCool). CodeIgniter is simply never going to change, and maybe that is ok.\n\nThousands of companies of all sizes are using CodeIgniter so whatever happens the framework is always going to be around, but it will be exactly the same as it is now for years to come, which means you aren't going to have to upgrade any legacy apps any time soon. Yay!\n\nI wrote this because people have been asking why I've ditched CodeIgniter for PyroCMS, and started moving it to Laravel 4 instead. I'm sure people will think I'm just wildly slagging CodeIgniter off, but I think its possible to respectfully highlight a products shortcomings without there being any hatred or resentment. \n\nThe main reason - and I will repeat this over and over again until everybody is tired of hearing it - is that PHP is going through a massive change. Composer, PSR's, the PHP-FIG, Travis-CI making unit-testing suddenly become cool, etc ALL mean that there is a whole new world being built out there. New PSR components doing amazing things, and making things like my CodeIgniter Curl library look like an absolute piece of shit. New times call for new tools, so use something new. \n\nLaravel 4 has become the \"go-to\" framework for me because it's built exactly how I would have wanted to see FuelPHP 2.0 built. Components of Laravel can be used in any framework and the framework itself is extremely skinny and unassuming. It's all PHP 5.3, namespaced, PSR-1 compliant, and feels extremely familiar if you've ever built anything with CodeIgniter, Kohana, FuelPHP or even Sinatra. \n\nSomething that makes Laravel stand out from the crowd is that it swallows it's pride to leverage any existing tool that does the job instead of bullishly reinventing the wheel for the sake of it. Monolog, Symfony Console, Doctrine Common, etc are all used where needed to perform the tasks they were built for.\n\n## Make Your Own Decisions\n\nDon't blindly go and switch everything to a new framework just because some guy said so on a blog, that would be ridiculous. If PHP 5.2 support is your thing then stay where you are. If you like CodeIgniter and it does everything you need then _awesome_, carry on. \n\nIf like me you've hit the limit on what CodeIgniter will actually let you do, or you just feel bored and want to try something new, then absolutely check [Laravel 4](https://github.com/illuminate) out. \n\nThat is the GitHub repo for all of the composer components, take a look at /app and run composer install to get started. \n\t\nWhatever you do, if your framework does not support Composer then fuck that noise. Use Composer to install your packages, and if you are trying to use something that does not have a composer.json then shout at the until they do - or send in a pull request.",
    "created_on": "1354737600",
    "updated_on": "1354756564",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "c98687a697f6c36071645ec195190a8f",
    "type": "markdown",
    "parsed": "<p>Now that PHP 5.2 is gone from my life entirely I am a happy man. As I don't use PHP 5.2 anymore I no longer need a 5.2 framework, so I quit the CodeIgniter team and started focusing on my new job. </p>\n\n<p><a href=\"http://kaptu.re/\">Kapture</a> is all PHP 5.4, and <a href=\"https://www.pyrocms.com/blog/2012/11/foundations-for-our-future\">PyroCMS is moving to be PHP 5.3</a>, so I can use anonymous functions, short ternary operators, namespaces, go fully PSR-2 and use Composer all the way. PHP 5.3 is a massive change from PHP 5.2 as of course it was meant to be PHP 6, so while it might SEEM like a small update it's really not. It opens up doors to whole new possibilities, a newer more mature style of programming and sucks SO MUCH LESS than earlier versions of PHP.</p>\n\n<p>Most of the features added to PHP before this have not fundamentally changed the way a framework should look. This served CodeIgniter well and it has managed to maintain the same API for as long as I can remember. Since I started using v1.4.1 back in 2007 or whatever I can name the breaking changes:</p>\n\n<ul>\n<li>Validation was deprecated and replaced with an improved Form_validation library</li>\n<li>Constructors changed to use __construct() instead of PHP 4-style constructors</li>\n<li>Plugins were deleted</li>\n<li>extends Controller became extends CI_Controller</li>\n<li>Instead of returning FALSE for unknown data it will now return NULL (like PHP does itself)</li>\n</ul>\n\n<p>Other than that, nothing has happened to break existing applications even though we managed to add a whole bunch of features. So what features are missing from CodeIgniter that pretty much every other framework either currently has, or is working on adding?</p>\n\n<h3>1. Autoloading</h3>\n\n<p>As features started popping in to PHP 5.1, 5.2 a rewrite was suggested by hundreds of users. The folks that wanted more static and more autoloading tried pushing it, but EllisLab put their foot down, which lead to those users rage-quitting and built Kohana, which autoloaded static classes like they were going out of fashion. </p>\n\n<p>CodeIgniter instead has a feature called \"Autoload\", which most other frameworks refer to as \"Always-load\" or \"Eager-load\". Basically it's an array of stuff to include - that's it.</p>\n\n<p>Multiple times I looked into how I could work autoloading into CodeIgniter properly, but never came up with anything feasible. The main reason here is that there is no indicator to what you are actually trying to load, so when you try \"new Foo;\" it could be a library, a model, some random third-party code you found on a blog, a Zend class you've bundled in, anything. </p>\n\n<p>CodeIgniter would need to do a series of file_exists() checks throughout to try and guess, then once the class is found we could generate a class-map cache (like Kohana). That not only seems like a slightly crazy solution, but would almost certainly confuse the large number of beginners in the CodeIgniter community that would not understand why their changes were not reflected instantly.</p>\n\n<p>One solution is to use suffixes or prefixes on the classes (like FuelPHP) as Model_Foo is clearly a model, so that cut's things down a bit, but every time I proposed it on the forums half of the people involved were screaming that they hated it, and the rest were arguing over suffix or prefix, so I gave up trying.</p>\n\n<p>The ideal solution would be to include the composer autoloader, but that won't happen because the community in general has always been extremely against command-line utilities being used. </p>\n\n<h3>2. Namespaces</h3>\n\n<p>CodeIgniter does not use namespaces at all. The requirement for namespaces can be somewhat avoided if you prefix or suffix classes, but that is just a workaround and not a solution. Really a namespace should be applied to all of the code in the core, then each \"Spark\" or package should have it's own namespace. </p>\n\n<p>This drastically improves autoloading as you give the autoload class a pointer as to where it should be looking for this code, instead of how packages currently work: foreach through EVERYTHING until it finds one that matches. If two packages contain a \"Curl\" library then it's going to load the first one it finds. The second will never be loaded thanks to the \"singleton\" approach, meaning if package B requires functionality in a different version of \"Curl\" then it's going to break. </p>\n\n<p>The other issue is one that can be seen in PyroCMS. Add-on developers can't create a module called \"events\". It would need a controller called \"Events\", but there is a class called \"Events\" which is a library. This is extremely frustrating and could be solved with prefix or suffix support. I would have loved to work that in, but of course namespaces are PHP 5.3 only.</p>\n\n<h3>3. Database Schema Abstraction</h3>\n\n<p>So this kinda happened in 2.0 and actually worked by 2.1. When I say it worked, I mean if you were using PDO for MySQL you could SELECT, INSERT, UPDATE, DELETE perfectly, but DBForge does not work at all - and still doesn't in the 3.0 branch. </p>\n\n<p>Andrey Andreev did a great job here and created \"PDO Sub-drivers\" which mostly worked. He had a damn good try and getting everything working and as far as I know it's the last feature the team is working on before 3.0 is released, but really the DBForge system is modeled much too closely around MySQL for this to ever really work.</p>\n\n<p>Do you know how you create a full-text searchable field in SQLite3 using DBForge? You can't.</p>\n\n<p>This almost by itself is why I have spent the last little while transitioning PyroCMS' installer over the the Laravel 4 database component, because it is capable of installing PyroCMS on MySQL, PostgreSQL and SQLite - which will be a feature in PyroCMS 2.3.</p>\n\n<h3>4. Unit-Testing</h3>\n\n<p>Until <a href=\"https://github.com/EllisLab/CodeIgniter/tree/develop/tests\">3.0-dev</a> CodeIgniter never had any unit-tests on the core. They were added by some heroic work by <a href=\"http://www.gregaker.net/\">Greg Aker</a> (ex-Reactor team member), Pascal Kriete (EllisLab employee) and multiple contributors. I use the word heroic, because getting CodeIgniter unit-tested was a MISSION and a half. </p>\n\n<p>The core is getting fairly well covered (when I left a few months ago it was 40-50% somewhere) but there is going to be a lot of CodeIgniter that you just can't test - especially your applications.</p>\n\n<p>To draw yet another comparison to Laravel 4, you can <a href=\"http://vimeo.com/53029232\">unit-test</a> your applications perfectly.</p>\n\n<h3>5. Good Migrations</h3>\n\n<p>I wrote Migrations for CodeIgniter, so I am not offending anyone by saying they suck.</p>\n\n<p>Why did I write shitty migrations for CodeIgniter? Because it was the best that could be done without a command-line helper much like Oil for FuelPHP or Artisan for Laravel. Really migrations should be generated with simple arguments, use a timestamp instead of a generic number and run with some command like \"php ci migrate\", but instead you need to implement $this->migration->current() in a hook or some crap to make it run on page load.</p>\n\n<p>I'm sorry.</p>\n\n<h2>So break the API!</h2>\n\n<p>Every project has to walk the line between \"Never Change Anything\" and \"Fuck You Start Again\". We've seen these changes rip communities apart at one end of the spectrum, and let others rot and fade away. While I am over the moon that CodeIgniter has not rewritten itself a million times (that would really screw with PyroCMS) the but there needs to be some sort of middle ground that just isn't happening.</p>\n\n<p>It's not that development just isn'y happening, because it is. CodeIgniter has had more bug fixes, tweaks, improvements and new features than any other version in history.</p>\n\n<p><img src=\"https://sphotos-a.xx.fbcdn.net/hphotos-ash4/292325_10152004911110607_2026055691_n.jpg\" /></p>\n\n<p>The issue here, is that if it's going to move to PHP 5.3 there are only three logical outcomes.</p>\n\n<h3>A) Major Changes</h3>\n\n<p>To take advantage of the missing features I've mentioned (especially the ones that PHP 5.3 brings) and removing ALL of that old PHP 4 \"tech debt\" would essentially make it a new framework, and need serious effort to migrate an application.</p>\n\n<h3>B) Trivial Changes</h3>\n\n<p>The API will stay pretty much the same, but some new PHP 5.3 syntax will be used in the core like short ternary operators. If that happens then there would be little point updating the framework version requirement in the first place, and people will complain that the new features were not enough to warrent them having to change their code at all.</p>\n\n<h3>C) Change Nothing</h3>\n\n<p>CodeIgniter keeps on as it has been and flagrantly ignores new PHP 5.3 features, ignores PSR-0, ignores Composer and ignores all the new stuff out there in PHP.</p>\n\n<h2>It's not \"A\"</h2>\n\n<p>I say this for a few reasons. Firstly, who would do it? Right now Andrey and Alex Bilbie are doing an amazing job of keeping on top of issues but they are not paid to do this, they do it because they use CodeIgniter and want to make sure it stays working - the same reason I asked to be on the team.</p>\n\n<p>There are other Reactor engineers, but as their friend I know what they're up to these days - and it's not CodeIgniter.</p>\n\n<p>The logical question to ask next is why don't EllisLab do it? They've not rewritten it in the last 6 years, why would they start now? All of the CodeIgniter developers in EllisLab that I knew from the old days have quit the company, so who is there to do it? Derek Jones is the new CEO so he's going to be busy running the whole company, not writing a PHP framework.</p>\n\n<h2>Fork CodeIgniter?</h2>\n\n<p>That's happened three times already. Kohana and FuelPHP were both created for this reason, Kohana aiming at PHP 5.2 and FuelPHP utilizing PHP 5.3 and namespaces. Laravel 3 was also based <em>heavily</em> on CodeIgniter, Kohana and FuelPHP - so they've already done the hard work, built a community, built a website, set up the Twitter account, trademarked a name, organized the conference - I don't see how another fork is going to help anything.</p>\n\n<h2>Is CodeIgniter Dead?</h2>\n\n<p><strong>Absolutely not;</strong> and nobody is in a position to suggest that it is (looking at you Shawn McCool). CodeIgniter is simply never going to change, and maybe that is ok.</p>\n\n<p>Thousands of companies of all sizes are using CodeIgniter so whatever happens the framework is always going to be around, but it will be exactly the same as it is now for years to come, which means you aren't going to have to upgrade any legacy apps any time soon. Yay!</p>\n\n<p>I wrote this because people have been asking why I've ditched CodeIgniter for PyroCMS, and started moving it to Laravel 4 instead. I'm sure people will think I'm just wildly slagging CodeIgniter off, but I think its possible to respectfully highlight a products shortcomings without there being any hatred or resentment. </p>\n\n<p>The main reason - and I will repeat this over and over again until everybody is tired of hearing it - is that PHP is going through a massive change. Composer, PSR's, the PHP-FIG, Travis-CI making unit-testing suddenly become cool, etc ALL mean that there is a whole new world being built out there. New PSR components doing amazing things, and making things like my CodeIgniter Curl library look like an absolute piece of shit. New times call for new tools, so use something new. </p>\n\n<p>Laravel 4 has become the \"go-to\" framework for me because it's built exactly how I would have wanted to see FuelPHP 2.0 built. Components of Laravel can be used in any framework and the framework itself is extremely skinny and unassuming. It's all PHP 5.3, namespaced, PSR-1 compliant, and feels extremely familiar if you've ever built anything with CodeIgniter, Kohana, FuelPHP or even Sinatra. </p>\n\n<p>Something that makes Laravel stand out from the crowd is that it swallows it's pride to leverage any existing tool that does the job instead of bullishly reinventing the wheel for the sake of it. Monolog, Symfony Console, Doctrine Common, etc are all used where needed to perform the tasks they were built for.</p>\n\n<h2>Make Your Own Decisions</h2>\n\n<p>Don't blindly go and switch everything to a new framework just because some guy said so on a blog, that would be ridiculous. If PHP 5.2 support is your thing then stay where you are. If you like CodeIgniter and it does everything you need then <em>awesome</em>, carry on. </p>\n\n<p>If like me you've hit the limit on what CodeIgniter will actually let you do, or you just feel bored and want to try something new, then absolutely check <a href=\"https://github.com/illuminate\">Laravel 4</a> out. </p>\n\n<p>That is the GitHub repo for all of the composer components, take a look at /app and run composer install to get started. </p>\n\n<p>Whatever you do, if your framework does not support Composer then fuck that noise. Use Composer to install your packages, and if you are trying to use something that does not have a composer.json then shout at the until they do - or send in a pull request.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "139",
    "created": "2012-12-27 16:53:00",
    "updated": "2012-12-27 17:02:38",
    "created_by": "2",
    "ordering_count": null,
    "title": "Arguing on the Internet",
    "slug": "arguing-on-the-internet",
    "category_id": "3",
    "attachment": "",
    "intro": "<p class=\"p1\">\n\tI have referenced Shawn McCool's blog a few times, \"<a href=\"http://heybigname.com/2012/05/06/why-codeigniter-is-dead/\"><span class=\"s1\">Why CodeIgniter is Dead</span></a>\" and people are wondering why I argued so hard against it back in May but then gave CodeIgniter such a hard time in my <a href=\"file:///blog/2012/12/5-things-codeigniter-cannot-do-without-a-rewrite\"><span class=\"s1\">last article</span></a>. For the record I'm not team CodeIgniter or team Laravel, I'm a PHP user who has some opinions, and some of those opinions change over time - which is fair enough.&nbsp;My opinions aside, his original article was wrong on a few points, so let's discuss those.</p>",
    "body": "<a href=\"http://xkcd.com/386/\" taget=\"_blank\"><img src=\"http://imgs.xkcd.com/comics/duty_calls.png\" alt=\"Credit XKCD: Duty Calls\" style=\"float:right; margin: 0 0 10px 10px\" /></a>I have referenced Shawn McCool's blog a few times, \"[Why CodeIgniter is Dead](http://heybigname.com/2012/05/06/why-codeigniter-is-dead/)\" and people are wondering why I argued so hard against it back in May but then gave CodeIgniter such a hard time in my [last article](/blog/2012/12/5-things-codeigniter-cannot-do-without-a-rewrite). For the record I'm not team CodeIgniter or team Laravel, I'm a PHP user who has some opinions, and some of those opinions change over time - which is fair enough. \n\nMy opinions aside, his original article was wrong on a few points, so let's discuss those.\n\n> CI has aged poorly due to a combination of legacy support between major versions and a virtually complete lack of leadership.\n\nThis opinion is based on what? The leadership process was pretty simple. Community proposes changes or pull requests, then a Reactor engineer will review it, offer EllisLab the right of first refusal on Basecamp, then if no objections were raised it would be implemented. \n\nMaybe we could have set up an internal mailing list on Google Group instead of using Basecamp, but EllisLab made the decision and I was fine with that. \n\n> If your host doesn't support PHP 5.3 then jump ship as soon as possible.\n\nAgreed to a point. There are enough PHP hosts on PHP 5.3 & PHP 5.4 (hell, Crucial Web Hosting are even offering PHP 5.5.0 alpha1) that if your host only has PHP 5.2 then you need to run the fuck away screaming to a hosting company that DOES support it.\n\nBut.\n\nI've worked in large companies where the classic \"sysadmins v developers\" war continues to wage into it's 5th decade. The sysadmins don't want to change _anything_ because change causes work, bugs and effort, but on the other team developers want to change _everything_ to make it quicker, more modern, more [webscale](http://www.mongodb-is-web-scale.com/). Trying to get these guys to upgrade from PHP 5.1 to 5.2 when 5.3 was just coming out was insanely difficult, and trying to get from 5.2 to 5.3 is a much bigger ask for many companies. \n\nPHP 5.3 is certainly becoming more available, but there are plenty of times when it just isn't an option. Look at the bigger picture than just \"I am a web developer using a FooHost.com\". [Read](http://philsturgeon.co.uk/blog/2012/08/understanding-circumstance). I personally [don't need PHP 5.2 for anything](http://philsturgeon.co.uk/blog/2012/10/bye-bye-php-5-2), but back in May when Shawn wrote his article the whole PHP scene was very different, so he was even less correct to suggest PHP 5.2 was no longer a big deal.\n\n> Since CI doesn't use any of the new features, best-practices suggest that its users should avoid them in order to provide standardised code. It should be easy to find and hire a PHP developer who is versed in CodeIgniter and mismatching a bunch of code-styles is a bad way to approach that goal.\n\nI have no idea what mismatched code styles Shawn suggests are being recommended. While CodeIgniter is not PSR anything (and IMO probably never will be), it is consistent to its own [Style Guide][styleguide] - which has nothing to do with any PHP version number. This was a weird paragraph.\n\n> When it comes to code modularity CodeIgniter is one of the worst performers in the industry. CodeIgniter is not built using any modular design pattern so all solutions are after-thoughts that were developed by members of the community. Out-of-the-box CI supports libraries (basic classes), helpers (global function declaration), and plugins (the same as helpers, these are not used). These are all different versions of the same concept separated by intent.\n\nPlugins were removed in 2.0.0 which was released January 2011.\n\nAlso by \"members of the community\" you are referring to [John Crepezzi](http://www.johncrepezzi.com/) and and [Kenny Katzgrau](http://codefury.net/), two core developers?  \n\n> There are some third-party modularity solutions available. The oldest and most powerful of these is Modular Extensions by wiredesignz. It allows the implementation of HMVC modules. \n\nWell here the matter of modules and HMVC are being confused. This is a common issue with users of the Modular Extensions HMVC system for CodeIgniter because it implements HMVC _and_ modules. They are not mutually exclusive. HMVC is all about making synchronous requests to another controller via the same routing system as hitting the URL in the address bar. Funnily enough Laravel cannot do this either and requires a [bundle][hmvcbundle] just the same. \n\nAs for modules, CodeIgniter has Sparks and Laravel has Bundles.\n\n> Sparks can only provide libraries, helpers and config files. This limits its function to a central repository for CodeIgniter libraries.\n\nAlmost correct, Packages (the technical feature in the CI core that power Sparks) also support Views too. \n\nThe only real differences are the lack of namespacing and no routing to controllers in a package, both of which are features I would like to see, but obviously a 5.2 framework cannot support 5.3 features. This was covered in my [recent article][5things].\n\n> CodeIgniter was conceived by Rick Ellis of EllisLab. It is now community supported to some extent, but still seems to wilt under its creator's needs. CodeIgniter is the platform on which EllisLab's flagship product (ExpressionEngine) is built. In part due to the preoccupation of EllisLab with ExpressionEngine change to the CodeIgniter framework has come infrequently and the magnitude of the changes have been insignificant.\n\nKinda. It's unfortunate, but the CodeIgniter team is obviously not allowed to recode things completely and break EllisLab's income, but at the same time they are only using 2.0.something so there is a disconnect between \"adding features the community needs\" and \"breaking ExpressionEngine\". It could almost be said they no longer care what is happening with it, as the community is driving things themselves. That is fine with me, the community has enough smart people.\n\n> CodeIgniter Reactor was released so that the community could make changes and improve the framework. Unfortunately, due to the fact that there is no strong or dedicated leader, improvement to the framework has not occurred.\n\nDisagree. There have been more than a few commits to the 3.0 branch. \n\n<img src=\"https://sphotos-a.xx.fbcdn.net/hphotos-ash4/292325_10152004911110607_2026055691_n.jpg\" />\n\n> One could easily argue that CodeIgniter 2.0 brought only minor usability improvements at the cost of dropping PHP4 support entirely.\n\nIn 2011 dropping PHP4 support seemed pretty valid, so posing that as a negative is a little odd. But, lets look at the features that 2.0 brought:\n\n* Drivers\n* Packages\n* Cache driver\n* download() for FTP (yay one of mine)\n* CSRF protection\n* $_GET support - remember, query strings were f**ked before this\n\nThese are just some of the bigger ones, but there are over 120 items in the changelog for 2.0.0. While it wasn't a world changer, people were pretty happy to have all these new features without having to totally rewrite their applications, something CodeIgniter has always strived to make a priority.\n\n>  It's no longer the framework for legacy support and it begs the question, \"what was the purpose of dropping that support?\" as users have seemed to have gained little in exchange.\n\nLegacy support is not limited to PHP 4. Now that [PHP 5.3 is winding to the end of its lifetime](http://php.net/archive/2012.php#id2012-12-20-1), 5.2 is easily considered legacy. Supporting a few versions behind the \"current\" is what CodeIgniter has always done, and this is why I used it for so long. \n\nSure some projects can use the latest and greatest versions of PHP, but sometimes you're stuck with that ass-hat client that just demands that you work with 5.2 or 5.1 for whatever bizarre reason. Sometimes you can convince them to upgrade, sometimes you can't. When I can't I like having tools around that work on those versions. That said, the latest version of a CodeIgniter doesn't have to support PHP 4 until the end of time, so it's weird to see Shawn make an issue out of this.\n\n> When it comes to community participation only the most daring need apply. CodeIgniter is not well unit tested.\n\nWell that's just not true. You can see [here](https://travis-ci.org/EllisLab/CodeIgniter/jobs/3737693) the report of PHP 5.3 and MySQL being run on Travis-CI. The code-coverage is up to about 60% of lines covered, and of course when you run MySQL it doesn't run unit-tests on the PostgreSQL and SQLite drivers, so the number is really higher.\n\nIt was difficult, but those unit-tests have been around for a year. Once 3.0 is tagged I assume the dev's will implement a \"no test no change\" policy, which would be wonderful. They aren't 100% but his article suggested there were none, when really there are plenty. This is just a fact I would have liked him to recognise.\n\n> [UPDATE] I made a few key mistakes while constructing this post. The first is that the title distracts from the actual information in the post. The second mistake was to advocate Laravel in this post as some have assumed political motives, which is simply not true. These mistakes have distracted and confused the issues.\n\nThis was the crux of my issue. It's impossible to say a framework is dead when it's the 3rd most watched PHP project on GitHub with 3-6 pull requests a day on average. Even insinuating it _might_ be dead is ridiculous.\n\nNo. I understand what Shawn was trying to do. I think we both agree (as do many others) that CodeIgniter cannot progress without a rewrite, and that rewrite is unlikely for a number of reasons. That summary is based on many facts and I won't disagree with anybody who says CodeIgniter cannot progress much further. \n\n### \"No Progress != Dead\"\n\nDead insinuates being closed right down. Repo removed, or just nothing is ever tagged again. \n\nWhere CodeIgniter sits is closer to [Smarty](http://www.smarty.net/). Smarty is still active and has it's last stable release 2 months ago. It just hasn't changed much in years and probably never will. \n\nThat is fine for all the companies using Smarty who don't need it to change and the developers who want something new and exciting are all pretty happy that Twig exists.\n\nSmarty now doesn't need to recode itself to become Twig. It doesn't need to break all existing applications just so it can be more like something that has cool new features at the cost of destroying itself. It can just keep on being Smarty, and let Twig do it's thing.\n\nThat is what we're seeing happen with Laravel. Laravel 4 is excellent and I use it. It's PSR-2ish, well built, well unit-tested and has a great community, but that doesn't mean we can just make up lies about CodeIgniter being \"dead\". \n\n### Summary\n\nThis is going to make me look like an angry little man, arguing on the internet until EVERYONE agrees with me. It'll be hard to avoid that, but whenever I am asked the same question more than 10 times I answer it with a blog so the 11th time I can just send a link. People kept bringing this up, kept comparing my article to his and it was getting a little tedious. \n\nOne difference in my personal standing between when Shawn's article was written and now is that I no longer require PHP 5.2 for anything. That doesn't mean I am suddenly wrong for advocating CodeIgiter then, or wrong for assuming other people still have to use PHP 5.2 now. One developers personal situation does not reflect the community at large and we all need to remember that.\n\nI have often said: when I no longer require PHP 5.2 I will no longer require CodeIgniter. I said that a year ago and when I got my new job I dumped it and started using anything PHP 5.3+ and a whole lot of Composer. This is why I NOW love Laravel 4 (not 3), but this conversation has never been about A or B, it's been about somebody writing incorrectly about A.\n\nShawn is a good, smart developer, whose articles have helped a lot of people learn about both CodeIgniter and Laravel, but his article has been given far too much credit for a series of points that ranged from \"half-right\" to completely wrong. It was also missing a few important insights which he may not have known about, that I would have liked to see added in as updates to the original article.\n\nSo: Yay Laravel, it's ok CodeIgniter, I understand. \n\nNow we can all sing kumbaya at [LaraCon](http://conference.laravel.com/). After the arm-wrestle of course.\n\n  [styleguide]: http://ellislab.com/codeigniter/user-guide/general/styleguide.html\n  [hmvcbundle]: http://bundles.laravel.com/bundle/hmvc\n  [5things]: http://philsturgeon.co.uk/blog/2012/12/5-things-codeigniter-cannot-do-without-a-rewrite",
    "created_on": "1356627180",
    "updated_on": "1356627758",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "ed141f432249f043ea43fe1ccde8a3a4",
    "type": "markdown",
    "parsed": "<p><a href=\"http://xkcd.com/386/\" taget=\"_blank\"><img src=\"http://imgs.xkcd.com/comics/duty_calls.png\" alt=\"Credit XKCD: Duty Calls\" style=\"float:right; margin: 0 0 10px 10px\" /></a>I have referenced Shawn McCool's blog a few times, \"<a href=\"http://heybigname.com/2012/05/06/why-codeigniter-is-dead/\">Why CodeIgniter is Dead</a>\" and people are wondering why I argued so hard against it back in May but then gave CodeIgniter such a hard time in my <a href=\"/blog/2012/12/5-things-codeigniter-cannot-do-without-a-rewrite\">last article</a>. For the record I'm not team CodeIgniter or team Laravel, I'm a PHP user who has some opinions, and some of those opinions change over time - which is fair enough. </p>\n\n<p>My opinions aside, his original article was wrong on a few points, so let's discuss those.</p>\n\n<blockquote>\n  <p>CI has aged poorly due to a combination of legacy support between major versions and a virtually complete lack of leadership.</p>\n</blockquote>\n\n<p>This opinion is based on what? The leadership process was pretty simple. Community proposes changes or pull requests, then a Reactor engineer will review it, offer EllisLab the right of first refusal on Basecamp, then if no objections were raised it would be implemented. </p>\n\n<p>Maybe we could have set up an internal mailing list on Google Group instead of using Basecamp, but EllisLab made the decision and I was fine with that. </p>\n\n<blockquote>\n  <p>If your host doesn't support PHP 5.3 then jump ship as soon as possible.</p>\n</blockquote>\n\n<p>Agreed to a point. There are enough PHP hosts on PHP 5.3 &amp; PHP 5.4 (hell, Crucial Web Hosting are even offering PHP 5.5.0 alpha1) that if your host only has PHP 5.2 then you need to run the fuck away screaming to a hosting company that DOES support it.</p>\n\n<p>But.</p>\n\n<p>I've worked in large companies where the classic \"sysadmins v developers\" war continues to wage into it's 5th decade. The sysadmins don't want to change <em>anything</em> because change causes work, bugs and effort, but on the other team developers want to change <em>everything</em> to make it quicker, more modern, more <a href=\"http://www.mongodb-is-web-scale.com/\">webscale</a>. Trying to get these guys to upgrade from PHP 5.1 to 5.2 when 5.3 was just coming out was insanely difficult, and trying to get from 5.2 to 5.3 is a much bigger ask for many companies. </p>\n\n<p>PHP 5.3 is certainly becoming more available, but there are plenty of times when it just isn't an option. Look at the bigger picture than just \"I am a web developer using a FooHost.com\". <a href=\"http://philsturgeon.co.uk/blog/2012/08/understanding-circumstance\">Read</a>. I personally <a href=\"http://philsturgeon.co.uk/blog/2012/10/bye-bye-php-5-2\">don't need PHP 5.2 for anything</a>, but back in May when Shawn wrote his article the whole PHP scene was very different, so he was even less correct to suggest PHP 5.2 was no longer a big deal.</p>\n\n<blockquote>\n  <p>Since CI doesn't use any of the new features, best-practices suggest that its users should avoid them in order to provide standardised code. It should be easy to find and hire a PHP developer who is versed in CodeIgniter and mismatching a bunch of code-styles is a bad way to approach that goal.</p>\n</blockquote>\n\n<p>I have no idea what mismatched code styles Shawn suggests are being recommended. While CodeIgniter is not PSR anything (and IMO probably never will be), it is consistent to its own <a href=\"http://ellislab.com/codeigniter/user-guide/general/styleguide.html\">Style Guide</a> - which has nothing to do with any PHP version number. This was a weird paragraph.</p>\n\n<blockquote>\n  <p>When it comes to code modularity CodeIgniter is one of the worst performers in the industry. CodeIgniter is not built using any modular design pattern so all solutions are after-thoughts that were developed by members of the community. Out-of-the-box CI supports libraries (basic classes), helpers (global function declaration), and plugins (the same as helpers, these are not used). These are all different versions of the same concept separated by intent.</p>\n</blockquote>\n\n<p>Plugins were removed in 2.0.0 which was released January 2011.</p>\n\n<p>Also by \"members of the community\" you are referring to <a href=\"http://www.johncrepezzi.com/\">John Crepezzi</a> and and <a href=\"http://codefury.net/\">Kenny Katzgrau</a>, two core developers?  </p>\n\n<blockquote>\n  <p>There are some third-party modularity solutions available. The oldest and most powerful of these is Modular Extensions by wiredesignz. It allows the implementation of HMVC modules. </p>\n</blockquote>\n\n<p>Well here the matter of modules and HMVC are being confused. This is a common issue with users of the Modular Extensions HMVC system for CodeIgniter because it implements HMVC <em>and</em> modules. They are not mutually exclusive. HMVC is all about making synchronous requests to another controller via the same routing system as hitting the URL in the address bar. Funnily enough Laravel cannot do this either and requires a <a href=\"http://bundles.laravel.com/bundle/hmvc\">bundle</a> just the same. </p>\n\n<p>As for modules, CodeIgniter has Sparks and Laravel has Bundles.</p>\n\n<blockquote>\n  <p>Sparks can only provide libraries, helpers and config files. This limits its function to a central repository for CodeIgniter libraries.</p>\n</blockquote>\n\n<p>Almost correct, Packages (the technical feature in the CI core that power Sparks) also support Views too. </p>\n\n<p>The only real differences are the lack of namespacing and no routing to controllers in a package, both of which are features I would like to see, but obviously a 5.2 framework cannot support 5.3 features. This was covered in my <a href=\"http://philsturgeon.co.uk/blog/2012/12/5-things-codeigniter-cannot-do-without-a-rewrite\">recent article</a>.</p>\n\n<blockquote>\n  <p>CodeIgniter was conceived by Rick Ellis of EllisLab. It is now community supported to some extent, but still seems to wilt under its creator's needs. CodeIgniter is the platform on which EllisLab's flagship product (ExpressionEngine) is built. In part due to the preoccupation of EllisLab with ExpressionEngine change to the CodeIgniter framework has come infrequently and the magnitude of the changes have been insignificant.</p>\n</blockquote>\n\n<p>Kinda. It's unfortunate, but the CodeIgniter team is obviously not allowed to recode things completely and break EllisLab's income, but at the same time they are only using 2.0.something so there is a disconnect between \"adding features the community needs\" and \"breaking ExpressionEngine\". It could almost be said they no longer care what is happening with it, as the community is driving things themselves. That is fine with me, the community has enough smart people.</p>\n\n<blockquote>\n  <p>CodeIgniter Reactor was released so that the community could make changes and improve the framework. Unfortunately, due to the fact that there is no strong or dedicated leader, improvement to the framework has not occurred.</p>\n</blockquote>\n\n<p>Disagree. There have been more than a few commits to the 3.0 branch. </p>\n\n<p><img src=\"https://sphotos-a.xx.fbcdn.net/hphotos-ash4/292325_10152004911110607_2026055691_n.jpg\" /></p>\n\n<blockquote>\n  <p>One could easily argue that CodeIgniter 2.0 brought only minor usability improvements at the cost of dropping PHP4 support entirely.</p>\n</blockquote>\n\n<p>In 2011 dropping PHP4 support seemed pretty valid, so posing that as a negative is a little odd. But, lets look at the features that 2.0 brought:</p>\n\n<ul>\n<li>Drivers</li>\n<li>Packages</li>\n<li>Cache driver</li>\n<li>download() for FTP (yay one of mine)</li>\n<li>CSRF protection</li>\n<li>$_GET support - remember, query strings were f**ked before this</li>\n</ul>\n\n<p>These are just some of the bigger ones, but there are over 120 items in the changelog for 2.0.0. While it wasn't a world changer, people were pretty happy to have all these new features without having to totally rewrite their applications, something CodeIgniter has always strived to make a priority.</p>\n\n<blockquote>\n  <p>It's no longer the framework for legacy support and it begs the question, \"what was the purpose of dropping that support?\" as users have seemed to have gained little in exchange.</p>\n</blockquote>\n\n<p>Legacy support is not limited to PHP 4. Now that <a href=\"http://php.net/archive/2012.php#id2012-12-20-1\">PHP 5.3 is winding to the end of its lifetime</a>, 5.2 is easily considered legacy. Supporting a few versions behind the \"current\" is what CodeIgniter has always done, and this is why I used it for so long. </p>\n\n<p>Sure some projects can use the latest and greatest versions of PHP, but sometimes you're stuck with that ass-hat client that just demands that you work with 5.2 or 5.1 for whatever bizarre reason. Sometimes you can convince them to upgrade, sometimes you can't. When I can't I like having tools around that work on those versions. That said, the latest version of a CodeIgniter doesn't have to support PHP 4 until the end of time, so it's weird to see Shawn make an issue out of this.</p>\n\n<blockquote>\n  <p>When it comes to community participation only the most daring need apply. CodeIgniter is not well unit tested.</p>\n</blockquote>\n\n<p>Well that's just not true. You can see <a href=\"https://travis-ci.org/EllisLab/CodeIgniter/jobs/3737693\">here</a> the report of PHP 5.3 and MySQL being run on Travis-CI. The code-coverage is up to about 60% of lines covered, and of course when you run MySQL it doesn't run unit-tests on the PostgreSQL and SQLite drivers, so the number is really higher.</p>\n\n<p>It was difficult, but those unit-tests have been around for a year. Once 3.0 is tagged I assume the dev's will implement a \"no test no change\" policy, which would be wonderful. They aren't 100% but his article suggested there were none, when really there are plenty. This is just a fact I would have liked him to recognise.</p>\n\n<blockquote>\n  <p>[UPDATE] I made a few key mistakes while constructing this post. The first is that the title distracts from the actual information in the post. The second mistake was to advocate Laravel in this post as some have assumed political motives, which is simply not true. These mistakes have distracted and confused the issues.</p>\n</blockquote>\n\n<p>This was the crux of my issue. It's impossible to say a framework is dead when it's the 3rd most watched PHP project on GitHub with 3-6 pull requests a day on average. Even insinuating it <em>might</em> be dead is ridiculous.</p>\n\n<p>No. I understand what Shawn was trying to do. I think we both agree (as do many others) that CodeIgniter cannot progress without a rewrite, and that rewrite is unlikely for a number of reasons. That summary is based on many facts and I won't disagree with anybody who says CodeIgniter cannot progress much further. </p>\n\n<h3>\"No Progress != Dead\"</h3>\n\n<p>Dead insinuates being closed right down. Repo removed, or just nothing is ever tagged again. </p>\n\n<p>Where CodeIgniter sits is closer to <a href=\"http://www.smarty.net/\">Smarty</a>. Smarty is still active and has it's last stable release 2 months ago. It just hasn't changed much in years and probably never will. </p>\n\n<p>That is fine for all the companies using Smarty who don't need it to change and the developers who want something new and exciting are all pretty happy that Twig exists.</p>\n\n<p>Smarty now doesn't need to recode itself to become Twig. It doesn't need to break all existing applications just so it can be more like something that has cool new features at the cost of destroying itself. It can just keep on being Smarty, and let Twig do it's thing.</p>\n\n<p>That is what we're seeing happen with Laravel. Laravel 4 is excellent and I use it. It's PSR-2ish, well built, well unit-tested and has a great community, but that doesn't mean we can just make up lies about CodeIgniter being \"dead\". </p>\n\n<h3>Summary</h3>\n\n<p>This is going to make me look like an angry little man, arguing on the internet until EVERYONE agrees with me. It'll be hard to avoid that, but whenever I am asked the same question more than 10 times I answer it with a blog so the 11th time I can just send a link. People kept bringing this up, kept comparing my article to his and it was getting a little tedious. </p>\n\n<p>One difference in my personal standing between when Shawn's article was written and now is that I no longer require PHP 5.2 for anything. That doesn't mean I am suddenly wrong for advocating CodeIgiter then, or wrong for assuming other people still have to use PHP 5.2 now. One developers personal situation does not reflect the community at large and we all need to remember that.</p>\n\n<p>I have often said: when I no longer require PHP 5.2 I will no longer require CodeIgniter. I said that a year ago and when I got my new job I dumped it and started using anything PHP 5.3+ and a whole lot of Composer. This is why I NOW love Laravel 4 (not 3), but this conversation has never been about A or B, it's been about somebody writing incorrectly about A.</p>\n\n<p>Shawn is a good, smart developer, whose articles have helped a lot of people learn about both CodeIgniter and Laravel, but his article has been given far too much credit for a series of points that ranged from \"half-right\" to completely wrong. It was also missing a few important insights which he may not have known about, that I would have liked to see added in as updates to the original article.</p>\n\n<p>So: Yay Laravel, it's ok CodeIgniter, I understand. </p>\n\n<p>Now we can all sing kumbaya at <a href=\"http://conference.laravel.com/\">LaraCon</a>. After the arm-wrestle of course.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "140",
    "created": "2012-12-31 16:25:00",
    "updated": "2012-12-31 17:11:23",
    "created_by": "2",
    "ordering_count": null,
    "title": "Why do some PHP Developers &lt;3 Static APIs?",
    "slug": "why-do-some-php-devs-love-static",
    "category_id": "2",
    "attachment": "",
    "intro": "<div>\n\tThere are two kinds of PHP developers. Those who absolutely love static methods because they are easy to work with and those who think they are spawned by satan to test our devotion to proper programming practises. &nbsp;This article is not intended to explain why static apis are ok, I instead hope to use my experience with a few PHP frameworks - and the power of hindsight - to explain why some developers ignore best practises and use a whole bunch of statics.</div>",
    "body": "There are two kinds of PHP developers. Those who absolutely love static methods because they are easy to work with and those who think they are spawned by satan to test our devotion to proper programming practises. \n\nThis article is not intended to explain why statics are ok, I instead hope to use my experience with a few PHP frameworks - and the power of hindsight - to explain why some developers ignore best practises and use a whole bunch of statics.\n\n## Who loves statics?\n\nMost people who have ever used [CodeIgniter](http://codeigniter.com).\n\nThat means most Kohana developers, a bunch of you Laravel types and people who have moved away from using CodeIgniter to write their own stuff.\n\nWhy you might ask?\n\nCodeIgniter's PHP 4 design obviously came before static methods were added into PHP 5.0. CodeIgniter uses a \"super-global\" instance which allows equal access to all loaded classes, which are all basically assigned to the controller, so they can be used throughout the system. \n\nThis means they can be accessed from any model method using a \\_\\_get() which will look for that requested property using `get_instance()->{$var}`. Before that (obviously \\_\\_get() wasn't around in PHP 4) they used to foreach through CI_Controller properties, then assign them to $this in the model.\n\nIn a library you have to call get\\_instance yourself (because libraries do not force you to inherit any class, so there is no way to hack in a \\_\\_get().\n\n## Gross...\n\nYeah, this is some fairly crazy hackery to give you access to your code. Using statics can achieve the exact same functionality without the hackery.\n\nEven the reasoning for the hackery didn't make much sense. \"Oh good, I can access my session data in my model\". AHHH! Why are you accessing your session data in your model? I will beat you with the bad-practise stick until you move it back out.\n\n## The \"Solution\"\n\nThe Kohana developers were the first to get serious hard-ons for statics, and thought they had fixed this by making changes like the following:\n\n\t$this->input->get('foo');\n\t// becomes\n\tInput::get('foo');\n\nThis was like candy for many CI developers, who outright shunned CodeIgniter for it's PHP 4 global code and moved to Kohana to use its PHP 5 style global code. That's not much of an improvement overall, but at least it did not require multiple secret background hacks to make the logic work. Besides, less characters is always better, \"right\"? \n\n## Why is this bad?\n\nMany PHP developers (especially those well versed in Symfony and Zend) will say \"Dependency Injection, obviously!\" but not many developers in the CodeIgniter community have any real experience with DI is as the framework makes it pretty difficult - so thats not an argument I can use to explain things to those guys.\n\nInstead another argument, one which was very valid for FuelPHP - which while mostly using statics as an interface for instance logic still had issues with statics, especially when HMVC was involved.\n\n_This is all pseudo-code as I haven't used FuelPHP since about 1.1 and things have probably changed, but I know these general issues still exist._\n\n\tclass ControllerA extends Controller\n\t{\t\n\t\tpublic function action_foo()\n\t\t{\n\t\t\techo Input::get('param');\n\t\t}\n\t}\n\t\nFairly standard stuff. This method will output the value of `?bar=` in the method.\n\nWhat happens when we make a HMVC request to this method?\n\n\tclass ControllerB extends Controller\n\t{\t\n\t\tpublic function action_baz()\n\t\t{\n\t\t\techo Input::get('param');\n\t\t\techo \" & \";\n\t\t\techo Request::forge('controllera/foo?param=val1')->execute();\n\t\t}\n\t}\n\t\nIf you call `controllerb/baz` in your browser then you'll see \"val1\" output, but if you call `controllerb/baz?param=override` then you're going to get both calls to the get method return the same value.\n\n## Relevance\n\nGlobal code gives you no relevance, or scope might be a better word. In this example we would actually want to reference:\n\n\t$this->request->input->get('param');\n\nThe Request object would contain a brand-new instance for each request, then input would again be another object instantiated for each request that contained only input data for that specific request. This is exactly how [FuelPHP 2.0 plans to work](http://fuelphp.com/blogs/2012/03/why-the-20-changes), and solves the DI problem as well as the issues for HMVC.\n\n## But that syntax is gross!\n\nYou'll never hear that from a Symfony or Zend developer, but anyone using CodeIgniter will flip their shit at the thought of \"going back to PHP 4\".\n\nReferencing code from $this to many seems like a PHP 4 approach, while static is PHP 5 and this is frustrating to try to get past.\n\n$this should refer to the \"current\" object. Always.\n\nUsing $this to access all global code ever is terrible. Fact.\n\nSo, while $this->request->input->get() might look like it's even longer-form CodeIgniter syntax, really we're just sat in a controller. When the controller is instantiated an instance of new Request is assigned to it, and the constructor of Request gets an instance on Input too.\n\nIf you're sat in a model or other class, then accessing $this->request->input->foo() is not going to work, because $this is not a controller. Instead you would need to pass the request object into the method as an argument instead.\n\n## So… no static ever?\n\nAt this point there are just so many people tied to static love that it's hard to break them away. FuelPHP 2.0 and Laravel 4.0 are trying to cater for this by implementing a \"Facade\" layer of some description. See this writeup of [how the Facade will work in Laravel 4](http://www.thenerdary.net/post/30859565484/laravel-4).\n\nThat means, while you CAN access Input::get('foo') it's actually acting as a facade for instantiated logic in the background. That said, it still has all of the issues of global code, so if folks want to be lazy they can do it that way - then once they get bitten in the ass a few times trying to test their applications they can start to make the switch, without needing to totally use a new framework.\n\nA great video by Taylor Otwell (creator or Laravel 4) outlines why and how you can replace static code with unit-testable instances via his DiC container. \n\n<iframe src=\"http://player.vimeo.com/video/53029232\" width=\"500\" height=\"279\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href=\"http://vimeo.com/53029232\">Laravel 4 - IoC Controller Injection & Unit Testing</a> from <a href=\"http://vimeo.com/userscape\">UserScape</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>\n\nThis hopefully shows off that static usage in Laravel is extremely optional, and while some modern-day frameworks certainly look like Kohana on the first glance they absolutely are not still doing things the same-old way.\n\n## Side/Sad Note\n\nRight now I am converting [PyroCMS](https://www.pyrocms.com/) from CodeIgniter to Laravel, and trying to take it straight from PHP 4 global code to perfect dependency injected code is absolute murder. So, an in-between step is being made to switch from using the CI loader to at least using PHP 5, PSR-2 autoloaded code, with a bunch of statics while we're still in CodeIgniter.\n\nThen, switching from those statics to DiC code as highlight in the video will be made easy when we finally make the switch to Laravel.\n\nGoing from tightly-coupled CodeIgniter code to testable PSR-2 is an absolute mission, but the Pyro team are on it - and it's going to be epic.",
    "created_on": "1356971100",
    "updated_on": "1356973883",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "acbec0b9af888cf614b782c79ff89329",
    "type": "markdown",
    "parsed": "<p>There are two kinds of PHP developers. Those who absolutely love static methods because they are easy to work with and those who think they are spawned by satan to test our devotion to proper programming practises. </p>\n\n<p>This article is not intended to explain why statics are ok, I instead hope to use my experience with a few PHP frameworks - and the power of hindsight - to explain why some developers ignore best practises and use a whole bunch of statics.</p>\n\n<h2>Who loves statics?</h2>\n\n<p>Most people who have ever used <a href=\"http://codeigniter.com\">CodeIgniter</a>.</p>\n\n<p>That means most Kohana developers, a bunch of you Laravel types and people who have moved away from using CodeIgniter to write their own stuff.</p>\n\n<p>Why you might ask?</p>\n\n<p>CodeIgniter's PHP 4 design obviously came before static methods were added into PHP 5.0. CodeIgniter uses a \"super-global\" instance which allows equal access to all loaded classes, which are all basically assigned to the controller, so they can be used throughout the system. </p>\n\n<p>This means they can be accessed from any model method using a &#95;&#95;get() which will look for that requested property using <code>get_instance()-&gt;{$var}</code>. Before that (obviously &#95;&#95;get() wasn't around in PHP 4) they used to foreach through CI_Controller properties, then assign them to $this in the model.</p>\n\n<p>In a library you have to call get&#95;instance yourself (because libraries do not force you to inherit any class, so there is no way to hack in a &#95;&#95;get().</p>\n\n<h2>Gross...</h2>\n\n<p>Yeah, this is some fairly crazy hackery to give you access to your code. Using statics can achieve the exact same functionality without the hackery.</p>\n\n<p>Even the reasoning for the hackery didn't make much sense. \"Oh good, I can access my session data in my model\". AHHH! Why are you accessing your session data in your model? I will beat you with the bad-practise stick until you move it back out.</p>\n\n<h2>The \"Solution\"</h2>\n\n<p>The Kohana developers were the first to get serious hard-ons for statics, and thought they had fixed this by making changes like the following:</p>\n\n<pre><code>$this-&gt;input-&gt;get('foo');\n// becomes\nInput::get('foo');\n</code></pre>\n\n<p>This was like candy for many CI developers, who outright shunned CodeIgniter for it's PHP 4 global code and moved to Kohana to use its PHP 5 style global code. That's not much of an improvement overall, but at least it did not require multiple secret background hacks to make the logic work. Besides, less characters is always better, \"right\"? </p>\n\n<h2>Why is this bad?</h2>\n\n<p>Many PHP developers (especially those well versed in Symfony and Zend) will say \"Dependency Injection, obviously!\" but not many developers in the CodeIgniter community have any real experience with DI is as the framework makes it pretty difficult - so thats not an argument I can use to explain things to those guys.</p>\n\n<p>Instead another argument, one which was very valid for FuelPHP - which while mostly using statics as an interface for instance logic still had issues with statics, especially when HMVC was involved.</p>\n\n<p><em>This is all pseudo-code as I haven't used FuelPHP since about 1.1 and things have probably changed, but I know these general issues still exist.</em></p>\n\n<pre><code>class ControllerA extends Controller\n{   \n    public function action_foo()\n    {\n        echo Input::get('param');\n    }\n}\n</code></pre>\n\n<p>Fairly standard stuff. This method will output the value of <code>?bar=</code> in the method.</p>\n\n<p>What happens when we make a HMVC request to this method?</p>\n\n<pre><code>class ControllerB extends Controller\n{   \n    public function action_baz()\n    {\n        echo Input::get('param');\n        echo \" &amp; \";\n        echo Request::forge('controllera/foo?param=val1')-&gt;execute();\n    }\n}\n</code></pre>\n\n<p>If you call <code>controllerb/baz</code> in your browser then you'll see \"val1\" output, but if you call <code>controllerb/baz?param=override</code> then you're going to get both calls to the get method return the same value.</p>\n\n<h2>Relevance</h2>\n\n<p>Global code gives you no relevance, or scope might be a better word. In this example we would actually want to reference:</p>\n\n<pre><code>$this-&gt;request-&gt;input-&gt;get('param');\n</code></pre>\n\n<p>The Request object would contain a brand-new instance for each request, then input would again be another object instantiated for each request that contained only input data for that specific request. This is exactly how <a href=\"http://fuelphp.com/blogs/2012/03/why-the-20-changes\">FuelPHP 2.0 plans to work</a>, and solves the DI problem as well as the issues for HMVC.</p>\n\n<h2>But that syntax is gross!</h2>\n\n<p>You'll never hear that from a Symfony or Zend developer, but anyone using CodeIgniter will flip their shit at the thought of \"going back to PHP 4\".</p>\n\n<p>Referencing code from $this to many seems like a PHP 4 approach, while static is PHP 5 and this is frustrating to try to get past.</p>\n\n<p>$this should refer to the \"current\" object. Always.</p>\n\n<p>Using $this to access all global code ever is terrible. Fact.</p>\n\n<p>So, while $this->request->input->get() might look like it's even longer-form CodeIgniter syntax, really we're just sat in a controller. When the controller is instantiated an instance of new Request is assigned to it, and the constructor of Request gets an instance on Input too.</p>\n\n<p>If you're sat in a model or other class, then accessing $this->request->input->foo() is not going to work, because $this is not a controller. Instead you would need to pass the request object into the method as an argument instead.</p>\n\n<h2>So… no static ever?</h2>\n\n<p>At this point there are just so many people tied to static love that it's hard to break them away. FuelPHP 2.0 and Laravel 4.0 are trying to cater for this by implementing a \"Facade\" layer of some description. See this writeup of <a href=\"http://www.thenerdary.net/post/30859565484/laravel-4\">how the Facade will work in Laravel 4</a>.</p>\n\n<p>That means, while you CAN access Input::get('foo') it's actually acting as a facade for instantiated logic in the background. That said, it still has all of the issues of global code, so if folks want to be lazy they can do it that way - then once they get bitten in the ass a few times trying to test their applications they can start to make the switch, without needing to totally use a new framework.</p>\n\n<p>A great video by Taylor Otwell (creator or Laravel 4) outlines why and how you can replace static code with unit-testable instances via his DiC container. </p>\n\n<p><iframe src=\"http://player.vimeo.com/video/53029232\" width=\"500\" height=\"279\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href=\"http://vimeo.com/53029232\">Laravel 4 - IoC Controller Injection &amp; Unit Testing</a> from <a href=\"http://vimeo.com/userscape\">UserScape</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p></p>\n\n<p>This hopefully shows off that static usage in Laravel is extremely optional, and while some modern-day frameworks certainly look like Kohana on the first glance they absolutely are not still doing things the same-old way.</p>\n\n<h2>Side/Sad Note</h2>\n\n<p>Right now I am converting <a href=\"https://www.pyrocms.com/\">PyroCMS</a> from CodeIgniter to Laravel, and trying to take it straight from PHP 4 global code to perfect dependency injected code is absolute murder. So, an in-between step is being made to switch from using the CI loader to at least using PHP 5, PSR-2 autoloaded code, with a bunch of statics while we're still in CodeIgniter.</p>\n\n<p>Then, switching from those statics to DiC code as highlight in the video will be made easy when we finally make the switch to Laravel.</p>\n\n<p>Going from tightly-coupled CodeIgniter code to testable PSR-2 is an absolute mission, but the Pyro team are on it - and it's going to be epic.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "141",
    "created": "2013-01-17 04:12:00",
    "updated": "2013-01-17 04:16:32",
    "created_by": "2",
    "ordering_count": null,
    "title": "Building an iTunes feed with Octopress",
    "slug": "building-an-itunes-feed-with-octopress",
    "category_id": "22",
    "attachment": "",
    "intro": "<p class=\"p1\">\n\t&nbsp;</p>\n<p class=\"p1\">\n\tOctopress is a great little CMS for hackers and it works on GitHub pages for free hosting, so a few PHP developers have been known to use it to smash together a basic site even thought it's using Ruby; Boo, hiss, etc.&nbsp;One site I've built with Octopress is for a new podcast I co-host with Ben Edmunds called PHP Town Hall. It needed an iTunes compatible RSS feed, so I built one.</p>",
    "body": "Octopress is a great little CMS for hackers and it works on GitHub pages for free hosting, so a few PHP developers have been known to use it to smash together a basic site even thought it's using Ruby; Boo, hiss, etc.\n\nOne site I've built with Octopress is for a new podcast I co-host with Ben Edmunds called [PHP Town Hall](http://phptownhall.com/). It needed an iTunes compatible RSS feed, so I built one.\n\n### source/itunes.rss\n\n<script src=\"https://gist.github.com/4553431.js?file=itunes.rss\"></script>    \n\nSome of this is obviously hardcoded, but I didn't care enough to change that and I don't see what benefit throwing some config options in would have made.\n\n### plugins/octopress_filters.rb\n\nApple require you to use an RFC 2822 format for the date strings, which as far as I could tell was not built into Jekyll or Octopress. In this octopress_filters.rb file I added the following method towards the bottom:\n\n<script src=\"https://gist.github.com/4553431.js?file=octopress_filters.rb\"></script> \n  \nI've written a [pull request](https://github.com/imathis/octopress/pull/948) to add that in on the off-chance folks think its useful, but I'm fine with the hack. It works, and I'll be updating future versions with Git so I wont randomly loose the change.\n\n### Posts\n\nThe last change to make is to give each of your blog posts some extra parameters. Below is an example of a PHP Town Hall post:\n\n<script src=\"https://gist.github.com/4553431.js?file=All Posts\"></script> \n\nHere we add three new params to an average post, which are:\n\n* **filename** - Will be inserted into the iTunes feed which has a link to an S3 bucket hardcoded, and have .mp3 appended. \n* **length** - The file size in bytes.\n* **summary** - A short summary just for display on the iTunes page.\n\nThat's all you need to do, so run rake preview to take a look at the URL then if it works publish it.",
    "created_on": "1358395920",
    "updated_on": "1358396192",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "0c8f0b77a4154b5211c0d7adc4fabe40",
    "type": "markdown",
    "parsed": "<p>Octopress is a great little CMS for hackers and it works on GitHub pages for free hosting, so a few PHP developers have been known to use it to smash together a basic site even thought it's using Ruby; Boo, hiss, etc.</p>\n\n<p>One site I've built with Octopress is for a new podcast I co-host with Ben Edmunds called <a href=\"http://phptownhall.com/\">PHP Town Hall</a>. It needed an iTunes compatible RSS feed, so I built one.</p>\n\n<h3>source/itunes.rss</h3>\n\n<script src=\"https://gist.github.com/4553431.js?file=itunes.rss\"></script>    \n\n<p>Some of this is obviously hardcoded, but I didn't care enough to change that and I don't see what benefit throwing some config options in would have made.</p>\n\n<h3>plugins/octopress_filters.rb</h3>\n\n<p>Apple require you to use an RFC 2822 format for the date strings, which as far as I could tell was not built into Jekyll or Octopress. In this octopress_filters.rb file I added the following method towards the bottom:</p>\n\n<script src=\"https://gist.github.com/4553431.js?file=octopress_filters.rb\"></script> \n\n<p>I've written a <a href=\"https://github.com/imathis/octopress/pull/948\">pull request</a> to add that in on the off-chance folks think its useful, but I'm fine with the hack. It works, and I'll be updating future versions with Git so I wont randomly loose the change.</p>\n\n<h3>Posts</h3>\n\n<p>The last change to make is to give each of your blog posts some extra parameters. Below is an example of a PHP Town Hall post:</p>\n\n<script src=\"https://gist.github.com/4553431.js?file=All Posts\"></script> \n\n<p>Here we add three new params to an average post, which are:</p>\n\n<ul>\n<li><strong>filename</strong> - Will be inserted into the iTunes feed which has a link to an S3 bucket hardcoded, and have .mp3 appended. </li>\n<li><strong>length</strong> - The file size in bytes.</li>\n<li><strong>summary</strong> - A short summary just for display on the iTunes page.</li>\n</ul>\n\n<p>That's all you need to do, so run rake preview to take a look at the URL then if it works publish it.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "142",
    "created": "2013-01-20 15:16:00",
    "updated": "2013-01-22 16:09:38",
    "created_by": "2",
    "ordering_count": null,
    "title": "The Most Important Conversation Ever",
    "slug": "most-important-conversation-ever",
    "category_id": "2",
    "attachment": "",
    "intro": "<div>\n\tThe world today has a lot of hot topics that need to be discussed. Washington needs to get together to help sort out the debt-ceiling to stop the US economy going down the drain, but the Democrats and the Republicans just cannot even vaguely get the conversation going because they are happy to just oppose each other until the end of time. Gun control is another hot topic, and I'm pretty sure the third-world is still struggling with debt and famine. But no, that stuff doesn't come close to the important conversations happening in comment threads of blogs all over the PHP community. Let's discuss what really matters.</div>",
    "body": "The world today has a lot of hot topics that need to be discussed. Washington needs to get together to help sort out the debt-ceiling to stop the US economy going down the drain, but the Democrats and the Republicans just cannot even vaguely get the conversation going because they are happy to just oppose each other until the end of time.\n\nGun control is another hot topic, and I'm pretty sure the third-world is still struggling with debt and famine.\n\nBut no, that stuff doesn't come close to the important conversations happening in comment threads of blogs all over the PHP community. Let's discuss what \"really\" matters:\n\n## snake_case or camelCase?\n\nDevelopers have been arguing about this since 1834 (or something) and it's not showing any signs of stopping. Most developers start off learning at home, and due to there being no consistent standard in PHP most people learned however the hell they wanted to learn. Their style preference often came from whatever framework, CMS, bullien board, etc they were using, and like me the first system I worked with was Postnuke, which was a fucking mess. Learning following that \"style\" meant I had no style, and when I eventually discovered CodeIgniter my code was much nicer at the time:\n\n\t$this->db->order_by('foo')->get_where('bar', ['baz' => 1])->result();\n\t\nWhile it might have looked better than the mess I was writing before, this code is just flagrantly ignoring the style of PHP's methods in the core, most likely because CodeIgniter was written before PHP had any classes in the core. There are now plenty:\n\n\tArrayAccess::offsetExists();\n\tDateTime::createFromFormat();\n\tDirectoryIterator::getExtension();\n\tException::getMessage();\n\tRecursiveDirectoryITerator::getChildren();\n\tReflectionClass::getInterfaceNames();\n\tSimpleXMLElement::addChild();\n\tXSLTProcessor::importStylesheet();\n\t\nOften I've heard developers say \"PHP doesn't use camelCase for all its classes, what about MySQLi?\". They sit there with a smug little grin on their face, ignoring the fact that MySQLi is an extension which needs to be enabled, but yeah ok it uses underscores:\n\n\tmysqli::get_connection_stats();\n\t\nBut if we're talking about extensions there are plenty of others that do follow PHP's consistent naming conventions, three of which come to mind:\n\n\tPDO::setAttribute();\n\tImagick::adaptiveBlurImage();\n\tZipArchive::getArchiveComment();\n\t\nThe learning towards camelCase is obvious to see. This, along with the fact that many large frameworks like Zend and Symfony also use camelCase, meant it should not have come as a surprise to anyone when the PHP-FIG voted and decided that PSR-1 was going to be camelCase.\n\nI was a big snake\\_case fan for my methods and this was initially a turn-off to me, but do you know how long it took me to condition myself to like camelCase over snake_case? \n\n**A week.**\n\nDo you know I managed to achieve this amazing feat? I just used it, and after a week I didn't care anymore - because the difference is so damn trivial nobody should have cared in the first place.\n\nSo to my old snake\\_case brethren I have a message:\n\nUsing camelCase for your methods is consistent with PHP's core, with PHP's most modern and popular frameworks (including Laravel 4 which used to be snake\\_case but is switching to PSR-1) and testing utilities like PHPUnit. Trying to ignore camelCase and live in the modern world of PHP is going to be difficult, so you can complain or just suck it up and solider on - because either way it's already happened.\n\n$some\\_var is fine, and some\\_func() is fine, but it's absolutely going to be $foo->someMethod() or your code is going to stick out like a sore thumb in any application that tries to use it, which is exactly why PSR-1 suggests the camelCase rule for methods. \n\nIf you're including code into an open-source application from 5 different sources then having 5 different coding styles for those methods would be painful. By everyone settling on camelCase we can use any code from anywhere and have consistency - which to a project like [PyroCMS](http://pyrocms.com/) is important.\n\n### Tabs v Spaces\n\nThis is another big general argument, and seems to be the crux of peoples issues with PSR-2. They manage to completely ignore the positives of all the PSR's (even PSR-0 and PSR-1) and just complain about tabs being taken away from them.\n\nThere are a few points to be made here.\n\n1. You don't have to implement _any_ PSR if you don't want to.  \n1. You can simply implement PSR-1 if you don't like PSR-2.  \n1. It doesn't matter.  \n\nFrom the reactions I've seen around the internet to people posting on various pro or anti PSR blogs I can just imagine developers sitting at their computers crying hitting the space bar over and over again until their thumbs bleed.\n\nWell, I too was a tab guy, but then I ran [PHP CS Fixer](https://github.com/fabpot/PHP-CS-Fixer) on a few projects and told Sublime Text 2 to use 4 spaces instead of a tab - and I haven't noticed the difference since. \n\n## So why does the PHP-FIG even care about style?\n\nThe most important thing to remember is that PSR's are really aimed at not only the projects that are part of the FIG, but for any code released by the FIG too. For example, [PSR-3](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md) (the logging interface) follows PSR-0, PSR-1 and PSR-2. It would be crazy if it didn't, right?\n\nThe FIG is going to be releasing some code over time to allow generic interfaces for common tasks, which means folks writing components don't have to write 10 adapters for HTTP interaction like [PHP-Geocoder](http://geocoder-php.org) here. When the HTTP Client FIG is finished and Guzzle and Buzz have implemented it, the PHP Geocoder developer could simply check for \"instanceof \\PSR\\HTTP\\Client\" instead of having to build out all those extra \"adapter\" classes. PSR-3 is the same idea but for logging.\n\nThis is what PSR-2 was made for. If you implement PSR-2 then wonderful, but if you don't then thats just fine too. \n\n## Summary\n\nAnyway, me saying \"suck it up\" and accept camelCase as part of PSR-1 is all well and good, but why should you? Well, if you want your components to be received by any developer of any modern framework then using PSR-1 is a good idea and PSR-2 might not interest you - so don't use it if you don't want to.\n\nIf your company or open-source project has no style guide, then why not pick PSR-2 instead of picking PEAR or randomly inventing your own?\n\nFighting against an optional standard just because it clashes against your own personal preference is absolutely pointless. I say this for two reasons: the first is that the benefits of PSR-1 to its target audience massively outweigh any negatives that you can think up. Secondly, your (and my) personal preferences are not only pretty much irrelevant, but they are also malleable.\n\nAnd please do remember, that camelCase for methods is in the core of the programming language, so trying to pretend they don't exist whilst continuing to develop PHP is like sticking your head in your sand. Commenting publicly about how much you hate camelCase is like sticking your head in the sand but standing next to a giant neon sign that says \"LOOK, IM STICKING MY HEAD IN THE SAND!\". \n\nLet's grow up, stop shouting about what trivial preference we have about how we write the same damn code and build out a bunch of good quality consistent components that we can use in any framework, instead of rewriting things from scratch for the sake of moving brackets and underscores around.",
    "created_on": "1358694960",
    "updated_on": "1358870978",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "99fbd5b2614786f0e74a61026894bf7d",
    "type": "markdown",
    "parsed": "<p>The world today has a lot of hot topics that need to be discussed. Washington needs to get together to help sort out the debt-ceiling to stop the US economy going down the drain, but the Democrats and the Republicans just cannot even vaguely get the conversation going because they are happy to just oppose each other until the end of time.</p>\n\n<p>Gun control is another hot topic, and I'm pretty sure the third-world is still struggling with debt and famine.</p>\n\n<p>But no, that stuff doesn't come close to the important conversations happening in comment threads of blogs all over the PHP community. Let's discuss what \"really\" matters:</p>\n\n<h2>snake_case or camelCase?</h2>\n\n<p>Developers have been arguing about this since 1834 (or something) and it's not showing any signs of stopping. Most developers start off learning at home, and due to there being no consistent standard in PHP most people learned however the hell they wanted to learn. Their style preference often came from whatever framework, CMS, bullien board, etc they were using, and like me the first system I worked with was Postnuke, which was a fucking mess. Learning following that \"style\" meant I had no style, and when I eventually discovered CodeIgniter my code was much nicer at the time:</p>\n\n<pre><code>$this-&gt;db-&gt;order_by('foo')-&gt;get_where('bar', ['baz' =&gt; 1])-&gt;result();\n</code></pre>\n\n<p>While it might have looked better than the mess I was writing before, this code is just flagrantly ignoring the style of PHP's methods in the core, most likely because CodeIgniter was written before PHP had any classes in the core. There are now plenty:</p>\n\n<pre><code>ArrayAccess::offsetExists();\nDateTime::createFromFormat();\nDirectoryIterator::getExtension();\nException::getMessage();\nRecursiveDirectoryITerator::getChildren();\nReflectionClass::getInterfaceNames();\nSimpleXMLElement::addChild();\nXSLTProcessor::importStylesheet();\n</code></pre>\n\n<p>Often I've heard developers say \"PHP doesn't use camelCase for all its classes, what about MySQLi?\". They sit there with a smug little grin on their face, ignoring the fact that MySQLi is an extension which needs to be enabled, but yeah ok it uses underscores:</p>\n\n<pre><code>mysqli::get_connection_stats();\n</code></pre>\n\n<p>But if we're talking about extensions there are plenty of others that do follow PHP's consistent naming conventions, three of which come to mind:</p>\n\n<pre><code>PDO::setAttribute();\nImagick::adaptiveBlurImage();\nZipArchive::getArchiveComment();\n</code></pre>\n\n<p>The learning towards camelCase is obvious to see. This, along with the fact that many large frameworks like Zend and Symfony also use camelCase, meant it should not have come as a surprise to anyone when the PHP-FIG voted and decided that PSR-1 was going to be camelCase.</p>\n\n<p>I was a big snake&#95;case fan for my methods and this was initially a turn-off to me, but do you know how long it took me to condition myself to like camelCase over snake_case? </p>\n\n<p><strong>A week.</strong></p>\n\n<p>Do you know I managed to achieve this amazing feat? I just used it, and after a week I didn't care anymore - because the difference is so damn trivial nobody should have cared in the first place.</p>\n\n<p>So to my old snake&#95;case brethren I have a message:</p>\n\n<p>Using camelCase for your methods is consistent with PHP's core, with PHP's most modern and popular frameworks (including Laravel 4 which used to be snake&#95;case but is switching to PSR-1) and testing utilities like PHPUnit. Trying to ignore camelCase and live in the modern world of PHP is going to be difficult, so you can complain or just suck it up and solider on - because either way it's already happened.</p>\n\n<p>$some&#95;var is fine, and some&#95;func() is fine, but it's absolutely going to be $foo->someMethod() or your code is going to stick out like a sore thumb in any application that tries to use it, which is exactly why PSR-1 suggests the camelCase rule for methods. </p>\n\n<p>If you're including code into an open-source application from 5 different sources then having 5 different coding styles for those methods would be painful. By everyone settling on camelCase we can use any code from anywhere and have consistency - which to a project like <a href=\"http://pyrocms.com/\">PyroCMS</a> is important.</p>\n\n<h3>Tabs v Spaces</h3>\n\n<p>This is another big general argument, and seems to be the crux of peoples issues with PSR-2. They manage to completely ignore the positives of all the PSR's (even PSR-0 and PSR-1) and just complain about tabs being taken away from them.</p>\n\n<p>There are a few points to be made here.</p>\n\n<ol>\n<li>You don't have to implement <em>any</em> PSR if you don't want to.  </li>\n<li>You can simply implement PSR-1 if you don't like PSR-2.  </li>\n<li>It doesn't matter.  </li>\n</ol>\n\n<p>From the reactions I've seen around the internet to people posting on various pro or anti PSR blogs I can just imagine developers sitting at their computers crying hitting the space bar over and over again until their thumbs bleed.</p>\n\n<p>Well, I too was a tab guy, but then I ran <a href=\"https://github.com/fabpot/PHP-CS-Fixer\">PHP CS Fixer</a> on a few projects and told Sublime Text 2 to use 4 spaces instead of a tab - and I haven't noticed the difference since. </p>\n\n<h2>So why does the PHP-FIG even care about style?</h2>\n\n<p>The most important thing to remember is that PSR's are really aimed at not only the projects that are part of the FIG, but for any code released by the FIG too. For example, <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md\">PSR-3</a> (the logging interface) follows PSR-0, PSR-1 and PSR-2. It would be crazy if it didn't, right?</p>\n\n<p>The FIG is going to be releasing some code over time to allow generic interfaces for common tasks, which means folks writing components don't have to write 10 adapters for HTTP interaction like <a href=\"http://geocoder-php.org\">PHP-Geocoder</a> here. When the HTTP Client FIG is finished and Guzzle and Buzz have implemented it, the PHP Geocoder developer could simply check for \"instanceof \\PSR\\HTTP\\Client\" instead of having to build out all those extra \"adapter\" classes. PSR-3 is the same idea but for logging.</p>\n\n<p>This is what PSR-2 was made for. If you implement PSR-2 then wonderful, but if you don't then thats just fine too. </p>\n\n<h2>Summary</h2>\n\n<p>Anyway, me saying \"suck it up\" and accept camelCase as part of PSR-1 is all well and good, but why should you? Well, if you want your components to be received by any developer of any modern framework then using PSR-1 is a good idea and PSR-2 might not interest you - so don't use it if you don't want to.</p>\n\n<p>If your company or open-source project has no style guide, then why not pick PSR-2 instead of picking PEAR or randomly inventing your own?</p>\n\n<p>Fighting against an optional standard just because it clashes against your own personal preference is absolutely pointless. I say this for two reasons: the first is that the benefits of PSR-1 to its target audience massively outweigh any negatives that you can think up. Secondly, your (and my) personal preferences are not only pretty much irrelevant, but they are also malleable.</p>\n\n<p>And please do remember, that camelCase for methods is in the core of the programming language, so trying to pretend they don't exist whilst continuing to develop PHP is like sticking your head in your sand. Commenting publicly about how much you hate camelCase is like sticking your head in the sand but standing next to a giant neon sign that says \"LOOK, IM STICKING MY HEAD IN THE SAND!\". </p>\n\n<p>Let's grow up, stop shouting about what trivial preference we have about how we write the same damn code and build out a bunch of good quality consistent components that we can use in any framework, instead of rewriting things from scratch for the sake of moving brackets and underscores around.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "143",
    "created": "2013-01-25 13:04:00",
    "updated": "2013-01-25 13:04:00",
    "created_by": "2",
    "ordering_count": null,
    "title": "Goals for 2013",
    "slug": "goals-for-2013",
    "category_id": "0",
    "attachment": "",
    "intro": "It&#39;s that time of year again. Well, it&#39;s nearly the end of January but building my list of random stupid things to do this year took me a little while to think up.&nbsp;",
    "body": "Back in 2010 I set myself a [list of goals](http://philsturgeon.co.uk/goals/2010) and put them online in the hope that it would be some extra motivation. I actually [did pretty well](/blog/2010/12/2010-for-phil-sturgeon-year-in-review) I believe, and while a few of them didn't happen I got around to most of them since.\n\nSince then I've focused on other things. My goals for 2011 were mainly \"[Backpack around America and Canada](http://philsturgeon.co.uk/blog/2011/08/nomadic-web-development) without getting killed or arrested (both nearly happened), then try to not be homeless when I get back to the UK\" then 2012 was \"Work for as many people as possible, then sort out a visa and get my ass to the USA\". \n\nThat was good but now it's time to go again!\n\n### Personal\n\n* Go to Thailand\n* Go to New Zealand\n* Go to Mexico\n\n### Development\n\n* <s>Build an EmberJS app</s>\n* Build an iPhone app\n\n### Career\n\n* <s>Write a book</s> [Catapult into PyroCMS](https://efendibooks.com/books/catapult-into-pyrocms)\n* <s>Give a talk not on PHP / PHP Frameworks / PyroCMS / Bla</s> [Become Master of Your Own Universe](http://lanyrd.com/2013/dibi2013/scqxfx/)\n\n### Fitness / Outdoors\n\n* <s>Skydive</s>\n* Complete Double-Black Diamond Skiing\n* Complete Black Diamond Snowboarding\n* <s>Cycle an insanely long way</s> Done a few of these. Boston to New York was certainly the furthest. [Day 1](http://www.strava.com/activities/85322617) [Day 2](http://www.strava.com/activities/85569382) [Day 3](http://www.strava.com/activities/85887673)\n* Hike through the Grand Canyon\n* <s>QUIT SMOKING FOR GODS SAKE</s> 6 months with only occasional Friday night failure every two weeks or so. I'll take it.\n\nMany of these are not so time consuming or life changing. Last time \"Read 10 books\" was a mission in between all the freelance and everything else, but now as Lead Engineer of [Kapture](http://kaptu.re) most of my time is taken up, so I have picked things I feel I can achieve at work within our deadlines, and on weekends or holidays.\n\nMaybe nobody cares, but this is helpful for me.",
    "created_on": "1359119040",
    "updated_on": "1359119040",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "37cee2ed8d1baa950486b7c073d8226c",
    "type": "markdown",
    "parsed": "<p>Back in 2010 I set myself a <a href=\"http://philsturgeon.co.uk/goals/2010\">list of goals</a> and put them online in the hope that it would be some extra motivation. I actually <a href=\"/blog/2010/12/2010-for-phil-sturgeon-year-in-review\">did pretty well</a> I believe, and while a few of them didn't happen I got around to most of them since.</p>\n\n<p>Since then I've focused on other things. My goals for 2011 were mainly \"<a href=\"http://philsturgeon.co.uk/blog/2011/08/nomadic-web-development\">Backpack around America and Canada</a> without getting killed or arrested (both nearly happened), then try to not be homeless when I get back to the UK\" then 2012 was \"Work for as many people as possible, then sort out a visa and get my ass to the USA\". </p>\n\n<p>That was good but now it's time to go again!</p>\n\n<h3>Personal</h3>\n\n<ul>\n<li>Go to Thailand</li>\n<li>Go to New Zealand</li>\n<li>Go to Mexico</li>\n</ul>\n\n<h3>Development</h3>\n\n<ul>\n<li><s>Build an EmberJS app</s></li>\n<li>Build an iPhone app</li>\n</ul>\n\n<h3>Career</h3>\n\n<ul>\n<li><s>Write a book</s> <a href=\"https://efendibooks.com/books/catapult-into-pyrocms\">Catapult into PyroCMS</a></li>\n<li><s>Give a talk not on PHP / PHP Frameworks / PyroCMS / Bla</s> <a href=\"http://lanyrd.com/2013/dibi2013/scqxfx/\">Become Master of Your Own Universe</a></li>\n</ul>\n\n<h3>Fitness / Outdoors</h3>\n\n<ul>\n<li><s>Skydive</s></li>\n<li>Complete Double-Black Diamond Skiing</li>\n<li>Complete Black Diamond Snowboarding</li>\n<li><s>Cycle an insanely long way</s> Done a few of these. Boston to New York was certainly the furthest. <a href=\"http://www.strava.com/activities/85322617\">Day 1</a> <a href=\"http://www.strava.com/activities/85569382\">Day 2</a> <a href=\"http://www.strava.com/activities/85887673\">Day 3</a></li>\n<li>Hike through the Grand Canyon</li>\n<li><s>QUIT SMOKING FOR GODS SAKE</s> 6 months with only occasional Friday night failure every two weeks or so. I'll take it.</li>\n</ul>\n\n<p>Many of these are not so time consuming or life changing. Last time \"Read 10 books\" was a mission in between all the freelance and everything else, but now as Lead Engineer of <a href=\"http://kaptu.re\">Kapture</a> most of my time is taken up, so I have picked things I feel I can achieve at work within our deadlines, and on weekends or holidays.</p>\n\n<p>Maybe nobody cares, but this is helpful for me.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "144",
    "created": "2013-01-26 15:59:00",
    "updated": "2013-01-26 15:59:00",
    "created_by": "2",
    "ordering_count": null,
    "title": "PHP 6: Pissing in the Wind",
    "slug": "php-6-pissing-in-the-wind",
    "category_id": "2",
    "attachment": "",
    "intro": "<span style=\"font-size: 13px; \">This article is completely pointless, im just saying what everyone is thinking - just so we have a record of it.&nbsp;</span>PHP is well known for having an inconsistent API when it comes to PHP functions. Anyone with an anti-PHP point of view will use this as one of their top 3 arguments for why PHP sucks, while most PHP developers will point out that they don&#39;t really care. This is mostly because we&#39;re either used to it, have a god-like photographic memory or our IDE handles auto-complete so it&#39;s a moot point. For me I&#39;m not too fussed because I spend more time trying Googling words like recepie (see, I got that wrong) recipe than I ever spend looking up PHP functions. This is how we could fix the situation - but we never will.",
    "body": "PHP is well known for having an inconsistent API when it comes to PHP functions. Anyone with an anti-PHP point of view will use this as one of their top 3 arguments for why PHP sucks, while most PHP developers will point out that they don't really care. This is mostly because we're either used to it, have a god-like photographic memory or our IDE handles auto-complete so it's a moot point. For me I'm not too fussed because I spend more time trying Googling words like recepie (see, I got that wrong) recipe than I ever spend looking up PHP functions.\n\nAnother big thing that anti-PHP folks laugh about is the lack of scalar objects, so instead of $string->length() you have to do strlen($string).\n\nANOTHER thing that people often joke about is how PHP 6.0 just never happened, because the team were trying to bake in Unicode support but just came across so many issues that it never happened.\n\n## The Obvious Answer\n\nThere is a single way to fix all of these issues in a single blow. I'm by no means the first person to think of it, but it blows my mind that it's not being worked on. \n\nPHP 5.x\n\n{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // Outputs: 6\necho $foo->length(); // PHP Fatal error:  Call to a member function length() on a non-object\n{{ /prism:syntax }}\n\nPHP 6.0\n\n{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // Outputs: 6\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}\n\nPHP 6.1\n\n{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // Outputs: 6 /w a PHP Deprecated: use String->length()\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}\n\nPHP 6.2\n\n{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // PHP Fatal error:  Call to undefined function strlen()\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}\n\n## Unicode Support\n\nPHP 5.x\n\n{{ prism:syntax lang=\"php\" }}\n$foo = u\"string\"; // AHH WHAT IS THIS?\necho strlen($foo); // PHP Warning:  strlen() expects parameter 1 to be string, MADNESS given    \necho $foo->length(); // PHP Fatal error:  Call to a member function length() on a non-object\n{{ /prism:syntax }}\n\nPHP 6.0\n\n{{ prism:syntax lang=\"php\" }}\n$foo = u\"string\";\necho strlen($foo); // Warning: strlen() expects parameter 1 to be String, UnicodeString given\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}\n\nIf you want to get super detailed, people concerned about UTF-8 or UTF-16 support could even do:\n\n{{ prism:syntax lang=\"php\" }}\n$foo = u\"string\";\n$foo = u16\"string\";\n{{ /prism:syntax }}\n\nThis shows that the language would default to UTF-8, because thats what most people default to when they give a shit about Unicode support, but gives extra super-powers to those who need UTF-16.\n\n## So why isn't this happening?\n\nAs I see there are two major reasons. One is: who is going to do it? \n\nOne core contributor [Nikita Popov](http://nikic.github.com/) who shares this view is currently working on a [proof of concept](https://github.com/nikic/scalar_objects). We've never spoke and I'm not claiming anything, he just seems to share a common opinion, that this is an obvious next step for PHP which avoids breaking any BC while standardising function names in one fell-swoop.\n\nWell, if a core PHP contributor is working on it, that means its happening right? \n\nNope, which is my second point. Let's put this into context.\n\n### PHP Property Accessors Syntax\n\nThis was an absolutely wonderful [RFC proposed](https://wiki.php.net/rfc/propertygetsetsyntax-v1.2#voting) to PHP which by the reactions of many PHP developers looked like a shoe-in. \n\nIt gave us the exact same logical getter setter controls that [C#](http://forums.asp.net/t/1191140.aspx) offers, and which Ruby has something [pretty similar](http://www.rubyist.net/~slagell/ruby/accessors.html). I was excited. Lots of people were excited. Then it got blammed by a 33 for and 21 against vote. \n\nSadly its not a majority wins situation, it had to get a 2/3rds majority. So we got fucked. No getter setter syntax for us.\n\n### Class Name Resolution via \"class\" Keyword\n\nThis is a handy little addition to the language that means you can take any variable and append $foo::class to get a fully resolved class name. This means when you're trying to use call\\_user\\_func on a method of a class you don't need to piss around with strings or get_class(), which is lovely.\n\nAs this is only a little feature only [a few votes](https://wiki.php.net/rfc/class_name_scalars#votes) were needed. I recognise these names as active bloggers, contributors, or people otherwise known as active in the community.\n\n## The Little Point\n\nWhen it's a little feature, whoever is interested in getting it voted in - as long as a reasonable number of active PHP guys agree - it's going to get in. That means a trivial/small feature always has a good shot as long as it makes sense.\n\nBut, if you even try to change any sort of syntax on a large scale you need to get a majority. Sadly it seems most of this majority are not the sort of people who vote unless they're asked to vote. It almost seems like they don't really care unless they are asked to care, and when they are asked the response is more often that not \"nay\". \n\nReally, look up the votes for recent RFC's and see who said \"nay\" on Getter/Setter, they nay vote a lot.\n\n## The Bigger Point\n\nI know in my heart that democracy is mostly a good idea, in the same way that communism started off as a really good idea, but when you have a large number of people making decisions that don't really give a fuck then the people really are not being represented as they should. How often has Rasmus said he prefers proceedural code over OOP? Of course plenty of people are voting against drastic improvements to the OOP functionality of PHP, because the core devs [can't even decide](http://news.php.net/php.internals/64770) if PHP is going to be OOP, functional, or whatever!\n\n## Another Point\n\nPeople not being able to get on the same page is one thing, but I heard a reason from a \"nay\" voter who I'm going to leave nameless (mainly because I have forgotten his name) said that merging the getter/setter syntax would require too much maintenance. Right, doing stuff means doing stuff and that is an unfortunate fact of life, but if you don't like doing stuff: quit.\n\nI quit the CodeIgniter development team because I was no longer doing client work with CodeIgniter and had no interest in helping CodeIgniter recode itself to put it into a vaguely competitive position against modern frameworks.\n\nNow, while we don't need PHP to \"win\", it would be nice if we could get some sort of progress on the problems that have obviously plagued the language for the last decade.\n\nThe suggestion I'm making (and that plenty of others have made) are not particularly complex. They require some recoding of core functions, but for developers it would not require a recode of their applications for the foreseeable future.\n\nBasically put, these suggestions won't break shit. Legacy developers can stay on 5.x from now until the end of time, and they could even upgrade to 6.0 for forever too. If they upgrade to 6.1 they'll start getting deprecated errors (which they can turn off) and when they get to 6.2 maybe they'll have problems - but 6.2 will probably drop in about 2020 so who even gives a damn?\n\n## Summary\n\nI'd love to see this change happen. It's going to take effort, and I'd love to be able to help, but I suck with C (beyond making some robot fighting game in college) so I'm out of the picture. Seriously, while im a [Pull Request or STFU](https://spaz.spreadshirt.com/pull-request-or-stfu-black-A6928817) kinda guy the last person that should be doing this sort of change is me.\n\nPeople who give a shit (like Nikita Popov) need to be working on this, and people who think its a good idea need to get on board. People with no opinion should have a little look at how the majority of PHP developers are using PHP these days. \n\nIt's not just a language for noobs, juniors, idiots, designers who like if statements and other bottom dwellers to pedal shit. It's a serious language with known defects, used besides that fact to make some impressive systems (and WordPress). PHP runs almost 80% of the internet and as such it has become a haven for people who want to spread their code to as many users as possible, and is not just the shit-storm so many people pretend it is. PHP 4 was a piece of shit, PHP 5.1 was ok, PHP 5.2 was reasonable, by 5.3 it got awesome and 5.4 and 5.5 are adding to it so hard. \n\nLet's keep making it brilliant, not so PHP can win some imaginary competition, but so the people who make distributed applications can continue to not only achieve the objective of \"Getting onto as many servers as possible\" but also \"not be forced to write retarded code because that is all the language is capable of doing\". There is a middle-ground, and this one change would handle so many of the problems that PHP suffers from.\n\n**Making changes to this language should not be blocked just because a quiet minority of the core team don't like the idea of being asked to do stuff.**",
    "created_on": "1359215940",
    "updated_on": "1359215940",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "c24c0552310448ac7b9ea0a23723a3e3",
    "type": "markdown",
    "parsed": "<p>PHP is well known for having an inconsistent API when it comes to PHP functions. Anyone with an anti-PHP point of view will use this as one of their top 3 arguments for why PHP sucks, while most PHP developers will point out that they don't really care. This is mostly because we're either used to it, have a god-like photographic memory or our IDE handles auto-complete so it's a moot point. For me I'm not too fussed because I spend more time trying Googling words like recepie (see, I got that wrong) recipe than I ever spend looking up PHP functions.</p>\n\n<p>Another big thing that anti-PHP folks laugh about is the lack of scalar objects, so instead of $string->length() you have to do strlen($string).</p>\n\n<p>ANOTHER thing that people often joke about is how PHP 6.0 just never happened, because the team were trying to bake in Unicode support but just came across so many issues that it never happened.</p>\n\n<h2>The Obvious Answer</h2>\n\n<p>There is a single way to fix all of these issues in a single blow. I'm by no means the first person to think of it, but it blows my mind that it's not being worked on. </p>\n\n<p>PHP 5.x</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // Outputs: 6\necho $foo->length(); // PHP Fatal error:  Call to a member function length() on a non-object\n{{ /prism:syntax }}</p>\n\n<p>PHP 6.0</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // Outputs: 6\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}</p>\n\n<p>PHP 6.1</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // Outputs: 6 /w a PHP Deprecated: use String->length()\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}</p>\n\n<p>PHP 6.2</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$foo = \"string\";\necho strlen($foo); // PHP Fatal error:  Call to undefined function strlen()\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}</p>\n\n<h2>Unicode Support</h2>\n\n<p>PHP 5.x</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$foo = u\"string\"; // AHH WHAT IS THIS?\necho strlen($foo); // PHP Warning:  strlen() expects parameter 1 to be string, MADNESS given<br />\necho $foo->length(); // PHP Fatal error:  Call to a member function length() on a non-object\n{{ /prism:syntax }}</p>\n\n<p>PHP 6.0</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$foo = u\"string\";\necho strlen($foo); // Warning: strlen() expects parameter 1 to be String, UnicodeString given\necho $foo->length(); // Outputs: 6\n{{ /prism:syntax }}</p>\n\n<p>If you want to get super detailed, people concerned about UTF-8 or UTF-16 support could even do:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$foo = u\"string\";\n$foo = u16\"string\";\n{{ /prism:syntax }}</p>\n\n<p>This shows that the language would default to UTF-8, because thats what most people default to when they give a shit about Unicode support, but gives extra super-powers to those who need UTF-16.</p>\n\n<h2>So why isn't this happening?</h2>\n\n<p>As I see there are two major reasons. One is: who is going to do it? </p>\n\n<p>One core contributor <a href=\"http://nikic.github.com/\">Nikita Popov</a> who shares this view is currently working on a <a href=\"https://github.com/nikic/scalar_objects\">proof of concept</a>. We've never spoke and I'm not claiming anything, he just seems to share a common opinion, that this is an obvious next step for PHP which avoids breaking any BC while standardising function names in one fell-swoop.</p>\n\n<p>Well, if a core PHP contributor is working on it, that means its happening right? </p>\n\n<p>Nope, which is my second point. Let's put this into context.</p>\n\n<h3>PHP Property Accessors Syntax</h3>\n\n<p>This was an absolutely wonderful <a href=\"https://wiki.php.net/rfc/propertygetsetsyntax-v1.2#voting\">RFC proposed</a> to PHP which by the reactions of many PHP developers looked like a shoe-in. </p>\n\n<p>It gave us the exact same logical getter setter controls that <a href=\"http://forums.asp.net/t/1191140.aspx\">C#</a> offers, and which Ruby has something <a href=\"http://www.rubyist.net/~slagell/ruby/accessors.html\">pretty similar</a>. I was excited. Lots of people were excited. Then it got blammed by a 33 for and 21 against vote. </p>\n\n<p>Sadly its not a majority wins situation, it had to get a 2/3rds majority. So we got fucked. No getter setter syntax for us.</p>\n\n<h3>Class Name Resolution via \"class\" Keyword</h3>\n\n<p>This is a handy little addition to the language that means you can take any variable and append $foo::class to get a fully resolved class name. This means when you're trying to use call&#95;user&#95;func on a method of a class you don't need to piss around with strings or get_class(), which is lovely.</p>\n\n<p>As this is only a little feature only <a href=\"https://wiki.php.net/rfc/class_name_scalars#votes\">a few votes</a> were needed. I recognise these names as active bloggers, contributors, or people otherwise known as active in the community.</p>\n\n<h2>The Little Point</h2>\n\n<p>When it's a little feature, whoever is interested in getting it voted in - as long as a reasonable number of active PHP guys agree - it's going to get in. That means a trivial/small feature always has a good shot as long as it makes sense.</p>\n\n<p>But, if you even try to change any sort of syntax on a large scale you need to get a majority. Sadly it seems most of this majority are not the sort of people who vote unless they're asked to vote. It almost seems like they don't really care unless they are asked to care, and when they are asked the response is more often that not \"nay\". </p>\n\n<p>Really, look up the votes for recent RFC's and see who said \"nay\" on Getter/Setter, they nay vote a lot.</p>\n\n<h2>The Bigger Point</h2>\n\n<p>I know in my heart that democracy is mostly a good idea, in the same way that communism started off as a really good idea, but when you have a large number of people making decisions that don't really give a fuck then the people really are not being represented as they should. How often has Rasmus said he prefers proceedural code over OOP? Of course plenty of people are voting against drastic improvements to the OOP functionality of PHP, because the core devs <a href=\"http://news.php.net/php.internals/64770\">can't even decide</a> if PHP is going to be OOP, functional, or whatever!</p>\n\n<h2>Another Point</h2>\n\n<p>People not being able to get on the same page is one thing, but I heard a reason from a \"nay\" voter who I'm going to leave nameless (mainly because I have forgotten his name) said that merging the getter/setter syntax would require too much maintenance. Right, doing stuff means doing stuff and that is an unfortunate fact of life, but if you don't like doing stuff: quit.</p>\n\n<p>I quit the CodeIgniter development team because I was no longer doing client work with CodeIgniter and had no interest in helping CodeIgniter recode itself to put it into a vaguely competitive position against modern frameworks.</p>\n\n<p>Now, while we don't need PHP to \"win\", it would be nice if we could get some sort of progress on the problems that have obviously plagued the language for the last decade.</p>\n\n<p>The suggestion I'm making (and that plenty of others have made) are not particularly complex. They require some recoding of core functions, but for developers it would not require a recode of their applications for the foreseeable future.</p>\n\n<p>Basically put, these suggestions won't break shit. Legacy developers can stay on 5.x from now until the end of time, and they could even upgrade to 6.0 for forever too. If they upgrade to 6.1 they'll start getting deprecated errors (which they can turn off) and when they get to 6.2 maybe they'll have problems - but 6.2 will probably drop in about 2020 so who even gives a damn?</p>\n\n<h2>Summary</h2>\n\n<p>I'd love to see this change happen. It's going to take effort, and I'd love to be able to help, but I suck with C (beyond making some robot fighting game in college) so I'm out of the picture. Seriously, while im a <a href=\"https://spaz.spreadshirt.com/pull-request-or-stfu-black-A6928817\">Pull Request or STFU</a> kinda guy the last person that should be doing this sort of change is me.</p>\n\n<p>People who give a shit (like Nikita Popov) need to be working on this, and people who think its a good idea need to get on board. People with no opinion should have a little look at how the majority of PHP developers are using PHP these days. </p>\n\n<p>It's not just a language for noobs, juniors, idiots, designers who like if statements and other bottom dwellers to pedal shit. It's a serious language with known defects, used besides that fact to make some impressive systems (and WordPress). PHP runs almost 80% of the internet and as such it has become a haven for people who want to spread their code to as many users as possible, and is not just the shit-storm so many people pretend it is. PHP 4 was a piece of shit, PHP 5.1 was ok, PHP 5.2 was reasonable, by 5.3 it got awesome and 5.4 and 5.5 are adding to it so hard. </p>\n\n<p>Let's keep making it brilliant, not so PHP can win some imaginary competition, but so the people who make distributed applications can continue to not only achieve the objective of \"Getting onto as many servers as possible\" but also \"not be forced to write retarded code because that is all the language is capable of doing\". There is a middle-ground, and this one change would handle so many of the problems that PHP suffers from.</p>\n\n<p><strong>Making changes to this language should not be blocked just because a quiet minority of the core team don't like the idea of being asked to do stuff.</strong></p>\n",
    "preview_hash": ""
  },
  {
    "id": "145",
    "created": "2013-02-12 01:34:00",
    "updated": "2013-02-12 01:53:40",
    "created_by": "2",
    "ordering_count": null,
    "title": "Catapult into PyroCMS",
    "slug": "catapult-into-pyrocms",
    "category_id": "11",
    "attachment": "",
    "intro": "It&#39;s been a little while in the making, but my first book is out: <em>Catapult into PyroCMS</em>. This is being released as an eBook only at this point, but who knows what the future might hold.",
    "body": "It's been a little while in the making, but my first book is out: _[Catapult into PyroCMS](https://efendibooks.com/books/catapult-into-pyrocms)_. This is being released as an eBook only at this point, but who knows what the future might hold.\n\n<a href=\"https://efendibooks.com/books/catapult-into-pyrocms\" style=\"border:0\"><img src=\"https://efendibooks.com/images/page_expose/catapult-into-pyrocms.png\" alt=\"Catapult into PyroCMS Preview\" style=\"border:0\" /></a>\n\nThis is not just a rewritten user guide, it's an attempt to help people gain a full understanding of the core concepts of PyroCMS with as little trouble as possible. PyroCMS is not some jargon-crazed WTF-fest, but any system is going to have terms to learn, and to be fair \"Widgets\" might not immediately make sense to anybody.\n\nYou'll learn how to build themes, plugins, widgets and even the basics of a module, but of course I could write a LOT about building a whole module - there are a lot of different tools and libraries - so that is going to go into a different book. This book is:\n\n<ul>\n    <li>\n        Chapter 1 - Core Concepts\n        <ul>\n            <li>Themes</li>\n            <li>Pages</li>\n            <li>Keywords</li>\n            <li>Streams</li>\n            <li>Addons</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 2 - Themes\n        <ul>\n            <li>Getting Started</li>\n            <li>Assets</li>\n            <li>Modular View Overloading</li>\n            <li>Widget Areas</li>\n            <li>Routes and Routing</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 3 - Managing Your Content\n        <ul>\n            <li>Managing Pages</li>\n            <li>Blogs</li>\n            <li>Navigation</li>\n            <li>Caching</li>\n            <li>Search Engine Optimisation</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 4 - Streams\n        <ul>\n            <li>Fields</li>\n            <li>API</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 5 - Addons\n        <ul>\n            <li>Writing Addons</li>\n            <li>Modules</li>\n            <li>Plugins</li>\n            <li>Widgets</li>\n        </ul>\n    </li>\n</ul>\n\nThe timing of this launch was pretty good but not perfect. PyroCMS 2.2.0 should have been out before this book was completed, but PyroCMS 2.2.0-rc1 is out so that's close enough. If you want to play with PyroCMS 2.2.0-rc1 (page types and custom blog fields really does make it epic) then you can either [hop over to GitHub](https://github.com/pyrocms/pyrocms/tags) or if you own a copy of PyroCMS Professional then the 2.2.0-rc1 download is available from \"My Downloads\".\n\nI look forward to writing another book on PyroCMS, especially once the 2.3.0 branch has died down a bit. Converting the old-fashioned CodeIgniter Query Builder syntax over to using PSR-1 autoloaded Eloquent models is an amazingly rewarding task. Several people have been [helping out recently](https://www.pyrocms.com/blog/2013/02/surrounded-by-super-heros), so if you're interested pop on GitHub and pitch in.\n\nOtherwise [buy a copy of my book](https://efendibooks.com/books/catapult-into-pyrocms), and help me buy my boat. Seriously, I want a fucking boat already.",
    "created_on": "1360632840",
    "updated_on": "1360634020",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "0c67a413d94d0baa155d55c3197394d0",
    "type": "markdown",
    "parsed": "<p>It's been a little while in the making, but my first book is out: <em><a href=\"https://efendibooks.com/books/catapult-into-pyrocms\">Catapult into PyroCMS</a></em>. This is being released as an eBook only at this point, but who knows what the future might hold.</p>\n\n<p><a href=\"https://efendibooks.com/books/catapult-into-pyrocms\" style=\"border:0\"><img src=\"https://efendibooks.com/images/page_expose/catapult-into-pyrocms.png\" alt=\"Catapult into PyroCMS Preview\" style=\"border:0\" /></a></p>\n\n<p>This is not just a rewritten user guide, it's an attempt to help people gain a full understanding of the core concepts of PyroCMS with as little trouble as possible. PyroCMS is not some jargon-crazed WTF-fest, but any system is going to have terms to learn, and to be fair \"Widgets\" might not immediately make sense to anybody.</p>\n\n<p>You'll learn how to build themes, plugins, widgets and even the basics of a module, but of course I could write a LOT about building a whole module - there are a lot of different tools and libraries - so that is going to go into a different book. This book is:</p>\n\n<ul>\n    <li>\n        Chapter 1 - Core Concepts\n        <ul>\n            <li>Themes</li>\n            <li>Pages</li>\n            <li>Keywords</li>\n            <li>Streams</li>\n            <li>Addons</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 2 - Themes\n        <ul>\n            <li>Getting Started</li>\n            <li>Assets</li>\n            <li>Modular View Overloading</li>\n            <li>Widget Areas</li>\n            <li>Routes and Routing</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 3 - Managing Your Content\n        <ul>\n            <li>Managing Pages</li>\n            <li>Blogs</li>\n            <li>Navigation</li>\n            <li>Caching</li>\n            <li>Search Engine Optimisation</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 4 - Streams\n        <ul>\n            <li>Fields</li>\n            <li>API</li>\n        </ul>\n    </li>\n\n    <li>\n        Chapter 5 - Addons\n        <ul>\n            <li>Writing Addons</li>\n            <li>Modules</li>\n            <li>Plugins</li>\n            <li>Widgets</li>\n        </ul>\n    </li>\n</ul>\n\n<p>The timing of this launch was pretty good but not perfect. PyroCMS 2.2.0 should have been out before this book was completed, but PyroCMS 2.2.0-rc1 is out so that's close enough. If you want to play with PyroCMS 2.2.0-rc1 (page types and custom blog fields really does make it epic) then you can either <a href=\"https://github.com/pyrocms/pyrocms/tags\">hop over to GitHub</a> or if you own a copy of PyroCMS Professional then the 2.2.0-rc1 download is available from \"My Downloads\".</p>\n\n<p>I look forward to writing another book on PyroCMS, especially once the 2.3.0 branch has died down a bit. Converting the old-fashioned CodeIgniter Query Builder syntax over to using PSR-1 autoloaded Eloquent models is an amazingly rewarding task. Several people have been <a href=\"https://www.pyrocms.com/blog/2013/02/surrounded-by-super-heros\">helping out recently</a>, so if you're interested pop on GitHub and pitch in.</p>\n\n<p>Otherwise <a href=\"https://efendibooks.com/books/catapult-into-pyrocms\">buy a copy of my book</a>, and help me buy my boat. Seriously, I want a fucking boat already.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "146",
    "created": "2013-03-22 11:26:00",
    "updated": "2013-03-22 11:26:00",
    "created_by": "2",
    "ordering_count": null,
    "title": "Help test PHP 5.5 beta1",
    "slug": "help-test-php-55-beta1",
    "category_id": "2",
    "attachment": "",
    "intro": "Yesterday PHP.net announced the release of PHP 5.5 Beta-1. This is a great news after the concerns that merging Zend Optimizer would really slow things down, but the releases are still ticking along. So, what can you do to help out? Test it, without doing any work.",
    "body": "Yesterday PHP.net announced the release of PHP 5.5 Beta-1. This is a great news after the concerns that [merging Zend Optimizer+](https://wiki.php.net/rfc/optimizerplus) would really slow things down, but the releases are still ticking along. So, what can you do to help out? Test it, without doing any work.\n\nIf you're on Ubuntu you can run these commands:\n\n{{ prism:syntax lang=\"bash\" }}\n$ sudo apt-get install re2c  \n$ sudo apt-get install bison\n{{ /prism:syntax }}\n\nIf you're on OSX then you can install using Homebrew:\n\n{{ prism:syntax lang=\"bash\" }}\n$ sudo brew install re2c  \n$ sudo brew install bison\n{{ /prism:syntax }}\n\nThinking about running any of this on Windows makes my brain itch, so you'll have to work that out for yourself.\n\nWith those tools installed simply clone the repo, build and run tests:\n\n{{ prism:syntax lang=\"bash\" }}\n$ cd /tmp  \n$ git clone http://git.php.net/repository/php-src.git -b PHP-5.5  \n$ cd php-src  \n$ ./buildconf  \n$ ./configure --disable-all --enable-debug --enable-maintainer-zts  \n$ make test\n{{ /prism:syntax }}\n\n60% of the time, this works every time. If it fails you'll see a summary of the failed test(s)\n\n\n<pre><blockquote>\n =====================================================================\n FAILED TEST SUMMARY\n ---------------------------------------------------------------------\n Test fileperms() & chmod() functions: usage variation - misc. perms [    \n ext/standard/tests/file/006_variation2.phpt]\n chmod() basic fuctionality [ext/standard/tests/file/chmod_basic.phpt]\n =====================================================================\n \n You may have found a problem in PHP.\n This report can be automatically sent to the PHP QA team at\n http://qa.php.net/reports and http://news.php.net/php.qa.reports\n This gives us a better understanding of PHP's behavior.\n If you don't want to send the report immediately you can choose\n option \"s\" to save it.  You can then email it to qa-reports@lists.php.net later.\n Do you want to send this report now? [Yns]: Y\n \n Please enter your email address.\n (Your address will be mangled so that it will not go out on any\n mailinglist in plain text): me@example.com\n \n Posting to http://qa.php.net/buildtest-process.php\n \n Thank you for helping to make PHP better.\n</blockquote></pre>\n\nAny errors will be reported for you, and there you have it, you've helped make PHP more stable.\n\nIf you have multiple operating systems available to you (various Vagrant boxes rocking different environments, or a work laptop) then go and run the tests there too. The more this is run on different environments the better.\n\nFinally, if you're using PHP 5.4 on your servers, why not make a PHP 5.5 branch in your repo and test this out on a vagrant box somewhere? If your code needs changes then you can keep that branch up to date, so when PHP 5.5.0 final releases you're ready to go as soon as your servers upgrade. No harm, no foul.\n\nPHP 5.5 looks awesome, so anything you can do to help get it stable means we all get it faster and less buggy.",
    "created_on": "1363951560",
    "updated_on": "1363951560",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p>Yesterday PHP.net announced the release of PHP 5.5 Beta-1. This is a great news after the concerns that <a href=\"https://wiki.php.net/rfc/optimizerplus\">merging Zend Optimizer+</a> would really slow things down, but the releases are still ticking along. So, what can you do to help out? Test it, without doing any work.</p>\n\n<p>If you're on Ubuntu you can run these commands:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ sudo apt-get install re2c<br />\n$ sudo apt-get install bison\n{{ /prism:syntax }}</p>\n\n<p>If you're on OSX then you can install using Homebrew:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ sudo brew install re2c<br />\n$ sudo brew install bison\n{{ /prism:syntax }}</p>\n\n<p>Thinking about running any of this on Windows makes my brain itch, so you'll have to work that out for yourself.</p>\n\n<p>With those tools installed simply clone the repo, build and run tests:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ cd /tmp<br />\n$ git clone http://git.php.net/repository/php-src.git -b PHP-5.5<br />\n$ cd php-src<br />\n$ ./buildconf<br />\n$ ./configure --disable-all --enable-debug --enable-maintainer-zts<br />\n$ make test\n{{ /prism:syntax }}</p>\n\n<p>60% of the time, this works every time. If it fails you'll see a summary of the failed test(s)</p>\n\n<pre><blockquote>\n =====================================================================\n FAILED TEST SUMMARY\n ---------------------------------------------------------------------\n Test fileperms() & chmod() functions: usage variation - misc. perms [    \n ext/standard/tests/file/006_variation2.phpt]\n chmod() basic fuctionality [ext/standard/tests/file/chmod_basic.phpt]\n =====================================================================\n \n You may have found a problem in PHP.\n This report can be automatically sent to the PHP QA team at\n http://qa.php.net/reports and http://news.php.net/php.qa.reports\n This gives us a better understanding of PHP's behavior.\n If you don't want to send the report immediately you can choose\n option \"s\" to save it.  You can then email it to qa-reports@lists.php.net later.\n Do you want to send this report now? [Yns]: Y\n \n Please enter your email address.\n (Your address will be mangled so that it will not go out on any\n mailinglist in plain text): me@example.com\n \n Posting to http://qa.php.net/buildtest-process.php\n \n Thank you for helping to make PHP better.\n</blockquote></pre>\n\n<p>Any errors will be reported for you, and there you have it, you've helped make PHP more stable.</p>\n\n<p>If you have multiple operating systems available to you (various Vagrant boxes rocking different environments, or a work laptop) then go and run the tests there too. The more this is run on different environments the better.</p>\n\n<p>Finally, if you're using PHP 5.4 on your servers, why not make a PHP 5.5 branch in your repo and test this out on a vagrant box somewhere? If your code needs changes then you can keep that branch up to date, so when PHP 5.5.0 final releases you're ready to go as soon as your servers upgrade. No harm, no foul.</p>\n\n<p>PHP 5.5 looks awesome, so anything you can do to help get it stable means we all get it faster and less buggy.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "147",
    "created": "2013-03-23 21:02:00",
    "updated": "2013-03-23 21:02:00",
    "created_by": "2",
    "ordering_count": null,
    "title": "Pick PHP Requirements for Packages Responsibly",
    "slug": "pick-php-requirements-for-packages-responsibly",
    "category_id": "2",
    "attachment": "",
    "intro": "Which version of PHP to use for anything is always much debated in the PHP community. I&#39;m luck enough to have kissed sweet goodbye to PHP 5.2 a while back, but PHP 5.4 and PHP 5.3 are both actively used by different projects and recently I have come across a few packages that have been using PHP 5.4 almost exclusively just to use short aray syntax, which to me is short sighted and selfish. I tried tweeting about this and everyone seemeed to be a little confused, so instead of 140 characters I thought I&#39;d try 7051.",
    "body": "I recently tweeted something which seems to have confused a lot of people:\n\n<blockquote class=\"twitter-tweet\"><p>If you release PHP packages that require PHP 5.4 _JUST_ because you want to use short array syntax, then I hope your pet gets run over.</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/status/315475056203534338\">March 23, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nNow, don't go running off to PETA, I'm clearing kidding about the pets, but people seemed confused by the main gist of this point: If you're going to release a package (a Composer package for example) as PHP 5.4, then make sure it is worth it. \n\nWhen I say \"make sure it is worth it\" I mean, **don't just switch your arrays from array() to [] just because it looks cool**. That was the extent of my original tweet, because I've seen a few packages doing that and it annoyed me immensely. This conversation became confused quickly with people assuming that everyone on Composer is PHP 5.4 because only smart cool kids use Composer (which is weird, elitist, ignores those that use composer locally but deploy to PHP 5.3 servers and according to [stats from Jordi](https://twitter.com/seldaek/status/315805955050848256) isn't true anyway), other people started wanging on about how WordPress should move to PHP 5.3 which would make companies upgrade somehow (but that ignores the fact that PHP 5.4 packages would still be out of reach) and there were about 30 other conversations going on, all spawned out of the tweet which was making one very specific point...\n\nSuffice it to say, if you require a user to upgrade their version of PHP simply so you can use some syntactical sugar inside a package that nobody else is even going to be looking at, then you're an idiot. Beyond that, you're actually hurting the community. \n\nIf every time a developer wants to use a package they're forced to build their own because the developer of the original stupidly decided to use PHP 5.4 when [only 3.1%](http://w3techs.com/technologies/details/pl-php/5/all) of the internet is using that version, then we're doubling up on efforts to build useful, reusable components that we can all share.\n\n## PHP 5.4 is more than just []\n\nThere are lots of brilliant new features in PHP 5.4 that could make a developer wish to pick PHP 5.4 over PHP 5.3 for a package they build.\n\nJust look at the \"New Features\" change-log:\n\n* Support for traits has been added.\n* Function array dereferencing has been added, e.g. foo()[0* ].\n* Closures now support $this.\n* Class member access on instantiation has been added, e.g.*  (new Foo)->bar().\n* Class::{expr}() syntax is now supported.\n* Binary number format has been added, e.g. 0b001001101.\n* The session extension can now track the upload progress of files.\n\nMost of this is traits and dereferencing, which a lot of developers love. If you plan on making heavy use of features like this, such projects like  [AuraPHP](http://auraphp.github.com/) then great, that's a wonderful decision. We need people building components at the bleeding edge, and we need people building PHP 5.4 specific code that really shows people how to do it, but does the next package you release _need_ to be PHP 5.4?\n\nIf you're just using traits, then make sure those traits are optional. If you're dereferencing then… well do you need to? It's an extra line of code to avoid it, and instead of making your package compatible with only 3.1% of PHP-based websites you could make it work with over 50.4%. That is the entire point of sharing code right, to actually be able to share it with people?\n\n## \"But I use PHP 5.4 for all my projects\"\n\nYes, you do, but think about [other people](philsturgeon.co.uk/blog/2012/08/understanding-circumstance) for a minute. At [Kapture](http://kaptu.re) we use PHP 5.4 on any PHP-based application, and I already have a PHP 5.5 branch of the API ready to go and passing tests so that as soon as PHP 5.5.0 comes out I'll be upgrading. I can do what I like, because I control the servers, but what about other people?\n\nAnd not even other people, other projects?\n\nPyroCMS for example, a few months back decided to up the requirements for the next version from PHP 5.2 to PHP 5.3. This might be seen as slow moving, but lets remember that WordPress won't be upping the requirements until 2014 sometime.\n\nIt's not just Pyro, another example would be Drupal 8 (based on Symfony2) who are in the same boat, as are _plenty_ of other \"distributed\" projects. \n\nIf the amount of work it takes to keep your packages PHP 5.3 is minimal (long array syntax, keeping traits optional, and not using dereferencing) is that trivial, and it means that projects can use your packages, then surely it's worth it? This avoids PHP 5.4 people and PHP 5.3 people all building the same shit, just because one group wants to use the new hotness, even though it doesn't really add all that much.\n\nAgain, it's about sharing it with the lowest common denominator which is the same logic that is being used by that vast majority of popular Composer packages or component-based frameworks which distribute over Composer:\n\n* Assetic\n* AWS SDK 2\n* Behat\n* Buzz\n* Doctrine\n* Guzzle\n* Laravel 4\n* Monolog\n* Imagine\n* PPI\n* Password Compatibility\n* Pimple\n* Swiftmailer\n* Symfony2\n* Twig\n* ZF2\n\nAll PHP 5.3, because PHP 5.4 usage is not high enough yet. \n\n## So why not PHP 5.2\n\nIf we're going for the lowest common denominator, why not go for PHP 5.2?\n\nPHP 5.2 and PHP 5.3 are worlds apart, whereas PHP 5.4 (syntactically) is just adding some sugar. Sure under the hood there are loads of speed improvements in PHP 5.4 and it's an excellent version, but the architectural differences between 5.3 and 5.4 are trivial (or non-existent) compared to 5.2 and 5.3.\n\nPHP 5.2 doesn't have namespaces, closures, or late static binding. PHP 5.2 makes PSR-0 compatibility impossible, and that alone is a massive reason to ditch it for packages. Using PHP 5.2 blows chunks and it needs to be burned with fire, but PHP 5.4 doesn't make enough of a difference **to a package** to really justify using it at this time.\n\n## \"But we have to push things forward\"\n\nUpping requirements of everything everywhere does not increase adoption of new PHP version support with hosting companies. Most hosting companies pay no attention to these things, and even when you beg and plead for them to upgrade they do it at their [own damn rate anyway](http://feedback.rackspace.com/forums/71021-product-feedback/suggestions/997049-php-5-3-support-in-cloud-sites). Some more alert companies like [Crucial Webhosting](http://www.crucialwebhost.com/) have been rocking PHP 5.5 since the first alpha1, for people to _test_ their code, but this is not because of people releasing PHP 5.5 code on packagist, this is due to PHP getting more consistent and regular with their releases and because they want to carve a name for themselves as being different from the average hosting company.\n\nThe whole idea that hosting companies care about what version we use for our components is just not realistic. When you say \"well if I increase my packages people will have to upgrade to PHP 5.4 quicker.\" you're only kidding yourself. In reality those people just won't bother looking at your package, especially if there is another one (all be it worse) next to yours. \n\n## Summary\n\nRunning PHP 5.4 on your servers is going to make your code quicker and I can't recommend it enough, but using PHP 5.4 specific syntax doesn't change a thing. It makes some code a little cleaner, which most people wont ever see because its buried away in a package they wont bother looking at, and comes at the cost of drastically reducing adoption of your packages. In your applications you should use all the syntactical goodness that PHP 5.4 provides, just keep it out of your packages unless you need to. And if you think you need to, do you really *need* to?\n\nAs long as you understand that the usage will be much less and are ok with that (like Aura) then that's fine, but don't release some generic Geocode or OAuth 2 package as PHP 5.4 just because you prefer [] over array(). I don't want to have to hurt any pets.",
    "created_on": "1364072520",
    "updated_on": "1364072520",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "0a60a69297fa51939c40760bd46af33c",
    "type": "markdown",
    "parsed": "<p>I recently tweeted something which seems to have confused a lot of people:</p>\n\n<blockquote class=\"twitter-tweet\"><p>If you release PHP packages that require PHP 5.4 _JUST_ because you want to use short array syntax, then I hope your pet gets run over.</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/status/315475056203534338\">March 23, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Now, don't go running off to PETA, I'm clearing kidding about the pets, but people seemed confused by the main gist of this point: If you're going to release a package (a Composer package for example) as PHP 5.4, then make sure it is worth it. </p>\n\n<p>When I say \"make sure it is worth it\" I mean, <strong>don't just switch your arrays from array() to [] just because it looks cool</strong>. That was the extent of my original tweet, because I've seen a few packages doing that and it annoyed me immensely. This conversation became confused quickly with people assuming that everyone on Composer is PHP 5.4 because only smart cool kids use Composer (which is weird, elitist, ignores those that use composer locally but deploy to PHP 5.3 servers and according to <a href=\"https://twitter.com/seldaek/status/315805955050848256\">stats from Jordi</a> isn't true anyway), other people started wanging on about how WordPress should move to PHP 5.3 which would make companies upgrade somehow (but that ignores the fact that PHP 5.4 packages would still be out of reach) and there were about 30 other conversations going on, all spawned out of the tweet which was making one very specific point...</p>\n\n<p>Suffice it to say, if you require a user to upgrade their version of PHP simply so you can use some syntactical sugar inside a package that nobody else is even going to be looking at, then you're an idiot. Beyond that, you're actually hurting the community. </p>\n\n<p>If every time a developer wants to use a package they're forced to build their own because the developer of the original stupidly decided to use PHP 5.4 when <a href=\"http://w3techs.com/technologies/details/pl-php/5/all\">only 3.1%</a> of the internet is using that version, then we're doubling up on efforts to build useful, reusable components that we can all share.</p>\n\n<h2>PHP 5.4 is more than just []</h2>\n\n<p>There are lots of brilliant new features in PHP 5.4 that could make a developer wish to pick PHP 5.4 over PHP 5.3 for a package they build.</p>\n\n<p>Just look at the \"New Features\" change-log:</p>\n\n<ul>\n<li>Support for traits has been added.</li>\n<li>Function array dereferencing has been added, e.g. foo()[0* ].</li>\n<li>Closures now support $this.</li>\n<li>Class member access on instantiation has been added, e.g.*  (new Foo)->bar().</li>\n<li>Class::{expr}() syntax is now supported.</li>\n<li>Binary number format has been added, e.g. 0b001001101.</li>\n<li>The session extension can now track the upload progress of files.</li>\n</ul>\n\n<p>Most of this is traits and dereferencing, which a lot of developers love. If you plan on making heavy use of features like this, such projects like  <a href=\"http://auraphp.github.com/\">AuraPHP</a> then great, that's a wonderful decision. We need people building components at the bleeding edge, and we need people building PHP 5.4 specific code that really shows people how to do it, but does the next package you release <em>need</em> to be PHP 5.4?</p>\n\n<p>If you're just using traits, then make sure those traits are optional. If you're dereferencing then… well do you need to? It's an extra line of code to avoid it, and instead of making your package compatible with only 3.1% of PHP-based websites you could make it work with over 50.4%. That is the entire point of sharing code right, to actually be able to share it with people?</p>\n\n<h2>\"But I use PHP 5.4 for all my projects\"</h2>\n\n<p>Yes, you do, but think about <a href=\"philsturgeon.co.uk/blog/2012/08/understanding-circumstance\">other people</a> for a minute. At <a href=\"http://kaptu.re\">Kapture</a> we use PHP 5.4 on any PHP-based application, and I already have a PHP 5.5 branch of the API ready to go and passing tests so that as soon as PHP 5.5.0 comes out I'll be upgrading. I can do what I like, because I control the servers, but what about other people?</p>\n\n<p>And not even other people, other projects?</p>\n\n<p>PyroCMS for example, a few months back decided to up the requirements for the next version from PHP 5.2 to PHP 5.3. This might be seen as slow moving, but lets remember that WordPress won't be upping the requirements until 2014 sometime.</p>\n\n<p>It's not just Pyro, another example would be Drupal 8 (based on Symfony2) who are in the same boat, as are <em>plenty</em> of other \"distributed\" projects. </p>\n\n<p>If the amount of work it takes to keep your packages PHP 5.3 is minimal (long array syntax, keeping traits optional, and not using dereferencing) is that trivial, and it means that projects can use your packages, then surely it's worth it? This avoids PHP 5.4 people and PHP 5.3 people all building the same shit, just because one group wants to use the new hotness, even though it doesn't really add all that much.</p>\n\n<p>Again, it's about sharing it with the lowest common denominator which is the same logic that is being used by that vast majority of popular Composer packages or component-based frameworks which distribute over Composer:</p>\n\n<ul>\n<li>Assetic</li>\n<li>AWS SDK 2</li>\n<li>Behat</li>\n<li>Buzz</li>\n<li>Doctrine</li>\n<li>Guzzle</li>\n<li>Laravel 4</li>\n<li>Monolog</li>\n<li>Imagine</li>\n<li>PPI</li>\n<li>Password Compatibility</li>\n<li>Pimple</li>\n<li>Swiftmailer</li>\n<li>Symfony2</li>\n<li>Twig</li>\n<li>ZF2</li>\n</ul>\n\n<p>All PHP 5.3, because PHP 5.4 usage is not high enough yet. </p>\n\n<h2>So why not PHP 5.2</h2>\n\n<p>If we're going for the lowest common denominator, why not go for PHP 5.2?</p>\n\n<p>PHP 5.2 and PHP 5.3 are worlds apart, whereas PHP 5.4 (syntactically) is just adding some sugar. Sure under the hood there are loads of speed improvements in PHP 5.4 and it's an excellent version, but the architectural differences between 5.3 and 5.4 are trivial (or non-existent) compared to 5.2 and 5.3.</p>\n\n<p>PHP 5.2 doesn't have namespaces, closures, or late static binding. PHP 5.2 makes PSR-0 compatibility impossible, and that alone is a massive reason to ditch it for packages. Using PHP 5.2 blows chunks and it needs to be burned with fire, but PHP 5.4 doesn't make enough of a difference <strong>to a package</strong> to really justify using it at this time.</p>\n\n<h2>\"But we have to push things forward\"</h2>\n\n<p>Upping requirements of everything everywhere does not increase adoption of new PHP version support with hosting companies. Most hosting companies pay no attention to these things, and even when you beg and plead for them to upgrade they do it at their <a href=\"http://feedback.rackspace.com/forums/71021-product-feedback/suggestions/997049-php-5-3-support-in-cloud-sites\">own damn rate anyway</a>. Some more alert companies like <a href=\"http://www.crucialwebhost.com/\">Crucial Webhosting</a> have been rocking PHP 5.5 since the first alpha1, for people to <em>test</em> their code, but this is not because of people releasing PHP 5.5 code on packagist, this is due to PHP getting more consistent and regular with their releases and because they want to carve a name for themselves as being different from the average hosting company.</p>\n\n<p>The whole idea that hosting companies care about what version we use for our components is just not realistic. When you say \"well if I increase my packages people will have to upgrade to PHP 5.4 quicker.\" you're only kidding yourself. In reality those people just won't bother looking at your package, especially if there is another one (all be it worse) next to yours. </p>\n\n<h2>Summary</h2>\n\n<p>Running PHP 5.4 on your servers is going to make your code quicker and I can't recommend it enough, but using PHP 5.4 specific syntax doesn't change a thing. It makes some code a little cleaner, which most people wont ever see because its buried away in a package they wont bother looking at, and comes at the cost of drastically reducing adoption of your packages. In your applications you should use all the syntactical goodness that PHP 5.4 provides, just keep it out of your packages unless you need to. And if you think you need to, do you really <em>need</em> to?</p>\n\n<p>As long as you understand that the usage will be much less and are ok with that (like Aura) then that's fine, but don't release some generic Geocode or OAuth 2 package as PHP 5.4 just because you prefer [] over array(). I don't want to have to hurt any pets.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "148",
    "created": "2013-04-01 11:45:00",
    "updated": "2013-04-01 11:45:00",
    "created_by": "2",
    "ordering_count": "1",
    "title": "PSR-2: The Tough Decision",
    "slug": "psr2-the-tough-decision",
    "category_id": "2",
    "attachment": "",
    "intro": "PSR-2 has been out for a while now, and even though developers from member projects (such as Joomla, Drupal, phpBB, CakePHP, Symfony and Zend) got together and took part in a entirely fair vote to decide if tabs or spaces should be involved, it soon became apparent that the group had made a mistake.&nbsp;Due to an overwhelming surge of complaints about the use of spaces for indentation instead of tabs in PSR-2, the PHP-FIG has had no choice but to reverse this decision.&nbsp;",
    "body": "[PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) has been out for a while now, and even though developers from member projects (such as Joomla, Drupal, phpBB, CakePHP, Symfony and Zend) got together and took part in a entirely fair vote to decide if tabs or spaces should be involved, it soon became apparent that the group had made a mistake.\n\nDue to an overwhelming surge of complaints about the use of spaces for indentation instead of tabs in PSR-2, the [PHP-FIG](http://www.php-fig.org) has had no choice but to reverse this decision. \n\nThis change of course comes at a cost. It means that every single PSR-2 supporting package will need to be updated if it wishes to maintain PSR-2 compatability. It also means recoding the PHP-CS logic, and CS-Fixer along with that. Changing the website will take a while and educating the community will cause problems, and even though there are no technical benefits to be found in the change, the gains are clear:\n\n_Now some of you will no longer have to change the default setting in your IDE's/editors from \"Tabs\" to \"Spaces\"._\n\nWe (the PHP-FIG) feel like the sacrifices listed above, alongside the reduction of the portability of any PSR-2 code are all small prices to pay for this very important pro. After all, having to change that setting - even if only once - really was a pain in the backside.\n\nNow, we completely understand that only about half of you prefer tabs, and the other half were happy with spaces. If the users of Reddit don't all agree that this was the right decision we'll be happy to change it back again in a few months, because everyone having their own personal preference ratified in an optional standard is clearly more important than anything else the PHP-FIG could be working on. I understand.\n\nThanks for all the wonderful feedback on this topic, and we look forward to hearing constructive feedback during this difficult period of transition.",
    "created_on": "1364816700",
    "updated_on": "1364816700",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p><a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\">PSR-2</a> has been out for a while now, and even though developers from member projects (such as Joomla, Drupal, phpBB, CakePHP, Symfony and Zend) got together and took part in a entirely fair vote to decide if tabs or spaces should be involved, it soon became apparent that the group had made a mistake.</p>\n\n<p>Due to an overwhelming surge of complaints about the use of spaces for indentation instead of tabs in PSR-2, the <a href=\"http://www.php-fig.org\">PHP-FIG</a> has had no choice but to reverse this decision. </p>\n\n<p>This change of course comes at a cost. It means that every single PSR-2 supporting package will need to be updated if it wishes to maintain PSR-2 compatability. It also means recoding the PHP-CS logic, and CS-Fixer along with that. Changing the website will take a while and educating the community will cause problems, and even though there are no technical benefits to be found in the change, the gains are clear:</p>\n\n<p><em>Now some of you will no longer have to change the default setting in your IDE's/editors from \"Tabs\" to \"Spaces\".</em></p>\n\n<p>We (the PHP-FIG) feel like the sacrifices listed above, alongside the reduction of the portability of any PSR-2 code are all small prices to pay for this very important pro. After all, having to change that setting - even if only once - really was a pain in the backside.</p>\n\n<p>Now, we completely understand that only about half of you prefer tabs, and the other half were happy with spaces. If the users of Reddit don't all agree that this was the right decision we'll be happy to change it back again in a few months, because everyone having their own personal preference ratified in an optional standard is clearly more important than anything else the PHP-FIG could be working on. I understand.</p>\n\n<p>Thanks for all the wonderful feedback on this topic, and we look forward to hearing constructive feedback during this difficult period of transition.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "149",
    "created": "2013-04-17 04:52:00",
    "updated": "2013-04-17 04:52:00",
    "created_by": "2",
    "ordering_count": "2",
    "title": "Is PSR-0 Shortsighted, or are you?",
    "slug": "is-psr0-shortsighted-or-are-you",
    "category_id": "2",
    "attachment": "",
    "intro": "One of the fun things about trying to support the PHP-FIG and all the good its doing, is seeing blog posts written complaining about it by people that just don&#39;t know what they&#39;re talking about. By getting involved in conversations on Reddit, building FAQs and generally trying to build new useful information this can generally be helped. Sadly some <a href=\"http://r.je/php-psr-0-pretty-shortsighted-really.html\">blog posts</a> are sent out by people with a whole bunch of odd opinions that you just can&#39;t do anything about, so instead I&#39;m going to respond with a play-by-play approach.&nbsp;",
    "body": "One of the fun things about trying to support the PHP-FIG and all the good its doing, is seeing blog posts written complaining about it by people that just don't know what they're talking about.\n\nI get involved in conversations on Reddit (dangerous I know) on a mission to understand the problems with its perception throughout the community, and try to make more knowledge readily available to avoid confusion. I put together the [PHP-FIG FAQ](http://www.php-fig.org/faq/) and the rest of the group voted it in, which I believe helped a lot.\n\nSadly [some blog posts](http://r.je/php-psr-0-pretty-shortsighted-really.html) are sent out by people with a whole bunch of odd opinions that you just can't do anything about, so instead I'm going to respond with a play-by-play approach. \n\n_**Note:** I wouldn't have given this the time of day if it weren't for the fact it was linked on some high level PHP sites. Letting odd articles like this circulate without a counterpart is like only letting Republicans on the television. Pretty soon everyone in the world would believe that women had some [magical anti-rape-sperm laser hidden away in their vaginas](http://www.huffingtonpost.com/2012/08/19/todd-akin-abortion-legitimate-rape_n_1807381.html)…_\n\n> There's a self-declared PHP \"standards\" group called PHP-FIG attempting to push several \"standards\" throughout the PHP community. \n\nNope.\n\n> The problem occurs when PHP-FIG do attempt to push the standard onto everyone else such as trying to put it into the PHP Core…\n\nBack in early 2010 one FIG member made an [RFC for this](https://wiki.php.net/rfc/splclassloader). That was 3 years ago, and this is most likely the only example of the FIG ever trying to push anything on the PHP community as a whole. I think the group realises their mistake, and this is exactly why votes exist on RFCs, to make sure changes are a reflection of what is genuinely good for PHP. It's time we (the internet) let that one go.\n\n> …and a lot of campaigning to get people to adopt the \"standard\".\n\nWhere? The FIG is certainly not campaigning to do this. I'm not sure where we'd even do the campaigning. Did you read some blog articles about PHP developers who enjoy using PSR-0 for their packages and assume the FIG had hired them to write the articles? We are the puppet masters.\n\n> Even then, I despise the idea of them, or anyone, pushing such a ridiculous \"standard\" in the first place.  My issues are purely practical, PSR-0 reduces flexibility and makes life more difficult for developers. It's self-defeating and as a standard is unfit for purpose. The premise of the standard is: \"This is how you must structure your files\", which is an absurd starting point.\n\nThis seems like the crux of the idea before the author goes on to repeat the same point multiple times. There are two approaches:\n\n### A) Define File/Folder Naming Structures\n\nPSR-0 lets you know that you need to use StudlyCaps for your classes and lets you know that _ is a directory separator, that's about it. This means any developer who is building a new package can simply lay out their classes in the specified way, and use any PSR-0 compliant autoloader (of which there are many) to autoload their code.\n\n### B) Make an autoloader that can load anything\n\nThis is the wild new suggestion that the author is proposing. Well, that sounds quite a lot like Composer. You can take any code, no matter what format, let the author build it however they like, then let all of the code be autoloaded according to the rules the developer has set in the packages composer.json. Is it classmap, or is it PSR-0? Up to them. \n\nAnything else along these lines would be going back a step in logic. If its not classmap, and its not PSR-0, then its fucking magic, exactly what used to happen in the PHP community that we're trying to hard to get away from.\n\nOh good, Foo {} lives in monkey.class.php, thanks for making that obvious bro.\n\n> We shouldn't be defining a standardised autoloader to tell library authors how to do things, instead we should be letting library authors optionally provide a way of telling a standardised autoloader how to load its files.\n\nThe FIG is not defining a standardised autoloader, they are standardising the naming conventions that allow for a PSR-0 compatible autoloader. This autoloader is not restricted to JUST PSR-0, they can do what they like. \n\nThat autoloader can try loading all of your custom application classes. Drupal and Joomla use their own autoloaders to load some of their own code using whatever the hell rules they see fit, AND ALSO support PSR-0 to load generic code packages, which makes life easier on the package developers because they can just build to PSR-0 instead of building to work with Zend, or work with Drupal, or work with Symfony - exactly the problem we're trying to avoid.\n\n> This approach has the added benefit of making it so that older existing libraries can be extended, not altered, to become compliant with the standard. As it stands, to make an existing non-PSR-0 compliant library PSR-0 compliant, the entire library must be restructured, and in a lot of cases, have every single file altered to add a namespace to it! To call this approach absurd would be an understatement.\n\nRestructured how much? Adding in a namespace is not exactly tough, and is part of a reasonable migration to being PHP 5.3 compatable anyway.\n\nMaking the class name match the file name? Well that's just good common logic, and if your classes don't match the the file names then why not? \n\nIf upgrading this code package is so complicated that it's not worth it, then why are you trying to do it? Includes and classmaps are perfectly valid options unless you're bored and want to take on a random challenge.\n\n> Ok, so perhaps we should only use PSR-0 for new projects and new libraries? If you set out to be PSR-0 compliant then you won't have that problem. This is true and exactly why PHP-FIG are pushing/encouraging everyone else to use their standard, but again it's rather backwards. Choosing your autoloader then using that choice to define how your project is structured can very easily result in a project which isn't structured in the best way for that particular project.\n\nIgnoring the fact that **the FIG is not pushing/encouraging shit on you**, I'm not sure what sort of project would not fit into PSR-0? Are you trying to make your entire application PSR-0, because it should only be generic code packages that you do this with, and I've yet to see a single generic PHP package that would not fit in with PSR-0. If your project is too complicated for PSR-0 (and I'd like to see examples of this so I know what you're actually talking about) then simply don't use PSR-0.\n\n> In OOP terms, PSR-0 breaks encapsulation. Code which uses it has implied knowledge about things it shouldn't be concerned with: Directory structures, the implementation details of the autoloader. Storing application configuration along with application logic is a bad idea. It severely limits flexibility by meaning you cannot use different configurations with different logic.\n\nI understand all of the words seperately…\n\nPSR-0 is extremely similar to the PEAR file/class naming structure, but a bit more namespacey. It's also almost _identical_ to the way Kohana, Laravel 3 and FuelPHP do things and almost i-fucking-dentical to Zend. \n\nI have plenty of PSR-0 code which could be autoloaded with a completely custom autoloader, because its just logical naming.\n\nIn no way is any \"application configuration\" stored, inferred or implied by naming your classes and filenames in a logical standard way. You can load this shit with direct includes, and it's all going to work just fine.\n\n> As it stands, what actually happens in the real world is that autoloaders are PSR-0 compliant, but then allow a bunch of workarounds to support other non PSR-0 libraries. These workarounds are autoloader specific. Composer uses a classmap, Zend provides several different autoload implementations and Symfony supports PSR-0 as well as a method for loading classes which use the PEAR naming convention.  \n…  \nWhat this means is that the \"standardised autoloader\" that PSR-0 advocates, is far from standard unless you limit the flexibility of your projects' structure by using only other libraries which follow PSR-0. As soon as you set foot outside this very narrow scope, you have to configure the autoloader manually.\n\nRight. Absolutely right.\n\nSymfony and Zend both have elements of autoloading that work entirely their own way, and they also support PSR-0 too - which is amazing. Developers can aim at PSR-0 and know their code is going to work everywhere, instead of trying to make it work for each different framework. Yay PSR-0 for making its goal entirely possible!\n\n> If the standard defined how autoloaders could be extended, rather than how autoloaders worked, then each library or vendor could provide its own extension to the autoloader.\n\nThe PSR-0 standard does not define how autoloaders work. It defines the rules of PSR-0 compatibility, allowing an autoloader to be PSR-0 compatible as well as do whatever else it would like to do, which you've already pointed out is what Zend and Symfony do.\n\n## The Example\n\nThis is an example of an autoloader implementation. PSR-0 is not an autoloader, it is the standard which defines what rules make something PSR-0 compatible.\n\nThere are several things I don't like about this example.\n\n### Where does this code live\n\nThere is an interface, some rule classes (which constitutes \"configuring the autoloader\", which the author complained about earlier) and a autoload.json in the \"library directory\".\n\nNow, what the crap is a .json file doing in my PHP library package?\n\nGo on. Say it. \"Composer has a .json file\". Right, the .json file and all of this metadata live in the **composer** package, which just so happens to sit near my PHP code but is **nothing** to do with PSR-0.\n\n## Composer != PSR-0\n\nAlmost every time a \"PSR-0 sucks\" argument comes up its by people that A) do not know that Composer and PSR-0 are not the same thing, or B) do not know that PSR-0 was out for at least a year before Composer was but a twinkle in the eye of Jordi and Nils.\n\nThis poster is confusing the fact that PSR-0 is a standard of rules that allow an autoloader to know where stuff is, with Composer which is a dependency manager that can autoload pretty much anything.\n\nThat's not the same thing, and I hope you can all see why.\n\n## So this is not a PSR-0 competitor\n\nThis example is either a replacement for the Composer autoloader, or a potential feature. But even then I have to wonder: is this even anything new?\n\nWhy not just auto-include an autoload.php file using the [file autoload](http://getcomposer.org/doc/04-schema.md#files) syntax, then write your custom autoloader in there?\n\n> What PSR-0 tries to achieve is good but its execution is one of the most inflexible and restrictive trends to hit PHP for quite some time.\n\nIt's 4 years old.\n\n> Don't configure your application's structure based on your autoloader, configure your autoloader based on your application's structure.\n\nYou really shouldn't be trying to PSR-0 your entire application, that would be suicide.\n\n> What's laughable is that over at the PHP-FIG mailing list, there's a post which highlights some of the current implementation restrictions in PSR-0. Their proposed solution? Add another PSR rule as a workaround rather than solving the problem of inflexibility inherent in PSR-0!\n\nThere are only two \"problems\" in PSR-0, neither of which have been touched on in this article.\n\n1. PSR-0 can autoload two different classes to the same path, then error. I've described it fully [here](https://github.com/philsturgeon/psr0-naming-oddity).\n2. PyroCMS has a src/ folder in each module, so some modules PSR-0 folder structure is system/cms/modules/users/src/Pyro/Module/User/Model/Group.php.\n\nSo, 1 is fair enough because that was build intentionally, to allow developers to easily support the old underscore structure that people were commonly using, the new autoloader will only work with namespaces to avoid this collision. Nice.\n\nThe second point allows the autoloader to allow a little extra config to make it system/cms/modules/users/src/User/Model/Group.php, still mapping to Pyro\\Module\\User\\Model\\Group.php, which is trivial at best but will make a few of my module developers happier that they don't need to use those two extra folders. Many projects will definitely still want to use PSR-0, and some will use this new PSR-X, which is nice to have that flexibility.\n\nComposer will then support PSR-X too, so all included packages will automatically be included no matter what PSR they decide to use.\n\n## Summary\n\nThis article comes across as:\n\n> This brand new thing [which is 4 years old] is not exactly what I'd expect to see based on expectations that are being made 4 years after its conception and with the knowledge of tools that didnt exist at the time, and any attempt to improve this situation is laughable because these guys are all tools.\n\nPSR-0 has its problems, but they are the two that I have pointed out and they are rather trivial. These two issues are being removed in a new standard which is currently going through the proposal stages and so far it has excellent support. Once it's voted in and Composer integrates the standard into their autoloader some developers can spend 3 minutes porting their packages, or continue to use PSR-0.\n\nIf you'd like to add custom autoloaders to your Composer packages then go ahead. If you'd like to build your own custom autoloaders for all of your packages then you can do that too, but it ruins the entire purpose of what PSR-0 is meant to do. \n\nThat's fine, because you don't need to use it, but I am happy as hell that PSR-0 exists and I wouldn't make drastic changes to it for anything. Every developer who chooses to use it (and that is a fucking lot so far) has helped to drastically improve the eco-system of PHP, and thats a trend I like the sound of.",
    "created_on": "1366174320",
    "updated_on": "1366174320",
    "status": "live",
    "comments_enabled": "2 weeks",
    "author_id": "2",
    "keywords": "2774f83ee98cb57c75ffbf4ce2820f99",
    "type": "markdown",
    "parsed": "<p>One of the fun things about trying to support the PHP-FIG and all the good its doing, is seeing blog posts written complaining about it by people that just don't know what they're talking about.</p>\n\n<p>I get involved in conversations on Reddit (dangerous I know) on a mission to understand the problems with its perception throughout the community, and try to make more knowledge readily available to avoid confusion. I put together the <a href=\"http://www.php-fig.org/faq/\">PHP-FIG FAQ</a> and the rest of the group voted it in, which I believe helped a lot.</p>\n\n<p>Sadly <a href=\"http://r.je/php-psr-0-pretty-shortsighted-really.html\">some blog posts</a> are sent out by people with a whole bunch of odd opinions that you just can't do anything about, so instead I'm going to respond with a play-by-play approach. </p>\n\n<p><em><strong>Note:</strong> I wouldn't have given this the time of day if it weren't for the fact it was linked on some high level PHP sites. Letting odd articles like this circulate without a counterpart is like only letting Republicans on the television. Pretty soon everyone in the world would believe that women had some <a href=\"http://www.huffingtonpost.com/2012/08/19/todd-akin-abortion-legitimate-rape_n_1807381.html\">magical anti-rape-sperm laser hidden away in their vaginas</a>…</em></p>\n\n<blockquote>\n  <p>There's a self-declared PHP \"standards\" group called PHP-FIG attempting to push several \"standards\" throughout the PHP community. </p>\n</blockquote>\n\n<p>Nope.</p>\n\n<blockquote>\n  <p>The problem occurs when PHP-FIG do attempt to push the standard onto everyone else such as trying to put it into the PHP Core…</p>\n</blockquote>\n\n<p>Back in early 2010 one FIG member made an <a href=\"https://wiki.php.net/rfc/splclassloader\">RFC for this</a>. That was 3 years ago, and this is most likely the only example of the FIG ever trying to push anything on the PHP community as a whole. I think the group realises their mistake, and this is exactly why votes exist on RFCs, to make sure changes are a reflection of what is genuinely good for PHP. It's time we (the internet) let that one go.</p>\n\n<blockquote>\n  <p>…and a lot of campaigning to get people to adopt the \"standard\".</p>\n</blockquote>\n\n<p>Where? The FIG is certainly not campaigning to do this. I'm not sure where we'd even do the campaigning. Did you read some blog articles about PHP developers who enjoy using PSR-0 for their packages and assume the FIG had hired them to write the articles? We are the puppet masters.</p>\n\n<blockquote>\n  <p>Even then, I despise the idea of them, or anyone, pushing such a ridiculous \"standard\" in the first place.  My issues are purely practical, PSR-0 reduces flexibility and makes life more difficult for developers. It's self-defeating and as a standard is unfit for purpose. The premise of the standard is: \"This is how you must structure your files\", which is an absurd starting point.</p>\n</blockquote>\n\n<p>This seems like the crux of the idea before the author goes on to repeat the same point multiple times. There are two approaches:</p>\n\n<h3>A) Define File/Folder Naming Structures</h3>\n\n<p>PSR-0 lets you know that you need to use StudlyCaps for your classes and lets you know that _ is a directory separator, that's about it. This means any developer who is building a new package can simply lay out their classes in the specified way, and use any PSR-0 compliant autoloader (of which there are many) to autoload their code.</p>\n\n<h3>B) Make an autoloader that can load anything</h3>\n\n<p>This is the wild new suggestion that the author is proposing. Well, that sounds quite a lot like Composer. You can take any code, no matter what format, let the author build it however they like, then let all of the code be autoloaded according to the rules the developer has set in the packages composer.json. Is it classmap, or is it PSR-0? Up to them. </p>\n\n<p>Anything else along these lines would be going back a step in logic. If its not classmap, and its not PSR-0, then its fucking magic, exactly what used to happen in the PHP community that we're trying to hard to get away from.</p>\n\n<p>Oh good, Foo {} lives in monkey.class.php, thanks for making that obvious bro.</p>\n\n<blockquote>\n  <p>We shouldn't be defining a standardised autoloader to tell library authors how to do things, instead we should be letting library authors optionally provide a way of telling a standardised autoloader how to load its files.</p>\n</blockquote>\n\n<p>The FIG is not defining a standardised autoloader, they are standardising the naming conventions that allow for a PSR-0 compatible autoloader. This autoloader is not restricted to JUST PSR-0, they can do what they like. </p>\n\n<p>That autoloader can try loading all of your custom application classes. Drupal and Joomla use their own autoloaders to load some of their own code using whatever the hell rules they see fit, AND ALSO support PSR-0 to load generic code packages, which makes life easier on the package developers because they can just build to PSR-0 instead of building to work with Zend, or work with Drupal, or work with Symfony - exactly the problem we're trying to avoid.</p>\n\n<blockquote>\n  <p>This approach has the added benefit of making it so that older existing libraries can be extended, not altered, to become compliant with the standard. As it stands, to make an existing non-PSR-0 compliant library PSR-0 compliant, the entire library must be restructured, and in a lot of cases, have every single file altered to add a namespace to it! To call this approach absurd would be an understatement.</p>\n</blockquote>\n\n<p>Restructured how much? Adding in a namespace is not exactly tough, and is part of a reasonable migration to being PHP 5.3 compatable anyway.</p>\n\n<p>Making the class name match the file name? Well that's just good common logic, and if your classes don't match the the file names then why not? </p>\n\n<p>If upgrading this code package is so complicated that it's not worth it, then why are you trying to do it? Includes and classmaps are perfectly valid options unless you're bored and want to take on a random challenge.</p>\n\n<blockquote>\n  <p>Ok, so perhaps we should only use PSR-0 for new projects and new libraries? If you set out to be PSR-0 compliant then you won't have that problem. This is true and exactly why PHP-FIG are pushing/encouraging everyone else to use their standard, but again it's rather backwards. Choosing your autoloader then using that choice to define how your project is structured can very easily result in a project which isn't structured in the best way for that particular project.</p>\n</blockquote>\n\n<p>Ignoring the fact that <strong>the FIG is not pushing/encouraging shit on you</strong>, I'm not sure what sort of project would not fit into PSR-0? Are you trying to make your entire application PSR-0, because it should only be generic code packages that you do this with, and I've yet to see a single generic PHP package that would not fit in with PSR-0. If your project is too complicated for PSR-0 (and I'd like to see examples of this so I know what you're actually talking about) then simply don't use PSR-0.</p>\n\n<blockquote>\n  <p>In OOP terms, PSR-0 breaks encapsulation. Code which uses it has implied knowledge about things it shouldn't be concerned with: Directory structures, the implementation details of the autoloader. Storing application configuration along with application logic is a bad idea. It severely limits flexibility by meaning you cannot use different configurations with different logic.</p>\n</blockquote>\n\n<p>I understand all of the words seperately…</p>\n\n<p>PSR-0 is extremely similar to the PEAR file/class naming structure, but a bit more namespacey. It's also almost <em>identical</em> to the way Kohana, Laravel 3 and FuelPHP do things and almost i-fucking-dentical to Zend. </p>\n\n<p>I have plenty of PSR-0 code which could be autoloaded with a completely custom autoloader, because its just logical naming.</p>\n\n<p>In no way is any \"application configuration\" stored, inferred or implied by naming your classes and filenames in a logical standard way. You can load this shit with direct includes, and it's all going to work just fine.</p>\n\n<blockquote>\n  <p>As it stands, what actually happens in the real world is that autoloaders are PSR-0 compliant, but then allow a bunch of workarounds to support other non PSR-0 libraries. These workarounds are autoloader specific. Composer uses a classmap, Zend provides several different autoload implementations and Symfony supports PSR-0 as well as a method for loading classes which use the PEAR naming convention.<br />\n  …<br />\n  What this means is that the \"standardised autoloader\" that PSR-0 advocates, is far from standard unless you limit the flexibility of your projects' structure by using only other libraries which follow PSR-0. As soon as you set foot outside this very narrow scope, you have to configure the autoloader manually.</p>\n</blockquote>\n\n<p>Right. Absolutely right.</p>\n\n<p>Symfony and Zend both have elements of autoloading that work entirely their own way, and they also support PSR-0 too - which is amazing. Developers can aim at PSR-0 and know their code is going to work everywhere, instead of trying to make it work for each different framework. Yay PSR-0 for making its goal entirely possible!</p>\n\n<blockquote>\n  <p>If the standard defined how autoloaders could be extended, rather than how autoloaders worked, then each library or vendor could provide its own extension to the autoloader.</p>\n</blockquote>\n\n<p>The PSR-0 standard does not define how autoloaders work. It defines the rules of PSR-0 compatibility, allowing an autoloader to be PSR-0 compatible as well as do whatever else it would like to do, which you've already pointed out is what Zend and Symfony do.</p>\n\n<h2>The Example</h2>\n\n<p>This is an example of an autoloader implementation. PSR-0 is not an autoloader, it is the standard which defines what rules make something PSR-0 compatible.</p>\n\n<p>There are several things I don't like about this example.</p>\n\n<h3>Where does this code live</h3>\n\n<p>There is an interface, some rule classes (which constitutes \"configuring the autoloader\", which the author complained about earlier) and a autoload.json in the \"library directory\".</p>\n\n<p>Now, what the crap is a .json file doing in my PHP library package?</p>\n\n<p>Go on. Say it. \"Composer has a .json file\". Right, the .json file and all of this metadata live in the <strong>composer</strong> package, which just so happens to sit near my PHP code but is <strong>nothing</strong> to do with PSR-0.</p>\n\n<h2>Composer != PSR-0</h2>\n\n<p>Almost every time a \"PSR-0 sucks\" argument comes up its by people that A) do not know that Composer and PSR-0 are not the same thing, or B) do not know that PSR-0 was out for at least a year before Composer was but a twinkle in the eye of Jordi and Nils.</p>\n\n<p>This poster is confusing the fact that PSR-0 is a standard of rules that allow an autoloader to know where stuff is, with Composer which is a dependency manager that can autoload pretty much anything.</p>\n\n<p>That's not the same thing, and I hope you can all see why.</p>\n\n<h2>So this is not a PSR-0 competitor</h2>\n\n<p>This example is either a replacement for the Composer autoloader, or a potential feature. But even then I have to wonder: is this even anything new?</p>\n\n<p>Why not just auto-include an autoload.php file using the <a href=\"http://getcomposer.org/doc/04-schema.md#files\">file autoload</a> syntax, then write your custom autoloader in there?</p>\n\n<blockquote>\n  <p>What PSR-0 tries to achieve is good but its execution is one of the most inflexible and restrictive trends to hit PHP for quite some time.</p>\n</blockquote>\n\n<p>It's 4 years old.</p>\n\n<blockquote>\n  <p>Don't configure your application's structure based on your autoloader, configure your autoloader based on your application's structure.</p>\n</blockquote>\n\n<p>You really shouldn't be trying to PSR-0 your entire application, that would be suicide.</p>\n\n<blockquote>\n  <p>What's laughable is that over at the PHP-FIG mailing list, there's a post which highlights some of the current implementation restrictions in PSR-0. Their proposed solution? Add another PSR rule as a workaround rather than solving the problem of inflexibility inherent in PSR-0!</p>\n</blockquote>\n\n<p>There are only two \"problems\" in PSR-0, neither of which have been touched on in this article.</p>\n\n<ol>\n<li>PSR-0 can autoload two different classes to the same path, then error. I've described it fully <a href=\"https://github.com/philsturgeon/psr0-naming-oddity\">here</a>.</li>\n<li>PyroCMS has a src/ folder in each module, so some modules PSR-0 folder structure is system/cms/modules/users/src/Pyro/Module/User/Model/Group.php.</li>\n</ol>\n\n<p>So, 1 is fair enough because that was build intentionally, to allow developers to easily support the old underscore structure that people were commonly using, the new autoloader will only work with namespaces to avoid this collision. Nice.</p>\n\n<p>The second point allows the autoloader to allow a little extra config to make it system/cms/modules/users/src/User/Model/Group.php, still mapping to Pyro\\Module\\User\\Model\\Group.php, which is trivial at best but will make a few of my module developers happier that they don't need to use those two extra folders. Many projects will definitely still want to use PSR-0, and some will use this new PSR-X, which is nice to have that flexibility.</p>\n\n<p>Composer will then support PSR-X too, so all included packages will automatically be included no matter what PSR they decide to use.</p>\n\n<h2>Summary</h2>\n\n<p>This article comes across as:</p>\n\n<blockquote>\n  <p>This brand new thing [which is 4 years old] is not exactly what I'd expect to see based on expectations that are being made 4 years after its conception and with the knowledge of tools that didnt exist at the time, and any attempt to improve this situation is laughable because these guys are all tools.</p>\n</blockquote>\n\n<p>PSR-0 has its problems, but they are the two that I have pointed out and they are rather trivial. These two issues are being removed in a new standard which is currently going through the proposal stages and so far it has excellent support. Once it's voted in and Composer integrates the standard into their autoloader some developers can spend 3 minutes porting their packages, or continue to use PSR-0.</p>\n\n<p>If you'd like to add custom autoloaders to your Composer packages then go ahead. If you'd like to build your own custom autoloaders for all of your packages then you can do that too, but it ruins the entire purpose of what PSR-0 is meant to do. </p>\n\n<p>That's fine, because you don't need to use it, but I am happy as hell that PSR-0 exists and I wouldn't make drastic changes to it for anything. Every developer who chooses to use it (and that is a fucking lot so far) has helped to drastically improve the eco-system of PHP, and thats a trend I like the sound of.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "150",
    "created": "2013-04-22 15:52:00",
    "updated": "2013-04-22 15:52:00",
    "created_by": "2",
    "ordering_count": "3",
    "title": "Kapture is hiring",
    "slug": "kapture-is-hiring",
    "category_id": "2",
    "attachment": "",
    "intro": "Kapture is a Brooklyn-based company I&#39;ve been working for this last year as Lead Engineer. We make an iPhone app which essentially rewards users for sharing a photograph of a specific opportunity with their friends on Facebook, Twitter or (coming soon) Foursquare. This at its most basic level means if I share a photograph of my food when I go to one of our partner restaurants, I could get a glass of wine, or a desert, or whatever that partner is doing, for free. Beyond that we have all sorts of people on board, from shoe shops to hotels, and plenty more verticals are covered too.&nbsp;",
    "body": "I've been with [Kapture](http://kaptu.re/) nearly a year now, which is weird for me as a developer who was very happy doing my own thing with HappyNinjas. I vowed to never work for anyone else again based on some bad (and boring) experiences prior to my self-employed career, but I'm really glad I changed my mind.\n\nKapture is a Brooklyn-based company building an app which I really believe is going to be big. Essentially it rewards users for sharing a photograph of a specific opportunity with their friends on Facebook, Twitter or (coming soon) Foursquare. This at its most basic level means if I share a photograph of my food when I go to one of our partner restaurants, I could get a glass of wine, or a desert, or whatever that partner is doing, for free. Beyond that we have all sorts of people on board, from shoe shops to hotels, and plenty more verticals are covered too. \n\nWe've been live for several months, had some amazing coverage and had wonderful feedback from our early adopters. Now we are getting ready for the next big version of our application to go public, and it's the perfect time for me to try and find more developers to help me out.\n\nSo, I am looking for a Senior level LAMPish developer to join the team here at Kapture, to help build new features, increase test coverage on the existing codebase and add awesome new functionality like a merchant dashboard, to let anyone anywhere in the world add campaigns to our system. We're also looking for a Junior developer, and I'm ok with helping out a developer who is still learning how some of these technologies work, as long as they are a quick learner who likes to experiment with new technology.\n\nThe position is on-site here in our Dumbo office, in Brooklyn, NY. No remote working, and sadly we can't help you get a working visa. If you're able to work in the US then you're a candidate.\n\n## Down to the Details\n\nHow good you are with these technologies depends on if you're aiming for the Junior or Senior role. You'll be working with very similar stuff either way, but the less help you need the better.\n\n### Knowledge of these minimum technologies and concepts\n* PHP\n* MySQL\n* Git\n* RESTful API’s\n\n### Knowledge of these technologies is considered a bonus\n* Laravel 4\n* EmberJS\n* MongoDB\n* Redis\n* Python\n* Chef\n* Jenkins\n* Capistrano\n\nI've put a more descriptive listing for the [Senior Dev role](http://careers.stackoverflow.com/jobs/33569/senior-php-api-developer-kapture-life) up on the StackOverflow Careers site too, but it's saying pretty much the same thing as this. If you are this person, or you know somebody that might be interest, you should get in touch.\n\n## Why Kapture? \n\nThere are plenty of jobs going around. Demand for PHP devs is ridiculous these days and I can always name at least 5 of my friends trying to find somebody at any given point, but Kapture is an excellent company to come work for, for a variety of reasons:\n\n### Casual working environment\n\nThis is not a stuck-up office, so relax. The office is big enough to ride a bike around, and I've proven that theory.\n\n### All about open-source\n\nIf you make something awesome that could be a PHP Composer package, then you should absolutely release that and blog about it. If we're not behind on a deadline then that blog article can be done on a Friday afternoon, probably with a beer.\n\n### We use whatever technology we want\n\nThere are lots of elements to Kapture, from the admin panel (Laravel 4 and Bootstrap), the merchant panel (EmberJS), the API itself (Laravel 4 too) and the worker processes (Python).\n\nIntermixed with all that we use a little Redis, Mongo (*sparingly!!*) and MySQL. We can use whatever tool is deemed best instead of sticking to whatever X technology the boss has heard is probably a good idea from his nephew who made a website once.\n\n### No legacy code-base\n\nI spent the last year destroying the previous API which would score so highly on the PHP Mess Detector that it would cause a universe implosion. That is going into deprecation mode as soon as v3.0 of the app is in the store, and everything else is new fangled and sexy. This means we can use PHP 5.4 and as soon as PHP 5.5 comes out we'll be upgrading to that too. New hotness, not \"but if we update it might break things so we'd better use PHP 5.1 for the next decade…\".\n\n### No red-tape\n\nI've worked in large offices where you have to get a whole essay of an RFC written up, countersigned and dated by 3 of your bosses to get a typ0 fixed on the homepage. Fuck that noise.\n\nWe get paid to write awesome code, and that is what we'll be doing. Help me write and test more code, so we can help Kapture reach its full potential. I want a boat.\n\nGet in touch with me on the contact form if you want to talk to me specifically or hit up [joinus@kaptu.re](mailto:joinus@kaptu.re) with a copy of your resume and a link to your GitHub profile. You don't NEED to have a huge profile, but if you can show you know how open-source works and give us an example of your work then it'll certainly help.",
    "created_on": "1366645920",
    "updated_on": "1366645920",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "2c80778837e507716176d02373e69021",
    "type": "markdown",
    "parsed": "<p>I've been with <a href=\"http://kaptu.re/\">Kapture</a> nearly a year now, which is weird for me as a developer who was very happy doing my own thing with HappyNinjas. I vowed to never work for anyone else again based on some bad (and boring) experiences prior to my self-employed career, but I'm really glad I changed my mind.</p>\n\n<p>Kapture is a Brooklyn-based company building an app which I really believe is going to be big. Essentially it rewards users for sharing a photograph of a specific opportunity with their friends on Facebook, Twitter or (coming soon) Foursquare. This at its most basic level means if I share a photograph of my food when I go to one of our partner restaurants, I could get a glass of wine, or a desert, or whatever that partner is doing, for free. Beyond that we have all sorts of people on board, from shoe shops to hotels, and plenty more verticals are covered too. </p>\n\n<p>We've been live for several months, had some amazing coverage and had wonderful feedback from our early adopters. Now we are getting ready for the next big version of our application to go public, and it's the perfect time for me to try and find more developers to help me out.</p>\n\n<p>So, I am looking for a Senior level LAMPish developer to join the team here at Kapture, to help build new features, increase test coverage on the existing codebase and add awesome new functionality like a merchant dashboard, to let anyone anywhere in the world add campaigns to our system. We're also looking for a Junior developer, and I'm ok with helping out a developer who is still learning how some of these technologies work, as long as they are a quick learner who likes to experiment with new technology.</p>\n\n<p>The position is on-site here in our Dumbo office, in Brooklyn, NY. No remote working, and sadly we can't help you get a working visa. If you're able to work in the US then you're a candidate.</p>\n\n<h2>Down to the Details</h2>\n\n<p>How good you are with these technologies depends on if you're aiming for the Junior or Senior role. You'll be working with very similar stuff either way, but the less help you need the better.</p>\n\n<h3>Knowledge of these minimum technologies and concepts</h3>\n\n<ul>\n<li>PHP</li>\n<li>MySQL</li>\n<li>Git</li>\n<li>RESTful API’s</li>\n</ul>\n\n<h3>Knowledge of these technologies is considered a bonus</h3>\n\n<ul>\n<li>Laravel 4</li>\n<li>EmberJS</li>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>Python</li>\n<li>Chef</li>\n<li>Jenkins</li>\n<li>Capistrano</li>\n</ul>\n\n<p>I've put a more descriptive listing for the <a href=\"http://careers.stackoverflow.com/jobs/33569/senior-php-api-developer-kapture-life\">Senior Dev role</a> up on the StackOverflow Careers site too, but it's saying pretty much the same thing as this. If you are this person, or you know somebody that might be interest, you should get in touch.</p>\n\n<h2>Why Kapture?</h2>\n\n<p>There are plenty of jobs going around. Demand for PHP devs is ridiculous these days and I can always name at least 5 of my friends trying to find somebody at any given point, but Kapture is an excellent company to come work for, for a variety of reasons:</p>\n\n<h3>Casual working environment</h3>\n\n<p>This is not a stuck-up office, so relax. The office is big enough to ride a bike around, and I've proven that theory.</p>\n\n<h3>All about open-source</h3>\n\n<p>If you make something awesome that could be a PHP Composer package, then you should absolutely release that and blog about it. If we're not behind on a deadline then that blog article can be done on a Friday afternoon, probably with a beer.</p>\n\n<h3>We use whatever technology we want</h3>\n\n<p>There are lots of elements to Kapture, from the admin panel (Laravel 4 and Bootstrap), the merchant panel (EmberJS), the API itself (Laravel 4 too) and the worker processes (Python).</p>\n\n<p>Intermixed with all that we use a little Redis, Mongo (<em>sparingly!!</em>) and MySQL. We can use whatever tool is deemed best instead of sticking to whatever X technology the boss has heard is probably a good idea from his nephew who made a website once.</p>\n\n<h3>No legacy code-base</h3>\n\n<p>I spent the last year destroying the previous API which would score so highly on the PHP Mess Detector that it would cause a universe implosion. That is going into deprecation mode as soon as v3.0 of the app is in the store, and everything else is new fangled and sexy. This means we can use PHP 5.4 and as soon as PHP 5.5 comes out we'll be upgrading to that too. New hotness, not \"but if we update it might break things so we'd better use PHP 5.1 for the next decade…\".</p>\n\n<h3>No red-tape</h3>\n\n<p>I've worked in large offices where you have to get a whole essay of an RFC written up, countersigned and dated by 3 of your bosses to get a typ0 fixed on the homepage. Fuck that noise.</p>\n\n<p>We get paid to write awesome code, and that is what we'll be doing. Help me write and test more code, so we can help Kapture reach its full potential. I want a boat.</p>\n\n<p>Get in touch with me on the contact form if you want to talk to me specifically or hit up <a href=\"mailto:joinus@kaptu.re\">joinus@kaptu.re</a> with a copy of your resume and a link to your GitHub profile. You don't NEED to have a huge profile, but if you can show you know how open-source works and give us an example of your work then it'll certainly help.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "151",
    "created": "2013-04-26 22:00:00",
    "updated": "2013-04-26 22:00:00",
    "created_by": "2",
    "ordering_count": "4",
    "title": "Vagrant and Chef: Upgrade Party",
    "slug": "vagrant-and-chef-upgrade-party",
    "category_id": "21",
    "attachment": "",
    "intro": "The other day I thought to myself, I really should be using a RVM gemset for my &quot;devops&quot; repo, which contains all my Vagrant and Chef logic (along with submodules for everything else). This broke everything, but I got there in the end.",
    "body": "The other day I thought to myself, I really should be using a RVM gemset for my \"devops\" repo, which contains all my Vagrant and Chef logic (along with submodules for everything else). \n\nThis repo is meant to be a minimum-fuss \"Go-bag\" for any freelancers I bring in to help me at Kapture so using a Gemset for this reduces an extra step of \"Oh yeah you need to make sure you have this version of Ruby and these gems installed\".\n\nIn doing this, I accidentally forced myself to upgrade from Chef 10.12 to v11.4 and Vagrant v1.2.2. These both had breaking changes, so this ended up sucking pretty badly. \n\nThis guide shows how I muddled through. There are other ways of doing it no doubt, and I may well be showing ignorance or stupidity in my approaches, but this is how I went from \"everything working\" to \"its fucked\" to \"everything working again\".\n\n### Vagrant Upgrade\n\nI deleted the gem locally and tried to install it in my gemset, but then noticed in the docs the newest version no longer has a gem.\n\nI could have installed an old version, but they've been recommending against using the gem for a while so I jumped in the deep end with v1.2.2.\n\nThe upgrade was actually simple, I just made a metadata.json file next to Vagrantfile:\n\n{{ prism:syntax lang=\"json\" }}\n{\n    \"provider\": \"virtualbox\"\n}\n{{ /prism:syntax }}\n\nAfter that I found myself having to destroy the box, and bring it back up. That's fine because Chef has it provisioned and everything so, I did that, rebuilt it and carried on working all day.\n    \n### Chef Troubles\n\nI had two problems with Chef this week. The first came from me not noticing the new Chef gem in my gemset was 11.4, and my Vagrant box was rocking it old school on v10.12. I've been using these systems without updating anything while I build out Kapture, but the guys building Chef have been hard at work too.\n\nWhile provisioning Chef throws out this error:\n\n> NoMethodError: undefined method `unpack' for chef\n\nA little Googling took me to [StackOverflow](http://stackoverflow.com/questions/11325479/how-to-control-the-version-of-chef-that-vagrant-uses-to-provision-vms) (funny that) and the solution worked nicely:\n\n{{ prism:syntax lang=\"bash\" }}\n$ vagrant up --no-provision \n$ vagrant ssh\n{{ /prism:syntax }}\n\nWhen inside the vagrant box:\n\n{{ prism:syntax lang=\"bash\" }}\n$ sudo dpkg --purge chef chef-full\n$ wget -O - https://opscode.com/chef/install.sh | sudo bash\n$ sudo apt-get update && sudo aptitude safe-upgrade\n$ sudo rm /var/cache/apt/archives/*.deb\n{{ /prism:syntax }}\n\nThat took care of my Chef complaints perfectly, and I got to update my boxes. Again, I carried on working all day, but then I tried to bring the box back up the day after:\n\n> Vagrant assumes that this means the command failed!  \n> \n> mount -t vboxsf -o uid=`id -u vagrant`,gid=`id -g vagrant` /vagrant /vagrant  \n> The following SSH command responded with a non-zero exit status.  \n> Vagrant assumes that this means the command failed!\n    \nIt turns out the command I ran to update Chef wiped out the Virtual Box Guest Additions. A quick chat on the IRC pointed me to the [Troubleshooting section](http://docs-v1.vagrantup.com/v1/docs/troubleshooting.html) (thanks [Chris Boden](https://twitter.com/boden_c)) and the first answer took care of this almost perfectly.\n\n{{ prism:syntax lang=\"bash\" }}\n$ sudo /etc/init.d/vboxadd setup\n{{ /prism:syntax }}\n\nI ran that and got errors, indicating I was missing `linux-headers-3.5.0-27-generic`. So first I had to install that with apt-get then run the command again.\n\nNow I can reload my box consistently. Yaaaay!\n\nLuckily I am developing solo at Kapture at the moment, because going through all of this on multiple boxes, or getting multiple developers to destroy their boxes would have sucked. \n\nTo avoid many of the problems I'm going to start building my own boxes with [VeeWee](https://github.com/jedi4ever/veewee). This lets me build my own .box files, so I wouldn't need to use an .box with old Chef then upgrade, I would just build a new box and it would magically install the latest version.\n\nI really should have been doing this before, but until now I've been getting by fine with grabbing shit off [Vagrantbox.es](http://www.vagrantbox.es/) and going with it.\n\nI'll blog this up when I'm done.\n\n**Update:** [Done](http://philsturgeon.co.uk/blog/2013/05/build-your-own-vagrant-boxes-with-veewee).",
    "created_on": "1367010000",
    "updated_on": "1367010000",
    "status": "live",
    "comments_enabled": "2 weeks",
    "author_id": "2",
    "keywords": "381a37dabacf0655f5779a70e83e1da8",
    "type": "markdown",
    "parsed": "<p>The other day I thought to myself, I really should be using a RVM gemset for my \"devops\" repo, which contains all my Vagrant and Chef logic (along with submodules for everything else). </p>\n\n<p>This repo is meant to be a minimum-fuss \"Go-bag\" for any freelancers I bring in to help me at Kapture so using a Gemset for this reduces an extra step of \"Oh yeah you need to make sure you have this version of Ruby and these gems installed\".</p>\n\n<p>In doing this, I accidentally forced myself to upgrade from Chef 10.12 to v11.4 and Vagrant v1.2.2. These both had breaking changes, so this ended up sucking pretty badly. </p>\n\n<p>This guide shows how I muddled through. There are other ways of doing it no doubt, and I may well be showing ignorance or stupidity in my approaches, but this is how I went from \"everything working\" to \"its fucked\" to \"everything working again\".</p>\n\n<h3>Vagrant Upgrade</h3>\n\n<p>I deleted the gem locally and tried to install it in my gemset, but then noticed in the docs the newest version no longer has a gem.</p>\n\n<p>I could have installed an old version, but they've been recommending against using the gem for a while so I jumped in the deep end with v1.2.2.</p>\n\n<p>The upgrade was actually simple, I just made a metadata.json file next to Vagrantfile:</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n{\n    \"provider\": \"virtualbox\"\n}\n{{ /prism:syntax }}</p>\n\n<p>After that I found myself having to destroy the box, and bring it back up. That's fine because Chef has it provisioned and everything so, I did that, rebuilt it and carried on working all day.</p>\n\n<h3>Chef Troubles</h3>\n\n<p>I had two problems with Chef this week. The first came from me not noticing the new Chef gem in my gemset was 11.4, and my Vagrant box was rocking it old school on v10.12. I've been using these systems without updating anything while I build out Kapture, but the guys building Chef have been hard at work too.</p>\n\n<p>While provisioning Chef throws out this error:</p>\n\n<blockquote>\n  <p>NoMethodError: undefined method `unpack' for chef</p>\n</blockquote>\n\n<p>A little Googling took me to <a href=\"http://stackoverflow.com/questions/11325479/how-to-control-the-version-of-chef-that-vagrant-uses-to-provision-vms\">StackOverflow</a> (funny that) and the solution worked nicely:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ vagrant up --no-provision \n$ vagrant ssh\n{{ /prism:syntax }}</p>\n\n<p>When inside the vagrant box:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ sudo dpkg --purge chef chef-full\n$ wget -O - https://opscode.com/chef/install.sh | sudo bash\n$ sudo apt-get update &amp;&amp; sudo aptitude safe-upgrade\n$ sudo rm /var/cache/apt/archives/*.deb\n{{ /prism:syntax }}</p>\n\n<p>That took care of my Chef complaints perfectly, and I got to update my boxes. Again, I carried on working all day, but then I tried to bring the box back up the day after:</p>\n\n<blockquote>\n  <p>Vagrant assumes that this means the command failed!  </p>\n  \n  <p>mount -t vboxsf -o uid=<code>id -u vagrant</code>,gid=<code>id -g vagrant</code> /vagrant /vagrant<br />\n  The following SSH command responded with a non-zero exit status.<br />\n  Vagrant assumes that this means the command failed!</p>\n</blockquote>\n\n<p>It turns out the command I ran to update Chef wiped out the Virtual Box Guest Additions. A quick chat on the IRC pointed me to the <a href=\"http://docs-v1.vagrantup.com/v1/docs/troubleshooting.html\">Troubleshooting section</a> (thanks <a href=\"https://twitter.com/boden_c\">Chris Boden</a>) and the first answer took care of this almost perfectly.</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ sudo /etc/init.d/vboxadd setup\n{{ /prism:syntax }}</p>\n\n<p>I ran that and got errors, indicating I was missing <code>linux-headers-3.5.0-27-generic</code>. So first I had to install that with apt-get then run the command again.</p>\n\n<p>Now I can reload my box consistently. Yaaaay!</p>\n\n<p>Luckily I am developing solo at Kapture at the moment, because going through all of this on multiple boxes, or getting multiple developers to destroy their boxes would have sucked. </p>\n\n<p>To avoid many of the problems I'm going to start building my own boxes with <a href=\"https://github.com/jedi4ever/veewee\">VeeWee</a>. This lets me build my own .box files, so I wouldn't need to use an .box with old Chef then upgrade, I would just build a new box and it would magically install the latest version.</p>\n\n<p>I really should have been doing this before, but until now I've been getting by fine with grabbing shit off <a href=\"http://www.vagrantbox.es/\">Vagrantbox.es</a> and going with it.</p>\n\n<p>I'll blog this up when I'm done.</p>\n\n<p><strong>Update:</strong> <a href=\"http://philsturgeon.co.uk/blog/2013/05/build-your-own-vagrant-boxes-with-veewee\">Done</a>.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "152",
    "created": "2013-05-01 18:24:00",
    "updated": "2013-05-01 18:24:00",
    "created_by": "2",
    "ordering_count": "5",
    "title": "Testing and Contributing with Composer Packages",
    "slug": "testing-contributing-composer-packages",
    "category_id": "2",
    "attachment": "",
    "intro": "While Composer has been around for a while now, many packages are still in their infancy (&lt; 1.0) or sometimes are just not as feature filled as they could be. Pull requests are going to be a common thing for the PHP community to be doing to these packages and this needs to be done safely, with unit-testing.&nbsp;<span style=\"line-height: 1.6em;\">So, how do you run their test suite and add your own tests?</span>",
    "body": "While Composer has been around for a while now, many packages are still in their infancy (< 1.0) or sometimes are just not as feature filled as they could be. To be fair there is always more to be done. It can always do more, or do the same thing more efficiently.\n\nWhatever the case, pull requests are going to be a common thing for the PHP community to be doing to these packages and this needs to be done safely, with unit-testing.\n\nSo, how do you run their test suite and add your own tests?\n\n## Composer the Composer\n\nYou want to go two levels deep for this one and install composer inside the package itself:\n\n{{ prism:syntax lang=\"bash\" }}\ncd myapp/vendor/laravel/framework\ncurl -sS https://getcomposer.org/installer | php\n{{ /prism:syntax }}\n    \nIf you've installed Composer globally by renaming it to /usr/bin/composer then you can skip that of course.\n\nThen you want to run Composer and have it install all of the packages dependencies. Normally these will be lumped into your main `myapp/vendor/` folder when you run the main composer install, but this will just install all the packages and any dev stuff it needs to complete its unit tests in the current directory:\n\n{{ prism:syntax lang=\"bash\" }}\n./composer.phar install --dev\n{{ /prism:syntax }}\n\n## Testing the Package\n\nWith the --dev dependencies installed you can easily run whatever test suite the package developer has set up - which is most likely (at the very least) going to be PHPUnit.\n\n{{ prism:syntax lang=\"bash\" }}\n./vendor/bin/phpunit\n{{ /prism:syntax }}\n\nThis should run their tests, as long as the core of the package has a phpunit.xml file. If the phpunit.xml is elsewhere (maybe in a build/ folder for Jenkins or whatever) then simply reference the location with the -c option:\n\n{{ prism:syntax lang=\"bash\" }}\n./vendor/bin/phpunit -c build/phpunit.xml\n{{ /prism:syntax }}\n\nIt's important to run this before you start faffing around with their code, because writing your own code gets much more difficult if theirs is not even working. \n\nIf you get a red before doing anything fix that, THEN work on your own feature (or give up an find a better package, whichever).\n    \n## Adding Tests\n\nGot a green light? Awesome. \n\nIn which order you do the next bit is pretty unimportant, but I like to write the test first, then write the code:\n\n{{ prism:syntax lang=\"php\" }}\npublic function testSort()\n{\n    $data = new Collection(array(5, 3, 1, 2, 4));\n    $data->sort(function($a, $b)\n    { \n        if ($a === $b)\n        {\n            return 0;\n        }\n        return ($a < $b) ? -1 : 1;\n    });\n\n    $this->assertEquals(range(1, 5), array_values($data->all()));\n}\n{{ /prism:syntax }}\n\nThis was just some new method for Laravel 4's Support\\Collection class which lets you uasort() on a Collection. Not rocket science, but Taylor isn't going to merge this without tests, mostly because he knows what I'm like.\n\nRunning that gives me a big old red light, because the method doesn't even exist. So, I write the method, muddle through a few errors and then it goes green. YAAAAY!\n\n## Sending the Pull Request\n\nYou've written the feature. Time to share it with the world!\n\nGo to the main repo (in this case github.com/laravel/framework) and click Fork. Copy the Git+SSH URL then hop into the terminal and do this:\n\n{{ prism:syntax lang=\"bash\" }}\ngit checkout -b feature/kittens\ngit add src/Fluffy.php src/Snuggles.php\ngit commit -m \"More kittens.\"\ngit push git@github.com:philsturgeon/framework.git feature/kittens\n{{ /prism:syntax }}\n  \nRefresh your repo page and you'll see a Pull Request button next to the branch you just pushed. Click that, write a message, done.\n\n## Using your fork\n\nThere is going to be some time in between you submitting this pull request and it getting merged into a release for you to use, and you need to be ok with that. Some projects merge quick, some take longer. Sometimes its because the package has slow release cycles, and sometimes the person in charge is just an asshole. Who knows!\n\nComposer is completely ready to help you out here either way.\n\n{{ prism:syntax lang=\"json\" }}\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"git://github.com/philsturgeon/framework.git\"\n        }\n    ],\n    \"require\": {\n        \"laravel/framework\": \"dev-feature/kittens\",\n\t\t\"other/stuff\" : \"1.0.*@stable\"\n    },\n    \"minimum-stability\": \"dev\"\n}\n{{ /prism:syntax }}\n\nNow when you composer update you're going to find yourself using your version of the code, not theirs. This means you can wait as long as it takes to do it. \n\nYou can even merge all of these individual branches into the master branch of your fork, so you can use all your changes at the same time without mushing them into the same PR.",
    "created_on": "1367429040",
    "updated_on": "1367429040",
    "status": "live",
    "comments_enabled": "2 weeks",
    "author_id": "2",
    "keywords": "32217bb5145ee125d9c51b8fdac94589",
    "type": "markdown",
    "parsed": "<p>While Composer has been around for a while now, many packages are still in their infancy (&lt; 1.0) or sometimes are just not as feature filled as they could be. To be fair there is always more to be done. It can always do more, or do the same thing more efficiently.</p>\n\n<p>Whatever the case, pull requests are going to be a common thing for the PHP community to be doing to these packages and this needs to be done safely, with unit-testing.</p>\n\n<p>So, how do you run their test suite and add your own tests?</p>\n\n<h2>Composer the Composer</h2>\n\n<p>You want to go two levels deep for this one and install composer inside the package itself:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\ncd myapp/vendor/laravel/framework\ncurl -sS https://getcomposer.org/installer | php\n{{ /prism:syntax }}</p>\n\n<p>If you've installed Composer globally by renaming it to /usr/bin/composer then you can skip that of course.</p>\n\n<p>Then you want to run Composer and have it install all of the packages dependencies. Normally these will be lumped into your main <code>myapp/vendor/</code> folder when you run the main composer install, but this will just install all the packages and any dev stuff it needs to complete its unit tests in the current directory:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n./composer.phar install --dev\n{{ /prism:syntax }}</p>\n\n<h2>Testing the Package</h2>\n\n<p>With the --dev dependencies installed you can easily run whatever test suite the package developer has set up - which is most likely (at the very least) going to be PHPUnit.</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n./vendor/bin/phpunit\n{{ /prism:syntax }}</p>\n\n<p>This should run their tests, as long as the core of the package has a phpunit.xml file. If the phpunit.xml is elsewhere (maybe in a build/ folder for Jenkins or whatever) then simply reference the location with the -c option:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n./vendor/bin/phpunit -c build/phpunit.xml\n{{ /prism:syntax }}</p>\n\n<p>It's important to run this before you start faffing around with their code, because writing your own code gets much more difficult if theirs is not even working. </p>\n\n<p>If you get a red before doing anything fix that, THEN work on your own feature (or give up an find a better package, whichever).</p>\n\n<h2>Adding Tests</h2>\n\n<p>Got a green light? Awesome. </p>\n\n<p>In which order you do the next bit is pretty unimportant, but I like to write the test first, then write the code:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\npublic function testSort()\n{\n    $data = new Collection(array(5, 3, 1, 2, 4));\n    $data->sort(function($a, $b)\n    { \n        if ($a === $b)\n        {\n            return 0;\n        }\n        return ($a &lt; $b) ? -1 : 1;\n    });</p>\n\n<pre><code>$this-&gt;assertEquals(range(1, 5), array_values($data-&gt;all()));\n</code></pre>\n\n<p>}\n{{ /prism:syntax }}</p>\n\n<p>This was just some new method for Laravel 4's Support\\Collection class which lets you uasort() on a Collection. Not rocket science, but Taylor isn't going to merge this without tests, mostly because he knows what I'm like.</p>\n\n<p>Running that gives me a big old red light, because the method doesn't even exist. So, I write the method, muddle through a few errors and then it goes green. YAAAAY!</p>\n\n<h2>Sending the Pull Request</h2>\n\n<p>You've written the feature. Time to share it with the world!</p>\n\n<p>Go to the main repo (in this case github.com/laravel/framework) and click Fork. Copy the Git+SSH URL then hop into the terminal and do this:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\ngit checkout -b feature/kittens\ngit add src/Fluffy.php src/Snuggles.php\ngit commit -m \"More kittens.\"\ngit push git@github.com:philsturgeon/framework.git feature/kittens\n{{ /prism:syntax }}</p>\n\n<p>Refresh your repo page and you'll see a Pull Request button next to the branch you just pushed. Click that, write a message, done.</p>\n\n<h2>Using your fork</h2>\n\n<p>There is going to be some time in between you submitting this pull request and it getting merged into a release for you to use, and you need to be ok with that. Some projects merge quick, some take longer. Sometimes its because the package has slow release cycles, and sometimes the person in charge is just an asshole. Who knows!</p>\n\n<p>Composer is completely ready to help you out here either way.</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"git://github.com/philsturgeon/framework.git\"\n        }\n    ],\n    \"require\": {\n        \"laravel/framework\": \"dev-feature/kittens\",\n        \"other/stuff\" : \"1.0.*@stable\"\n    },\n    \"minimum-stability\": \"dev\"\n}\n{{ /prism:syntax }}</p>\n\n<p>Now when you composer update you're going to find yourself using your version of the code, not theirs. This means you can wait as long as it takes to do it. </p>\n\n<p>You can even merge all of these individual branches into the master branch of your fork, so you can use all your changes at the same time without mushing them into the same PR.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "153",
    "created": "2013-05-05 18:57:00",
    "updated": "2013-05-05 18:57:00",
    "created_by": "2",
    "ordering_count": "6",
    "title": "Build your own Vagrant Boxes with VeeWee",
    "slug": "build-your-own-vagrant-boxes-with-veewee",
    "category_id": "21",
    "attachment": "",
    "intro": "The other day I posted an article about <a href=\"/blog/2013/04/vagrant-and-chef-upgrade-party\">upgrading Chef and Vagrant</a>, and the pains you can end up having by relying on third-party vagrant boxes instead of building your own with VeeWee.<br />\n<br />\nGetting started was initially confusing to me, as I knew VeeWee was a gem, so I just tried installing it directly into my application gemset. The trouble here is that VeeWee depends on the Vagrant gem version v1.0.x and Vagrant is now not only on 1.2.2 but not actually a gem anymore.",
    "body": "The other day I posted an article about [upgrading Chef and Vagrant](/blog/2013/04/vagrant-and-chef-upgrade-party), and the pains you can end up having by relying on third-party vagrant boxes instead of building your own with [VeeWee](https://github.com/jedi4ever/veewee).\n\nGetting started was initially confusing to me, as I knew VeeWee was a gem, so I just tried installing it directly into my application gemset. The trouble here is that VeeWee depends on the Vagrant gem version v1.0.x and Vagrant is now not only on 1.2.2 but not actually a gem anymore.\n\n## Step 1: Create a \"VeeWee\" area\n\nSo, to get going the best thing to do is clone the VeeWee repo, which creates a new RVM gemset for you. This is a whole separate are probably in ~/Development or something:\n\n{{ prism:syntax lang=\"bash\" }}\ngit clone git@github.com:jedi4ever/veewee.git\n{{ /prism:syntax }}\n\n## Step 2: Install Dependencies \n\nWhen this is done if you have RVM set up to check for .rvmrc files it will ask you if you wish to trust this new gemset. If you see this, hit \"y\" to approve. If this message is not displayed (because you are not looking for .rvmrc files) then go and [set that up](https://rvm.io/rvm/install/). It should be something like:\n\n{{ prism:syntax lang=\"bash\" }}\necho \"source $HOME/.rvm/scripts/rvm\" >> ~/.bash_profile\n{{ /prism:syntax }}\n\nWith your gemset alive, you may well be told you need to install Ruby 1.9.2, which may or may not work:\n\n{{ prism:syntax lang=\"bash\" }}\nrvm install ruby-1.9.2-p320\n{{ /prism:syntax }}\n\nOn my work laptop it failed to find a build for this version of OSX. In this scenario RVM should try to build the correct version of Ruby from source, but it just threw its toys out of the pram and slapped me with a \"Tough shit, go home.\" error of some description.\n\nTo get around this I just tweaked the .rvmrc file to use 1.9.3, which has seemed to work without issue so far.\n\n_I've sent that version bump in as a [pull request](https://github.com/jedi4ever/veewee/pull/668), so it should be solved in the next version._\n\nPop back out of the folder and back in:\n\n{{ prism:syntax lang=\"bash\" }}\ncd ..\ncd veewee\n{{ /prism:syntax }}\n\nThis is a janky way to get your command line using the gemset, as it will have failed earlier due to lack of Ruby. There's probably a quicker way, but I don't care enough to Google it.\n\nNow install the gems VeeWee requires with bundler:\n\n{{ prism:syntax lang=\"bash\" }}\nbundle install\n{{ /prism:syntax }}\n\n## Step 3: Building your Box\n\nThis section is pretty much just a regurgitation of the wonderful documentation found [here](https://github.com/jedi4ever/veewee/blob/master/doc/vagrant.md).\n\nSee what templates are available:\n\n{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox templates | grep -i ubuntu\n{{ /prism:syntax }}\n\t\nGive up and use Ubuntu for everything:\n\n{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox define 'quantal64' 'ubuntu-12.10-server-amd64'\n{{ /prism:syntax }}\n\t\nKick off the build process. Once you've confirmed the download you might as well go for a walk, because it will be going for close to an hour:\n\n{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox build 'quantal64' \n{{ /prism:syntax }}\n\nThat is the worst of it done. Export just builds up the box and shoves it in the working directory:\n\n{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox export 'quantal64'\n{{ /prism:syntax }}\n\t\nThen add it to Vagrant:\n\n{{ prism:syntax lang=\"bash\" }}\nvagrant box add 'quantal64' 'quantal64'\n{{ /prism:syntax }}\n\t\nI already had a box with this name, so I just killed it off then re-ran the box add:\n\n{{ prism:syntax lang=\"bash\" }}\nrm -rf ~/.vagrant.d/boxes/quantal64 \n{{ /prism:syntax }}\n\t\n## Step 4: Put the .box somewhere useful\n\nThis step depends on how you're doing things. The VeeWee docs suggest you can just do:\n\n{{ prism:syntax lang=\"bash\" }}\ncd ~/Development/myapp\nvagrant init 'quantal64'\nvagrant up\t\n{{ /prism:syntax }}\n\nIf you're creating a new Vagrant dev environment from scratch then this is no doubt fine, but for me I was replacing an [existing setup](https://github.com/pyrocms/devops-vagrant) for PyroCMS. This made it a little more tricky, but not much.\n\nWe used to reference a random .box from somebodies GitHub profile, found via VagrantBox.es. I figured I could just shove this on Dropbox, but first I wanted to see if I could put a local filepath into the box_url property. Luckily, you can!\n\nIn your _Vagrantfile_ add this:\n\n{{ prism:syntax lang=\"ruby\" }}\nconfig.vm.box = \"quantal64\"\nconfig.vm.box_url = \"/Users/phil/Development/veewee/quantal64.box\"\n{{ /prism:syntax }}\n\nNow boot your box:\n\n{{ prism:syntax lang=\"bash\" }}\nvagrant up\n{{ /prism:syntax }}\n\nIt will copy from your hard-disk (much quicker than over the network) and hopefully boot just fine.\n\nAfter you've tested your box locally you can shove it on some network share, or internal URL, or Dropbox, or whatever, so you, your friends/colleagues/minions can work with the exact same box as you.",
    "created_on": "1367776620",
    "updated_on": "1367776620",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "b9510accc985b0121db18ceee629dc1f",
    "type": "markdown",
    "parsed": "<p>The other day I posted an article about <a href=\"/blog/2013/04/vagrant-and-chef-upgrade-party\">upgrading Chef and Vagrant</a>, and the pains you can end up having by relying on third-party vagrant boxes instead of building your own with <a href=\"https://github.com/jedi4ever/veewee\">VeeWee</a>.</p>\n\n<p>Getting started was initially confusing to me, as I knew VeeWee was a gem, so I just tried installing it directly into my application gemset. The trouble here is that VeeWee depends on the Vagrant gem version v1.0.x and Vagrant is now not only on 1.2.2 but not actually a gem anymore.</p>\n\n<h2>Step 1: Create a \"VeeWee\" area</h2>\n\n<p>So, to get going the best thing to do is clone the VeeWee repo, which creates a new RVM gemset for you. This is a whole separate are probably in ~/Development or something:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\ngit clone git@github.com:jedi4ever/veewee.git\n{{ /prism:syntax }}</p>\n\n<h2>Step 2: Install Dependencies</h2>\n\n<p>When this is done if you have RVM set up to check for .rvmrc files it will ask you if you wish to trust this new gemset. If you see this, hit \"y\" to approve. If this message is not displayed (because you are not looking for .rvmrc files) then go and <a href=\"https://rvm.io/rvm/install/\">set that up</a>. It should be something like:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\necho \"source $HOME/.rvm/scripts/rvm\" >> ~/.bash_profile\n{{ /prism:syntax }}</p>\n\n<p>With your gemset alive, you may well be told you need to install Ruby 1.9.2, which may or may not work:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nrvm install ruby-1.9.2-p320\n{{ /prism:syntax }}</p>\n\n<p>On my work laptop it failed to find a build for this version of OSX. In this scenario RVM should try to build the correct version of Ruby from source, but it just threw its toys out of the pram and slapped me with a \"Tough shit, go home.\" error of some description.</p>\n\n<p>To get around this I just tweaked the .rvmrc file to use 1.9.3, which has seemed to work without issue so far.</p>\n\n<p><em>I've sent that version bump in as a <a href=\"https://github.com/jedi4ever/veewee/pull/668\">pull request</a>, so it should be solved in the next version.</em></p>\n\n<p>Pop back out of the folder and back in:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\ncd ..\ncd veewee\n{{ /prism:syntax }}</p>\n\n<p>This is a janky way to get your command line using the gemset, as it will have failed earlier due to lack of Ruby. There's probably a quicker way, but I don't care enough to Google it.</p>\n\n<p>Now install the gems VeeWee requires with bundler:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nbundle install\n{{ /prism:syntax }}</p>\n\n<h2>Step 3: Building your Box</h2>\n\n<p>This section is pretty much just a regurgitation of the wonderful documentation found <a href=\"https://github.com/jedi4ever/veewee/blob/master/doc/vagrant.md\">here</a>.</p>\n\n<p>See what templates are available:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox templates | grep -i ubuntu\n{{ /prism:syntax }}</p>\n\n<p>Give up and use Ubuntu for everything:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox define 'quantal64' 'ubuntu-12.10-server-amd64'\n{{ /prism:syntax }}</p>\n\n<p>Kick off the build process. Once you've confirmed the download you might as well go for a walk, because it will be going for close to an hour:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox build 'quantal64' \n{{ /prism:syntax }}</p>\n\n<p>That is the worst of it done. Export just builds up the box and shoves it in the working directory:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nbundle exec veewee vbox export 'quantal64'\n{{ /prism:syntax }}</p>\n\n<p>Then add it to Vagrant:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nvagrant box add 'quantal64' 'quantal64'\n{{ /prism:syntax }}</p>\n\n<p>I already had a box with this name, so I just killed it off then re-ran the box add:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nrm -rf ~/.vagrant.d/boxes/quantal64 \n{{ /prism:syntax }}</p>\n\n<h2>Step 4: Put the .box somewhere useful</h2>\n\n<p>This step depends on how you're doing things. The VeeWee docs suggest you can just do:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\ncd ~/Development/myapp\nvagrant init 'quantal64'\nvagrant up<br />\n{{ /prism:syntax }}</p>\n\n<p>If you're creating a new Vagrant dev environment from scratch then this is no doubt fine, but for me I was replacing an <a href=\"https://github.com/pyrocms/devops-vagrant\">existing setup</a> for PyroCMS. This made it a little more tricky, but not much.</p>\n\n<p>We used to reference a random .box from somebodies GitHub profile, found via VagrantBox.es. I figured I could just shove this on Dropbox, but first I wanted to see if I could put a local filepath into the box_url property. Luckily, you can!</p>\n\n<p>In your <em>Vagrantfile</em> add this:</p>\n\n<p>{{ prism:syntax lang=\"ruby\" }}\nconfig.vm.box = \"quantal64\"\nconfig.vm.box_url = \"/Users/phil/Development/veewee/quantal64.box\"\n{{ /prism:syntax }}</p>\n\n<p>Now boot your box:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\nvagrant up\n{{ /prism:syntax }}</p>\n\n<p>It will copy from your hard-disk (much quicker than over the network) and hopefully boot just fine.</p>\n\n<p>After you've tested your box locally you can shove it on some network share, or internal URL, or Dropbox, or whatever, so you, your friends/colleagues/minions can work with the exact same box as you.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "154",
    "created": "2013-05-06 10:56:00",
    "updated": null,
    "created_by": "2",
    "ordering_count": "7",
    "title": "Bike to the Beach 2013",
    "slug": "bike-to-the-beach-2013",
    "category_id": "1",
    "attachment": "",
    "intro": "This June I will be participating in an annual fundraising bike ride to raise money for Autism awareness and research called <a href=\"https://www.kintera.org/faf/home/default.asp?ievent=1056864\"><span style=\"font-size: 13px; \">Bike to the Beach</span></a>. This bike ride goes all the way from Battery Park in Manhattan to the West Hamptons, which is a fucking long way; 100 miles to be precise. I need your money to make this whole thing worthwhile.",
    "body": "I have always liked to bike around. I bike to the pub, bike to my friends house, bike to dates (that never worked out so well) and bike up, over and around mountains for the sake of it, but I've never done anything quite so tricky as this next challenge.\n\nThis June I will be participating in an annual fundraising bike ride to raise money for Autism awareness and research called [Bike to the Beach](https://www.kintera.org/faf/home/default.asp?ievent=1056864). This bike ride goes all the way from Battery Park in Manhattan to the West Hamptons, which is a fucking long way; 100 miles to be precise. \n\nObviously I want to raise as much money for this good cause. I have family members and friends who's lives have been affected with Autism in various ways, and raising awareness, increasing funds for research, and generally helping out in any way is a great cause. My goal is $500 but I can definitely do a lot better than that with your help.\n\n> Autism is a neurological disorder that affects 1 out of every 88 children. Every 21 minutes a child is diagnosed with Autism, the fastest growing disability in the United States. Autism is a national crisis, costing the country more than $90 billion annually, yet it receives less than 5% of the federal funding of other less prevalent childhood diseases. \n\nSo, I plan to do all the hard work here. I've been out riding most weekends, done a few 75 milers and doing at least 20 miles a day just riding around. I am limping like John Wayne already and I have another month of training to go. If you can [throw as little as $10 my way](https://www.kintera.org/faf/donorReg/donorPledge.asp?ievent=1056864&lis=0&kntae1056864=810243F24F5B4C0D82E9DC26699DB95E&supId=381865150) then I'll be super grateful, and I might even use more polite swear-words next time we get into an argument on the internet!\n\nOr you can join us! [Team RAMRod](https://www.kintera.org/faf/search/searchTeamPart.asp?ievent=1056864&lis=1&kntae1056864=810243F24F5B4C0D82E9DC26699DB95E&supId=0&team=5493254&cj=Y) will be happy to have more people on board, there should be 4 or 5 of us so far but we're not all signed up. There is always room for more if you fancy it.",
    "created_on": "1367834160",
    "updated_on": "0",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "2e7758eb8bbba6e4734cf72979badabe",
    "type": "markdown",
    "parsed": "<p>I have always liked to bike around. I bike to the pub, bike to my friends house, bike to dates (that never worked out so well) and bike up, over and around mountains for the sake of it, but I've never done anything quite so tricky as this next challenge.</p>\n\n<p>This June I will be participating in an annual fundraising bike ride to raise money for Autism awareness and research called <a href=\"https://www.kintera.org/faf/home/default.asp?ievent=1056864\">Bike to the Beach</a>. This bike ride goes all the way from Battery Park in Manhattan to the West Hamptons, which is a fucking long way; 100 miles to be precise. </p>\n\n<p>Obviously I want to raise as much money for this good cause. I have family members and friends who's lives have been affected with Autism in various ways, and raising awareness, increasing funds for research, and generally helping out in any way is a great cause. My goal is $500 but I can definitely do a lot better than that with your help.</p>\n\n<blockquote>\n  <p>Autism is a neurological disorder that affects 1 out of every 88 children. Every 21 minutes a child is diagnosed with Autism, the fastest growing disability in the United States. Autism is a national crisis, costing the country more than $90 billion annually, yet it receives less than 5% of the federal funding of other less prevalent childhood diseases. </p>\n</blockquote>\n\n<p>So, I plan to do all the hard work here. I've been out riding most weekends, done a few 75 milers and doing at least 20 miles a day just riding around. I am limping like John Wayne already and I have another month of training to go. If you can <a href=\"https://www.kintera.org/faf/donorReg/donorPledge.asp?ievent=1056864&amp;lis=0&amp;kntae1056864=810243F24F5B4C0D82E9DC26699DB95E&amp;supId=381865150\">throw as little as $10 my way</a> then I'll be super grateful, and I might even use more polite swear-words next time we get into an argument on the internet!</p>\n\n<p>Or you can join us! <a href=\"https://www.kintera.org/faf/search/searchTeamPart.asp?ievent=1056864&amp;lis=1&amp;kntae1056864=810243F24F5B4C0D82E9DC26699DB95E&amp;supId=0&amp;team=5493254&amp;cj=Y\">Team RAMRod</a> will be happy to have more people on board, there should be 4 or 5 of us so far but we're not all signed up. There is always room for more if you fancy it.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "155",
    "created": "2013-05-07 18:08:00",
    "updated": "2013-05-07 18:08:00",
    "created_by": "2",
    "ordering_count": "8",
    "title": "Composer and PSR-0: Friends, Not Relatives",
    "slug": "composer-and-psr0-friends-not-relatives",
    "category_id": "2",
    "attachment": "",
    "intro": "As a huge proponent of Composer, a happy user of PSR-0 and a voting member on the PHP-FIG I get into plenty of conversations about all of them, and it worries me how much confusion there is in the community about these things not actually being related. To many of you this will be preaching to the choir, but this will hopefully clear a few things up for many or at the very least be a handy resource to link people to when they show signs of getting confused between the two.",
    "body": "As a huge proponent of Composer, a happy user of PSR-0 and a voting member on the PHP-FIG I get into plenty of conversations about all of them and it worries me how much confusion there is in the community about these things not actually being related. \n\nTo many of you this will be preaching to the choir, but this will hopefully clear a few things up for many or at the very least be a handy resource to link people to when they show signs of getting confused between the two. _I'm sorry if this bores you silly._\n\n1. PSR-0 came out in 2009\n1. Composer came out in 2011\n1. Composer happens to support PSR-0\n1. PSR-0 code can be installed and autoloaded using Composer\n\nIt seems that a lot of folks discover Composer and PSR-0 at the same time and seem to assume they are the same thing - especially since both Composer and PSR-0 have the idea of a \"vendor\" and a \"package\", but those two things are not related to each other either. \n\nThese are a few points that I have wanted to clarify during some strange conversations over the last few weeks.\n\n## Vendor Name Confusion\n\nThis comes up fairly often, and was actually asked on the [composer-dev](https://groups.google.com/forum/?fromgroups=#!topic/composer-dev) mailing list the other day. \n\n**If you use PSR-0 and Composer then you have two different vendor names, and two different package names.**\n\nWhy? Because even code that is not using PSR-0 needs vendors and package names, so code like the Facebook SDK can be made Composer compliant by just adding a composer.json, and doesn't need to be recoded to PSR-0. \n\n* Facebook => vendor/facebook/php-sdk/src/facebook.php\n\nIf you do want to use PSR-0 for your classes then you need to make PHP vendors and packages too, but remember your code could be sitting along-side non-PSR-0 code, so you still need these Composer specific vendors for your code. This means your package could look like this:\n\n* Phil\\Kitten\\Snuggles => vendor/phil/kittens/src/Phil/Kitten/Snuggles.php\n\nNow, while you might be annoyed at having to have two lots of vendors, you can see here that they might not be identical. I might want my PHP namespaces to be singular, and my Composer package could well be plural.\n\nThis goes even further when you consider the fact that PHP namespaces do not allow hyphens, but composer packages totally do, because why not?\n\n* Symfony\\Component\\BrowserKit\\Cookie => vendor/symfony/browser-kit/src/Symfony/Components/BrowserKit/Cookie.php\n\nOr these names could be **completely** different from their Composer names:\n\n* Illuminate\\Validation\\ValidationServiceProvider => vendor/laravel/framework/src/Illuminate/Validation/ValidationServiceProvider.php\n\nWhy is that totally different? Because Laravel is a framework, made up of lots of different components. These components are under the \"Illuminate\" namespace and can be used in any application you like. Together, it becomes the Laravel framework. \n\nSo, these two have nothing to do with each other, and lets not assume they need to be the same thing, because that only covers a fraction of the use-cases that PSR-0 supports. \n\n## Saying Composer packages are not PSR-0\n\nThis has come up so many times and it's silly.\n\n> \"Composer is meant to support PSR-0, but I have all these lower-case folders!\"\n\nUck. Having a sub-directories such as \"src/\", \"tests/\" etc does not make this code Non-PSR-0. PSR-0 autoloaders are able to register to multiple points. Each location you register is bound to a namespace prefix, then it will load from there. If you are using Composer packages you will point your prefix at your src/ folder:\n\n{{ prism:syntax lang=\"none\" }}\n\"autoload\": {\n    \"psr-0\": { \"Foo\\Upload\": \"src\" }\n}\n{{ /prism:syntax }}\n\nEverything inside there is then considered to be PSR-0, everything outside is irrelevant.\n\n> So this code is specifically required to live in Composer? I thought you said…?\n\nNope. This code is developed to be a component, which bundles its src/, its tests/ and a README no doubt. It happens to be installable by Composer, or Unicorn (the dependency manager I made up earlier), but could totally work on its own without breaking the PSR-0 spec at all.\n\nIf you wanted this code to live outside of Composer then you could do one of two things:\n\n1. Copy and paste the contents of src/ into one main PSR-0 folder in your application - like its 2001 - and use the [example autoloader](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md#example-implementation).\n1. Copy and paste the whole component codebase and use the [SplClassLoader](https://gist.github.com/jwage/221634) to register Foo\\Upload to src/ yourself.\n\nDoing either of these is a bit weird, because… well why would you?\n\nIf you want to install components, then use something that is designed to install them (Composer or Unicorn), and if you want to autoload your own code put it directly into an autoloadable area within your application.\n\nPyroCMS does both, it has:\n\n* system/cms/modules/\\*/src/\n* system/cms/src/\n* vendor/\\*/\\*/(lib/|src/)\n\n_**Note:** That regex is just there to highlight that Composer devs can do what they like, it doesn't matter._\n\nThe point here is that PyroCMS supports custom PSR-0 autoloading locations (one global, one in each module) and a main vendor/ folder which has a mixture of PSR-0 and random classmapped code. \n\n## PSR-0 must stay \"Implementation Agnostic\"\n\nThis is another conversation that has popped up a few times. People want to see Composer making changes to bring PSR-0 support more into the core, or want PSR-0 to change based around how Composer works. That would be _nuts_, and luckily nobody on the FIG has been vocal about having any interest in doing this.\n\nRealistically Composer is the only dependency manager out there _at the moment_, but theoretically somebody else could build a bigger and better system tomorrow. The entire PHP community could immediately fall in love with this dependency manager, instantly throwing Composer out faster than plague-ridden step-mothers in 1349, and they could both support PSR-0 equally.\n\nYou might need to make a `unicorn.json` file to sit next to your `composer.json` and it could work with both systems just as easily. No other changes should be required to switch.\n\nHaving a spec that relies on a specific structure being set up by a piece of third-party software would be detrimental to the entire community, which is why things like [PHPab](https://github.com/theseer/Autoload) are awesome, but not a standard.\n\n## Composer must stay \"Specification Agnostic\"\n\nWhat will happen when a new autoloading standard is released? We'll be finding out fairly soon, as the PHP-FIG are working on an awesome proposal called the \"Package Autoloader\". This is codenamed PSR-X and will most likely be released as PSR-4, and is incredibly similar to PSR-0 code with a few super-handy tweaks.\n\nTo put it simply, PSR-X no longer translates underscores to directory separators (which was in there for legacy PEAR/Zend type stuff) and allows package developers to potentially skip out the PHP namespace by inferring it:\n\n* Symfony\\Component\\BrowserKit\\Cookie => vendor/symfony/browser-kit/src/Cookie.php\n\nFor this to work there will be a slightly different sample implementation of the autoloader, which will accept arguments that basically convey the message that Symfony\\Component\\BrowserKit maps to vendor/symfony/browser-kit, and instead of requiring the extra folder structure it will just start looking for the next folder or file. In other words, you are simply deleting the Symfony/Components/BrowserKit folders and moving everything up a few folders. Simple!\n\nIf Composer was all tied up on PSR-0 then this would never work, and all the old stuff would break. As it stands it will be insanely easy for Composer to integrate PSR-X/PSR-4? support into Composer. There will be some logic that goes into the composer.json which will look something like:\n\n{{ prism:syntax lang=\"none\" }}\n\"autoload\": {\n    \"psr-4\": { \"Foo\\Upload\": \"src\" }\n}\n{{ /prism:syntax }}  \n    \nThis would work exactly the same, but you just skip a few folders. Whoopdydoop!\n\n## Composer, PSR-0, PSR-X and their separation are all important\n\nPSR-X needs to be separate to avoid fucking with PSR-0 users. They both need to be separate from Composer to let Composer do its thing while they do theirs.\n\nI've heard some chatter about \"which is more important\" and I think even wondering about that is pointless. PHP is an ecosystem, and in an ecosystem everything plays its part. Trees are obviously important, but I remember having some drunken conversation where somebody explained to me how the planet Earth would pretty much die over a few decades if there were no ants. \n\nWhatever type of \"a bird flaps its wings and we have dinosaurs again\" story you want to go with, it is important to remember that every single part of an ecosystem is important. If you hate ants then don't buy an ant-farm, or go to the rain forest but if you kill them all off there will be a lot of upset ant-eaters. Or something.",
    "created_on": "1367946480",
    "updated_on": "1367946480",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "8a30d3f08898c345a8a596af2f39c4be",
    "type": "markdown",
    "parsed": "<p>As a huge proponent of Composer, a happy user of PSR-0 and a voting member on the PHP-FIG I get into plenty of conversations about all of them and it worries me how much confusion there is in the community about these things not actually being related. </p>\n\n<p>To many of you this will be preaching to the choir, but this will hopefully clear a few things up for many or at the very least be a handy resource to link people to when they show signs of getting confused between the two. <em>I'm sorry if this bores you silly.</em></p>\n\n<ol>\n<li>PSR-0 came out in 2009</li>\n<li>Composer came out in 2011</li>\n<li>Composer happens to support PSR-0</li>\n<li>PSR-0 code can be installed and autoloaded using Composer</li>\n</ol>\n\n<p>It seems that a lot of folks discover Composer and PSR-0 at the same time and seem to assume they are the same thing - especially since both Composer and PSR-0 have the idea of a \"vendor\" and a \"package\", but those two things are not related to each other either. </p>\n\n<p>These are a few points that I have wanted to clarify during some strange conversations over the last few weeks.</p>\n\n<h2>Vendor Name Confusion</h2>\n\n<p>This comes up fairly often, and was actually asked on the <a href=\"https://groups.google.com/forum/?fromgroups=#!topic/composer-dev\">composer-dev</a> mailing list the other day. </p>\n\n<p><strong>If you use PSR-0 and Composer then you have two different vendor names, and two different package names.</strong></p>\n\n<p>Why? Because even code that is not using PSR-0 needs vendors and package names, so code like the Facebook SDK can be made Composer compliant by just adding a composer.json, and doesn't need to be recoded to PSR-0. </p>\n\n<ul>\n<li>Facebook => vendor/facebook/php-sdk/src/facebook.php</li>\n</ul>\n\n<p>If you do want to use PSR-0 for your classes then you need to make PHP vendors and packages too, but remember your code could be sitting along-side non-PSR-0 code, so you still need these Composer specific vendors for your code. This means your package could look like this:</p>\n\n<ul>\n<li>Phil\\Kitten\\Snuggles => vendor/phil/kittens/src/Phil/Kitten/Snuggles.php</li>\n</ul>\n\n<p>Now, while you might be annoyed at having to have two lots of vendors, you can see here that they might not be identical. I might want my PHP namespaces to be singular, and my Composer package could well be plural.</p>\n\n<p>This goes even further when you consider the fact that PHP namespaces do not allow hyphens, but composer packages totally do, because why not?</p>\n\n<ul>\n<li>Symfony\\Component\\BrowserKit\\Cookie => vendor/symfony/browser-kit/src/Symfony/Components/BrowserKit/Cookie.php</li>\n</ul>\n\n<p>Or these names could be <strong>completely</strong> different from their Composer names:</p>\n\n<ul>\n<li>Illuminate\\Validation\\ValidationServiceProvider => vendor/laravel/framework/src/Illuminate/Validation/ValidationServiceProvider.php</li>\n</ul>\n\n<p>Why is that totally different? Because Laravel is a framework, made up of lots of different components. These components are under the \"Illuminate\" namespace and can be used in any application you like. Together, it becomes the Laravel framework. </p>\n\n<p>So, these two have nothing to do with each other, and lets not assume they need to be the same thing, because that only covers a fraction of the use-cases that PSR-0 supports. </p>\n\n<h2>Saying Composer packages are not PSR-0</h2>\n\n<p>This has come up so many times and it's silly.</p>\n\n<blockquote>\n  <p>\"Composer is meant to support PSR-0, but I have all these lower-case folders!\"</p>\n</blockquote>\n\n<p>Uck. Having a sub-directories such as \"src/\", \"tests/\" etc does not make this code Non-PSR-0. PSR-0 autoloaders are able to register to multiple points. Each location you register is bound to a namespace prefix, then it will load from there. If you are using Composer packages you will point your prefix at your src/ folder:</p>\n\n<p>{{ prism:syntax lang=\"none\" }}\n\"autoload\": {\n    \"psr-0\": { \"Foo\\Upload\": \"src\" }\n}\n{{ /prism:syntax }}</p>\n\n<p>Everything inside there is then considered to be PSR-0, everything outside is irrelevant.</p>\n\n<blockquote>\n  <p>So this code is specifically required to live in Composer? I thought you said…?</p>\n</blockquote>\n\n<p>Nope. This code is developed to be a component, which bundles its src/, its tests/ and a README no doubt. It happens to be installable by Composer, or Unicorn (the dependency manager I made up earlier), but could totally work on its own without breaking the PSR-0 spec at all.</p>\n\n<p>If you wanted this code to live outside of Composer then you could do one of two things:</p>\n\n<ol>\n<li>Copy and paste the contents of src/ into one main PSR-0 folder in your application - like its 2001 - and use the <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md#example-implementation\">example autoloader</a>.</li>\n<li>Copy and paste the whole component codebase and use the <a href=\"https://gist.github.com/jwage/221634\">SplClassLoader</a> to register Foo\\Upload to src/ yourself.</li>\n</ol>\n\n<p>Doing either of these is a bit weird, because… well why would you?</p>\n\n<p>If you want to install components, then use something that is designed to install them (Composer or Unicorn), and if you want to autoload your own code put it directly into an autoloadable area within your application.</p>\n\n<p>PyroCMS does both, it has:</p>\n\n<ul>\n<li>system/cms/modules/&#42;/src/</li>\n<li>system/cms/src/</li>\n<li>vendor/&#42;/&#42;/(lib/|src/)</li>\n</ul>\n\n<p><em><strong>Note:</strong> That regex is just there to highlight that Composer devs can do what they like, it doesn't matter.</em></p>\n\n<p>The point here is that PyroCMS supports custom PSR-0 autoloading locations (one global, one in each module) and a main vendor/ folder which has a mixture of PSR-0 and random classmapped code. </p>\n\n<h2>PSR-0 must stay \"Implementation Agnostic\"</h2>\n\n<p>This is another conversation that has popped up a few times. People want to see Composer making changes to bring PSR-0 support more into the core, or want PSR-0 to change based around how Composer works. That would be <em>nuts</em>, and luckily nobody on the FIG has been vocal about having any interest in doing this.</p>\n\n<p>Realistically Composer is the only dependency manager out there <em>at the moment</em>, but theoretically somebody else could build a bigger and better system tomorrow. The entire PHP community could immediately fall in love with this dependency manager, instantly throwing Composer out faster than plague-ridden step-mothers in 1349, and they could both support PSR-0 equally.</p>\n\n<p>You might need to make a <code>unicorn.json</code> file to sit next to your <code>composer.json</code> and it could work with both systems just as easily. No other changes should be required to switch.</p>\n\n<p>Having a spec that relies on a specific structure being set up by a piece of third-party software would be detrimental to the entire community, which is why things like <a href=\"https://github.com/theseer/Autoload\">PHPab</a> are awesome, but not a standard.</p>\n\n<h2>Composer must stay \"Specification Agnostic\"</h2>\n\n<p>What will happen when a new autoloading standard is released? We'll be finding out fairly soon, as the PHP-FIG are working on an awesome proposal called the \"Package Autoloader\". This is codenamed PSR-X and will most likely be released as PSR-4, and is incredibly similar to PSR-0 code with a few super-handy tweaks.</p>\n\n<p>To put it simply, PSR-X no longer translates underscores to directory separators (which was in there for legacy PEAR/Zend type stuff) and allows package developers to potentially skip out the PHP namespace by inferring it:</p>\n\n<ul>\n<li>Symfony\\Component\\BrowserKit\\Cookie => vendor/symfony/browser-kit/src/Cookie.php</li>\n</ul>\n\n<p>For this to work there will be a slightly different sample implementation of the autoloader, which will accept arguments that basically convey the message that Symfony\\Component\\BrowserKit maps to vendor/symfony/browser-kit, and instead of requiring the extra folder structure it will just start looking for the next folder or file. In other words, you are simply deleting the Symfony/Components/BrowserKit folders and moving everything up a few folders. Simple!</p>\n\n<p>If Composer was all tied up on PSR-0 then this would never work, and all the old stuff would break. As it stands it will be insanely easy for Composer to integrate PSR-X/PSR-4? support into Composer. There will be some logic that goes into the composer.json which will look something like:</p>\n\n<p>{{ prism:syntax lang=\"none\" }}\n\"autoload\": {\n    \"psr-4\": { \"Foo\\Upload\": \"src\" }\n}\n{{ /prism:syntax }}  </p>\n\n<p>This would work exactly the same, but you just skip a few folders. Whoopdydoop!</p>\n\n<h2>Composer, PSR-0, PSR-X and their separation are all important</h2>\n\n<p>PSR-X needs to be separate to avoid fucking with PSR-0 users. They both need to be separate from Composer to let Composer do its thing while they do theirs.</p>\n\n<p>I've heard some chatter about \"which is more important\" and I think even wondering about that is pointless. PHP is an ecosystem, and in an ecosystem everything plays its part. Trees are obviously important, but I remember having some drunken conversation where somebody explained to me how the planet Earth would pretty much die over a few decades if there were no ants. </p>\n\n<p>Whatever type of \"a bird flaps its wings and we have dinosaurs again\" story you want to go with, it is important to remember that every single part of an ecosystem is important. If you hate ants then don't buy an ant-farm, or go to the rain forest but if you kill them all off there will be a lot of upset ant-eaters. Or something.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "156",
    "created": "2013-06-03 20:01:00",
    "updated": "2013-06-03 20:01:00",
    "created_by": "2",
    "ordering_count": "9",
    "title": "Send a Facebook Message with XMPP using Access Tokens in Python",
    "slug": "facebook-message-with-xmpp-access-tokens-python",
    "category_id": "23",
    "attachment": "",
    "intro": "Today I had a real tough time trying to work out how the hell I could send a Facebook message to a user with Python. I knew I needed the &quot;xmpp_login&quot; scope and I already had users access tokens being generated through a dev build of the <a href=\"http://kaptu.re/\"><span style=\"font-size: 13px; \">Kapture</span></a>&nbsp;iPhone app, but working out what to do after that was rough. In the end I got there with some help from the SleekXMPP developer Lance Stout, who was nice and patient with a still relatively shakey Python developer.",
    "body": "Today I had a real tough time trying to work out how the hell I could send a Facebook message to a user with Python. I knew I needed the \"xmpp_login\" scope and I already had users access tokens being generated through a dev build of the [Kapture](http://kaptu.re/) iPhone app, but working out what to do after that was rough.\n\nThe [Facebook documentation](https://developers.facebook.com/docs/chat/#platauth) covering this was about as detailed as the average IKEA instruction booklet and while there was sample code it was in PHP, and not directly transferable to Python.\n\nGoogling for answers didn't help at all and every single example I found was just showing off how to use username and password via the Digest MD5 mechanism, but I want to use an access token as I _never_ have the Facebook passwords. \n\nDocumentation for the various Python XMPP libraries was either lacking detail or just [completely missing](http://stackoverflow.com/questions/16902171/send-a-facebook-message-with-xmpp-using-access-tokens-in-python), so I ended up just bugging [Lance Stout](http://twitter.com/lancestout) (developer of SleekXMPP) until he helped me get it all done via a 30 minute session of Pastie-Pong.\n\n{{ prism:syntax lang=\"python\" }}\nimport sleekxmpp\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nclass SendMsgBot(sleekxmpp.ClientXMPP):\n    \"\"\"\n    A basic SleekXMPP bot that will log in, send a message,\n    and then log out.\n    \"\"\"\n    def __init__(self, jid, recipient, message):\n        \n        sleekxmpp.ClientXMPP.__init__(self, jid, 'ignore')\n\n        # The message we wish to send, and the JID that\n        # will receive it.\n        self.recipient = recipient\n        self.msg = message\n\n        # The session_start event will be triggered when\n        # the bot establishes its connection with the server\n        # and the XML streams are ready for use. We want to\n        # listen for this event so that we we can initialize\n        # our roster.\n        self.add_event_handler(\"session_start\", self.start, threaded=True)\n\n    def start(self, event):\n\n        self.send_presence()\n\n        self.get_roster()\n\n        self.send_message(mto=self.recipient,\n                        mbody=self.msg,\n                        mtype='chat')\n\n        # Using wait=True ensures that the send queue will be\n        # emptied before ending the session.\n        self.disconnect(wait=True)\n{{ /prism:syntax }}\n\nI shoved that in a file called fbxmpp.py, then in another file (your worker, your command line app, your Flask controller, whatever) you'll need something like the following:\n\n{{ prism:syntax lang=\"python\" }}\nfrom fbxmpp import SendMsgBot\n\n&#35; The \"From\" Facebook ID\njid = '511501255@chat.facebook.com'\n\n&#35; The \"Recipient\" Facebook ID, with a hyphen for some reason\nto = '-1000023894758@chat.facebook.com'\n\n&#35; Whatever you're sending\nmsg = 'Hey Other Phil, how is it going?'\n\nxmpp = SendMsgBot(jid, to, unicode(msg))\n\nxmpp.credentials['api_key'] = '123456'\nxmpp.credentials['access_token'] = 'your-access-token'\n\nif xmpp.connect(('chat.facebook.com', 5222)):\n    xmpp.process(block=True)\n    print(\"Done\")\nelse:\n    print(\"Unable to connect.\")\n{{ /prism:syntax }}\n\nYou can wrap all of that up much more neatly based on how it is being implemented, but this should help get you going.",
    "created_on": "1370286060",
    "updated_on": "1370286060",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "b1023216b5f31a455890b79053d18312",
    "type": "markdown",
    "parsed": "<p>Today I had a real tough time trying to work out how the hell I could send a Facebook message to a user with Python. I knew I needed the \"xmpp_login\" scope and I already had users access tokens being generated through a dev build of the <a href=\"http://kaptu.re/\">Kapture</a> iPhone app, but working out what to do after that was rough.</p>\n\n<p>The <a href=\"https://developers.facebook.com/docs/chat/#platauth\">Facebook documentation</a> covering this was about as detailed as the average IKEA instruction booklet and while there was sample code it was in PHP, and not directly transferable to Python.</p>\n\n<p>Googling for answers didn't help at all and every single example I found was just showing off how to use username and password via the Digest MD5 mechanism, but I want to use an access token as I <em>never</em> have the Facebook passwords. </p>\n\n<p>Documentation for the various Python XMPP libraries was either lacking detail or just <a href=\"http://stackoverflow.com/questions/16902171/send-a-facebook-message-with-xmpp-using-access-tokens-in-python\">completely missing</a>, so I ended up just bugging <a href=\"http://twitter.com/lancestout\">Lance Stout</a> (developer of SleekXMPP) until he helped me get it all done via a 30 minute session of Pastie-Pong.</p>\n\n<p>{{ prism:syntax lang=\"python\" }}\nimport sleekxmpp\nimport logging</p>\n\n<p>logging.basicConfig(level=logging.DEBUG)</p>\n\n<p>class SendMsgBot(sleekxmpp.ClientXMPP):\n    \"\"\"\n    A basic SleekXMPP bot that will log in, send a message,\n    and then log out.\n    \"\"\"\n    def <strong>init</strong>(self, jid, recipient, message):</p>\n\n<pre><code>    sleekxmpp.ClientXMPP.__init__(self, jid, 'ignore')\n\n    # The message we wish to send, and the JID that\n    # will receive it.\n    self.recipient = recipient\n    self.msg = message\n\n    # The session_start event will be triggered when\n    # the bot establishes its connection with the server\n    # and the XML streams are ready for use. We want to\n    # listen for this event so that we we can initialize\n    # our roster.\n    self.add_event_handler(\"session_start\", self.start, threaded=True)\n\ndef start(self, event):\n\n    self.send_presence()\n\n    self.get_roster()\n\n    self.send_message(mto=self.recipient,\n                    mbody=self.msg,\n                    mtype='chat')\n\n    # Using wait=True ensures that the send queue will be\n    # emptied before ending the session.\n    self.disconnect(wait=True)\n</code></pre>\n\n<p>{{ /prism:syntax }}</p>\n\n<p>I shoved that in a file called fbxmpp.py, then in another file (your worker, your command line app, your Flask controller, whatever) you'll need something like the following:</p>\n\n<p>{{ prism:syntax lang=\"python\" }}\nfrom fbxmpp import SendMsgBot</p>\n\n<p>&#35; The \"From\" Facebook ID\njid = '511501255@chat.facebook.com'</p>\n\n<p>&#35; The \"Recipient\" Facebook ID, with a hyphen for some reason\nto = '-1000023894758@chat.facebook.com'</p>\n\n<p>&#35; Whatever you're sending\nmsg = 'Hey Other Phil, how is it going?'</p>\n\n<p>xmpp = SendMsgBot(jid, to, unicode(msg))</p>\n\n<p>xmpp.credentials['api<em>key'] = '123456'\nxmpp.credentials['access</em>token'] = 'your-access-token'</p>\n\n<p>if xmpp.connect(('chat.facebook.com', 5222)):\n    xmpp.process(block=True)\n    print(\"Done\")\nelse:\n    print(\"Unable to connect.\")\n{{ /prism:syntax }}</p>\n\n<p>You can wrap all of that up much more neatly based on how it is being implemented, but this should help get you going.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "157",
    "created": "2013-06-12 14:28:00",
    "updated": "2013-06-12 14:28:00",
    "created_by": "2",
    "ordering_count": "10",
    "title": "Biked to the Beach 2013",
    "slug": "biked-to-the-beach-2013",
    "category_id": "0",
    "attachment": "",
    "intro": "Last month I posted about an upcoming bike century called Bike to the Beach. As lots of you were amazingly generous with sponsorship money I figured it would be rude not to post a review.",
    "body": "Last month I posted about an [upcoming bike century](http://philsturgeon.co.uk/blog/2013/05/bike-to-the-beach-2013) called [Bike to the Beach](http://www.biketothebeach.org/). As lots of you were amazingly generous with sponsorship money I figured it would be rude not to post a review.\n\nThe bike ride was fucking brilliant, but really hard. Apparently there was a tropical cyclone in the area on Friday, which just meant torrential rain for the entire day. I left home at 4am cycling around Brooklyn off to find the starting line in Battery Park.\n\nAfter some standing around in the rain for what felt like eternity we all set off from the starting line at 5am. The mood was excellent despite the weather, and everyone was in high spirits as we rode along the bike path around the south coast of Manhattan. There was a lot of joking and it was really funny, despite a few really nasty collisions in the first mile. Riding in a pack for the first time was tough, with a few people knocking my wheel and more than a few close calls, but we stuck near the front to avoid as many folks as possible and as soon as we got to the first checkpoint at Rockaway beach my team-mate Stephen Lynch and I just blasted straight on through to get away from the pack entirely.\n\nWe kept the lead through the next checkpoint, and were still in the lead as we approached the third checkpoint, but luck slapped us in the face with a flat tire which we were stupidly ill equipped to repair, as neither of us remembered tire leavers. DOH. That lost us about 40 minutes as we had to wait for people to catch up, then we got overtaken by more than half the riders.\n\nWe got going, overtook a bunch of people, then another flat tire.\n\nWe got going, overtook a bunch of people, then two flat tires at the same time.\n\nIt was insanely frustrating. We checked all the obvious things of course, the tire itself was fine (nothing in there, or a hole to pinch the tire), the rim didn't seem to have any problems, the only answer was magic. Stephen was feeling guilty so he sent me off solo and I rode with headphones from there until I saw him again at the finish line (bar).\n\nThis was my first century and I was pretty upset with it taking 12 hours (about 3 hours off our intended time), but with the wind, rain and _non-stop flat tires_ it wasn't so bad.\n\n167 signed up, 60 turned up, 50 finished and I was about 20th. In total everyone raised about $73,000 which is less than the $150,000 goal but any money we can raise for such a great charity is better than a kick in the nuts.\n\nI'm going to try and get to the [New England ride](http://biketothebeach.kintera.org/faf/home/default.asp?ievent=1061638) August 30th, and I REALLY hope I can find a way to get enough sponsorship money together to get involved in [Braking Aids Ride](http://brakingaidsride.org) this September, but $3,500 is rather steep without a large chunk of it coming from a company, especially as I've been bleeding my friends and family dry for this last one already. If you think you'd like to be involved in riding in any of these events then you should go for it, or in touch, especially if you can make it to any of the [Bike to the Beach events](http://www.biketothebeach.org/site/c.duIVJdNXKkL2G/b.8515825/k.BE45/Home.htm?sid=381865150) this summer.",
    "created_on": "1371047280",
    "updated_on": "1371047280",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "a43ba757fd9e6eee8e1a325b538b85ea",
    "type": "markdown",
    "parsed": "<p>Last month I posted about an <a href=\"http://philsturgeon.co.uk/blog/2013/05/bike-to-the-beach-2013\">upcoming bike century</a> called <a href=\"http://www.biketothebeach.org/\">Bike to the Beach</a>. As lots of you were amazingly generous with sponsorship money I figured it would be rude not to post a review.</p>\n\n<p>The bike ride was fucking brilliant, but really hard. Apparently there was a tropical cyclone in the area on Friday, which just meant torrential rain for the entire day. I left home at 4am cycling around Brooklyn off to find the starting line in Battery Park.</p>\n\n<p>After some standing around in the rain for what felt like eternity we all set off from the starting line at 5am. The mood was excellent despite the weather, and everyone was in high spirits as we rode along the bike path around the south coast of Manhattan. There was a lot of joking and it was really funny, despite a few really nasty collisions in the first mile. Riding in a pack for the first time was tough, with a few people knocking my wheel and more than a few close calls, but we stuck near the front to avoid as many folks as possible and as soon as we got to the first checkpoint at Rockaway beach my team-mate Stephen Lynch and I just blasted straight on through to get away from the pack entirely.</p>\n\n<p>We kept the lead through the next checkpoint, and were still in the lead as we approached the third checkpoint, but luck slapped us in the face with a flat tire which we were stupidly ill equipped to repair, as neither of us remembered tire leavers. DOH. That lost us about 40 minutes as we had to wait for people to catch up, then we got overtaken by more than half the riders.</p>\n\n<p>We got going, overtook a bunch of people, then another flat tire.</p>\n\n<p>We got going, overtook a bunch of people, then two flat tires at the same time.</p>\n\n<p>It was insanely frustrating. We checked all the obvious things of course, the tire itself was fine (nothing in there, or a hole to pinch the tire), the rim didn't seem to have any problems, the only answer was magic. Stephen was feeling guilty so he sent me off solo and I rode with headphones from there until I saw him again at the finish line (bar).</p>\n\n<p>This was my first century and I was pretty upset with it taking 12 hours (about 3 hours off our intended time), but with the wind, rain and <em>non-stop flat tires</em> it wasn't so bad.</p>\n\n<p>167 signed up, 60 turned up, 50 finished and I was about 20th. In total everyone raised about $73,000 which is less than the $150,000 goal but any money we can raise for such a great charity is better than a kick in the nuts.</p>\n\n<p>I'm going to try and get to the <a href=\"http://biketothebeach.kintera.org/faf/home/default.asp?ievent=1061638\">New England ride</a> August 30th, and I REALLY hope I can find a way to get enough sponsorship money together to get involved in <a href=\"http://brakingaidsride.org\">Braking Aids Ride</a> this September, but $3,500 is rather steep without a large chunk of it coming from a company, especially as I've been bleeding my friends and family dry for this last one already. If you think you'd like to be involved in riding in any of these events then you should go for it, or in touch, especially if you can make it to any of the <a href=\"http://www.biketothebeach.org/site/c.duIVJdNXKkL2G/b.8515825/k.BE45/Home.htm?sid=381865150\">Bike to the Beach events</a> this summer.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "158",
    "created": "2013-07-03 15:18:00",
    "updated": "2013-07-03 15:18:00",
    "created_by": "2",
    "ordering_count": "11",
    "title": "Geeks Giving for Aids",
    "slug": "geeks-giving-for-aids",
    "category_id": "0",
    "attachment": "",
    "intro": "After doing my 100 mile bike ride to raise money for autism research, I&#39;ve decided to step things up a gear (ha) and go further in a bid to raise more.&nbsp;<span style=\"line-height: 1.6em;\">Next I will be riding the 285 miles from Boston to New York over 3 days, with the goal of raising money for Housing Works, who work with those struggling with HIV/AIDS and homelessness. This work is being done with the hope of one day putting AIDS behind us.</span>",
    "body": "After doing my [100 mile bike ride](http://philsturgeon.co.uk/blog/2013/06/biked-to-the-beach-2013) to raise money for [autism research](http://biketothebeach.kintera.org/faf/home/default.asp?ievent=1056864) I've decided to step things up a gear (ha) and go further in a bid to raise more. \n\nNext I will be riding the 285 miles from Boston to New York over 3 days, with the goal of raising money for Housing Works, who work with those struggling with HIV/AIDS and homelessness. This work is being done with the hope of one day putting AIDS behind us.\n\nWhile this ride could no doubt be done in fewer adds that \"oh balls, I have to get up and do this again\" factor, which always makes these multi-day events that much more grueling. After the 100-mile bike ride all I did was drink a keg of beer in the West Hamptons. This time I'll have to get on my bike for another two days, then be back at work the day after.\n\nLast time I raised $700, so this time raising $7,000 seems like a reasonable move.\n\nNever having raised this much (or even attempted to) I asked the internet for advice on how I should approach it. [Jessica D'Amico](http://twitter.com/justjessdc) suggested I go for a Kickstarter-style approach, and while it was an excellent idea I had trouble thinking of what I could offer anyone in return for money (stop it).\n\nI then remembered I am part of the PHP community, which is full of fucking excellent people, who would probably help me out if I asked them nicely - and they really did. Some gave me cash, some gave me advice and many - unexpectedly - set me up with some discount codes for their various products and services. \n\nHere is a list of rewards that I'll be handing out in return for various donation levels.\n\n**$1** - That warm fuzzy feeling of being a good person.  \n**$5** - A thank you tweet praising your or your company.  \n**$10** - Any _one_ of the following:  \n\n* $20 off [PyroCMS Professional](https://www.pyrocms.com/store/details/pyrocms_professional).\n* $20 off [PancakeApp](https://pancakeapp.com/).\n* $10 off [Statamic](http://statamic.com/) Professional or Personal.\n* 50% off the first quarterly subscription to [Cartalyst](http://www.cartalyst.com/).  \n* 50% off [Laravel: Code Bright](https://leanpub.com/codebright) by Dayle Rees.\n* 35% off [Peachpit](http://peachpit.com) books.\n\n**$50** - Any _one_ of the following:\n\n* One free [NomadPHP](http://nomadphp.com/) talk\n* $100 off [HelpSpot](http://www.helpspot.com/)\n* €20 (thats a Euro symbol folks) off [FortRabbit](http://www.fortrabbit.com/)\n* 3 months free [Snappy](http://www.besnappy.com/)\n\n**$200** - The same reward as $50 and an hour of Skype consultation covering PHP, Laravel, Chef, Git, deployment tactics, whatever for you, or a group of your choosing.  \n**$500** - The same reward as $50 and be a special guest on an episode of the \"PHP Town Hall\" podcast.  \n**$1337** - PHP Town Hall, company logo on my bike jersey and a personal weekend visit to train you (or a group of less than 5) for a day on any of the subjects I have any authority on.  \n\nThe one caveat to that last deal, is that if travel from New York is more than $350 I'll have to ask you to throw in towards a plane ticket. No worries about accommodation, I like staying in hostels.\n\nTwo other important things to remember:\n\n* These donations are tax deductible, so it's like free money or something.\n* If you are donating personally and your employer has a matching gift program it will double the donation (but that doesn't double the reward, just saying).\n\nSo please, help me out here and [donate](https://bit.ly/BRAKEAIDS). If you want one of the rewards then send an email to rewards@philsturgeon.co.uk letting me know the name the donation is under and which reward you want. I'll then send you a coupon code, or do whatever else the reward states.\n\nI've had some huge donations already from the listeners of [NomadPHP](http://nomadphp.com/) and [PeersConf](http://peersconf.com), so a massive thank you to them. Let's see how much money we can raise for this excellent cause. There is a timescale on this, the money has to be in by August 30th but waiting leads to missed donations. If you wait until next week or next month you will almost certainly forget, so please do it ASAP to avoid missing out on your chance to not only help an excellent cause but to get some cool stuff in return.\n\n* _Make a [donation](https://bit.ly/BRAKEAIDS)_\n* _Find out more about the [BrakingAids Ride](http://brakingaidsride.org/)_\n* _Find out more about [HousingWorks](http://www.housingworks.org/)_",
    "created_on": "1372861080",
    "updated_on": "1372861080",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "fab894cdbb2c16556e8b71225f038fc8",
    "type": "markdown",
    "parsed": "<p>After doing my <a href=\"http://philsturgeon.co.uk/blog/2013/06/biked-to-the-beach-2013\">100 mile bike ride</a> to raise money for <a href=\"http://biketothebeach.kintera.org/faf/home/default.asp?ievent=1056864\">autism research</a> I've decided to step things up a gear (ha) and go further in a bid to raise more. </p>\n\n<p>Next I will be riding the 285 miles from Boston to New York over 3 days, with the goal of raising money for Housing Works, who work with those struggling with HIV/AIDS and homelessness. This work is being done with the hope of one day putting AIDS behind us.</p>\n\n<p>While this ride could no doubt be done in fewer adds that \"oh balls, I have to get up and do this again\" factor, which always makes these multi-day events that much more grueling. After the 100-mile bike ride all I did was drink a keg of beer in the West Hamptons. This time I'll have to get on my bike for another two days, then be back at work the day after.</p>\n\n<p>Last time I raised $700, so this time raising $7,000 seems like a reasonable move.</p>\n\n<p>Never having raised this much (or even attempted to) I asked the internet for advice on how I should approach it. <a href=\"http://twitter.com/justjessdc\">Jessica D'Amico</a> suggested I go for a Kickstarter-style approach, and while it was an excellent idea I had trouble thinking of what I could offer anyone in return for money (stop it).</p>\n\n<p>I then remembered I am part of the PHP community, which is full of fucking excellent people, who would probably help me out if I asked them nicely - and they really did. Some gave me cash, some gave me advice and many - unexpectedly - set me up with some discount codes for their various products and services. </p>\n\n<p>Here is a list of rewards that I'll be handing out in return for various donation levels.</p>\n\n<p><strong>$1</strong> - That warm fuzzy feeling of being a good person.<br />\n<strong>$5</strong> - A thank you tweet praising your or your company.<br />\n<strong>$10</strong> - Any <em>one</em> of the following:  </p>\n\n<ul>\n<li>$20 off <a href=\"https://www.pyrocms.com/store/details/pyrocms_professional\">PyroCMS Professional</a>.</li>\n<li>$20 off <a href=\"https://pancakeapp.com/\">PancakeApp</a>.</li>\n<li>$10 off <a href=\"http://statamic.com/\">Statamic</a> Professional or Personal.</li>\n<li>50% off the first quarterly subscription to <a href=\"http://www.cartalyst.com/\">Cartalyst</a>.  </li>\n<li>50% off <a href=\"https://leanpub.com/codebright\">Laravel: Code Bright</a> by Dayle Rees.</li>\n<li>35% off <a href=\"http://peachpit.com\">Peachpit</a> books.</li>\n</ul>\n\n<p><strong>$50</strong> - Any <em>one</em> of the following:</p>\n\n<ul>\n<li>One free <a href=\"http://nomadphp.com/\">NomadPHP</a> talk</li>\n<li>$100 off <a href=\"http://www.helpspot.com/\">HelpSpot</a></li>\n<li>€20 (thats a Euro symbol folks) off <a href=\"http://www.fortrabbit.com/\">FortRabbit</a></li>\n<li>3 months free <a href=\"http://www.besnappy.com/\">Snappy</a></li>\n</ul>\n\n<p><strong>$200</strong> - The same reward as $50 and an hour of Skype consultation covering PHP, Laravel, Chef, Git, deployment tactics, whatever for you, or a group of your choosing.<br />\n<strong>$500</strong> - The same reward as $50 and be a special guest on an episode of the \"PHP Town Hall\" podcast.<br />\n<strong>$1337</strong> - PHP Town Hall, company logo on my bike jersey and a personal weekend visit to train you (or a group of less than 5) for a day on any of the subjects I have any authority on.  </p>\n\n<p>The one caveat to that last deal, is that if travel from New York is more than $350 I'll have to ask you to throw in towards a plane ticket. No worries about accommodation, I like staying in hostels.</p>\n\n<p>Two other important things to remember:</p>\n\n<ul>\n<li>These donations are tax deductible, so it's like free money or something.</li>\n<li>If you are donating personally and your employer has a matching gift program it will double the donation (but that doesn't double the reward, just saying).</li>\n</ul>\n\n<p>So please, help me out here and <a href=\"https://bit.ly/BRAKEAIDS\">donate</a>. If you want one of the rewards then send an email to rewards@philsturgeon.co.uk letting me know the name the donation is under and which reward you want. I'll then send you a coupon code, or do whatever else the reward states.</p>\n\n<p>I've had some huge donations already from the listeners of <a href=\"http://nomadphp.com/\">NomadPHP</a> and <a href=\"http://peersconf.com\">PeersConf</a>, so a massive thank you to them. Let's see how much money we can raise for this excellent cause. There is a timescale on this, the money has to be in by August 30th but waiting leads to missed donations. If you wait until next week or next month you will almost certainly forget, so please do it ASAP to avoid missing out on your chance to not only help an excellent cause but to get some cool stuff in return.</p>\n\n<ul>\n<li><em>Make a <a href=\"https://bit.ly/BRAKEAIDS\">donation</a></em></li>\n<li><em>Find out more about the <a href=\"http://brakingaidsride.org/\">BrakingAids Ride</a></em></li>\n<li><em>Find out more about <a href=\"http://www.housingworks.org/\">HousingWorks</a></em></li>\n</ul>\n",
    "preview_hash": ""
  },
  {
    "id": "159",
    "created": "2013-07-12 21:25:00",
    "updated": "2013-07-12 21:25:00",
    "created_by": "2",
    "ordering_count": "12",
    "title": "Building a Decent API",
    "slug": "building-a-decent-api",
    "category_id": "2",
    "attachment": "",
    "intro": "PHP developers are increasingly moving over to API development, as are a lot of server-side developers. It&#39;s a trend thats been happening for the last few years and it&#39;s getting to the point where everyone and their dog are putting articles showing off how to build &quot;awesome&quot; API&#39;s. Unfortunately most of these are either woefully inadequate or are promoting bad practices. These are some of the golden rules I go by.",
    "body": "PHP developers are increasingly moving over to API development, as are a lot of server-side developers. It's a trend thats been happening for the last few years and it's getting to the point where everyone and their dog are putting articles showing off how to build \"awesome\" API's. Unfortunately most of these are either woefully inadequate or are promoting bad practices.\n\nI'm not going to link to any bad examples because that's just rude, but here are some golden rules that I stick to when building out API's.\n\n### Never Expose DB Results Directly\n\n 1. If you rename a field, then your users are fucked. Convert with a hardcoded array structure.\n 1. Most DB drivers [for PHP] will show integers as numeric strings and `false` as `\"0\"`, so you want to typecast as much of your output array as possible.\n 1. Unless you're using an ORM with \"hidden\" functionality, people will see passwords, salts and all sorts of fancy codes. If you add one and forget to put it in your `$hidden` array then OOPS! Manually declare your output, do NOT just return Users::all();\n\n### Use the URI sparingly, and correctly\n\n1. Use the query string for paired params instead of `/users/id/5/active/true`. _Your API does not need to be SEO optimised._\n1. `?format=xml` is stupid, use an `Accept: application/xml` header. I added this to the CodeIgniter Rest-Server once for lazy people, and now people think it's a thing. It's not.\n1. Make all of your resources plural. `/user/X` might make sense initially, but when you get a word like \"opportunity\" it gets weird fast gets. `/opportunities` and `/oppertunity/X` is a pain.\n\n### Resources are EVERYTHING\n\n1. You're always either asking for one resource, or multiple. If it's one, just return that data as an array. If you've asked for multiple, then return them in a plural parent element (such as \"users\").\n2. Two resources in different locations should look identical (your iPhone dev will love you for this). This could be `/me/friends` and `/users/5/friends`, or embeded data. \n3. If I want multiple resources in one call, then give them to me. `/users/X,Y,Z` in a `\"users\"` array works nicely.\n4. If you ask for multiple and some results exist, shove that in a \"users\" array.\n5. If you ask for multiple but find none, then a 404 makes sense.\n\n### JSON, XML or shut up\n\n1. Don't spend forever trying to make your system output everything under the sun. Sure you can output [lolcat](http://api.flickr.com/services/feeds/photos_public.gne?id=35034363287@N01&lang=en-us&format=lolcode), but you don't need to.\n2. Tell your users to send you JSON or XML in the body. Messing around with `application/x-www-form-urlencoded` and its flat key/value formatting just to get at data with `$_POST['foo']` is silly, especially when any decent framework (like Laravel 4) will allow `Input::json('foo')` anyway.\n3. No payload parameters. I've seen APIs accept `application/x-www-form-urlencoded` with a `json={}` parameter. If you think that is a good idea it's time you re-train as a yoga teacher or something, the stress is effecting your judgement.\n\n### Authentication\n\n1. [OAuth 2 is the shit](http://phptownhall.com/blog/2013/07/10/episode-9-is-oauth-2-the-devil/). A few people wrote ranty arguments about how it's insecure, because they weren't using SSL. Or because X company implemented it badly. Don't implement it badly.\n2. Unless your API is firewalled off from the outside internets use SSL. \n3. Make sure your OAuth 2 implementation is spec compliant, or you're going to have a bad time. [This one is](https://github.com/php-loep/oauth2-server).\n\n### Caching\n\n1. Your API needs a shorter memory than my favorite fruit is watermelon. No state, no sessions, no IP recognition. Don't guess, let them tell you who they are with their access token.\n2. Caching should only happen on popular endpoints where there is no user context, and you know it's not going to change in the timeframe.\n3. The `Cache-Control` header let's people know if they can (or should) cache stuff. If other devs ignore those headers then it's their problem.\n\n### Background all the things\n\n1. \"When the user sends us an image, resize it, upload it to S3, send an email then show a confirmation\". Nope. That should be at least one background job, preferably 3, with an IMMEDIATE response. Ditch off to one \"image_processing\" job to get things going.\n2. Create an \"email\" job, a \"sms\" job and a \"APN\" job for example, so you can generically send out all sorts of contact stuff from your API, your other jobs, etc without infecting your API with all that stuff. I can switch from Twilio to... well I don't know anyone better, but I could do it easy as hell by updating the SMS job.\n3. Put your workers on a different server. Your API server is busy enough handling HTTP requests in responses, don't make it think about anything else.\n\n### Pagination\n\n1. Do this. So many people just dump back an \"get all this data\" response and forget that N gets pretty big over time.\n2. Add a `\"paging\"` element, which has a `\"next\"` or `\"previous\"` URL if there are more on either side.\n3. Don't make the client do math.\n4. OUTPUT TOTALS. I'm looking at you Facebook. Why do I have to poll \"next\" 20 times to manually count($response['data']) to see how many friends a specific user has when you obviously know the answer already? GAH!\n\n### Response Codes\n\n1. Give me an actual error message, not just a code. \"Oh yay, a E40255 just happened\" --Nobody.\n2. Use 410 instead of 404 if it's been deleted, or blocked, or rejected. \"This content has been removed.\" is more useful than \"Um, nope.\"\n\n### Documentation\n\n1. If you have well written documentation, you get to say RTFM a lot.\n2. Versioned API's are easiest to keep up to date, because they don't change (unlike the Facebook API, which might as well be nightly builds from develop).\n3. Use a tool. [Swagger-PHP](https://github.com/zircote/swagger-php) + [Swagger-UI](https://github.com/wordnik/swagger-ui) does the trick.\n\n### Testing\n\n1. Write tests ([Behat](http://behat.org/) is great at this), and get Jenkins to automate them. \n2. If tests aren't automated, they might as well not exist.\n2. Unit-test your components and models and whatnot. \n3. No need to mock the DB, make a \"testing\" server and beat it hard, just mock FB/Twitter/\"Foo-External API\" calls.\n4. TEST FOR ERRORS, not just success. Try and trigger every guard statement.\n5. If tests aren't automated, they might as well not exist. _Nope, not a copy/paste error._\n\n### Version your API like an adult\n\n1. Sure throwing a `v1/` subfolder into your `app/controllers` or whatever might seem like a real clever way of doing things, but how are you gonna merge v1.0 tweaks with v1.1 and v2.0?\n2. If you're going to use v1 then make sure its a different codebase, don't make one app do all versions ever because IT WONT WORK AND STOP TRYING WHY DO YOU KEEP TRYING STOP IT!\n2. Nginx comes with a handy [Map module](http://wiki.nginx.org/HttpMapModule), map custom Accept headers to a variable.\n3. Those headers can look like this: `application/vnd.com.example-v1.0+json`. Gross? [Whatever](https://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&docid=-l1lNUV-Sj-RKM&tbnid=Tkz4Pv-XTuQGAM:&ved=0CAUQjRw&url=http%3A%2F%2Fscans-daily.dreamwidth.org%2F3196144.html&ei=jfOaUbTWB4yq0AHM-oCwBw&bvm=bv.46751780,d.dmg&psig=AFQjCNE52ObL3umOX7eH24qcfc3aQkoH2w&ust=1369195783425767).\n3. Use this variable to map to a different directory in your virtual host config, and these each have their own Git branch. Something like: \"set $api_path api-v$api_version;\" followed by a \"root   /var/www/$api_path/public;\"\n4. Merge changes upwards to as many codebases that share a common history, don't try and copy and paste changes like a dummy.\n5. All rules in this section mean 1.0 could be PHP, 2.0 could be Node (you hipster you) and 3.0 could be Scala (I dont even...) and only your minor versions need to worry about merging changes upwards.\n\nThis message has been brought to you with the help of Dos Equis, and a little Scotch.\n\nBuild your API's better, because now you have no excuse.",
    "created_on": "1373660700",
    "updated_on": "1373660700",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "57aa7e5fb23649b407bdea5f57d58a6a",
    "type": "markdown",
    "parsed": "<p>PHP developers are increasingly moving over to API development, as are a lot of server-side developers. It's a trend thats been happening for the last few years and it's getting to the point where everyone and their dog are putting articles showing off how to build \"awesome\" API's. Unfortunately most of these are either woefully inadequate or are promoting bad practices.</p>\n\n<p>I'm not going to link to any bad examples because that's just rude, but here are some golden rules that I stick to when building out API's.</p>\n\n<h3>Never Expose DB Results Directly</h3>\n\n<ol>\n<li>If you rename a field, then your users are fucked. Convert with a hardcoded array structure.</li>\n<li>Most DB drivers [for PHP] will show integers as numeric strings and <code>false</code> as <code>\"0\"</code>, so you want to typecast as much of your output array as possible.</li>\n<li>Unless you're using an ORM with \"hidden\" functionality, people will see passwords, salts and all sorts of fancy codes. If you add one and forget to put it in your <code>$hidden</code> array then OOPS! Manually declare your output, do NOT just return Users::all();</li>\n</ol>\n\n<h3>Use the URI sparingly, and correctly</h3>\n\n<ol>\n<li>Use the query string for paired params instead of <code>/users/id/5/active/true</code>. <em>Your API does not need to be SEO optimised.</em></li>\n<li><code>?format=xml</code> is stupid, use an <code>Accept: application/xml</code> header. I added this to the CodeIgniter Rest-Server once for lazy people, and now people think it's a thing. It's not.</li>\n<li>Make all of your resources plural. <code>/user/X</code> might make sense initially, but when you get a word like \"opportunity\" it gets weird fast gets. <code>/opportunities</code> and <code>/oppertunity/X</code> is a pain.</li>\n</ol>\n\n<h3>Resources are EVERYTHING</h3>\n\n<ol>\n<li>You're always either asking for one resource, or multiple. If it's one, just return that data as an array. If you've asked for multiple, then return them in a plural parent element (such as \"users\").</li>\n<li>Two resources in different locations should look identical (your iPhone dev will love you for this). This could be <code>/me/friends</code> and <code>/users/5/friends</code>, or embeded data. </li>\n<li>If I want multiple resources in one call, then give them to me. <code>/users/X,Y,Z</code> in a <code>\"users\"</code> array works nicely.</li>\n<li>If you ask for multiple and some results exist, shove that in a \"users\" array.</li>\n<li>If you ask for multiple but find none, then a 404 makes sense.</li>\n</ol>\n\n<h3>JSON, XML or shut up</h3>\n\n<ol>\n<li>Don't spend forever trying to make your system output everything under the sun. Sure you can output <a href=\"http://api.flickr.com/services/feeds/photos_public.gne?id=35034363287@N01&amp;lang=en-us&amp;format=lolcode\">lolcat</a>, but you don't need to.</li>\n<li>Tell your users to send you JSON or XML in the body. Messing around with <code>application/x-www-form-urlencoded</code> and its flat key/value formatting just to get at data with <code>$_POST['foo']</code> is silly, especially when any decent framework (like Laravel 4) will allow <code>Input::json('foo')</code> anyway.</li>\n<li>No payload parameters. I've seen APIs accept <code>application/x-www-form-urlencoded</code> with a <code>json={}</code> parameter. If you think that is a good idea it's time you re-train as a yoga teacher or something, the stress is effecting your judgement.</li>\n</ol>\n\n<h3>Authentication</h3>\n\n<ol>\n<li><a href=\"http://phptownhall.com/blog/2013/07/10/episode-9-is-oauth-2-the-devil/\">OAuth 2 is the shit</a>. A few people wrote ranty arguments about how it's insecure, because they weren't using SSL. Or because X company implemented it badly. Don't implement it badly.</li>\n<li>Unless your API is firewalled off from the outside internets use SSL. </li>\n<li>Make sure your OAuth 2 implementation is spec compliant, or you're going to have a bad time. <a href=\"https://github.com/php-loep/oauth2-server\">This one is</a>.</li>\n</ol>\n\n<h3>Caching</h3>\n\n<ol>\n<li>Your API needs a shorter memory than my favorite fruit is watermelon. No state, no sessions, no IP recognition. Don't guess, let them tell you who they are with their access token.</li>\n<li>Caching should only happen on popular endpoints where there is no user context, and you know it's not going to change in the timeframe.</li>\n<li>The <code>Cache-Control</code> header let's people know if they can (or should) cache stuff. If other devs ignore those headers then it's their problem.</li>\n</ol>\n\n<h3>Background all the things</h3>\n\n<ol>\n<li>\"When the user sends us an image, resize it, upload it to S3, send an email then show a confirmation\". Nope. That should be at least one background job, preferably 3, with an IMMEDIATE response. Ditch off to one \"image_processing\" job to get things going.</li>\n<li>Create an \"email\" job, a \"sms\" job and a \"APN\" job for example, so you can generically send out all sorts of contact stuff from your API, your other jobs, etc without infecting your API with all that stuff. I can switch from Twilio to... well I don't know anyone better, but I could do it easy as hell by updating the SMS job.</li>\n<li>Put your workers on a different server. Your API server is busy enough handling HTTP requests in responses, don't make it think about anything else.</li>\n</ol>\n\n<h3>Pagination</h3>\n\n<ol>\n<li>Do this. So many people just dump back an \"get all this data\" response and forget that N gets pretty big over time.</li>\n<li>Add a <code>\"paging\"</code> element, which has a <code>\"next\"</code> or <code>\"previous\"</code> URL if there are more on either side.</li>\n<li>Don't make the client do math.</li>\n<li>OUTPUT TOTALS. I'm looking at you Facebook. Why do I have to poll \"next\" 20 times to manually count($response['data']) to see how many friends a specific user has when you obviously know the answer already? GAH!</li>\n</ol>\n\n<h3>Response Codes</h3>\n\n<ol>\n<li>Give me an actual error message, not just a code. \"Oh yay, a E40255 just happened\" --Nobody.</li>\n<li>Use 410 instead of 404 if it's been deleted, or blocked, or rejected. \"This content has been removed.\" is more useful than \"Um, nope.\"</li>\n</ol>\n\n<h3>Documentation</h3>\n\n<ol>\n<li>If you have well written documentation, you get to say RTFM a lot.</li>\n<li>Versioned API's are easiest to keep up to date, because they don't change (unlike the Facebook API, which might as well be nightly builds from develop).</li>\n<li>Use a tool. <a href=\"https://github.com/zircote/swagger-php\">Swagger-PHP</a> + <a href=\"https://github.com/wordnik/swagger-ui\">Swagger-UI</a> does the trick.</li>\n</ol>\n\n<h3>Testing</h3>\n\n<ol>\n<li>Write tests (<a href=\"http://behat.org/\">Behat</a> is great at this), and get Jenkins to automate them. </li>\n<li>If tests aren't automated, they might as well not exist.</li>\n<li>Unit-test your components and models and whatnot. </li>\n<li>No need to mock the DB, make a \"testing\" server and beat it hard, just mock FB/Twitter/\"Foo-External API\" calls.</li>\n<li>TEST FOR ERRORS, not just success. Try and trigger every guard statement.</li>\n<li>If tests aren't automated, they might as well not exist. <em>Nope, not a copy/paste error.</em></li>\n</ol>\n\n<h3>Version your API like an adult</h3>\n\n<ol>\n<li>Sure throwing a <code>v1/</code> subfolder into your <code>app/controllers</code> or whatever might seem like a real clever way of doing things, but how are you gonna merge v1.0 tweaks with v1.1 and v2.0?</li>\n<li>If you're going to use v1 then make sure its a different codebase, don't make one app do all versions ever because IT WONT WORK AND STOP TRYING WHY DO YOU KEEP TRYING STOP IT!</li>\n<li>Nginx comes with a handy <a href=\"http://wiki.nginx.org/HttpMapModule\">Map module</a>, map custom Accept headers to a variable.</li>\n<li>Those headers can look like this: <code>application/vnd.com.example-v1.0+json</code>. Gross? <a href=\"https://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;cad=rja&amp;docid=-l1lNUV-Sj-RKM&amp;tbnid=Tkz4Pv-XTuQGAM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fscans-daily.dreamwidth.org%2F3196144.html&amp;ei=jfOaUbTWB4yq0AHM-oCwBw&amp;bvm=bv.46751780,d.dmg&amp;psig=AFQjCNE52ObL3umOX7eH24qcfc3aQkoH2w&amp;ust=1369195783425767\">Whatever</a>.</li>\n<li>Use this variable to map to a different directory in your virtual host config, and these each have their own Git branch. Something like: \"set $api<em>path api-v$api</em>version;\" followed by a \"root   /var/www/$api_path/public;\"</li>\n<li>Merge changes upwards to as many codebases that share a common history, don't try and copy and paste changes like a dummy.</li>\n<li>All rules in this section mean 1.0 could be PHP, 2.0 could be Node (you hipster you) and 3.0 could be Scala (I dont even...) and only your minor versions need to worry about merging changes upwards.</li>\n</ol>\n\n<p>This message has been brought to you with the help of Dos Equis, and a little Scotch.</p>\n\n<p>Build your API's better, because now you have no excuse.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "160",
    "created": "2013-07-23 19:53:00",
    "updated": "2013-07-23 19:53:00",
    "created_by": "2",
    "ordering_count": "13",
    "title": "Beware the Route to Evil",
    "slug": "beware-the-route-to-evil",
    "category_id": "2",
    "attachment": "",
    "intro": "As a programmer we should all be used to the fact that our personal preferences and habits are all subject to change. I used to be a big fan of Alman and tabs &gt; spaces, now I follow PSR-2 happily which contradicts those two rules and couldn&#39;t care less. Another contradiction to my personal preferences has been &quot;automagical routing&quot; verses &quot;verbose routing&quot;, and this article explains why I changed my opinon on that.",
    "body": "As programmers we should all be used to the fact that our personal preferences and habits are all subject to change. I used to be a big fan of Alman and tabs > spaces, now I follow PSR-2 happily which contradicts those two rules and couldn't care less.\n\nAnother contradiction to my personal preferences has been \"automagical routing\" verses \"verbose routing\". CodeIgniter used to guess the route from a URL, and I loved that. All I'd need to get a controller working was make the file, add a method, call it up in the browser - it seemed so simple!\n\nThen I worked on the [CodeIgniter Rest-Server](https://github.com/philsturgeon/codeigniter-restserver), which allowed users to suffix their methods with HTTP verbs, so `GET /users/profile/1` would go to `public function profile_get()`, and a profile could be updated by posting to it, the method of course being `public function profile_post()`. Everyone was happy, I used it to make about 5 million API's, the UN have code running on it, USA.gov are doing something with it, unicorns and rainbows everywhere.\n\nBUT, when you start to rely on this automagical logic it can be a huge ball-ache down the line. Now, every single endpoint in my entire application has its own route, which I've created myself, specified the HTTP verb it should attach to (one at a time) and maybe even named it if I'm using something cool like [Laravel 4](http://laravel.com/docs/routing#named-routes).\n\nHere are some reasons why relying on automagical route guesswork in your framework of choice is probably a bad idea.\n\n## Project Inheritance\n\nI've taken over projects using this sort of logic. Not just in CodeIgniter, but Kohana, Fuel and Laravel too. Because I am taking over from somebody else, first I need to work out all the URLs. Sometimes this would be an API with some outdated endpoint documentation, but more commonly it would be random applications with admin panels, AJAX endpoints, user dashboards, search forms and whatever else. \n\nWhen you get to this sort of project having auto-guesswork routes means you have to go through all the controllers, pick apart which endpoints are navigated to via the auto-guesswork and which have their own custom route (because the client wanted `/users/profiles/philstugeon` to be `/p/philsturgeon`). Yay.\n\n## Duplicate Endpoints\n\nWhenever you make a custom route like `/p/philsturgeon`, you still have `/users/profiles/philstugeon` active. As a \"backwards compatibility\" thing that might seem like a nice idea, but you don't want both URLs active indefinitely. In other examples you probably wont EVER want both to be active, so now your only real option is to specifically route `/users/profiles/{any}` to the toilet, which is growing your routes file for something you don't actually want…\n\n## Route Evaluation Performance\n\nGo and look at the CodeIgniter router and tell me if you think the number of `file_exists()` and `is_dir()` checks it performs to maintain that level of guesswork is a good idea. Even if they threw a cache in there, its complicated as f**k and totally unnecessary. With static routes you are saying \"take this pattern, and send it to that action\" which is super lightweight, compared to: \"Is the first segment a directory, or a file? Is the second a directory, or a file, or a method in a file? Madness.\n\n## Renaming Controllers\n\nYou want that whole thing to be called \"channel\" instead of \"categories\"? If your auto-guesswork was getting you to the \"categories\" controller, then you're faced with two options. A) Rage-quit B) Tell your boss to pick the right nomenclature first, then do A, C) Rename everything so the guesswork works, or D) Add some static routes, which you're starting to realize maybe you should have done in the first place.\n\n## <strike>Resource</strike> RESTful Controllers\n\nEven Laravel 4 is a little guilty of this, but you can do it either way. Every day I see people using their [RESTful Controllers](http://laravel.com/docs/controllers#restful-controllers) (which are incredibly similar to the Rest Server controllers I put together) which combine the HTTP verb and the URL segment to map to a method, then try to call it. \n\nThis sounds great until people want to start using named routes, reverse routing, etc and all of a sudden the conventions clash. The answer in most cases is \"Stop trying to be clever and manually list your routes.\", and it works.\n\n## Sub-Resources are impossible\n\nYour magical route logic is never going to make this work:\n\n{{ prism:syntax lang=\"php\" }}\nRoute::get('users/{id}/friends', 'UsersController@friends');\n{{ /prism:syntax }}\n\nSo you're going to need to half and half, which is confusing.\n\n## routes.php is Documentation\n\nThe advantages of manually specifying your routes is that you avoid all of the above issues, but another advantage is a simple one: Your routes.php is documentation. A developer can pick it up, know exactly what endpoints go where, what controllers are active and what is old junk.\n\nIt's even been suggested that you have the slight potential performance tweak of putting your most popular URLs at the top of the routes.php file, so you can ditch out of your router ASAP. I'm not 100% sold on the importance of that, but sometimes microseconds count.\n\nAs for the cost of developer time all you're really losing here is the 5 seconds it takes you to write:\n\n{{ prism:syntax lang=\"php\" }}\nRoute::post('me/settings', 'SettingsController@update');\n{{ /prism:syntax }}\n\nIt's not hard, and it avoids trying to mess around making subdirectories called \"me\" and renaming your controllers to try and match the URL.",
    "created_on": "1374605580",
    "updated_on": "1374605580",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "7068f802ae5d057bf4e11f2e11ed41a0",
    "type": "markdown",
    "parsed": "<p>As programmers we should all be used to the fact that our personal preferences and habits are all subject to change. I used to be a big fan of Alman and tabs > spaces, now I follow PSR-2 happily which contradicts those two rules and couldn't care less.</p>\n\n<p>Another contradiction to my personal preferences has been \"automagical routing\" verses \"verbose routing\". CodeIgniter used to guess the route from a URL, and I loved that. All I'd need to get a controller working was make the file, add a method, call it up in the browser - it seemed so simple!</p>\n\n<p>Then I worked on the <a href=\"https://github.com/philsturgeon/codeigniter-restserver\">CodeIgniter Rest-Server</a>, which allowed users to suffix their methods with HTTP verbs, so <code>GET /users/profile/1</code> would go to <code>public function profile_get()</code>, and a profile could be updated by posting to it, the method of course being <code>public function profile_post()</code>. Everyone was happy, I used it to make about 5 million API's, the UN have code running on it, USA.gov are doing something with it, unicorns and rainbows everywhere.</p>\n\n<p>BUT, when you start to rely on this automagical logic it can be a huge ball-ache down the line. Now, every single endpoint in my entire application has its own route, which I've created myself, specified the HTTP verb it should attach to (one at a time) and maybe even named it if I'm using something cool like <a href=\"http://laravel.com/docs/routing#named-routes\">Laravel 4</a>.</p>\n\n<p>Here are some reasons why relying on automagical route guesswork in your framework of choice is probably a bad idea.</p>\n\n<h2>Project Inheritance</h2>\n\n<p>I've taken over projects using this sort of logic. Not just in CodeIgniter, but Kohana, Fuel and Laravel too. Because I am taking over from somebody else, first I need to work out all the URLs. Sometimes this would be an API with some outdated endpoint documentation, but more commonly it would be random applications with admin panels, AJAX endpoints, user dashboards, search forms and whatever else. </p>\n\n<p>When you get to this sort of project having auto-guesswork routes means you have to go through all the controllers, pick apart which endpoints are navigated to via the auto-guesswork and which have their own custom route (because the client wanted <code>/users/profiles/philstugeon</code> to be <code>/p/philsturgeon</code>). Yay.</p>\n\n<h2>Duplicate Endpoints</h2>\n\n<p>Whenever you make a custom route like <code>/p/philsturgeon</code>, you still have <code>/users/profiles/philstugeon</code> active. As a \"backwards compatibility\" thing that might seem like a nice idea, but you don't want both URLs active indefinitely. In other examples you probably wont EVER want both to be active, so now your only real option is to specifically route <code>/users/profiles/{any}</code> to the toilet, which is growing your routes file for something you don't actually want…</p>\n\n<h2>Route Evaluation Performance</h2>\n\n<p>Go and look at the CodeIgniter router and tell me if you think the number of <code>file_exists()</code> and <code>is_dir()</code> checks it performs to maintain that level of guesswork is a good idea. Even if they threw a cache in there, its complicated as f**k and totally unnecessary. With static routes you are saying \"take this pattern, and send it to that action\" which is super lightweight, compared to: \"Is the first segment a directory, or a file? Is the second a directory, or a file, or a method in a file? Madness.</p>\n\n<h2>Renaming Controllers</h2>\n\n<p>You want that whole thing to be called \"channel\" instead of \"categories\"? If your auto-guesswork was getting you to the \"categories\" controller, then you're faced with two options. A) Rage-quit B) Tell your boss to pick the right nomenclature first, then do A, C) Rename everything so the guesswork works, or D) Add some static routes, which you're starting to realize maybe you should have done in the first place.</p>\n\n<h2><strike>Resource</strike> RESTful Controllers</h2>\n\n<p>Even Laravel 4 is a little guilty of this, but you can do it either way. Every day I see people using their <a href=\"http://laravel.com/docs/controllers#restful-controllers\">RESTful Controllers</a> (which are incredibly similar to the Rest Server controllers I put together) which combine the HTTP verb and the URL segment to map to a method, then try to call it. </p>\n\n<p>This sounds great until people want to start using named routes, reverse routing, etc and all of a sudden the conventions clash. The answer in most cases is \"Stop trying to be clever and manually list your routes.\", and it works.</p>\n\n<h2>Sub-Resources are impossible</h2>\n\n<p>Your magical route logic is never going to make this work:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nRoute::get('users/{id}/friends', 'UsersController@friends');\n{{ /prism:syntax }}</p>\n\n<p>So you're going to need to half and half, which is confusing.</p>\n\n<h2>routes.php is Documentation</h2>\n\n<p>The advantages of manually specifying your routes is that you avoid all of the above issues, but another advantage is a simple one: Your routes.php is documentation. A developer can pick it up, know exactly what endpoints go where, what controllers are active and what is old junk.</p>\n\n<p>It's even been suggested that you have the slight potential performance tweak of putting your most popular URLs at the top of the routes.php file, so you can ditch out of your router ASAP. I'm not 100% sold on the importance of that, but sometimes microseconds count.</p>\n\n<p>As for the cost of developer time all you're really losing here is the 5 seconds it takes you to write:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nRoute::post('me/settings', 'SettingsController@update');\n{{ /prism:syntax }}</p>\n\n<p>It's not hard, and it avoids trying to mess around making subdirectories called \"me\" and renaming your controllers to try and match the URL.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "161",
    "created": "2013-07-25 19:53:00",
    "updated": "2013-07-25 19:53:00",
    "created_by": "2",
    "ordering_count": "14",
    "title": "Great Battle, Wrong Field",
    "slug": "great-battle-wrong-field",
    "category_id": "0",
    "attachment": "",
    "intro": "Life is hard, opinions are hard, and fighting for your opinions and beliefs is the hardest. This is why it upsets me that so many people just get it totally wrong and cause more harm than good. These are the incidents when the wrong person gets fired, conferences get canceled, people get accused of all sorts of things and careers are hurt.&nbsp;",
    "body": "Life is hard, opinions are hard, and fighting for your opinions and beliefs is the hardest. This is why it upsets me that so many people just get it totally wrong and cause more harm than good. These are the incidents when the wrong person gets fired, conferences get canceled, people get accused of all sorts of things and careers are hurt. \n\nWith Twitter, it happens a few thousands times more than it ever would in the past. This is as much of a merit as a problem, as when a valid problem occurs and is validly reported the whole community it effects - lets say tech for example - will find out really damn quickly. \n\nSome people see this valid reporting of unacceptable, racist, sexist, demeaning or downright assholely behavior, and want to continue that fight. Great!\n\nSadly, some of these people are often waiting for an opportunity to show off how amazingly pro-foo and anti-bar they are, and ignore the facts of the specific incident they are talking about. \n\n## Opportunistic White Knighting\n\n> A person (usually a male) who sees the typical maiden in distress, and believes that he can help her. A male version of the \"mother figure\" that some girls become. -- [Urban Dictionary](http://www.urbandictionary.com/define.php?term=white%20knight)\n\nWhite Knighting in general is not a problem, it generally means that people are trying to help when there is a problem. The issue is when somebody tries to help when there isn't a problem, thus creating a bigger problem. One example of this in my community [PHPness Gate](http://webandphpmag.wordpress.com/2013/02/25/phpness-gate-raising-interesting-issues/) happened a few months ago. Essentially, two \"ballsy girls\" (their words) decided to wear a t-shirt with a dick-joke on it, and the internet exploded.\n\nSeveral guys flew off the handle to conndem this behavior, and a well known feminist in the community assumed they were booth babes hired by a company. This point of view seemingly suggests this feminist assumes women would only be at a conference because they were paid to be there, but… they were running the conference. \n\nSorry, that's sexist. \n\nThere are a million more examples of this, all with similar stories. Somebody tried to do the right thing, didn't look close enough at the facts, caused a shit-storm. If you're going to take your opinion public, make sure you do your due diligence. Basically, if you're going to play reporter, do it properly instead of printing slander, rumors or bullshit.\n\n## Invented Accusations\n\nOn a much smaller scale, today I got into an argument on Twitter where a friend was accused of being a misogynist and a rape-apologizer. Paul runs a generic blog, where he posts about everything from PHP code to politics, and the politics are usually subjects he is interested in for his own political reasons, whatever they may be.\n\nNow, the accusations from this individual are centered on the fact that he posted a few articles in which is was proven that the woman accusing a man of rape lied about it. That seems like a fairly innocuous, but then Twitter happened:\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/CalEvans\">@CalEvans</a> He&#39;s a rape apologist. I&#39;ve read his blog. And yes, I both disagree with him and think he&#39;s a terrible human being. <a href=\"https://twitter.com/pmjones\">@pmjones</a></p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360429281601531904\">July 25, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nand:\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a> I don&#39;t consider posts about how rape victims are liars helpful, but that depends on who you want to help.</p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360442211030142977\">July 25, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI tried to point out that re-posting or quoting some articles about instances in which a women was either proven to be lying, or _admitted_ lying during the case, _does not suggest that all women are lying_. The fact she assumed either of us would ever think that is completely out of left field to me. A.k.a: WAT?!\n\nI not only assume that these cases are absolutely edge cases, but have had people close to me suffer the effects of sexual abuse in a few forms. I know the damage it does to a person, I know how they carry the scars for years, and I would never in my fucking life suggest that they were lying.\n\nOn the flip side of the coin I dated a girl who lied to me about being raped by a close friend of mine, while we were dating. I planned to do something extreme when I found him, until I learned from a friend he was at the local pub when it happened, with 10 of the locals as a witness and was all over the CCTV for the entire evening. The pub was 9 miles from the place this girl said it happened, and he didn't drive. She later admitted she did it for attention.\n\nFrom my experience it would be moronic to assume that all women are lying, but it would be equally moronic for anyone to suggest that lying about it never happened, because I know it's happened at least once.\n\nAnyone convicted of rape should go to prison for a long time, but taking an innocent man to court over a lie should be punished with jail time too. Lying under oath is already a crime, as is wasting police time, so I can see why Paul is interested in these stories when a women makes up a total lie and walks away from it scott-free.\n\nThe argument went on for a bit, and the issue morphed from her assuming we thought all women were lying, to a new issue: that because Paul had posted about these edge cases, and not about when a guy did it and actually did it, that he was statistically skewing his blog to suggest that a higher majority of rapes are lied about than is in fact the case:\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> &quot;Factually accurate&quot; isn&#39;t the issue here. When one focuses on outliers, reality becomes horribly skewed. <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360448668253425664\">July 25, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI asked:\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/anarchival\">@anarchival</a> should he post 99 articles saying ”Asshole accused of rape. He did it.” for every 1 “She definitely lied”? <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/360449125378031618\">July 25, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nApparently that was what she wanted. So now, Paul must become a \"Yes / No\" detector for every rape in the entire world, if he wishes to post an article which strikes his political cord: that when it's proved that a woman is making false accusations, she needs to be prosecuted. Not every woman ever, not guilty until proven innocent, but the rules of the legal system should be followed both ways without stigma.\n\nAnyway, go and look at my feed and see if between that tweet and her next I said anything inflammatory. The tweet with the most potential to be misunderstood is this:\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/anarchival\">@anarchival</a> I fight for the school of “Don’t be a Dick”, regardless of gender. <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/360460573214900225\">July 25, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nNow I'm not talking about having a penis, I'm saying my only political views center around one single simplistic philosophy: don't be a dick. I have no reason to take issue with any race, gender, age or religion, but if you act like a dick we're going to have a problem.\n\nI don't feel like men are a poor down-trodden group, mistreated by mean feminists as this one suggests, I'm saying I don't like her acting like a dick to my friend, accusing him and me of all sorts of shit. \n\nA tweet comes my way:\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> When the revolution comes, I will personally pleasure you and <a href=\"https://twitter.com/pmjones\">@pmjones</a> with my twelve inch dildo for hours. <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360460164840685570\">July 25, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nRape threat. Check.\n\nI closed Twitter down on my Macbook, partly because I was finding the entire thing insane. While I was giving a presentation at the office I had this tweet pop up on the projector screen, while AirPlay sharing my iPhone with investors and co-workers:\n\n<blockquote class=\"twitter-tweet\"><p>I imagine <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> has raped at least one woman in his lifetime. Probably more.</p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360471322943434753\">July 25, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nSlander. Check.\n\nI signed out for good at that point, I'm going to let her troll herself out. I don't know what the driving force is behind this anger, but it strikes a cord with the point of my article:\n\n* Fight the good fight.\n* Fight it in the right place.\n\n## The Ongoing Problem\n\nWhenever you find a chance to accuse somebody of something on Twitter, firstly, work out if you need to. It's probably smarter to send them an email and publish their responses in an open letter if your concerns are not heard, but if you are going to think about it long and hard.\n\nIs that conference really run by the KKK, or was the call to papers just answered by a bunch of white dudes?\n\nIs that line of code that says `foreach ($model as $babe)` really suggesting tech is a boys-only club and women are only welcome on a strippers pole? \n\nIs that [areyouabrogrammer.com](http://areyouabrogrammer.com/) quiz suggesting that only men are welcome in development?\n\n*Nope!*\n\nIs there sexism in tech? \n\nFucking **loads**. \n\nI plan to write an article about how we can potentially solve some of these issues based on conversations I've had with other on the topic, which is the only way I can see of making something positive out what is always a difficult situation.\n\nStop opportunistic white-knighting, stop accusing people of shit because they said something that seems close to one of your pre-defined responses, and dont be a dick.",
    "created_on": "1374778380",
    "updated_on": "1374778380",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p>Life is hard, opinions are hard, and fighting for your opinions and beliefs is the hardest. This is why it upsets me that so many people just get it totally wrong and cause more harm than good. These are the incidents when the wrong person gets fired, conferences get canceled, people get accused of all sorts of things and careers are hurt. </p>\n\n<p>With Twitter, it happens a few thousands times more than it ever would in the past. This is as much of a merit as a problem, as when a valid problem occurs and is validly reported the whole community it effects - lets say tech for example - will find out really damn quickly. </p>\n\n<p>Some people see this valid reporting of unacceptable, racist, sexist, demeaning or downright assholely behavior, and want to continue that fight. Great!</p>\n\n<p>Sadly, some of these people are often waiting for an opportunity to show off how amazingly pro-foo and anti-bar they are, and ignore the facts of the specific incident they are talking about. </p>\n\n<h2>Opportunistic White Knighting</h2>\n\n<blockquote>\n  <p>A person (usually a male) who sees the typical maiden in distress, and believes that he can help her. A male version of the \"mother figure\" that some girls become. -- <a href=\"http://www.urbandictionary.com/define.php?term=white%20knight\">Urban Dictionary</a></p>\n</blockquote>\n\n<p>White Knighting in general is not a problem, it generally means that people are trying to help when there is a problem. The issue is when somebody tries to help when there isn't a problem, thus creating a bigger problem. One example of this in my community <a href=\"http://webandphpmag.wordpress.com/2013/02/25/phpness-gate-raising-interesting-issues/\">PHPness Gate</a> happened a few months ago. Essentially, two \"ballsy girls\" (their words) decided to wear a t-shirt with a dick-joke on it, and the internet exploded.</p>\n\n<p>Several guys flew off the handle to conndem this behavior, and a well known feminist in the community assumed they were booth babes hired by a company. This point of view seemingly suggests this feminist assumes women would only be at a conference because they were paid to be there, but… they were running the conference. </p>\n\n<p>Sorry, that's sexist. </p>\n\n<p>There are a million more examples of this, all with similar stories. Somebody tried to do the right thing, didn't look close enough at the facts, caused a shit-storm. If you're going to take your opinion public, make sure you do your due diligence. Basically, if you're going to play reporter, do it properly instead of printing slander, rumors or bullshit.</p>\n\n<h2>Invented Accusations</h2>\n\n<p>On a much smaller scale, today I got into an argument on Twitter where a friend was accused of being a misogynist and a rape-apologizer. Paul runs a generic blog, where he posts about everything from PHP code to politics, and the politics are usually subjects he is interested in for his own political reasons, whatever they may be.</p>\n\n<p>Now, the accusations from this individual are centered on the fact that he posted a few articles in which is was proven that the woman accusing a man of rape lied about it. That seems like a fairly innocuous, but then Twitter happened:</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/CalEvans\">@CalEvans</a> He&#39;s a rape apologist. I&#39;ve read his blog. And yes, I both disagree with him and think he&#39;s a terrible human being. <a href=\"https://twitter.com/pmjones\">@pmjones</a></p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360429281601531904\">July 25, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>and:</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a> I don&#39;t consider posts about how rape victims are liars helpful, but that depends on who you want to help.</p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360442211030142977\">July 25, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>I tried to point out that re-posting or quoting some articles about instances in which a women was either proven to be lying, or <em>admitted</em> lying during the case, <em>does not suggest that all women are lying</em>. The fact she assumed either of us would ever think that is completely out of left field to me. A.k.a: WAT?!</p>\n\n<p>I not only assume that these cases are absolutely edge cases, but have had people close to me suffer the effects of sexual abuse in a few forms. I know the damage it does to a person, I know how they carry the scars for years, and I would never in my fucking life suggest that they were lying.</p>\n\n<p>On the flip side of the coin I dated a girl who lied to me about being raped by a close friend of mine, while we were dating. I planned to do something extreme when I found him, until I learned from a friend he was at the local pub when it happened, with 10 of the locals as a witness and was all over the CCTV for the entire evening. The pub was 9 miles from the place this girl said it happened, and he didn't drive. She later admitted she did it for attention.</p>\n\n<p>From my experience it would be moronic to assume that all women are lying, but it would be equally moronic for anyone to suggest that lying about it never happened, because I know it's happened at least once.</p>\n\n<p>Anyone convicted of rape should go to prison for a long time, but taking an innocent man to court over a lie should be punished with jail time too. Lying under oath is already a crime, as is wasting police time, so I can see why Paul is interested in these stories when a women makes up a total lie and walks away from it scott-free.</p>\n\n<p>The argument went on for a bit, and the issue morphed from her assuming we thought all women were lying, to a new issue: that because Paul had posted about these edge cases, and not about when a guy did it and actually did it, that he was statistically skewing his blog to suggest that a higher majority of rapes are lied about than is in fact the case:</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> &quot;Factually accurate&quot; isn&#39;t the issue here. When one focuses on outliers, reality becomes horribly skewed. <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360448668253425664\">July 25, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>I asked:</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/anarchival\">@anarchival</a> should he post 99 articles saying ”Asshole accused of rape. He did it.” for every 1 “She definitely lied”? <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/360449125378031618\">July 25, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Apparently that was what she wanted. So now, Paul must become a \"Yes / No\" detector for every rape in the entire world, if he wishes to post an article which strikes his political cord: that when it's proved that a woman is making false accusations, she needs to be prosecuted. Not every woman ever, not guilty until proven innocent, but the rules of the legal system should be followed both ways without stigma.</p>\n\n<p>Anyway, go and look at my feed and see if between that tweet and her next I said anything inflammatory. The tweet with the most potential to be misunderstood is this:</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/anarchival\">@anarchival</a> I fight for the school of “Don’t be a Dick”, regardless of gender. <a href=\"https://twitter.com/pmjones\">@pmjones</a> <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/360460573214900225\">July 25, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Now I'm not talking about having a penis, I'm saying my only political views center around one single simplistic philosophy: don't be a dick. I have no reason to take issue with any race, gender, age or religion, but if you act like a dick we're going to have a problem.</p>\n\n<p>I don't feel like men are a poor down-trodden group, mistreated by mean feminists as this one suggests, I'm saying I don't like her acting like a dick to my friend, accusing him and me of all sorts of shit. </p>\n\n<p>A tweet comes my way:</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> When the revolution comes, I will personally pleasure you and <a href=\"https://twitter.com/pmjones\">@pmjones</a> with my twelve inch dildo for hours. <a href=\"https://twitter.com/CalEvans\">@CalEvans</a></p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360460164840685570\">July 25, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Rape threat. Check.</p>\n\n<p>I closed Twitter down on my Macbook, partly because I was finding the entire thing insane. While I was giving a presentation at the office I had this tweet pop up on the projector screen, while AirPlay sharing my iPhone with investors and co-workers:</p>\n\n<blockquote class=\"twitter-tweet\"><p>I imagine <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> has raped at least one woman in his lifetime. Probably more.</p>&mdash; anarchival (@anarchival) <a href=\"https://twitter.com/anarchival/statuses/360471322943434753\">July 25, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Slander. Check.</p>\n\n<p>I signed out for good at that point, I'm going to let her troll herself out. I don't know what the driving force is behind this anger, but it strikes a cord with the point of my article:</p>\n\n<ul>\n<li>Fight the good fight.</li>\n<li>Fight it in the right place.</li>\n</ul>\n\n<h2>The Ongoing Problem</h2>\n\n<p>Whenever you find a chance to accuse somebody of something on Twitter, firstly, work out if you need to. It's probably smarter to send them an email and publish their responses in an open letter if your concerns are not heard, but if you are going to think about it long and hard.</p>\n\n<p>Is that conference really run by the KKK, or was the call to papers just answered by a bunch of white dudes?</p>\n\n<p>Is that line of code that says <code>foreach ($model as $babe)</code> really suggesting tech is a boys-only club and women are only welcome on a strippers pole? </p>\n\n<p>Is that <a href=\"http://areyouabrogrammer.com/\">areyouabrogrammer.com</a> quiz suggesting that only men are welcome in development?</p>\n\n<p><em>Nope!</em></p>\n\n<p>Is there sexism in tech? </p>\n\n<p>Fucking <strong>loads</strong>. </p>\n\n<p>I plan to write an article about how we can potentially solve some of these issues based on conversations I've had with other on the topic, which is the only way I can see of making something positive out what is always a difficult situation.</p>\n\n<p>Stop opportunistic white-knighting, stop accusing people of shit because they said something that seems close to one of your pre-defined responses, and dont be a dick.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "162",
    "created": "2013-08-14 20:50:00",
    "updated": "2013-08-14 20:50:00",
    "created_by": "2",
    "ordering_count": "15",
    "title": "Progress in the PHP-FIG",
    "slug": "progress-in-the-phpfig",
    "category_id": "2",
    "attachment": "",
    "intro": "The PHP Framework Interoperability Group (PHP-FIG) has been around for 4 years, and it&#39;s produced 4 PSR&#39;s, which to some is a sign of inevitable doom or something. To those &quot;in the know&quot; the future is looking bright, and I&#39;d like to let you all know what is going on. Using a new workflow, we are starting down a clearly defined path, with obvious steps along the way which not only increase the signal to noise ratio, but help get us more awesome PSRs faster.",
    "body": "The [PHP Framework Interoperability Group (PHP-FIG)](http://www.php-fig.org/) has been around for 4 years, and it's produced 4 PSR's, which to some is a sign of inevitable doom or something. To those \"in the know\" the future is looking bright, and I'd like to let you all know what is going on.\n\nFor the last two years the ML has been chock full of different discussions about potential PSRs that could be worked on. Different folks have different interests of course, and just like Jordi was interested in working on a logger interface, we've had the Buzz/Guzzle/Requests crews cranking away on various different ideas for HTTP Client and Message PSRs. This to me is the central point of the PHP-FIG as by defining these standards it can stop the need to build 6 different damn adapter classes for your composer package if you want it to work with Buzz, Guzzle, Zend HTTP, Curl, Whatever). This happens [a lot](http://geocoder-php.org/) and it sucks.\n\nSadly HTTP faded away, as there were so many proposals for it happening at the same time by different people, that it just got lost and forgotten about.\n\nThis same thing happened with the Cache proposal, and the new Autoloader got smacked back down due to 11th hour alternative proposals and huge feedback.\n\n## That's not good news!\n\nNope, but it's the back story for the next bit. \n\nIt became apparent to me that the PHP-FIG wasn't going to get all that far as things stood. I actually saw quite a few problems with the workflow as it was:\n\n* Following every single email is impossible.\n* Knowing what to do with alternative proposals is hard.\n* Knowing when something can be put in for vote is confusing.\n* People feel like some things are rushed through.\n* People feel like some things are being dragged out for no reason.\n* Ego-trips can potentially block feedback.* Changes happening late in the game can ruin votes or progress.\n* If a supporter vanishes then a PSR is dead in the water.\n* You go away for 2 weeks and the barrage of emails to read up on can be aggressive.\n* Random nicknames for PSRs gets confusing. PSR-X, PSR-T, PSR-PM, PSR-WUT?\n\nWe needed a system, so I drafted up a [Workflow Bylaw](https://github.com/php-fig/fig-standards/pull/146). \n\nAfter a lot of feedback, rewrites and IRC discussions, [Bernhard Schussek](https://github.com/bschussek), [Larry Garfield](https://twitter.com/crell) and myself got the document finished up. Last week the bylaw was [voted in](https://groups.google.com/forum/#!topic/php-fig/hba-ggOo70Y) with 74% of the voting members showing up at the polls, all of whom voted yes.\n\n## What is all the fuss about?\n\nI believe this workflow will solve all of these problems.\n\nA PSR now has a status:\n\n* Pre-Draft\n* Draft\n* Review\n* Accepted\n\nAll 4 existing PSRs are instantly accepted of course, and everything else has no status until it passes the \"Entrance Vote\". This essentially means that while it's still possible for anyone to create a proposal, it doesn't get any stamp of approval until it has passed the Entrance Vote. For example, if somebody proposes we should be making a standard for inline JavaScript, it's probably not going to pass the vote.\n\nAfter the Entrance Vote the status is Draft, and to get here it needs an Editor and two Sponsors (one of which is the Coordinator, who is in charge of calling and counting the votes). Once the Editor and Sponsors agree its ready for review the coordinator lets the group know.\n\nThis is very useful for the group. It means if I have no interest in a specific proposal (it addresses something I have no domain knowledge on, or I just don't care) I don't need to read every single email, but when it goes for review I can read the \"Meta Document\" (those are new too) and catch up completely. I can give small feedback, or suggest big changes which might knock it back to Draft if people like them. Realistically, if I have such awesome useful feedback for a proposal I probably should have spoken up sooner, but no process is 100% perfect.\n\nIf the Review stage goes well and nobody throws a barney about the actual content, the Coordinator can call an \"Acceptance Vote\". If this vote passes, it goes straight in.\n\n## Sounds like a lot of work\n\nNot really. Each PSR has a different Coordinator, so I call a vote, wait two weeks, then count. Everyone involved with these PSRs is interested in the topic, so it's not a hardship for them.\n\nThe number of emails in the group are reduced, and essentially the signal is boosted and the noise reduced. By creating these little working groups, a lot of the work can be done offline, on IRC, in private, at a bar, whatever, then the Draft and Review stages allow for group participation on a larger scale.\n\n## What does it mean for _you_?\n\nNew PSRs are coming, and they're wicked.\n\n* [**Autoloader**](https://groups.google.com/forum/#!topic/php-fig/_LYBgfcEoFE) - PSR-0 is sticking around for the foreseeable future, but this new autoloader updates things for a package-based world. Remember, PSR-0 was made to autoload PEAR/Zend/Horde style code (before Composer was a thing), so updating things is definitely needed. PyroCMS, Drupal and Joomla are all going to use the shit out of this.\n* [**Cache**](https://groups.google.com/forum/#!topic/php-fig/mBP6PmG0TqU) - It's back! In a similar way to the logging interface, soon you'll be able to interact with generic cache packages and framework specific cache interfaces without even thinking about it.\n* [**PHPDoc**](https://groups.google.com/forum/#!topic/php-fig/M3CcFynWkdo) - The phpDocumentor team are taking their de-facto standard and trying to ratify it, and improve it. Currently the phpDocumentor team have their own DocBlock syntax, and most other API doc systems either use it exactly, or use something similar. We're going to try and find the commonalities between them, and make ONE standard, so API doc builders can use this one. [Obligatory XKCD](http://xkcd.com/927/)\n\nThey're all so far passing their Entrance Votes with flying colors. Some will change before they get to Review and later have their Acceptance Vote, but the Autoloader will most likely fly straight on through.\n\nIf anyone is freaking out about the new Autoloader then my advice is: calm down. The Composer team are supporting it and it won't effect your packages unless you want to use it. Upgrading a package from PSR-0 to the new Autoloader will take about 5 minutes if you're still learning or about 30 seconds if you've done it before. Upgrading an application will require nothing, it will be completely seamless and use the existing Composer autoloader.\n\nRead the [meta document](https://github.com/pmjones/fig-standards/blob/master/proposed/autoloader/autoload-meta.md).\n\nPSR-0 will probably be deprecated some day, but no date has been set for that. If it happens, it will be a damn long time away, so there is literally no problem there.\n\nIf you've got an idea for a proposal now would be a great time to share it on the [ML](https://groups.google.com/forum/#!forum/php-fig) and ask for feedback.\n\nRemember the PHP-FIG motto: If you talk about tabs v spaces, the [Mega Shark](http://www.youtube.com/watch?v=jBizgLZX7W0) will fuck you up.",
    "created_on": "1376509800",
    "updated_on": "1376509800",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "b7ae5f2d5298983d8c21232eb9f24486",
    "type": "markdown",
    "parsed": "<p>The <a href=\"http://www.php-fig.org/\">PHP Framework Interoperability Group (PHP-FIG)</a> has been around for 4 years, and it's produced 4 PSR's, which to some is a sign of inevitable doom or something. To those \"in the know\" the future is looking bright, and I'd like to let you all know what is going on.</p>\n\n<p>For the last two years the ML has been chock full of different discussions about potential PSRs that could be worked on. Different folks have different interests of course, and just like Jordi was interested in working on a logger interface, we've had the Buzz/Guzzle/Requests crews cranking away on various different ideas for HTTP Client and Message PSRs. This to me is the central point of the PHP-FIG as by defining these standards it can stop the need to build 6 different damn adapter classes for your composer package if you want it to work with Buzz, Guzzle, Zend HTTP, Curl, Whatever). This happens <a href=\"http://geocoder-php.org/\">a lot</a> and it sucks.</p>\n\n<p>Sadly HTTP faded away, as there were so many proposals for it happening at the same time by different people, that it just got lost and forgotten about.</p>\n\n<p>This same thing happened with the Cache proposal, and the new Autoloader got smacked back down due to 11th hour alternative proposals and huge feedback.</p>\n\n<h2>That's not good news!</h2>\n\n<p>Nope, but it's the back story for the next bit. </p>\n\n<p>It became apparent to me that the PHP-FIG wasn't going to get all that far as things stood. I actually saw quite a few problems with the workflow as it was:</p>\n\n<ul>\n<li>Following every single email is impossible.</li>\n<li>Knowing what to do with alternative proposals is hard.</li>\n<li>Knowing when something can be put in for vote is confusing.</li>\n<li>People feel like some things are rushed through.</li>\n<li>People feel like some things are being dragged out for no reason.</li>\n<li>Ego-trips can potentially block feedback.* Changes happening late in the game can ruin votes or progress.</li>\n<li>If a supporter vanishes then a PSR is dead in the water.</li>\n<li>You go away for 2 weeks and the barrage of emails to read up on can be aggressive.</li>\n<li>Random nicknames for PSRs gets confusing. PSR-X, PSR-T, PSR-PM, PSR-WUT?</li>\n</ul>\n\n<p>We needed a system, so I drafted up a <a href=\"https://github.com/php-fig/fig-standards/pull/146\">Workflow Bylaw</a>. </p>\n\n<p>After a lot of feedback, rewrites and IRC discussions, <a href=\"https://github.com/bschussek\">Bernhard Schussek</a>, <a href=\"https://twitter.com/crell\">Larry Garfield</a> and myself got the document finished up. Last week the bylaw was <a href=\"https://groups.google.com/forum/#!topic/php-fig/hba-ggOo70Y\">voted in</a> with 74% of the voting members showing up at the polls, all of whom voted yes.</p>\n\n<h2>What is all the fuss about?</h2>\n\n<p>I believe this workflow will solve all of these problems.</p>\n\n<p>A PSR now has a status:</p>\n\n<ul>\n<li>Pre-Draft</li>\n<li>Draft</li>\n<li>Review</li>\n<li>Accepted</li>\n</ul>\n\n<p>All 4 existing PSRs are instantly accepted of course, and everything else has no status until it passes the \"Entrance Vote\". This essentially means that while it's still possible for anyone to create a proposal, it doesn't get any stamp of approval until it has passed the Entrance Vote. For example, if somebody proposes we should be making a standard for inline JavaScript, it's probably not going to pass the vote.</p>\n\n<p>After the Entrance Vote the status is Draft, and to get here it needs an Editor and two Sponsors (one of which is the Coordinator, who is in charge of calling and counting the votes). Once the Editor and Sponsors agree its ready for review the coordinator lets the group know.</p>\n\n<p>This is very useful for the group. It means if I have no interest in a specific proposal (it addresses something I have no domain knowledge on, or I just don't care) I don't need to read every single email, but when it goes for review I can read the \"Meta Document\" (those are new too) and catch up completely. I can give small feedback, or suggest big changes which might knock it back to Draft if people like them. Realistically, if I have such awesome useful feedback for a proposal I probably should have spoken up sooner, but no process is 100% perfect.</p>\n\n<p>If the Review stage goes well and nobody throws a barney about the actual content, the Coordinator can call an \"Acceptance Vote\". If this vote passes, it goes straight in.</p>\n\n<h2>Sounds like a lot of work</h2>\n\n<p>Not really. Each PSR has a different Coordinator, so I call a vote, wait two weeks, then count. Everyone involved with these PSRs is interested in the topic, so it's not a hardship for them.</p>\n\n<p>The number of emails in the group are reduced, and essentially the signal is boosted and the noise reduced. By creating these little working groups, a lot of the work can be done offline, on IRC, in private, at a bar, whatever, then the Draft and Review stages allow for group participation on a larger scale.</p>\n\n<h2>What does it mean for <em>you</em>?</h2>\n\n<p>New PSRs are coming, and they're wicked.</p>\n\n<ul>\n<li><a href=\"https://groups.google.com/forum/#!topic/php-fig/_LYBgfcEoFE\"><strong>Autoloader</strong></a> - PSR-0 is sticking around for the foreseeable future, but this new autoloader updates things for a package-based world. Remember, PSR-0 was made to autoload PEAR/Zend/Horde style code (before Composer was a thing), so updating things is definitely needed. PyroCMS, Drupal and Joomla are all going to use the shit out of this.</li>\n<li><a href=\"https://groups.google.com/forum/#!topic/php-fig/mBP6PmG0TqU\"><strong>Cache</strong></a> - It's back! In a similar way to the logging interface, soon you'll be able to interact with generic cache packages and framework specific cache interfaces without even thinking about it.</li>\n<li><a href=\"https://groups.google.com/forum/#!topic/php-fig/M3CcFynWkdo\"><strong>PHPDoc</strong></a> - The phpDocumentor team are taking their de-facto standard and trying to ratify it, and improve it. Currently the phpDocumentor team have their own DocBlock syntax, and most other API doc systems either use it exactly, or use something similar. We're going to try and find the commonalities between them, and make ONE standard, so API doc builders can use this one. <a href=\"http://xkcd.com/927/\">Obligatory XKCD</a></li>\n</ul>\n\n<p>They're all so far passing their Entrance Votes with flying colors. Some will change before they get to Review and later have their Acceptance Vote, but the Autoloader will most likely fly straight on through.</p>\n\n<p>If anyone is freaking out about the new Autoloader then my advice is: calm down. The Composer team are supporting it and it won't effect your packages unless you want to use it. Upgrading a package from PSR-0 to the new Autoloader will take about 5 minutes if you're still learning or about 30 seconds if you've done it before. Upgrading an application will require nothing, it will be completely seamless and use the existing Composer autoloader.</p>\n\n<p>Read the <a href=\"https://github.com/pmjones/fig-standards/blob/master/proposed/autoloader/autoload-meta.md\">meta document</a>.</p>\n\n<p>PSR-0 will probably be deprecated some day, but no date has been set for that. If it happens, it will be a damn long time away, so there is literally no problem there.</p>\n\n<p>If you've got an idea for a proposal now would be a great time to share it on the <a href=\"https://groups.google.com/forum/#!forum/php-fig\">ML</a> and ask for feedback.</p>\n\n<p>Remember the PHP-FIG motto: If you talk about tabs v spaces, the <a href=\"http://www.youtube.com/watch?v=jBizgLZX7W0\">Mega Shark</a> will fuck you up.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "163",
    "created": "2013-08-20 17:20:00",
    "updated": "2013-08-20 17:20:00",
    "created_by": "2",
    "ordering_count": "16",
    "title": "PHP Static Analysis in Sublime Text",
    "slug": "php-static-analysis-in-sublime-text",
    "category_id": "2",
    "attachment": "",
    "intro": "While learning Python I really enjoyed how Sublime Text 2 would shout at me for using too many empty lines, using tabs instead of spaces and even things like declaring unused local variables, importing modules that were never used, etc. This was pretty cool, and I was soon writing beautiful Python code without any concern over which way things should be done, so lets get it working for PHP.",
    "body": "Coding Standards have been around for the longest time and recently they're starting to become more widespread in PHP. While learning Python I really enjoyed how Sublime Text 2 would shout at me for using too many empty lines, using tabs instead of spaces and even things like declaring unused local variables, importing modules that were never used, etc. This was pretty cool, and I was soon writing beautiful Python code without any concern over which way things should be done.\n\nI've been doing this with PHP for the last year, but trying to get a new-hire going with this stuff was hard. We smashed through it taking notes so now I've written it up for you guys.\n\n## Step 1: Match PHP versions with your dev environment\n\nIf you locally develop using [Vagrant](http://www.vagrantup.com) or some other VM (and you really should be) you will most likely have a different local version of PHP to the one in the box.\n\n_For me, on OSX `php -v` displayed PHP 5.3.15 and vagrant is on 5.4.6. Using [homebrew](http://brew.sh/) and the [homebrew-php](https://github.com/josegonzalez/homebrew-php) repo this was relatively easy._\n\nYou don't need to install all the extensions and everything to make it a fully operational environment, you just need to make sure that when `php -l` runs, Sublime Text 2 is using a version that understands the same syntax. For example, if you skip this step and your local version of php is 5.3, Sublime Text is going to shout errors at you every time you try to use a trait or short array syntax.\n\n## Step 2: Moar Static Analysis Tools\n\nThere are several tools we'll be using: [PHP Mess Detector](http://phpmd.org/), [PHP CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) and [PHP Coding Standards Fixer](https://github.com/fabpot/PHP-CS-Fixer).\n\n<s>_Depending on how you have PEAR installed, you might need to prefix these commands with `sudo`._</s>\n\n{{ prism:syntax lang=\"bash\" }}\n$ pear channel-discover pear.phpmd.org\n$ pear channel-discover pear.pdepend.org\n$ pear install --alldeps phpmd/PHP\\_PMD\n$ pear install PHP\\_CodeSniffer\n{{ /prism:syntax }}\n\n**Update 13/12/2013:** The reason I originally suggested PEAR was down to homebrew doing some fairly odd shit when I tried installing these packages. It was trying to install a .phar but PHP was not allowed to create a phar itself, so I had to switch phar.readonly to Off in php.ini. It might be worth doing that - just to avoid PEAR - so once you've made the change run this:\n\n{{ prism:syntax lang=\"bash\" }}\n$ brew tap josegonzalez/homebrew-php\n$ brew install phpmd\n$ brew install php-code-sniffer\n$ brew install php-cs-fixer\n{{ /prism:syntax }}\n\n## Step 3: Install the Sublime PHP CS plugin\n\nThis is [the plugin](http://www.soulbroken.co.uk/code/sublimephpcs/) that brings it all together.\n\nYou'll need to go to \"Preferences > Package Settings > PHP CodeSniffer > Settings - Default\". Set these values:\n\n{{ prism:syntax lang=\"json\" }}\n// Show the errors in the quick panel so you can then goto line\n\"phpcs\\_show\\_quick_panel\": false,\n{{ /prism:syntax }}\n\nSwitching that to false will avoid the obnoxious pop-up that lists all errors in your face. Sometimes you want to ignore a few errors, this won't let you.\n\n{{ prism:syntax lang=\"json\" }}\n// It seems python/sublime cannot always find the phpcs application\n// If empty, then use PATH version of phpcs, else use the set value\n\"phpcs\\_executable\\_path\": \"/usr/bin/phpcs\",\n{{ /prism:syntax }}\n\nSet the full path to phpcs. You can use `which phpcs` for this.\n\n{{ prism:syntax lang=\"json\" }}\n\"phpcs\\_additional\\_args\": {\n    \"--standard\": \"psr2\",\n    \"-n\": \"\"\n},\n{{ /prism:syntax }}\n\nBecause you know you love spaces over tabs.\n\n{{ prism:syntax lang=\"json\" }}\n// Path to where you have the php-cs-fixer installed\n\"php\\_cs\\_fixer\\_executable\\_path\": \"/usr/local/bin/php-cs-fixer\",\n{{ /prism:syntax }}\n\nFind the fixer.\n\n{{ prism:syntax lang=\"json\" }}\n// Are we going to run php -l over the file?\n\"phpcs\\_linter\\_run\": true,\n{{ /prism:syntax }}\n\nHere is the linting we were taking about.\n\n{{ prism:syntax lang=\"json\" }}\n// Execute phpmd\n\"phpmd\\_run\": true,\n{{ /prism:syntax }}\n\nWill shout at you for producing stupidly complex functions and methods. If it says a method is complicated, try splitting it in half.\n\n{{ prism:syntax lang=\"json\" }}\n// It seems python/sublime cannot always find the phpmd application\n// If empty, then use PATH version of phpmd, else use the set value\n\"phpmd\\_executable\\_path\": \"/usr/bin/phpmd\",\n{{ /prism:syntax }}\n\nTell Sublime where phpmd is.\n\nPlay around with the other settings if you like, but do that in \"Settings - User\" so you still have this default to fall back on. This default is the least invasive and most useful setup I have so far, but can certainly be tweaked.\n\n## Other IDEs\n\nIf you want to do this with something other than Sublime Text then there are plenty of other options.\n\nOnly one IDE I've spotted so far has CodeSniffer support out of the box:\n\n* [PHPStorm](http://www.jetbrains.com/phpstorm/webhelp/code-sniffer.html)\n\nSome require extensions but have some simple tutorials:\n\n* [Eclipse](http://www.rdeeson.com/weblog/89/enforce-coding-standards-with-php_codesniffer-and-eclipse-ide-on-ubuntu-linux.html)\n* [NetBeans](http://www.amaxus.com/cms-blog/coding-standards-netbeans-php-codesniffer)\n* [VIM](http://joncairns.com/2012/03/vim-with-php-code-sniffer-mess-detector-and-code-coverage/)\n\n\nWether you think coding standards are important or not, at some point in your career you are almost certainly going to be forced to use one. Some Lead Developers like me will use CodeSniffer to detect invalid formatting on the Continuous Integration server (Jenkins, Travis-CI, Bamboo, etc). Depending on how the thresholds for checkstyle warnings are configured, a developer placing too many brackets and new lines in the wrong place could mark the build as unstable, or even fail it.\n\nThis might all sound petty, but some rules have extremely valid reasons. You put a new line at the end of the file? That could let whitespace sneak into the output, which will cause bugs in production. I figure it is better for your IDE/editor to shouts at you, rather than the whole dev team.",
    "created_on": "1377015600",
    "updated_on": "1377015600",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "c749c798fa8230938650b9f716122053",
    "type": "markdown",
    "parsed": "<p>Coding Standards have been around for the longest time and recently they're starting to become more widespread in PHP. While learning Python I really enjoyed how Sublime Text 2 would shout at me for using too many empty lines, using tabs instead of spaces and even things like declaring unused local variables, importing modules that were never used, etc. This was pretty cool, and I was soon writing beautiful Python code without any concern over which way things should be done.</p>\n\n<p>I've been doing this with PHP for the last year, but trying to get a new-hire going with this stuff was hard. We smashed through it taking notes so now I've written it up for you guys.</p>\n\n<h2>Step 1: Match PHP versions with your dev environment</h2>\n\n<p>If you locally develop using <a href=\"http://www.vagrantup.com\">Vagrant</a> or some other VM (and you really should be) you will most likely have a different local version of PHP to the one in the box.</p>\n\n<p><em>For me, on OSX <code>php -v</code> displayed PHP 5.3.15 and vagrant is on 5.4.6. Using <a href=\"http://brew.sh/\">homebrew</a> and the <a href=\"https://github.com/josegonzalez/homebrew-php\">homebrew-php</a> repo this was relatively easy.</em></p>\n\n<p>You don't need to install all the extensions and everything to make it a fully operational environment, you just need to make sure that when <code>php -l</code> runs, Sublime Text 2 is using a version that understands the same syntax. For example, if you skip this step and your local version of php is 5.3, Sublime Text is going to shout errors at you every time you try to use a trait or short array syntax.</p>\n\n<h2>Step 2: Moar Static Analysis Tools</h2>\n\n<p>There are several tools we'll be using: <a href=\"http://phpmd.org/\">PHP Mess Detector</a>, <a href=\"https://github.com/squizlabs/PHP_CodeSniffer\">PHP CodeSniffer</a> and <a href=\"https://github.com/fabpot/PHP-CS-Fixer\">PHP Coding Standards Fixer</a>.</p>\n\n<p><s><em>Depending on how you have PEAR installed, you might need to prefix these commands with <code>sudo</code>.</em></s></p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ pear channel-discover pear.phpmd.org\n$ pear channel-discover pear.pdepend.org\n$ pear install --alldeps phpmd/PHP&#95;PMD\n$ pear install PHP&#95;CodeSniffer\n{{ /prism:syntax }}</p>\n\n<p><strong>Update 13/12/2013:</strong> The reason I originally suggested PEAR was down to homebrew doing some fairly odd shit when I tried installing these packages. It was trying to install a .phar but PHP was not allowed to create a phar itself, so I had to switch phar.readonly to Off in php.ini. It might be worth doing that - just to avoid PEAR - so once you've made the change run this:</p>\n\n<p>{{ prism:syntax lang=\"bash\" }}\n$ brew tap josegonzalez/homebrew-php\n$ brew install phpmd\n$ brew install php-code-sniffer\n$ brew install php-cs-fixer\n{{ /prism:syntax }}</p>\n\n<h2>Step 3: Install the Sublime PHP CS plugin</h2>\n\n<p>This is <a href=\"http://www.soulbroken.co.uk/code/sublimephpcs/\">the plugin</a> that brings it all together.</p>\n\n<p>You'll need to go to \"Preferences > Package Settings > PHP CodeSniffer > Settings - Default\". Set these values:</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n// Show the errors in the quick panel so you can then goto line\n\"phpcs&#95;show&#95;quick_panel\": false,\n{{ /prism:syntax }}</p>\n\n<p>Switching that to false will avoid the obnoxious pop-up that lists all errors in your face. Sometimes you want to ignore a few errors, this won't let you.</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n// It seems python/sublime cannot always find the phpcs application\n// If empty, then use PATH version of phpcs, else use the set value\n\"phpcs&#95;executable&#95;path\": \"/usr/bin/phpcs\",\n{{ /prism:syntax }}</p>\n\n<p>Set the full path to phpcs. You can use <code>which phpcs</code> for this.</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n\"phpcs&#95;additional&#95;args\": {\n    \"--standard\": \"psr2\",\n    \"-n\": \"\"\n},\n{{ /prism:syntax }}</p>\n\n<p>Because you know you love spaces over tabs.</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n// Path to where you have the php-cs-fixer installed\n\"php&#95;cs&#95;fixer&#95;executable&#95;path\": \"/usr/local/bin/php-cs-fixer\",\n{{ /prism:syntax }}</p>\n\n<p>Find the fixer.</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n// Are we going to run php -l over the file?\n\"phpcs&#95;linter&#95;run\": true,\n{{ /prism:syntax }}</p>\n\n<p>Here is the linting we were taking about.</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n// Execute phpmd\n\"phpmd&#95;run\": true,\n{{ /prism:syntax }}</p>\n\n<p>Will shout at you for producing stupidly complex functions and methods. If it says a method is complicated, try splitting it in half.</p>\n\n<p>{{ prism:syntax lang=\"json\" }}\n// It seems python/sublime cannot always find the phpmd application\n// If empty, then use PATH version of phpmd, else use the set value\n\"phpmd&#95;executable&#95;path\": \"/usr/bin/phpmd\",\n{{ /prism:syntax }}</p>\n\n<p>Tell Sublime where phpmd is.</p>\n\n<p>Play around with the other settings if you like, but do that in \"Settings - User\" so you still have this default to fall back on. This default is the least invasive and most useful setup I have so far, but can certainly be tweaked.</p>\n\n<h2>Other IDEs</h2>\n\n<p>If you want to do this with something other than Sublime Text then there are plenty of other options.</p>\n\n<p>Only one IDE I've spotted so far has CodeSniffer support out of the box:</p>\n\n<ul>\n<li><a href=\"http://www.jetbrains.com/phpstorm/webhelp/code-sniffer.html\">PHPStorm</a></li>\n</ul>\n\n<p>Some require extensions but have some simple tutorials:</p>\n\n<ul>\n<li><a href=\"http://www.rdeeson.com/weblog/89/enforce-coding-standards-with-php_codesniffer-and-eclipse-ide-on-ubuntu-linux.html\">Eclipse</a></li>\n<li><a href=\"http://www.amaxus.com/cms-blog/coding-standards-netbeans-php-codesniffer\">NetBeans</a></li>\n<li><a href=\"http://joncairns.com/2012/03/vim-with-php-code-sniffer-mess-detector-and-code-coverage/\">VIM</a></li>\n</ul>\n\n<p>Wether you think coding standards are important or not, at some point in your career you are almost certainly going to be forced to use one. Some Lead Developers like me will use CodeSniffer to detect invalid formatting on the Continuous Integration server (Jenkins, Travis-CI, Bamboo, etc). Depending on how the thresholds for checkstyle warnings are configured, a developer placing too many brackets and new lines in the wrong place could mark the build as unstable, or even fail it.</p>\n\n<p>This might all sound petty, but some rules have extremely valid reasons. You put a new line at the end of the file? That could let whitespace sneak into the output, which will cause bugs in production. I figure it is better for your IDE/editor to shouts at you, rather than the whole dev team.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "164",
    "created": "2013-08-21 11:50:00",
    "updated": "2013-08-21 11:50:00",
    "created_by": "2",
    "ordering_count": "17",
    "title": "FUD Cracker: PHP 5.5 never lost JSON support",
    "slug": "fud-cracker-php-55-never-lost-json-support",
    "category_id": "2",
    "attachment": "",
    "intro": "I&#39;m posting this because I have accidentally been perpetuating some FUD, that PHP 5.5 has had its JSON support removed. <strong>It hasn&#39;t</strong>. This article is an appology for my involvement in any confusion and an explanation of what actually happened.",
    "body": "I'm posting this because I have accidentally been perpetuating some FUD, that PHP 5.5 has had its JSON support removed. **It hasn't**. \n\n<blockquote class=\"twitter-tweet\"><p>If anyone tells you that PHP 5.5 dropped JSON support, that&#39;s wrong. JSON support is there as always (just maybe with a different impl)</p>&mdash; Nikita Popov (@nikita_ppv) <a href=\"https://twitter.com/nikita_ppv/statuses/370144778781868033\">August 21, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nSome Linux distros are simply choosing to switch from the default ext to using [this one](https://github.com/remicollet/pecl-json-c). MAYBE PHP itself will switch sometime, who knows.\n\nLet me explain my previous confusion.\n\nThe other day I was upgrading some Ubuntu servers to PHP 5.5 via the [Ondřej Surý PPA](https://launchpad.net/~ondrej/+archive/php5). Chef ran and did it's thing and everything seemed great until I tried running my tests. Everything was red.\n\n> PHP Fatal error:  Call to undefined function Illuminate\\Support\\json_encode() on line ....\n\nWhat the shit? I've not seen that since accidentally running PHP 5.2.x code on a PHP 5.1.x server a bunch of years ago, but this is in a namespace too so it can't be that.\n\nGoogling around got me to PHP [bug report #63520](https://bugs.php.net/bug.php?id=63520). In there we see a bunch of smart folk discussing that things might need to be removed or changed due to licenses and politics, but no concrete action is listed at the bottom as to what happened, and it was a few days ago.\n\nI ended up fucking around in the CLI for a while and eventually purged PHP and all of its packages after noticing my php5-dev was still 5.4.x-based. After reinstalling php5-dev my worries were gone, json_encode() worked again.\n\nIt was at this point I made a silly assumption. I figured Ondřej had just enabled the new extension by default (which it turns out he did) but other distros were still without, which was seemingly confirmed by a blog post called \"[PHP JSON removed in PHP 5.5](http://iteration99.com/2013/php-json-removed-from-php-5-5/)\". _It changed its name while writing this and seems to have made a few edits, but it definitely gives off the idea that PHP had actually removed JSON and was waiting for a replacement to go in._\n\nWhatever, I made a silly tweet about it and got on with my day:\n\n<blockquote class=\"twitter-tweet\"><p>Upgrading PHP 5.4 to 5.5 takes almost no time; Well... except for this little nugget of lunacy: <a href=\"http://t.co/oiEZru7Rbf\">http://t.co/oiEZru7Rbf</a> <a href=\"https://twitter.com/search?q=%23phpdrama&amp;src=hash\">#phpdrama</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/369535062233997314\">August 19, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nIt was funny and all but it is of course completely wrong. Since then the link has been up on Reddit and it was so wrong one of the moderators took the article off the front-page, which VERY rarely happens. Then it was reposted, but this time [Nikita Popov](https://twitter.com/nikita_ppv) was around to [explain](http://www.reddit.com/r/PHP/comments/1ksnzw/php_json_removed_in_php_55/cbs7kfo).\n\n## What Actually Happened\n\n[ext/json](https://github.com/php/php-src/tree/master/ext/json) is still in master, so php source has not changed. \n\nDebian removed the original ext/json from their distribution (as detailed in this [Debian bug report](http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692613)), and have bundled a feature-complete [replacement extension](https://github.com/remicollet/pecl-json-c) into their distro. It seems like the package dependencies might have been a little different (maybe just in the PPA I was using) as somehow my upgrade got me PHP 5.5, but it didn't get me the new ext. As I said removing php5-dev and putting it back again seemed to do the trick, so fuck knows what was going on there.\n\nPut simply, upgrading should be fine. Here are the options while upgrading:\n\n* **Source users:** Compile from updated source and you'll have no problems.\n* **Non-Debian/Fedora-based users:** Your package manager will update you with no issue at all.\n* **Debian/Fedora-based users:** Your package manager will _probably_ update you with no issue at all. If you get into trouble, purge and install php fresh.\n\nSo it looks like I was only having problems because I was using an unstable PPA which had upgraded to PHP 5.5.2 and removed the core ext, putting the new ext in a different package. I had a problem, Googled it and had my fears backed up by a blog article which was not entirely accurate. \n\nHere is a [better blog post](https://liorkaplan.wordpress.com/2013/06/01/bye-bye-non-free-php-json-extension/) covering what happened, posted in _June_. Sadly it wasn't that one everyone started linking to (myself included). \n\nSo, sorry for any tweets or Reddit comments you saw from me. The whole time I was saying it was silly politics and a non-issue for PHP developers as even if the ext WAS missing, if you're installing PHP 5.5 on your server you can obviously install a PECL. BUT, luckily, you don't have to.\n\nPHP 5.5 works amazingly. Use it. I am.\n\nP.S: This.\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/mwop\">@mwop</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/rdohms\">@rdohms</a> Can we finally use this as a rationale to push people away from distro supported releases? So ridiculous...</p>&mdash; Anthony Ferrara (@ircmaxell) <a href=\"https://twitter.com/ircmaxell/statuses/370160913854103552\">August 21, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
    "created_on": "1377082200",
    "updated_on": "1377082200",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "1a8af39cba38f60750f1dc2080760068",
    "type": "markdown",
    "parsed": "<p>I'm posting this because I have accidentally been perpetuating some FUD, that PHP 5.5 has had its JSON support removed. <strong>It hasn't</strong>. </p>\n\n<blockquote class=\"twitter-tweet\"><p>If anyone tells you that PHP 5.5 dropped JSON support, that&#39;s wrong. JSON support is there as always (just maybe with a different impl)</p>&mdash; Nikita Popov (@nikita_ppv) <a href=\"https://twitter.com/nikita_ppv/statuses/370144778781868033\">August 21, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Some Linux distros are simply choosing to switch from the default ext to using <a href=\"https://github.com/remicollet/pecl-json-c\">this one</a>. MAYBE PHP itself will switch sometime, who knows.</p>\n\n<p>Let me explain my previous confusion.</p>\n\n<p>The other day I was upgrading some Ubuntu servers to PHP 5.5 via the <a href=\"https://launchpad.net/~ondrej/+archive/php5\">Ondřej Surý PPA</a>. Chef ran and did it's thing and everything seemed great until I tried running my tests. Everything was red.</p>\n\n<blockquote>\n  <p>PHP Fatal error:  Call to undefined function Illuminate\\Support\\json_encode() on line ....</p>\n</blockquote>\n\n<p>What the shit? I've not seen that since accidentally running PHP 5.2.x code on a PHP 5.1.x server a bunch of years ago, but this is in a namespace too so it can't be that.</p>\n\n<p>Googling around got me to PHP <a href=\"https://bugs.php.net/bug.php?id=63520\">bug report #63520</a>. In there we see a bunch of smart folk discussing that things might need to be removed or changed due to licenses and politics, but no concrete action is listed at the bottom as to what happened, and it was a few days ago.</p>\n\n<p>I ended up fucking around in the CLI for a while and eventually purged PHP and all of its packages after noticing my php5-dev was still 5.4.x-based. After reinstalling php5-dev my worries were gone, json_encode() worked again.</p>\n\n<p>It was at this point I made a silly assumption. I figured Ondřej had just enabled the new extension by default (which it turns out he did) but other distros were still without, which was seemingly confirmed by a blog post called \"<a href=\"http://iteration99.com/2013/php-json-removed-from-php-5-5/\">PHP JSON removed in PHP 5.5</a>\". <em>It changed its name while writing this and seems to have made a few edits, but it definitely gives off the idea that PHP had actually removed JSON and was waiting for a replacement to go in.</em></p>\n\n<p>Whatever, I made a silly tweet about it and got on with my day:</p>\n\n<blockquote class=\"twitter-tweet\"><p>Upgrading PHP 5.4 to 5.5 takes almost no time; Well... except for this little nugget of lunacy: <a href=\"http://t.co/oiEZru7Rbf\">http://t.co/oiEZru7Rbf</a> <a href=\"https://twitter.com/search?q=%23phpdrama&amp;src=hash\">#phpdrama</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/369535062233997314\">August 19, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>It was funny and all but it is of course completely wrong. Since then the link has been up on Reddit and it was so wrong one of the moderators took the article off the front-page, which VERY rarely happens. Then it was reposted, but this time <a href=\"https://twitter.com/nikita_ppv\">Nikita Popov</a> was around to <a href=\"http://www.reddit.com/r/PHP/comments/1ksnzw/php_json_removed_in_php_55/cbs7kfo\">explain</a>.</p>\n\n<h2>What Actually Happened</h2>\n\n<p><a href=\"https://github.com/php/php-src/tree/master/ext/json\">ext/json</a> is still in master, so php source has not changed. </p>\n\n<p>Debian removed the original ext/json from their distribution (as detailed in this <a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692613\">Debian bug report</a>), and have bundled a feature-complete <a href=\"https://github.com/remicollet/pecl-json-c\">replacement extension</a> into their distro. It seems like the package dependencies might have been a little different (maybe just in the PPA I was using) as somehow my upgrade got me PHP 5.5, but it didn't get me the new ext. As I said removing php5-dev and putting it back again seemed to do the trick, so fuck knows what was going on there.</p>\n\n<p>Put simply, upgrading should be fine. Here are the options while upgrading:</p>\n\n<ul>\n<li><strong>Source users:</strong> Compile from updated source and you'll have no problems.</li>\n<li><strong>Non-Debian/Fedora-based users:</strong> Your package manager will update you with no issue at all.</li>\n<li><strong>Debian/Fedora-based users:</strong> Your package manager will <em>probably</em> update you with no issue at all. If you get into trouble, purge and install php fresh.</li>\n</ul>\n\n<p>So it looks like I was only having problems because I was using an unstable PPA which had upgraded to PHP 5.5.2 and removed the core ext, putting the new ext in a different package. I had a problem, Googled it and had my fears backed up by a blog article which was not entirely accurate. </p>\n\n<p>Here is a <a href=\"https://liorkaplan.wordpress.com/2013/06/01/bye-bye-non-free-php-json-extension/\">better blog post</a> covering what happened, posted in <em>June</em>. Sadly it wasn't that one everyone started linking to (myself included). </p>\n\n<p>So, sorry for any tweets or Reddit comments you saw from me. The whole time I was saying it was silly politics and a non-issue for PHP developers as even if the ext WAS missing, if you're installing PHP 5.5 on your server you can obviously install a PECL. BUT, luckily, you don't have to.</p>\n\n<p>PHP 5.5 works amazingly. Use it. I am.</p>\n\n<p>P.S: This.</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/mwop\">@mwop</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/rdohms\">@rdohms</a> Can we finally use this as a rationale to push people away from distro supported releases? So ridiculous...</p>&mdash; Anthony Ferrara (@ircmaxell) <a href=\"https://twitter.com/ircmaxell/statuses/370160913854103552\">August 21, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n",
    "preview_hash": ""
  },
  {
    "id": "165",
    "created": "2013-08-29 18:53:00",
    "updated": "2013-08-29 18:53:00",
    "created_by": "2",
    "ordering_count": "18",
    "title": "CurlFile and the Facebook SDK in PHP 5.5",
    "slug": "curlfile-and-the-facebook-sdk-in-php-55",
    "category_id": "2",
    "attachment": "",
    "intro": "The Facebook PHP SDK is currently broken if you&#39;re running PHP 5.5 and are trying to upload files. I&#39;ve made a little pull request and explained what is happening, primairily as a Google-catcher for anyone else having the same problem.",
    "body": "One of the features implemented in PHP 5.5 was [CurlFile](http://us2.php.net/manual/en/class.curlfile.php), a nice addition to the Curl extension to allow you to specify specific arguments as a file for upload.\n\nIn previous versions (pre-PHP 5.5) the syntax looked like this:\n\n{{ prism:syntax lang=\"php\" }}\n$facebook->api(\"/me/photos\", 'POST', [\n    'source' => '@/foo/bar.jpg',\n    'message' => $message,\n]);\n{{ /prism:syntax }}\n    \nIf you're lucky enough to be working with PHP 5.5 that code will throw a deprecated warning:\n\n> curl\\_setopt\\_array(): The usage of the @filename API for file uploading is deprecated. Please use the CURLFile class instead\n\nI have an error handler which will throw any warnings/notices/etc as ErrorException to help me debug stuff locally and on my testing servers, and this was something that started happening. A little digging around lead me to try this syntax:\n\n{{ prism:syntax lang=\"php\" }}\n$facebook->api(\"/me/photos\", 'POST', [\n    'source' => new CURLFile('/foo/bar.jpg', 'image/jpeg'),\n    'message' => $message,\n]);\n{{ /prism:syntax }}\n    \nSadly while Curl was happy with this, the Facebook PHP SDK (v3.2.2) was not. It turns out the SDK will turn ANY value you send it in that params array into a string. Meaning this was being sent up:\n\n{{ prism:syntax lang=\"php\" }}\narray(4) { 'source' => string(70) \"{\"name\":\"\\/foo\\/bar.jpg\",\"mime\":\"image\\/jpeg\",\"postname\":\"\"}\" 'message' => string(20) \"This is another test\" 'method' => string(4) \"POST\" 'access_token' => string(214) \"sneakysneaky\" }\n{{ /prism:syntax }}\n    \nSo, the CurlFile instance was being converted to JSON. Not helpful.\n\nI fixed this up with a super-simple [pull request](https://github.com/facebook/facebook-php-sdk/pull/89) which will hopefully be merged and be released as v3.2.3, as we can't have the Facebook SDK just *not work* with PHP 5.5.\n\nIf you'd like to use my fork in the mean-time, just shove this in your `composer.json` and run a `composer update`:\n\n{{ prism:syntax }}\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/philsturgeon/facebook-php-sdk\"\n        }\n    ],\n{{ /prism:syntax }}\n\nThis is not a fault with the Facebook SDK directly and I'm going to patch any other libraries I come across with this issue. If you're using PHP 5.5 please do the same with anything you come across and others won't have to worry about this at all.\n\nP.S If anyone is wondering about the usefulness of CurlFile, have you remembered to protect your user-contributed inputs to make them not start with `@`? If you don't, somebody creating a caption with \"@Phil Hey Buddy!\" will try to upload a file from your server called \"Phil Hey Buddy!\". There are more than a few security implications there, so forcing people to wrap their file uploads up is going to save a lot of problems. If you're still on PHP 5.4 do something like this:\n\n{{ prism:syntax lang=\"php\" }}\n(substr($message, 0, 1) === '@') and $message = '.'.$message;\n{{ /prism:syntax }}",
    "created_on": "1377798780",
    "updated_on": "1377798780",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "ece3bc7a9e529e218a4dd67370cb7551",
    "type": "markdown",
    "parsed": "<p>One of the features implemented in PHP 5.5 was <a href=\"http://us2.php.net/manual/en/class.curlfile.php\">CurlFile</a>, a nice addition to the Curl extension to allow you to specify specific arguments as a file for upload.</p>\n\n<p>In previous versions (pre-PHP 5.5) the syntax looked like this:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$facebook->api(\"/me/photos\", 'POST', [\n    'source' => '@/foo/bar.jpg',\n    'message' => $message,\n]);\n{{ /prism:syntax }}</p>\n\n<p>If you're lucky enough to be working with PHP 5.5 that code will throw a deprecated warning:</p>\n\n<blockquote>\n  <p>curl&#95;setopt&#95;array(): The usage of the @filename API for file uploading is deprecated. Please use the CURLFile class instead</p>\n</blockquote>\n\n<p>I have an error handler which will throw any warnings/notices/etc as ErrorException to help me debug stuff locally and on my testing servers, and this was something that started happening. A little digging around lead me to try this syntax:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$facebook->api(\"/me/photos\", 'POST', [\n    'source' => new CURLFile('/foo/bar.jpg', 'image/jpeg'),\n    'message' => $message,\n]);\n{{ /prism:syntax }}</p>\n\n<p>Sadly while Curl was happy with this, the Facebook PHP SDK (v3.2.2) was not. It turns out the SDK will turn ANY value you send it in that params array into a string. Meaning this was being sent up:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\narray(4) { 'source' => string(70) \"{\"name\":\"\\/foo\\/bar.jpg\",\"mime\":\"image\\/jpeg\",\"postname\":\"\"}\" 'message' => string(20) \"This is another test\" 'method' => string(4) \"POST\" 'access_token' => string(214) \"sneakysneaky\" }\n{{ /prism:syntax }}</p>\n\n<p>So, the CurlFile instance was being converted to JSON. Not helpful.</p>\n\n<p>I fixed this up with a super-simple <a href=\"https://github.com/facebook/facebook-php-sdk/pull/89\">pull request</a> which will hopefully be merged and be released as v3.2.3, as we can't have the Facebook SDK just <em>not work</em> with PHP 5.5.</p>\n\n<p>If you'd like to use my fork in the mean-time, just shove this in your <code>composer.json</code> and run a <code>composer update</code>:</p>\n\n<p>{{ prism:syntax }}\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/philsturgeon/facebook-php-sdk\"\n        }\n    ],\n{{ /prism:syntax }}</p>\n\n<p>This is not a fault with the Facebook SDK directly and I'm going to patch any other libraries I come across with this issue. If you're using PHP 5.5 please do the same with anything you come across and others won't have to worry about this at all.</p>\n\n<p>P.S If anyone is wondering about the usefulness of CurlFile, have you remembered to protect your user-contributed inputs to make them not start with <code>@</code>? If you don't, somebody creating a caption with \"@Phil Hey Buddy!\" will try to upload a file from your server called \"Phil Hey Buddy!\". There are more than a few security implications there, so forcing people to wrap their file uploads up is going to save a lot of problems. If you're still on PHP 5.4 do something like this:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n(substr($message, 0, 1) === '@') and $message = '.'.$message;\n{{ /prism:syntax }}</p>\n",
    "preview_hash": ""
  },
  {
    "id": "166",
    "created": "2013-08-30 18:07:00",
    "updated": "2013-08-30 18:07:00",
    "created_by": "2",
    "ordering_count": "19",
    "title": "Potential Variadic Function Syntax for PHP 5.6",
    "slug": "potential-variadic-function-syntax-for-php-56",
    "category_id": "2",
    "attachment": "",
    "intro": "An awesome RFC popped up the other day: Syntax for variadic functions, developed by Nikita Popov. I read through it and I loved it, but I did have to Google to see what the hell a variadic function was.",
    "body": "An awesome RFC popped up the other day: [Syntax for variadic functions](https://wiki.php.net/rfc/variadics), developed by [Nikita Popov](https://twitter.com/nikita_ppv). I read through it and I loved it, but I did have to Google to see what the hell a [variadic function](https://en.wikipedia.org/wiki/Variadic_function) was. _This is what happens when you teach yourself how to code. You know how to do things, but don't know any of the words._\n\nVariadic functions are already possible in PHP and have been throughout 4.x and 5.x in the form of [func\\_get\\_args()](http://us2.php.net/func_get_args), which is pretty gross. It's used for functions where you want to have an unlimited number of functions like:\n\n{{ prism:syntax lang=\"php\" }}\nmax(11, 2, 4, 6, 1);\nsum(1, 5, 6);\n{{ /prism:syntax }}\n\nCurrently to implement a function like this you'd do:\n\n{{ prism:syntax lang=\"php\" }}\nfunction sum()\n{\n    return array\\_sum(func\\_get\\_args());\n}\n\necho sum(1, 4, 12, 20);\n{{ /prism:syntax }}\n\nThe proposed RFC lets you write this:\n\n{{ prism:syntax lang=\"php\" }}\nfunction sum(...$nums)\n{\n    return array\\_sum($nums);\n}\n\necho sum(1, 4, 12, 20);\n{{ /prism:syntax }}\n\nThis super-trivial example shows off the difference between the two approaches, but some folks are hesitant about how useful this is. Let's consider a few things here.\n\n### Pro: Readability\n\nImagine a function that is 50 lines long, and on line 45 the developer is using a `func_get_args()`. You'd have to notice that to know that you are meant to pass in a bunch of arguments… The new variadic syntax would make it strikingly obvious what is happening in the function declaration, which is where arguments come from. \n\nI ran a find in folder on Pyro to see what came up first, and the answer is:\n\n{{ prism:syntax lang=\"php\" }}\n    public function orX($x = null)\n    {\n        return new CompositeExpression(CompositeExpression::TYPE\\_OR, func\\_get\\_args());\n    }\n{{ /prism:syntax }}\n    \nDoctrine looks drunk here. It accepts one param called `$x`, which is optional, then uses `func_get_args()` anyway meaning fuck `$x`.\n    \nOr:\n\n{{ prism:syntax lang=\"php\" }}\n    public function orX(...$x)\n    {\n        return new CompositeExpression(CompositeExpression::TYPE\\_OR, $x);\n    }\n{{ /prism:syntax }}\n\nI'll take that please. Clear, self documenting code.\n\n### Pro: Documentation\n\nI'm a big fan of DocBlocks. Having well documented code means you can run API generators, use IDE auto-completion, get warnings about return type clashes right in your editer, etc, which is why I volunteered to coordinate the new [PHPDoc PSR](https://github.com/php-fig/fig-standards/pull/169) with the phpDocumentor team. Put simply: that shit is awesome.\n    \nSure we could add a `@param *variadic` doc syntax or something, but it would be odd and not mix in with other syntax very well. The new syntax would make it super easy:\n\n{{ prism:syntax lang=\"php\" }}\n    /**\n     * @param mixed ...$x\n     *\n     * @return CompositeExpression\n     */\n    public function orX(...$x)\n    {\n        return new CompositeExpression(CompositeExpression::TYPE\\_OR, $x);\n    }\n{{ /prism:syntax }}\n\nThanks!\n\n### Pro: Type Hinting\n\nType Hinting right now is like a semi-done hair-cut. Some squabbling in the core team about how to handle strong/weak typing hinting for  `int`, `float`, `string`, etc lead to confusion and means the feature is restricted to type hinting for an `array`, `callable` or a class/interface name. Sure we can't type hint every type of value [yet] but the fact that type hinting exists means we should be able to use it. \n\n{{ prism:syntax lang=\"php\" }}\n    /**\n     * Favorite one or more statuses.\n     *\n     * @param string $screenName\n     * @param Twitter\\Status ...$statuses\n     *\n     * @return array[League\\Twitter\\User]\n     */\n    public function favoriteStatus($screenName, Twitter\\Status ...$statuses)\n    {\n{{ /prism:syntax }}\nThat is awesome, I can specify the type exactly, instead of having to allow an array then check instances in a loop or some shit. Quicker, more obvious, better for everyone.\n\n### Pro: Less Faff\n\nWhile not the most important aspect, even if you don't think defining this in the function signature is important, you can avoid this sort of horrendous faffing around:\n\n{{ prism:syntax lang=\"php\" }}\n    public function tryMethod()\n    {\n        $args = func\\_get\\_args();\n        $method = $args[0];\n        unset($args[0]);\n        $args = array\\_values($args);\n\n        try {\n            return call\\_user\\_func\\_array([$this, $method], $args);\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n{{ /prism:syntax }}\n   \nThis becomes:\n\n{{ prism:syntax lang=\"php\" }}\n    public function tryMethod($method, ...$args)\n    {\n        try {\n            return call\\_user\\_func\\_array([$this, $method], $args);\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n{{ /prism:syntax }}\n    \nWhy screw around when you don't have to?\n\n### Pro: Keeping up With The Joneses\n\nC#, Ruby and Python as well as many others. While copying features might not be best route to innovation, it shows there is precedence for the functionality.\n\nPHP might not be using EXACTLY the same operator as others (which no doubt will cause folks to piss and moan for a while) but PHP is a [Pillagin' Pirate](http://blog.astrumfutura.com/2012/04/php-innocent-villagefolk-or-a-pillagin-pirate/), and pillagin' pirates gotta take what they can.\n\n### Con: Trollolololol?\n\nI threw this RFC on Reddit to see if anyone could give me some downsides and some epic trolling began by some [/r/lolphp](http://www.reddit.com/r/lolphp) bros who seemed to have wandered into the wrong sub-reddit.\n\nOne dude was complaining about performance, but there is no reason this would have any effect on performance. Adding an extra token to PHP is not going to make it explode, and randomly making allegations about stuff doesn't make you big or clever.\n\n### Con: Argument Unpacking\n\nOne valid con came up on the PHP internals list and a few times in comments, that with this new syntax you cannot pass the variadic value on properly. \n\nWell, you can't right now either. To reuse the same example, you have to do shit like this:\n\n{{ prism:syntax lang=\"php\" }}\n    public function tryMethod($method, ...$args)\n    {\n        try {\n            return call\\_user\\_func_array([$this, $method], $args);\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n{{ /prism:syntax }}\n\nFor this Nikita has another RFC for [argument unpacking](https://wiki.php.net/rfc/argument_unpacking) using what is sometimes known as a splat operator. \n\n_Learning that splat was an actual thing was the most fun I had learning Ruby a few years back, and I can't wait until I'm reading out some syntax at a conference somewhere and I get to say \"bang brace splat\"._\n\nTaking this same example and applying the new splat operator makes it much nicer:\n\n{{ prism:syntax lang=\"php\" }}\n    public function tryMethod($method, ...$args)\n    {\n        try {\n            return $this->$method(...$args);\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n{{ /prism:syntax }}\n   \nIt's just taking the arguments, and shoving them into the method in the same way they came in.\n\nThe examples on the RFC are also very handy:\n\n{{ prism:syntax lang=\"php\" }}\ncall\\_user\\_func\\_array([$db, 'query'], array\\_merge(array($query), $params));\n// or\n$db->query($query, ...$params);\n{{ /prism:syntax }}\n\nWhich would you prefer to type?\n\nDon't care about pretty syntax? Ok, well it's faster too. [About 3.5x - 4x faster](https://gist.github.com/nikic/6390366).\n\n## Summary\n\nNeither of these RFCs are about saying you have to use it, or that variadics are always good, or that using an array of values as parameters is wrong. It's simply about _drastically_ tidying up existing functionality in PHP.\n\nSomebody on Reddit pointed out this is just like namespaces. PHP users implemented them in a hacky kinda way: (\"Let's all agree that underscores mean a namespace… ok?\") then the language ratified the use with syntax, so now we have an actual namespace separator and `use` functionality. This is the same. People are already using variadics, so instead of it being a nasty mess this syntax tidies it up.\n\nUse the arguments to explain to folks why this functionality is great. If you know somebody on the core team who is struggling with this feature (and I've seen some _really_ bizarre comments going around) then maybe this can help you explain to them why we should have it.\n\nPHP should be allowed to have nice things. How about named parameters next?",
    "created_on": "1377882420",
    "updated_on": "1377882420",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "9aa6e89668746c05d7bda11689b0c20e",
    "type": "markdown",
    "parsed": "<p>An awesome RFC popped up the other day: <a href=\"https://wiki.php.net/rfc/variadics\">Syntax for variadic functions</a>, developed by <a href=\"https://twitter.com/nikita_ppv\">Nikita Popov</a>. I read through it and I loved it, but I did have to Google to see what the hell a <a href=\"https://en.wikipedia.org/wiki/Variadic_function\">variadic function</a> was. <em>This is what happens when you teach yourself how to code. You know how to do things, but don't know any of the words.</em></p>\n\n<p>Variadic functions are already possible in PHP and have been throughout 4.x and 5.x in the form of <a href=\"http://us2.php.net/func_get_args\">func&#95;get&#95;args()</a>, which is pretty gross. It's used for functions where you want to have an unlimited number of functions like:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nmax(11, 2, 4, 6, 1);\nsum(1, 5, 6);\n{{ /prism:syntax }}</p>\n\n<p>Currently to implement a function like this you'd do:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nfunction sum()\n{\n    return array&#95;sum(func&#95;get&#95;args());\n}</p>\n\n<p>echo sum(1, 4, 12, 20);\n{{ /prism:syntax }}</p>\n\n<p>The proposed RFC lets you write this:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nfunction sum(...$nums)\n{\n    return array&#95;sum($nums);\n}</p>\n\n<p>echo sum(1, 4, 12, 20);\n{{ /prism:syntax }}</p>\n\n<p>This super-trivial example shows off the difference between the two approaches, but some folks are hesitant about how useful this is. Let's consider a few things here.</p>\n\n<h3>Pro: Readability</h3>\n\n<p>Imagine a function that is 50 lines long, and on line 45 the developer is using a <code>func_get_args()</code>. You'd have to notice that to know that you are meant to pass in a bunch of arguments… The new variadic syntax would make it strikingly obvious what is happening in the function declaration, which is where arguments come from. </p>\n\n<p>I ran a find in folder on Pyro to see what came up first, and the answer is:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    public function orX($x = null)\n    {\n        return new CompositeExpression(CompositeExpression::TYPE&#95;OR, func&#95;get&#95;args());\n    }\n{{ /prism:syntax }}</p>\n\n<p>Doctrine looks drunk here. It accepts one param called <code>$x</code>, which is optional, then uses <code>func_get_args()</code> anyway meaning fuck <code>$x</code>.</p>\n\n<p>Or:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    public function orX(...$x)\n    {\n        return new CompositeExpression(CompositeExpression::TYPE&#95;OR, $x);\n    }\n{{ /prism:syntax }}</p>\n\n<p>I'll take that please. Clear, self documenting code.</p>\n\n<h3>Pro: Documentation</h3>\n\n<p>I'm a big fan of DocBlocks. Having well documented code means you can run API generators, use IDE auto-completion, get warnings about return type clashes right in your editer, etc, which is why I volunteered to coordinate the new <a href=\"https://github.com/php-fig/fig-standards/pull/169\">PHPDoc PSR</a> with the phpDocumentor team. Put simply: that shit is awesome.</p>\n\n<p>Sure we could add a <code>@param *variadic</code> doc syntax or something, but it would be odd and not mix in with other syntax very well. The new syntax would make it super easy:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    /**\n     * @param mixed ...$x\n     *\n     * @return CompositeExpression\n     */\n    public function orX(...$x)\n    {\n        return new CompositeExpression(CompositeExpression::TYPE&#95;OR, $x);\n    }\n{{ /prism:syntax }}</p>\n\n<p>Thanks!</p>\n\n<h3>Pro: Type Hinting</h3>\n\n<p>Type Hinting right now is like a semi-done hair-cut. Some squabbling in the core team about how to handle strong/weak typing hinting for  <code>int</code>, <code>float</code>, <code>string</code>, etc lead to confusion and means the feature is restricted to type hinting for an <code>array</code>, <code>callable</code> or a class/interface name. Sure we can't type hint every type of value [yet] but the fact that type hinting exists means we should be able to use it. </p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    /**\n     * Favorite one or more statuses.\n     *\n     * @param string $screenName\n     * @param Twitter\\Status ...$statuses\n     *\n     * @return array[League\\Twitter\\User]\n     */\n    public function favoriteStatus($screenName, Twitter\\Status ...$statuses)\n    {\n{{ /prism:syntax }}\nThat is awesome, I can specify the type exactly, instead of having to allow an array then check instances in a loop or some shit. Quicker, more obvious, better for everyone.</p>\n\n<h3>Pro: Less Faff</h3>\n\n<p>While not the most important aspect, even if you don't think defining this in the function signature is important, you can avoid this sort of horrendous faffing around:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    public function tryMethod()\n    {\n        $args = func&#95;get&#95;args();\n        $method = $args[0];\n        unset($args[0]);\n        $args = array&#95;values($args);</p>\n\n<pre><code>    try {\n        return call\\_user\\_func\\_array([$this, $method], $args);\n    } catch (\\Exception $e) {\n        return false;\n    }\n}\n</code></pre>\n\n<p>{{ /prism:syntax }}</p>\n\n<p>This becomes:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    public function tryMethod($method, ...$args)\n    {\n        try {\n            return call&#95;user&#95;func&#95;array([$this, $method], $args);\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n{{ /prism:syntax }}</p>\n\n<p>Why screw around when you don't have to?</p>\n\n<h3>Pro: Keeping up With The Joneses</h3>\n\n<p>C#, Ruby and Python as well as many others. While copying features might not be best route to innovation, it shows there is precedence for the functionality.</p>\n\n<p>PHP might not be using EXACTLY the same operator as others (which no doubt will cause folks to piss and moan for a while) but PHP is a <a href=\"http://blog.astrumfutura.com/2012/04/php-innocent-villagefolk-or-a-pillagin-pirate/\">Pillagin' Pirate</a>, and pillagin' pirates gotta take what they can.</p>\n\n<h3>Con: Trollolololol?</h3>\n\n<p>I threw this RFC on Reddit to see if anyone could give me some downsides and some epic trolling began by some <a href=\"http://www.reddit.com/r/lolphp\">/r/lolphp</a> bros who seemed to have wandered into the wrong sub-reddit.</p>\n\n<p>One dude was complaining about performance, but there is no reason this would have any effect on performance. Adding an extra token to PHP is not going to make it explode, and randomly making allegations about stuff doesn't make you big or clever.</p>\n\n<h3>Con: Argument Unpacking</h3>\n\n<p>One valid con came up on the PHP internals list and a few times in comments, that with this new syntax you cannot pass the variadic value on properly. </p>\n\n<p>Well, you can't right now either. To reuse the same example, you have to do shit like this:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    public function tryMethod($method, ...$args)\n    {\n        try {\n            return call&#95;user&#95;func_array([$this, $method], $args);\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n{{ /prism:syntax }}</p>\n\n<p>For this Nikita has another RFC for <a href=\"https://wiki.php.net/rfc/argument_unpacking\">argument unpacking</a> using what is sometimes known as a splat operator. </p>\n\n<p><em>Learning that splat was an actual thing was the most fun I had learning Ruby a few years back, and I can't wait until I'm reading out some syntax at a conference somewhere and I get to say \"bang brace splat\".</em></p>\n\n<p>Taking this same example and applying the new splat operator makes it much nicer:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    public function tryMethod($method, ...$args)\n    {\n        try {\n            return $this->$method(...$args);\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n{{ /prism:syntax }}</p>\n\n<p>It's just taking the arguments, and shoving them into the method in the same way they came in.</p>\n\n<p>The examples on the RFC are also very handy:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\ncall&#95;user&#95;func&#95;array([$db, 'query'], array&#95;merge(array($query), $params));\n// or\n$db->query($query, ...$params);\n{{ /prism:syntax }}</p>\n\n<p>Which would you prefer to type?</p>\n\n<p>Don't care about pretty syntax? Ok, well it's faster too. <a href=\"https://gist.github.com/nikic/6390366\">About 3.5x - 4x faster</a>.</p>\n\n<h2>Summary</h2>\n\n<p>Neither of these RFCs are about saying you have to use it, or that variadics are always good, or that using an array of values as parameters is wrong. It's simply about <em>drastically</em> tidying up existing functionality in PHP.</p>\n\n<p>Somebody on Reddit pointed out this is just like namespaces. PHP users implemented them in a hacky kinda way: (\"Let's all agree that underscores mean a namespace… ok?\") then the language ratified the use with syntax, so now we have an actual namespace separator and <code>use</code> functionality. This is the same. People are already using variadics, so instead of it being a nasty mess this syntax tidies it up.</p>\n\n<p>Use the arguments to explain to folks why this functionality is great. If you know somebody on the core team who is struggling with this feature (and I've seen some <em>really</em> bizarre comments going around) then maybe this can help you explain to them why we should have it.</p>\n\n<p>PHP should be allowed to have nice things. How about named parameters next?</p>\n",
    "preview_hash": ""
  },
  {
    "id": "167",
    "created": "2013-09-01 01:35:00",
    "updated": "2013-09-01 01:35:00",
    "created_by": "2",
    "ordering_count": "20",
    "title": "Named Parameters in PHP",
    "slug": "named-parameters-in-php",
    "category_id": "2",
    "attachment": "",
    "intro": "Converting a Python Twitter API package to PHP turned out to be more trouble than I initially expected due to the usage of Python&#39;s named parameters. This artice uses the Twitter library as an example for why named parameters are important and useful.",
    "body": "_**Update 06/09/2013:**_ I had initially offered to put together an RFC draft updating the original rather dire efforts at documenting PHP's lack of interest for named parameters. A more objective RFC has now been put together by [Nikita Popov](https://twitter.com/nikita_ppv) so I can ditch my notes. Wonderful._\n\nConverting a Python Twitter API package to PHP turned out to be more trouble than I initially expected due to the usage of Python's named parameters. Here is the converted function signature:\n\n{{ prism:syntax lang=\"php\" }}\npublic function getFriends(\n    $user\\_id = null, \n    $screen\\_name = null, \n    $cursor = -1, \n    $skip\\_status = false, \n    $include\\_user\\_entities = false\n) {\n{{ /prism:syntax }}\n\nIn Python a call to that method could look like this:\n\n{{ prism:syntax lang=\"python\" }}\napi.get\\_friends(screen\\_name=\"phpdrama\", include\\_user\\_entities=true)\n{{ /prism:syntax }}\n\nBecause PHP has no ability for users to specify parameters and is instead done entirely based on the definition order, it's going to look like this:\n\n{{ prism:syntax lang=\"php\" }}\n$api->getFriends(null, 'phpdrama', -1, false, true);\n{{ /prism:syntax }}\n\nEverything is wrong with this.\n\n1. I as a user should not have to know or care what the default values of arguments im not using are.\n2. It is unobvious when/if default values change.\n3. I don't know what im saying `false` to without looking back at the declaration.\n4. It looks shitty.\n\n### What about arrays?\n\nWhenever I say I'd like to use named parameters, somebody says \"why do you need them, just use arrays!\".\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> That argument always comes up on internals when named parameters are raised. Shows a fundamental misunderstanding, I feel.</p>&mdash; weierophinney (@mwop) <a href=\"https://twitter.com/mwop/statuses/361982046433845248\">July 29, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nWell, if its my only option I guess I will, but how does it look:\n\n{{ prism:syntax lang=\"php\" }}\npublic function getFriends($args)\n{\n    $args += [\n    \t'user\\_id' => null,\n    \t'screen\\_name' => null,\n    \t'cursor' => -1,\n    \t'skip\\_status' => false,\n    \t'include\\_user\\_entities' => false,\n    ];\n    extract($args);\n\t// ....\n}\n{{ /prism:syntax }}\n\n_**Update 01/09/2013:** I had some nasty-ass isset statements in there but a few people pointed out this array situation would be nicer. They're right of course. I need to stop blogging from the bar._\n\nThis syntax will make the following syntax available:\n\n{{ prism:syntax lang=\"php\" }}\n$api->getFriends(['screen\\_name' => 'phpdrama', 'include\\_user\\_entities' => true]);\n{{ /prism:syntax }}\n\nOk so yes, technically this will work, but I lose all ability to docblock anything, type hinting is a chore and I have to do it in EVERY method. There are a lot of methods, which means litterally hundreds of lines of boilerplate that could be replaced easily with syntax.\n\nWhat would it look like in PHP-land? Something like one of these I guess:\n\n{{ prism:syntax lang=\"php\" }}\n$api->getFriends(screen\\_name => 'phpdrama', include\\_user\\_entities => true);\n$api->getFriends(screen\\_name='phpdrama', include\\_user\\_entities=true);\n$api->getFriends(:screen\\_name => 'phpdrama', :include\\_user_entities => true);\n$api->getFriends(screen\\_name: 'phpdrama', include\\_user\\_entities: true);\n{{ /prism:syntax }}\n\nComment on which you prefer and why. Also feel free to suggest other syntax.\n\n## Next Step\n\nNamed Parameters for PHP is not a new conversation. It's reared its head several times - so much so that the [named parameters RFC](https://wiki.php.net/rfc/namedparameters) says:\n\n> Since the topic continually gets re-raised, and now PHP has an RFC process, the discussion should be recorded in an RFC (Note this is yet to be done) so the same arguments don't have to be revisited.\n\nThe reason I've not been confident about seeing named parameters make it into PHP is due to the conclusion on this RFC:\n\n> Discussion\n\n> We don't see the real need for named parameters, as they seem to violate PHP's KISS principle. It also makes for messier code.\n\n> Conclusions\n\n> We do not want to add it.\n\nThe attitude that comes across here is extremely negative and mostly sounds like the response of somebody that does not truly understand what named parameters are. The RFC also says that it needs to be updated to include conversations that have been had since the RFC was initially created. \n\nI can read, I can Google and I can write, so I feel like I am the perfect person for the job.\n\nI've emailed the internals list asking for a green light, then I'll rewrite the RFC to be a fair and balanced outline of what named parameters are. If you guys can make syntax suggestions I can propose the most popular ones as options on the RFC.\n\nI definitely don't think named parameters will get into 5.6, but I do think the RFC can be drastically improved to A) give people a better understanding of the pros and cons and B) perhaps change the minds of enough of the core team to eventually make named parameters a possibility.",
    "created_on": "1377995700",
    "updated_on": "1377995700",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "04ff1108fd4088d2fe3a9c9f95cc1383",
    "type": "markdown",
    "parsed": "<p><em><strong>Update 06/09/2013:</strong></em> I had initially offered to put together an RFC draft updating the original rather dire efforts at documenting PHP's lack of interest for named parameters. A more objective RFC has now been put together by <a href=\"https://twitter.com/nikita_ppv\">Nikita Popov</a> so I can ditch my notes. Wonderful._</p>\n\n<p>Converting a Python Twitter API package to PHP turned out to be more trouble than I initially expected due to the usage of Python's named parameters. Here is the converted function signature:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\npublic function getFriends(\n    $user&#95;id = null, \n    $screen&#95;name = null, \n    $cursor = -1, \n    $skip&#95;status = false, \n    $include&#95;user&#95;entities = false\n) {\n{{ /prism:syntax }}</p>\n\n<p>In Python a call to that method could look like this:</p>\n\n<p>{{ prism:syntax lang=\"python\" }}\napi.get&#95;friends(screen&#95;name=\"phpdrama\", include&#95;user&#95;entities=true)\n{{ /prism:syntax }}</p>\n\n<p>Because PHP has no ability for users to specify parameters and is instead done entirely based on the definition order, it's going to look like this:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$api->getFriends(null, 'phpdrama', -1, false, true);\n{{ /prism:syntax }}</p>\n\n<p>Everything is wrong with this.</p>\n\n<ol>\n<li>I as a user should not have to know or care what the default values of arguments im not using are.</li>\n<li>It is unobvious when/if default values change.</li>\n<li>I don't know what im saying <code>false</code> to without looking back at the declaration.</li>\n<li>It looks shitty.</li>\n</ol>\n\n<h3>What about arrays?</h3>\n\n<p>Whenever I say I'd like to use named parameters, somebody says \"why do you need them, just use arrays!\".</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> That argument always comes up on internals when named parameters are raised. Shows a fundamental misunderstanding, I feel.</p>&mdash; weierophinney (@mwop) <a href=\"https://twitter.com/mwop/statuses/361982046433845248\">July 29, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Well, if its my only option I guess I will, but how does it look:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\npublic function getFriends($args)\n{\n    $args += [\n        'user&#95;id' => null,\n        'screen&#95;name' => null,\n        'cursor' => -1,\n        'skip&#95;status' => false,\n        'include&#95;user&#95;entities' => false,\n    ];\n    extract($args);\n    // ....\n}\n{{ /prism:syntax }}</p>\n\n<p><em><strong>Update 01/09/2013:</strong> I had some nasty-ass isset statements in there but a few people pointed out this array situation would be nicer. They're right of course. I need to stop blogging from the bar.</em></p>\n\n<p>This syntax will make the following syntax available:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$api->getFriends(['screen&#95;name' => 'phpdrama', 'include&#95;user&#95;entities' => true]);\n{{ /prism:syntax }}</p>\n\n<p>Ok so yes, technically this will work, but I lose all ability to docblock anything, type hinting is a chore and I have to do it in EVERY method. There are a lot of methods, which means litterally hundreds of lines of boilerplate that could be replaced easily with syntax.</p>\n\n<p>What would it look like in PHP-land? Something like one of these I guess:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n$api->getFriends(screen&#95;name => 'phpdrama', include&#95;user&#95;entities => true);\n$api->getFriends(screen&#95;name='phpdrama', include&#95;user&#95;entities=true);\n$api->getFriends(:screen&#95;name => 'phpdrama', :include&#95;user_entities => true);\n$api->getFriends(screen&#95;name: 'phpdrama', include&#95;user&#95;entities: true);\n{{ /prism:syntax }}</p>\n\n<p>Comment on which you prefer and why. Also feel free to suggest other syntax.</p>\n\n<h2>Next Step</h2>\n\n<p>Named Parameters for PHP is not a new conversation. It's reared its head several times - so much so that the <a href=\"https://wiki.php.net/rfc/namedparameters\">named parameters RFC</a> says:</p>\n\n<blockquote>\n  <p>Since the topic continually gets re-raised, and now PHP has an RFC process, the discussion should be recorded in an RFC (Note this is yet to be done) so the same arguments don't have to be revisited.</p>\n</blockquote>\n\n<p>The reason I've not been confident about seeing named parameters make it into PHP is due to the conclusion on this RFC:</p>\n\n<blockquote>\n  <p>Discussion</p>\n  \n  <p>We don't see the real need for named parameters, as they seem to violate PHP's KISS principle. It also makes for messier code.</p>\n  \n  <p>Conclusions</p>\n  \n  <p>We do not want to add it.</p>\n</blockquote>\n\n<p>The attitude that comes across here is extremely negative and mostly sounds like the response of somebody that does not truly understand what named parameters are. The RFC also says that it needs to be updated to include conversations that have been had since the RFC was initially created. </p>\n\n<p>I can read, I can Google and I can write, so I feel like I am the perfect person for the job.</p>\n\n<p>I've emailed the internals list asking for a green light, then I'll rewrite the RFC to be a fair and balanced outline of what named parameters are. If you guys can make syntax suggestions I can propose the most popular ones as options on the RFC.</p>\n\n<p>I definitely don't think named parameters will get into 5.6, but I do think the RFC can be drastically improved to A) give people a better understanding of the pros and cons and B) perhaps change the minds of enough of the core team to eventually make named parameters a possibility.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "168",
    "created": "2013-09-09 20:57:00",
    "updated": "2013-09-09 20:57:00",
    "created_by": "2",
    "ordering_count": "21",
    "title": "T_PAAMAYIM_NEKUDOTAYIM v Sanity",
    "slug": "t-paamayim-nekudotayim-v-sanity",
    "category_id": "2",
    "attachment": "",
    "intro": "As somebody who has followed internals (and been hearing tales of woe from others) for a while, I&#39;ve seen so many conversations with truly bizarre, irrelevant and trolly responses coming back from everyone all the way up to Rasmus himself. It was this sort of trolling and bullshit that lead to Anthony Ferrera&#39;s recent (and completely understandable) departure from the core. This walks through one example of trollolololing, as an exercise in eduction for anyone unaware of the madness that internals can host.",
    "body": "Anyone who has mentioned PHP Fractal of Bad Design to me knows I don't give it much credit. It's a list of complaints about loose-typing in general, some \"its not Python\" rants, lots of complaints about bugs that have been fixed, suggestions PHP doesn't have features which it has had for years and a _few_ examples of quirks that need to be worked on.\n\nPretending PHP is perfect would obviously be ridiculous - it has its problems - but a list of issues being compiled gives interested developers a great chance to fix things. One such resource is [PHP Sadness](http://phpsadness.com/) brought to you by [Eric Wastl](http://twitter.com/topaz2078), to document valid bugs and freaky shit that PHP does. \n\nWhether it be the chicken or the egg, these items are one by one being scratched off as active core-contributors make RFCs and fight the good fight to get them merged. Think of this resource as a bug report system, but one that is entirely outside the control of people who might decide to just close it with a \"wontfix\" tag. If any of you guys have **valid** concerns with PHP that have been shot down or left inactive, you should consider sending them to Eric with full examples and use [3v4l.org](http://3v4l.org/) to test the output of 80+ PHP versions.\n\nSadly it is not always easy to clear these items, or add new features in general. As somebody who has followed internals (and been hearing tales of woe from others) for a while, I've seen so many conversations with truly bizarre, irrelevant and trolly responses coming back from everyone all the way up to Rasmus himself. It was this sort of trolling and bullshit that lead to [Anthony Ferrera](https://twitter.com/ircmaxell)'s recent (and completely understandable) [departure from the core](http://blog.ircmaxell.com/2013/09/rambling-on-internals.html).\n\n## An Example\n\nLooking at the top section of PHP Sadness are:\n\n- [#1 Unexpected T\\_PAAMAYIM\\_NEKUDOTAYIM](http://phpsadness.com/sad/1)\n- [#7 Parse error: syntax error, unexpected T_SL in…](http://phpsadness.com/sad/7)\n\nThose are both essentially the same \"sadness\" being reported, that an unrecognisable token used to display instead of showing something useful. For those of you who don't know, in PHP T\\_PAAMAYIM\\_NEKUDOTAYIM is the token name for \"::\", the static separator. It's Hebrew for double colon.\n\nBoth of these have been \"fixed\" in PHP 5.4, but only partially. There is a little caveat in both:\n\n> PHP 5.4 still calls it T\\_PAAMAYIM\\_NEKUDOTAYIM, but includes '::' in the error message, making it only mildly less confusing\n\nEverything in PHP is broken down from literal symbols into tokens, like `T_IF`, `T_ELSE`, `T_STRING`, `T_SL` and of course the crazy-looking `T_PAAMAYIM_NEKUDOTAYIM`. These are then handled by the parser, and if an unexpected order of things turns up you get an error message. That error message always used to be:\n\n> Parse error: syntax error, unexpected (T\\_PAAMAYIM\\_NEKUDOTAYIM)\n\nSince PHP 5.4 the output is:\n\n> Parse error: syntax error, unexpected '::' (T\\_PAAMAYIM\\_NEKUDOTAYIM)\n\nThat is a little victory for sure, but as Eric points out it's pretty damn confusing to still see that token name in there.\n\nWhy is it not just:\n\n> Parse error: syntax error, unexpected '::'\n\nOr better yet:\n\n> Parse error: syntax error, unexpected '::' double colon\n\nI asked on IRC and got this answer:\n\n> ekneuss: philsturgeon, the token name was kept around because conservative people felt that removing it would be too much of a change, and might confuse users.\n\nI understand that to get the \"::\" in the guys implementing this RFC had to keep displaying the token name to appease the conservatives on internals. That is a compromise and it is fair enough on their part, but as a PHP user (not a core contributor) I do not feel like it is of any relevance to me whatsoever.\n\nIn other words: **I give zero fucks about the name of the token** - especially if it has a non-standard name. I understand that core developers want that, but it could easily be an extra logging output item, or some sort of default-off dev switch in the parser, or something.\n\nI was interested, so I started digging into this decision and I came across an absolute gem on the mailing list.\n\n### A Trolls Tale\n\nA battle of epic proportions was held on PHP internals about this back in 2010, started off by ##php Freenode IRC operator [Chad Minick](http://twitter.com/cythrawll), suggesting that T\\_PAAMAYIM\\_NEKUDOTAYIM should be renamed. I don't care much about having it renamed because the core of PHP can do what it likes. I simply care about the separation of internals and user display. \n\nFor the same reason the people using one of my web-apps don't need to know what I name my variables, I am equally uninterested what the parser decides to nickname a semi-colon or an angle bracket in the parser.\n\nThis conversation was a perfect example of internals trolls going full-blast, and is exactly the sort of situation that lead to Anthony's rage-quit. Let's have a look at the \"highlights\" of this conversation:\n\nChad opens with:\n\n> WTF is T\\_PAAMAYIM\\_NEKUDOTAYIM?\n\n> This has to be THE most asked question by new php developers when they\ncome across it. Can we please change the token name to T\\_DOUBLE\\_COLON\nso I don't have to hear about it constantly?\n\n> Those that disagree don't do enough PHP support to know how often it is\nasked. it's worth it.\n\n[Link](http://grokbase.com/p/php/php-internals/10ay7h1f2a/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon)\n\nProbably not a great way to launch in, but he makes a valid point. His position as an operator on ##php means he would know what people are asking, and trying to resolve issues that bring up the most requests is a reasonable aim.\n\nDaniel P. Brown is the first troll to take aim:\n\n> Someone disagreeing with your request to change something does not\ncorrelate to their doing \"enough PHP support.\" There are many reasons\nto disagree with a change request, no matter how much any one person\nthinks of it as a necessity or an improvement.\n\n[Link](http://grokbase.com/p/php/php-internals/10ay7h1f2a/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon)\n\nHis accuracy points must need leveling up, because that is not even vaguely what Chad said.\n\nJames Butler takes his turn (after a bunch of people argue about the fact Chad didn't have his full name displaying on the first post properly) and uses the good old fashioned \"if it aint broke don't fix it\" attack:\n\n> Why should this be changed? Is it broken? Is it something that 1 second on google can't answer?\nIf somebody is advanced enough to be using classes (I think about the only time you would use a double colon) then they should know what it means.\n\n[Link](http://grokbase.com/p/php/php-internals/10aysaywpa/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon)\n\nEven in 2010, referencing a static class is hardly considered \"advanced\" usage. Copy, paste, mistype, T\\_PAAMAYIM\\_NEKUDOTAYIM. And it is broken, if you have to Google a parser error because its written in Hebrew then the parser is fucking broken. \n\nThis is roughly where PHP's closest thing to a BDFL [Rasmus Lerdorf](https://twitter.com/rasmus) beams into the conversation with a little history:\n\n> There are two reasons this term will stay. It is a tip of the hat to\nthe amount of PHP work that came out of Israel, and it is a good\nreminder that there are a lot of other languages in the world. People\nwhose first language is not English, myself included, are forced to work\nwith unfamiliar terms every day. I wouldn't mind having a few more\nnon-English identifiers in PHP actually.\n\n> Well, and a third reason, I like it.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#20101030gqhakkjqq1e9c5cpvc2kqr0870)\n\nThere are three things wrong with this.\n\n1. I'm really glad to hear that international contributions are doing well. This is a great sign that our community is wide reaching, but we're not naming a fucking bridge here. A link in some credits or a README would do a wonderful job of thanking people for their contributions - like every other open-source project ever.\n2. The fact that many programmers are forced to learn English (or at least recognize English keywords) is a [tricky subject](http://www.codinghorror.com/blog/2009/03/the-ugly-american-programmer.html), but lets stick to forcing one language down peoples throat and not randomly make different keywords in different languages for the sake of it.\n3. Plenty of people clearly don't like it, so how about a vote?\n\nAs I said above PHP's users do not give a shit about token names, so the fact that this bizarre message is being displayed to every single PHP user just because the founder of the language likes it is ridiculous.\n\nLet's keep going.\n\nStan Vass appears out of nowhere in a flash as a thunderbolt claps around internals, temporarily stunning the trolls with a flash of fucking logic:\n\n> It's amazing to me this has become such a long discussion. The facts are\nsimple:\n\n> 1) People don't ask for the other parse errors even half as often as they as\nfor T\\_PAAMAYIM\\_NEKUDOTAYIM\n> 2) They do so because it looks like gibberish to them, so it looks unlikely  \n> to be a common thing you can Google, nor it gives something recognizable to start with  \n> 3) Yes, to all who are not sure, more people know English than Hebrew.  \n> 4) Yes, we all acknowledge it's an easter egg joke that refers to the \ncreators of PHP. But that particular joke has outworn its welcome in the\ncommunity after repeatedly causing support issues.\n\n> T\\_DOUBLE\\_COLON already exists as a constant in userland, so the jump to it\nwon't be an epic change. Let's do it as a proof that we're not a nerd\ngridlock bound to argue forever about even the most minor and obviously\npositive changes PHP can implement.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#20101101bmxe2dwm54v13x9qqjfj15agwr)\n\nBoom. Mic-drop. PEACE!\n\nRight? Nope.\n\nDennis Haarbrink has this to say:\n\n> Come on people, what exactly is the problem with a once-in-a-lifetime investment of 5 seconds of your time to google some stupid error message. Something you, as a developer, spend your life doing.\n\n> Please, stop complaining about a minor (yes, it is minor, use the fricking search engine!) annoyance and accept php's heritage.\n\n> And please understand, I do get where all the opponents are coming from, it is an unnecessary complicated error message (I agree that the language argument is a moot point, in the world of internet and programming in particular, English is the standard), but you google it once in your life and then you 'forget' about it. And if you can't remember the meaning of something like that, I hardly doubt you'd be a decent programmer anyway.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#20101101xqghahzfyzb7wzfyvjz65ks5gc)\n\nReally Dennis? \n\nWhat is the problem with Googling a \"stupid\" error message? _The fact that I have to Google a stupid error message is the problem with having to Google a stupid error message! You even call it an \"unnecessary complicated error message\" in the same post.\n\nMinor problems are still problems. \n\nAn excellent retort from Alexander Schrijver combines humor with \"you're wrong\" perfectly: \n\n> Its a minor change and an annoyance to a lot of people. Yes, by not changing\nthis you'r annoying thousands of people.\n\n> This isn't an easteregg either. This is a \"lesson\" as someone explained.\neastereggs aren't visible to normal users.\n\n> If you want teach people about Hebrew you obviously can do so. I don't see how\nthat is the goal of a programming language, but that is an other issue. But\ndon't come along and insult us with this bullshit.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#2010110195t2y8e2wt39x6m44d1nn0xvpg)\n\n_**Side Note:** This line of conversation was mostly being slammed down with suggestions that the entire thing was \"Cosmetic Nonsense\", and instead folks were redirected to the [Lemon parser](https://wiki.php.net/rfc/lemon), which has been marked as \"In progress\" for years. I asked around and it turns out it was abandoned, so I poked the author to change the status to Abandoned so folks know whats up in the future._\n\nThe whole idea that the ONLY way to resolve this is to go with a brand-new parser is potentially ridiculous. They were really suggesting there is NOTHING in the parser that could easily do a backwards look-up on the parser to say T\\_PAAMAYIM\\_NEKUDOTAYIM is \"::\", and output it as part of the error?\n\nAndi Gutmans casts a pro-PAAMAYIM attack along with some elitist drivel:\n\n> The first google entry when you search for it gives you the answer. It is actually unbelievably easy to find the answer via search. If a new PHP developer can't find it then maybe they shouldn't be writing code.\n\n> This is a piece of history from the PHP 3 days and think it adds some character, a story (and history) to PHP. Don't think we should take this out after a good 12 years.\n\n> I would prefer this was not changed.\n\nOh good, it adds some character? That seems like a valid reason to keep speaking Hebrew to our international community for no reason, whilst keeping PHP the laughing stock of the entire same international community - except for _some_ of PHP internals crew. Thanks for that Andi.\n\nEven PHPUnit PHP-extraordinaire [Sebastian Bergmann](https://twitter.com/s_bergmann) and phpDocumentor member (and Editor of [PSR-5](https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md) which I'm currently listed as Co-ordinator for) [Mike Van Riel](http://twitter.com/mvriel) support[ed] this argument.\n\nIt might be part of PHP's history, but this is one of this memories that would be nice to move away from, like how your granddad probably doesn't still wear that nose-ring and crazy tattoos he had when he was a rebellious punk teenager.\n\nAnd if we need to keep the shitty tattoo, can we at least make sure it's not visible to everyone?\n\nChad is revived and comes back to fight on:\n\n> It's the same argument everyone else is giving, and really it all comes\ndown to this.:\n\n> Nostalgia is valued over clarity and consistency.\n\n> Do you guys REALLY want to claim that?\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#20101030kvbc589enh40bg00hcxzng3yam)\n\n\nThat produces a lot more \"it aint broke so…\" responses so I wont bother to highlight all of them. It's said by 4 different people and I'm getting bored of copying and pasting, but James Butler returns with his second \"if it aint broke\". He needs that printed on a t-shirt or something:\n\n> If it ain't broken don't fix it.\n\n> Change for the sake of it is a bad thing. It does things like introduce bugs etc.\n\n> Q1) is it broken?\n> Q2) if yes exactly what is broken\n> Q3) does the proposes fix solve the root cause?\n\n> I'm not sure changing the token name is the correct fix to people not knowing what the error means.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#201010307v0ty3w0y3km2ynjfq1qn3wp68)\n\nLet it be noted that at this point MULTIPLE people had suggested not actually renaming the token, but changing the error message. \n\nChad keeps on pushing through, like a snow-plow running on jet fuel\n\n> Q1) yes, it is broken, people have to Google or ask around for a very\nunclear error message when for the most parts errors are (and should be)\nself explanatory.\n\n> Q2) Two things are broken: Either the token is named badly, or the\ntoken names shouldn't show up in error messages at all and be replaced\nwith something a bit more friendly.\n\n> Q3) those two fixes above would probably fix that, yes.\n\n> What is so hard to believe when people see UNEXPECTED T\\_DOUBLE\\_COLON on\nLINE 23 they are gonna look for a double colon on line 23? because they DO.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#2010103041s4d4hmh9h8s1ykw15kswz1j4)\n\nRight. If no change to the token is gonna happen, at least hide it. I read this as \"lets do SOMETHING instead of just arguing!!\". And yes, the fact that what should (and obviously could) be such a simple error message requires a google is an error in itself.\n\nJames Butler tries saying something different to his usual slogan but it doesn't really work out:\n\n> Are you supporting users who you provide a shared hosting embodiment too, and do you control binary installations on the enviroments? If so then possibly patching source for you installs maybe the easiest and quickest solution.\nIf we knew the nature of your support requirements, then we could possibly suggest a better solution or be won round. (although internals isn't the place for that really)\n\n> This is not meant to bait but possibly an improvement in your support process or docs might yield a solution?\n\n[Link](http://grokbase.com/p/php/php-internals/10ayn648kk/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon)\n\nReally? If you don't want error messages in Hebrew you should patch PHP and install this custom version on your own server, and maintain it with updates, etc.\n\nFuck everything about that. I'm stunned.\n\n## A Hero Emerges\n\nWhen all seems lost, a savior swoops down from the clouds riding atop a magical griffin. He is known to some as \"Felipe Pena\", and on his mighty sword was inscribed a phrase which was unreadable to the trolls. It was an unknown language, but after a quick Google search the trolls learned the message turned out to be Hebrew, and translated roughly to \"Let's just fucking fix it instead of bitching about things for a solid month.\"\n\n> Instead of renaming the token, I prefer to associate a literal string to\neach token, to have a legible error message, without the T_ being shown.\n\n> For example, we could use in the Bison grammar file:\n%token T\\_PAAMAYIM\\_NEKUDOTAYIM \"::\"\n\n> So that the error message become:\n\n> $ sapi/cli/php -r '::'\n> Parse error: syntax error, unexpected :: in Command line code on line 1\n\n> Instead of the known \"unexpected T\\_PAAMAYIM\\_NEKUDOTAYIM\" one.\n\n[Link](http://grokbase.com/p/php/php-internals/10b1ew2nn4/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon)\n\nRasmus agrees:\n\n> Years and years ago that was the intent. I didn't think there was a\nclean way to do that in yacc though.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#20101101rh86zyhkd7vxq9gaztw344e13c)\n\nStunned silence...\n\nFerenc Kovacs is so confused he has to ask if its really happening, then posts a summary - which identifies all of my feelings about this thread:\n\n> Thanks Felipe, you are my hero.\n> Anybody else thinks that this thread is very similar to the last array\ndereferencing discussion?\nhttp://www.mail-archive.com/internals@lists.php.net/msg46789.html\n\n> Somebody brought up the idea, most of the veterans tried to dismiss without\ndiscussion, pointing out, that its an old topic, and nothing will change,\nstatus quo, others tried to bend the thread to the lemon patch.\nand Felipe solved the original problem that everybody thought impossible, or\nmuch harder, than it was actually.\n\n> so I think we should ask Felipe more about the unsolvable problems in PHP,\nand maybe we shouldn't stop discussions about old topics, because maybe the\nenvironment around the problems changed with time.\n\n[Link](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#201011026aae6t4yw3x7fyqj6cpfx8emaw)\n\nAnd now, PHP 5.4 has literal symbols in its error messages.\n\nIf anyone would like to read the whole thing you can see this madness in its entirety [here](http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/10ay7h1f2a). \n\n\n## Debrief\n\nThis tale was brought to you to highlight some of the top-level pointless trolling that can be found perpetuated by SOME of the core developers of PHP, in a bid to help people understand why some things in PHP are the way they are. If anyone was confused about Anthony leaving, they shouldn't be anymore with shit like this going on. This was by no means an isolated incident.\n\nNot everybody who disagreed with this suggestion was being an idiot, or a troll, but there were certainly a few contenders.\n\n## Return of the Trolls\n\nRecently something pretty similar has been happening with [Named Parameters](http://news.php.net/php.internals/68976), but [Nikita](https://twitter.com/nikita_ppv) is still doing his thing - and he's doing it well. RFC means request for comments, its a place for discussions to be had, merits to be discussed fairly and pros/cons to be listed and **understood**, not a place for Status Quo fans to gang up on purveyors of change and improvement for the sake of it.\n\nAnthony: We feel for you buddy. Every PHP developer I've spoken to since your decision to go is sad to see you leave. Internals needs more like you, and less of the \"if it aint broke\" jerks. We don't need things to be recoded every week, but we certainly want a little more progress than maintaining bullshit Hebrew error messages because nostalgia is fun for a few core contributors.\n\n## The Bright Side\n\nThis is a good time to point out, I'm extremely grateful for the hard work of anyone contributing on PHP internals with useful features and constructive discussion. To name just a few (in no particular order): Sara Golemon, Nikita Poppov, Igor Wiedler, Xinchen Hui, Ralph Schindler, Zeev Suraski, Pierre Joye and Andrey Andreev, keep it up. We lost one, but we have plenty more.",
    "created_on": "1378756620",
    "updated_on": "1378756620",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "e66fe05f5133fd42280b61821097dd84",
    "type": "markdown",
    "parsed": "<p>Anyone who has mentioned PHP Fractal of Bad Design to me knows I don't give it much credit. It's a list of complaints about loose-typing in general, some \"its not Python\" rants, lots of complaints about bugs that have been fixed, suggestions PHP doesn't have features which it has had for years and a <em>few</em> examples of quirks that need to be worked on.</p>\n\n<p>Pretending PHP is perfect would obviously be ridiculous - it has its problems - but a list of issues being compiled gives interested developers a great chance to fix things. One such resource is <a href=\"http://phpsadness.com/\">PHP Sadness</a> brought to you by <a href=\"http://twitter.com/topaz2078\">Eric Wastl</a>, to document valid bugs and freaky shit that PHP does. </p>\n\n<p>Whether it be the chicken or the egg, these items are one by one being scratched off as active core-contributors make RFCs and fight the good fight to get them merged. Think of this resource as a bug report system, but one that is entirely outside the control of people who might decide to just close it with a \"wontfix\" tag. If any of you guys have <strong>valid</strong> concerns with PHP that have been shot down or left inactive, you should consider sending them to Eric with full examples and use <a href=\"http://3v4l.org/\">3v4l.org</a> to test the output of 80+ PHP versions.</p>\n\n<p>Sadly it is not always easy to clear these items, or add new features in general. As somebody who has followed internals (and been hearing tales of woe from others) for a while, I've seen so many conversations with truly bizarre, irrelevant and trolly responses coming back from everyone all the way up to Rasmus himself. It was this sort of trolling and bullshit that lead to <a href=\"https://twitter.com/ircmaxell\">Anthony Ferrera</a>'s recent (and completely understandable) <a href=\"http://blog.ircmaxell.com/2013/09/rambling-on-internals.html\">departure from the core</a>.</p>\n\n<h2>An Example</h2>\n\n<p>Looking at the top section of PHP Sadness are:</p>\n\n<ul>\n<li><a href=\"http://phpsadness.com/sad/1\">#1 Unexpected T&#95;PAAMAYIM&#95;NEKUDOTAYIM</a></li>\n<li><a href=\"http://phpsadness.com/sad/7\">#7 Parse error: syntax error, unexpected T_SL in…</a></li>\n</ul>\n\n<p>Those are both essentially the same \"sadness\" being reported, that an unrecognisable token used to display instead of showing something useful. For those of you who don't know, in PHP T&#95;PAAMAYIM&#95;NEKUDOTAYIM is the token name for \"::\", the static separator. It's Hebrew for double colon.</p>\n\n<p>Both of these have been \"fixed\" in PHP 5.4, but only partially. There is a little caveat in both:</p>\n\n<blockquote>\n  <p>PHP 5.4 still calls it T&#95;PAAMAYIM&#95;NEKUDOTAYIM, but includes '::' in the error message, making it only mildly less confusing</p>\n</blockquote>\n\n<p>Everything in PHP is broken down from literal symbols into tokens, like <code>T_IF</code>, <code>T_ELSE</code>, <code>T_STRING</code>, <code>T_SL</code> and of course the crazy-looking <code>T_PAAMAYIM_NEKUDOTAYIM</code>. These are then handled by the parser, and if an unexpected order of things turns up you get an error message. That error message always used to be:</p>\n\n<blockquote>\n  <p>Parse error: syntax error, unexpected (T&#95;PAAMAYIM&#95;NEKUDOTAYIM)</p>\n</blockquote>\n\n<p>Since PHP 5.4 the output is:</p>\n\n<blockquote>\n  <p>Parse error: syntax error, unexpected '::' (T&#95;PAAMAYIM&#95;NEKUDOTAYIM)</p>\n</blockquote>\n\n<p>That is a little victory for sure, but as Eric points out it's pretty damn confusing to still see that token name in there.</p>\n\n<p>Why is it not just:</p>\n\n<blockquote>\n  <p>Parse error: syntax error, unexpected '::'</p>\n</blockquote>\n\n<p>Or better yet:</p>\n\n<blockquote>\n  <p>Parse error: syntax error, unexpected '::' double colon</p>\n</blockquote>\n\n<p>I asked on IRC and got this answer:</p>\n\n<blockquote>\n  <p>ekneuss: philsturgeon, the token name was kept around because conservative people felt that removing it would be too much of a change, and might confuse users.</p>\n</blockquote>\n\n<p>I understand that to get the \"::\" in the guys implementing this RFC had to keep displaying the token name to appease the conservatives on internals. That is a compromise and it is fair enough on their part, but as a PHP user (not a core contributor) I do not feel like it is of any relevance to me whatsoever.</p>\n\n<p>In other words: <strong>I give zero fucks about the name of the token</strong> - especially if it has a non-standard name. I understand that core developers want that, but it could easily be an extra logging output item, or some sort of default-off dev switch in the parser, or something.</p>\n\n<p>I was interested, so I started digging into this decision and I came across an absolute gem on the mailing list.</p>\n\n<h3>A Trolls Tale</h3>\n\n<p>A battle of epic proportions was held on PHP internals about this back in 2010, started off by ##php Freenode IRC operator <a href=\"http://twitter.com/cythrawll\">Chad Minick</a>, suggesting that T&#95;PAAMAYIM&#95;NEKUDOTAYIM should be renamed. I don't care much about having it renamed because the core of PHP can do what it likes. I simply care about the separation of internals and user display. </p>\n\n<p>For the same reason the people using one of my web-apps don't need to know what I name my variables, I am equally uninterested what the parser decides to nickname a semi-colon or an angle bracket in the parser.</p>\n\n<p>This conversation was a perfect example of internals trolls going full-blast, and is exactly the sort of situation that lead to Anthony's rage-quit. Let's have a look at the \"highlights\" of this conversation:</p>\n\n<p>Chad opens with:</p>\n\n<blockquote>\n  <p>WTF is T&#95;PAAMAYIM&#95;NEKUDOTAYIM?</p>\n  \n  <p>This has to be THE most asked question by new php developers when they\n  come across it. Can we please change the token name to T&#95;DOUBLE&#95;COLON\n  so I don't have to hear about it constantly?</p>\n  \n  <p>Those that disagree don't do enough PHP support to know how often it is\n  asked. it's worth it.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/p/php/php-internals/10ay7h1f2a/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon\">Link</a></p>\n\n<p>Probably not a great way to launch in, but he makes a valid point. His position as an operator on ##php means he would know what people are asking, and trying to resolve issues that bring up the most requests is a reasonable aim.</p>\n\n<p>Daniel P. Brown is the first troll to take aim:</p>\n\n<blockquote>\n  <p>Someone disagreeing with your request to change something does not\n  correlate to their doing \"enough PHP support.\" There are many reasons\n  to disagree with a change request, no matter how much any one person\n  thinks of it as a necessity or an improvement.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/p/php/php-internals/10ay7h1f2a/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon\">Link</a></p>\n\n<p>His accuracy points must need leveling up, because that is not even vaguely what Chad said.</p>\n\n<p>James Butler takes his turn (after a bunch of people argue about the fact Chad didn't have his full name displaying on the first post properly) and uses the good old fashioned \"if it aint broke don't fix it\" attack:</p>\n\n<blockquote>\n  <p>Why should this be changed? Is it broken? Is it something that 1 second on google can't answer?\n  If somebody is advanced enough to be using classes (I think about the only time you would use a double colon) then they should know what it means.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/p/php/php-internals/10aysaywpa/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon\">Link</a></p>\n\n<p>Even in 2010, referencing a static class is hardly considered \"advanced\" usage. Copy, paste, mistype, T&#95;PAAMAYIM&#95;NEKUDOTAYIM. And it is broken, if you have to Google a parser error because its written in Hebrew then the parser is fucking broken. </p>\n\n<p>This is roughly where PHP's closest thing to a BDFL <a href=\"https://twitter.com/rasmus\">Rasmus Lerdorf</a> beams into the conversation with a little history:</p>\n\n<blockquote>\n  <p>There are two reasons this term will stay. It is a tip of the hat to\n  the amount of PHP work that came out of Israel, and it is a good\n  reminder that there are a lot of other languages in the world. People\n  whose first language is not English, myself included, are forced to work\n  with unfamiliar terms every day. I wouldn't mind having a few more\n  non-English identifiers in PHP actually.</p>\n  \n  <p>Well, and a third reason, I like it.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#20101030gqhakkjqq1e9c5cpvc2kqr0870\">Link</a></p>\n\n<p>There are three things wrong with this.</p>\n\n<ol>\n<li>I'm really glad to hear that international contributions are doing well. This is a great sign that our community is wide reaching, but we're not naming a fucking bridge here. A link in some credits or a README would do a wonderful job of thanking people for their contributions - like every other open-source project ever.</li>\n<li>The fact that many programmers are forced to learn English (or at least recognize English keywords) is a <a href=\"http://www.codinghorror.com/blog/2009/03/the-ugly-american-programmer.html\">tricky subject</a>, but lets stick to forcing one language down peoples throat and not randomly make different keywords in different languages for the sake of it.</li>\n<li>Plenty of people clearly don't like it, so how about a vote?</li>\n</ol>\n\n<p>As I said above PHP's users do not give a shit about token names, so the fact that this bizarre message is being displayed to every single PHP user just because the founder of the language likes it is ridiculous.</p>\n\n<p>Let's keep going.</p>\n\n<p>Stan Vass appears out of nowhere in a flash as a thunderbolt claps around internals, temporarily stunning the trolls with a flash of fucking logic:</p>\n\n<blockquote>\n  <p>It's amazing to me this has become such a long discussion. The facts are\n  simple:</p>\n  \n  <p>1) People don't ask for the other parse errors even half as often as they as\n  for T&#95;PAAMAYIM&#95;NEKUDOTAYIM\n  2) They do so because it looks like gibberish to them, so it looks unlikely<br />\n  to be a common thing you can Google, nor it gives something recognizable to start with<br />\n  3) Yes, to all who are not sure, more people know English than Hebrew.<br />\n  4) Yes, we all acknowledge it's an easter egg joke that refers to the \n  creators of PHP. But that particular joke has outworn its welcome in the\n  community after repeatedly causing support issues.</p>\n  \n  <p>T&#95;DOUBLE&#95;COLON already exists as a constant in userland, so the jump to it\n  won't be an epic change. Let's do it as a proof that we're not a nerd\n  gridlock bound to argue forever about even the most minor and obviously\n  positive changes PHP can implement.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#20101101bmxe2dwm54v13x9qqjfj15agwr\">Link</a></p>\n\n<p>Boom. Mic-drop. PEACE!</p>\n\n<p>Right? Nope.</p>\n\n<p>Dennis Haarbrink has this to say:</p>\n\n<blockquote>\n  <p>Come on people, what exactly is the problem with a once-in-a-lifetime investment of 5 seconds of your time to google some stupid error message. Something you, as a developer, spend your life doing.</p>\n  \n  <p>Please, stop complaining about a minor (yes, it is minor, use the fricking search engine!) annoyance and accept php's heritage.</p>\n  \n  <p>And please understand, I do get where all the opponents are coming from, it is an unnecessary complicated error message (I agree that the language argument is a moot point, in the world of internet and programming in particular, English is the standard), but you google it once in your life and then you 'forget' about it. And if you can't remember the meaning of something like that, I hardly doubt you'd be a decent programmer anyway.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#20101101xqghahzfyzb7wzfyvjz65ks5gc\">Link</a></p>\n\n<p>Really Dennis? </p>\n\n<p>What is the problem with Googling a \"stupid\" error message? _The fact that I have to Google a stupid error message is the problem with having to Google a stupid error message! You even call it an \"unnecessary complicated error message\" in the same post.</p>\n\n<p>Minor problems are still problems. </p>\n\n<p>An excellent retort from Alexander Schrijver combines humor with \"you're wrong\" perfectly: </p>\n\n<blockquote>\n  <p>Its a minor change and an annoyance to a lot of people. Yes, by not changing\n  this you'r annoying thousands of people.</p>\n  \n  <p>This isn't an easteregg either. This is a \"lesson\" as someone explained.\n  eastereggs aren't visible to normal users.</p>\n  \n  <p>If you want teach people about Hebrew you obviously can do so. I don't see how\n  that is the goal of a programming language, but that is an other issue. But\n  don't come along and insult us with this bullshit.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon#2010110195t2y8e2wt39x6m44d1nn0xvpg\">Link</a></p>\n\n<p><em><strong>Side Note:</strong> This line of conversation was mostly being slammed down with suggestions that the entire thing was \"Cosmetic Nonsense\", and instead folks were redirected to the <a href=\"https://wiki.php.net/rfc/lemon\">Lemon parser</a>, which has been marked as \"In progress\" for years. I asked around and it turns out it was abandoned, so I poked the author to change the status to Abandoned so folks know whats up in the future.</em></p>\n\n<p>The whole idea that the ONLY way to resolve this is to go with a brand-new parser is potentially ridiculous. They were really suggesting there is NOTHING in the parser that could easily do a backwards look-up on the parser to say T&#95;PAAMAYIM&#95;NEKUDOTAYIM is \"::\", and output it as part of the error?</p>\n\n<p>Andi Gutmans casts a pro-PAAMAYIM attack along with some elitist drivel:</p>\n\n<blockquote>\n  <p>The first google entry when you search for it gives you the answer. It is actually unbelievably easy to find the answer via search. If a new PHP developer can't find it then maybe they shouldn't be writing code.</p>\n  \n  <p>This is a piece of history from the PHP 3 days and think it adds some character, a story (and history) to PHP. Don't think we should take this out after a good 12 years.</p>\n  \n  <p>I would prefer this was not changed.</p>\n</blockquote>\n\n<p>Oh good, it adds some character? That seems like a valid reason to keep speaking Hebrew to our international community for no reason, whilst keeping PHP the laughing stock of the entire same international community - except for <em>some</em> of PHP internals crew. Thanks for that Andi.</p>\n\n<p>Even PHPUnit PHP-extraordinaire <a href=\"https://twitter.com/s_bergmann\">Sebastian Bergmann</a> and phpDocumentor member (and Editor of <a href=\"https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md\">PSR-5</a> which I'm currently listed as Co-ordinator for) <a href=\"http://twitter.com/mvriel\">Mike Van Riel</a> support[ed] this argument.</p>\n\n<p>It might be part of PHP's history, but this is one of this memories that would be nice to move away from, like how your granddad probably doesn't still wear that nose-ring and crazy tattoos he had when he was a rebellious punk teenager.</p>\n\n<p>And if we need to keep the shitty tattoo, can we at least make sure it's not visible to everyone?</p>\n\n<p>Chad is revived and comes back to fight on:</p>\n\n<blockquote>\n  <p>It's the same argument everyone else is giving, and really it all comes\n  down to this.:</p>\n  \n  <p>Nostalgia is valued over clarity and consistency.</p>\n  \n  <p>Do you guys REALLY want to claim that?</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#20101030kvbc589enh40bg00hcxzng3yam\">Link</a></p>\n\n<p>That produces a lot more \"it aint broke so…\" responses so I wont bother to highlight all of them. It's said by 4 different people and I'm getting bored of copying and pasting, but James Butler returns with his second \"if it aint broke\". He needs that printed on a t-shirt or something:</p>\n\n<blockquote>\n  <p>If it ain't broken don't fix it.</p>\n  \n  <p>Change for the sake of it is a bad thing. It does things like introduce bugs etc.</p>\n  \n  <p>Q1) is it broken?\n  Q2) if yes exactly what is broken\n  Q3) does the proposes fix solve the root cause?</p>\n  \n  <p>I'm not sure changing the token name is the correct fix to people not knowing what the error means.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#201010307v0ty3w0y3km2ynjfq1qn3wp68\">Link</a></p>\n\n<p>Let it be noted that at this point MULTIPLE people had suggested not actually renaming the token, but changing the error message. </p>\n\n<p>Chad keeps on pushing through, like a snow-plow running on jet fuel</p>\n\n<blockquote>\n  <p>Q1) yes, it is broken, people have to Google or ask around for a very\n  unclear error message when for the most parts errors are (and should be)\n  self explanatory.</p>\n  \n  <p>Q2) Two things are broken: Either the token is named badly, or the\n  token names shouldn't show up in error messages at all and be replaced\n  with something a bit more friendly.</p>\n  \n  <p>Q3) those two fixes above would probably fix that, yes.</p>\n  \n  <p>What is so hard to believe when people see UNEXPECTED T&#95;DOUBLE&#95;COLON on\n  LINE 23 they are gonna look for a double colon on line 23? because they DO.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#2010103041s4d4hmh9h8s1ykw15kswz1j4\">Link</a></p>\n\n<p>Right. If no change to the token is gonna happen, at least hide it. I read this as \"lets do SOMETHING instead of just arguing!!\". And yes, the fact that what should (and obviously could) be such a simple error message requires a google is an error in itself.</p>\n\n<p>James Butler tries saying something different to his usual slogan but it doesn't really work out:</p>\n\n<blockquote>\n  <p>Are you supporting users who you provide a shared hosting embodiment too, and do you control binary installations on the enviroments? If so then possibly patching source for you installs maybe the easiest and quickest solution.\n  If we knew the nature of your support requirements, then we could possibly suggest a better solution or be won round. (although internals isn't the place for that really)</p>\n  \n  <p>This is not meant to bait but possibly an improvement in your support process or docs might yield a solution?</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/p/php/php-internals/10ayn648kk/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon\">Link</a></p>\n\n<p>Really? If you don't want error messages in Hebrew you should patch PHP and install this custom version on your own server, and maintain it with updates, etc.</p>\n\n<p>Fuck everything about that. I'm stunned.</p>\n\n<h2>A Hero Emerges</h2>\n\n<p>When all seems lost, a savior swoops down from the clouds riding atop a magical griffin. He is known to some as \"Felipe Pena\", and on his mighty sword was inscribed a phrase which was unreadable to the trolls. It was an unknown language, but after a quick Google search the trolls learned the message turned out to be Hebrew, and translated roughly to \"Let's just fucking fix it instead of bitching about things for a solid month.\"</p>\n\n<blockquote>\n  <p>Instead of renaming the token, I prefer to associate a literal string to\n  each token, to have a legible error message, without the T_ being shown.</p>\n  \n  <p>For example, we could use in the Bison grammar file:\n  %token T&#95;PAAMAYIM&#95;NEKUDOTAYIM \"::\"</p>\n  \n  <p>So that the error message become:</p>\n  \n  <p>$ sapi/cli/php -r '::'\n  Parse error: syntax error, unexpected :: in Command line code on line 1</p>\n  \n  <p>Instead of the known \"unexpected T&#95;PAAMAYIM&#95;NEKUDOTAYIM\" one.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/p/php/php-internals/10b1ew2nn4/php-dev-rename-t-paamayim-nekudotayim-to-t-double-colon\">Link</a></p>\n\n<p>Rasmus agrees:</p>\n\n<blockquote>\n  <p>Years and years ago that was the intent. I didn't think there was a\n  clean way to do that in yacc though.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#20101101rh86zyhkd7vxq9gaztw344e13c\">Link</a></p>\n\n<p>Stunned silence...</p>\n\n<p>Ferenc Kovacs is so confused he has to ask if its really happening, then posts a summary - which identifies all of my feelings about this thread:</p>\n\n<blockquote>\n  <p>Thanks Felipe, you are my hero.\n  Anybody else thinks that this thread is very similar to the last array\n  dereferencing discussion?\n  http://www.mail-archive.com/internals@lists.php.net/msg46789.html</p>\n  \n  <p>Somebody brought up the idea, most of the veterans tried to dismiss without\n  discussion, pointing out, that its an old topic, and nothing will change,\n  status quo, others tried to bend the thread to the lemon patch.\n  and Felipe solved the original problem that everybody thought impossible, or\n  much harder, than it was actually.</p>\n  \n  <p>so I think we should ask Felipe more about the unsolvable problems in PHP,\n  and maybe we shouldn't stop discussions about old topics, because maybe the\n  environment around the problems changed with time.</p>\n</blockquote>\n\n<p><a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/nested/page/2#201011026aae6t4yw3x7fyqj6cpfx8emaw\">Link</a></p>\n\n<p>And now, PHP 5.4 has literal symbols in its error messages.</p>\n\n<p>If anyone would like to read the whole thing you can see this madness in its entirety <a href=\"http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon/10ay7h1f2a\">here</a>. </p>\n\n<h2>Debrief</h2>\n\n<p>This tale was brought to you to highlight some of the top-level pointless trolling that can be found perpetuated by SOME of the core developers of PHP, in a bid to help people understand why some things in PHP are the way they are. If anyone was confused about Anthony leaving, they shouldn't be anymore with shit like this going on. This was by no means an isolated incident.</p>\n\n<p>Not everybody who disagreed with this suggestion was being an idiot, or a troll, but there were certainly a few contenders.</p>\n\n<h2>Return of the Trolls</h2>\n\n<p>Recently something pretty similar has been happening with <a href=\"http://news.php.net/php.internals/68976\">Named Parameters</a>, but <a href=\"https://twitter.com/nikita_ppv\">Nikita</a> is still doing his thing - and he's doing it well. RFC means request for comments, its a place for discussions to be had, merits to be discussed fairly and pros/cons to be listed and <strong>understood</strong>, not a place for Status Quo fans to gang up on purveyors of change and improvement for the sake of it.</p>\n\n<p>Anthony: We feel for you buddy. Every PHP developer I've spoken to since your decision to go is sad to see you leave. Internals needs more like you, and less of the \"if it aint broke\" jerks. We don't need things to be recoded every week, but we certainly want a little more progress than maintaining bullshit Hebrew error messages because nostalgia is fun for a few core contributors.</p>\n\n<h2>The Bright Side</h2>\n\n<p>This is a good time to point out, I'm extremely grateful for the hard work of anyone contributing on PHP internals with useful features and constructive discussion. To name just a few (in no particular order): Sara Golemon, Nikita Poppov, Igor Wiedler, Xinchen Hui, Ralph Schindler, Zeev Suraski, Pierre Joye and Andrey Andreev, keep it up. We lost one, but we have plenty more.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "169",
    "created": "2013-09-12 01:44:00",
    "updated": "2013-09-12 01:44:00",
    "created_by": "2",
    "ordering_count": "22",
    "title": "Solving the PHP Internals Workflow",
    "slug": "solving-the-php-internals-workflow",
    "category_id": "2",
    "attachment": "",
    "intro": "PHP internals has been a cold, harsh, unwelcome land for a long time, and it&#39;s coming to a head recently with mutliple vocal developers highlighting issues. While some are trying to resolve the actual medium through which conversations happens, I&#39;m looking into ways we can try to fix the workflow so the actual conversation being had can be the most constructive it can possibly be.&nbsp;",
    "body": "On Monday I posted a [tale of woe](/blog/2013/09/t-paamayim-nekudotayim-v-sanity), which like any good tale had a moral at the end.\n\nThe moral was that while PHP internals has its troubles, the troubles are really being perpetuated by a small few, and there is a clear path to solving the problems.\n\nThe article seemed to resonate with a lot of people:\n\n<blockquote class=\"twitter-tweet\"><p>A great tale of trolls and heroes on php-internals, from <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a>. <a href=\"http://t.co/M0F99SXtmJ\">http://t.co/M0F99SXtmJ</a></p>&mdash; Ben Ramsey (@ramsey) <a href=\"https://twitter.com/ramsey/statuses/377555139726671872\">September 10, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\"><p>Agree with everything <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> has to say here <a href=\"http://t.co/tv9HkuuhI7\">http://t.co/tv9HkuuhI7</a></p>&mdash; Jonathan H. Wage (@jwage) <a href=\"https://twitter.com/jwage/statuses/377552951847694336\">September 10, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> Hilarious &amp; on-point as always. Thanks for writing it up for the rest of us who couldn&#39;t cringe through yet another bitchfest.</p>&mdash; Nate Abele (@nateabele) <a href=\"https://twitter.com/nateabele/statuses/377543022415974400\">September 10, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\"><p>Yay I&#39;m famous! Phil tells the story of my first nightmarish foray in <a href=\"https://twitter.com/search?q=%23PHP&amp;src=hash\">#PHP</a> <a href=\"https://twitter.com/search?q=%23internals&amp;src=hash\">#internals</a> <a href=\"http://t.co/wJfxNXPgNN\">http://t.co/wJfxNXPgNN</a></p>&mdash; Chad Minick (@cythrawll) <a href=\"https://twitter.com/cythrawll/statuses/377433173514133504\">September 10, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nTime for another story.\n\nI joined the [PHP-FIG](http://www.php-fig.org/) while the [PSR-1](http://www.php-fig.org/psr/1/) & [PSR-2](http://www.php-fig.org/psr/2/) votes were coming to a close, and as such I didn't have anything to do with their generation other than a bit of feedback on a few sentences. \n\n[PSR-3](http://www.php-fig.org/psr/3/) came around while I was an active member and I had the chance to put in some feedback, which was tricky throughout a sea of bitching about - amongst other things - whether interfaces should be called FooInterface or Fooable. Seriously, that was about 60 emails alone.\n\nI saw that conversation happening, and I was part of conversations about a Caching PSR, one for HTTP Clients (which then morphed into HTTP Messages) and a few other PSRs being discussed. \n\nAt the time things seemed great. The FIG was the wild-west and we were all doing our thing. The mailing list was modelled after internals, we were all throwing out our opinions, progress was made here and there and for a while things seemed ok. Every now and then a troll would pop up and derail the situation but we'd get him/her sorted out with some self-moderation and get on with the conversation eventually.\n\nBut then a year later only PSR-3 had made it out of the gate. HTTP was dead in the water, Caching was \"nearly at a vote\" for _months_, a new autoloader nearly got through but then was attacked with about 3 different alternative proposals at the 11th hour and all sorts of other madness. \n\nIt soon became incredibly clear that this approach would never work. \n\nWe needed a workflow, and so does PHP.\n\nRight now the internals workflow is outlined on the [How To Create A RFC](https://wiki.php.net/rfc/howto). Newcomers are routed to an [Oracle blog](https://blogs.oracle.com/opal/entry/the_mysterious_php_rfc_process) website to learn about the process:\n\n> If you're new to PHP core development, mail the \"internals\" mail list to judge interest before you start your RFC. If you get no reaction (this is likely) or positive reaction then create the RFC. Core PHP developers with karma will know when they can skip this step.\n\nSo, you're brand new to PHP and the process is you should post to internals then if no reaction is received then they should get going?\n\n**Problem #1:** I got no reactions to my posts for a several weeks before I discovered there was just a [bug in the mailing list system](https://bugs.php.net/bug.php?id=65655). How would somebody know if their idea is getting no feedback, or is quietly approved? \n\n**Problem #2:** Despite the exact wording of the guide, it's commonly accepted that \"An RFC without a patch is just noise\". This has two further problems:\n\n**Problem #3:** Don't know C? Go learn it, because we won't take you seriously otherwise.\n\n**Problem #4:** Don't know the intricacies of the parser/serialiser/etc? Go learn it, because we won't take you seriously otherwise.  \n\nSomething like the [FIG workflow](https://github.com/php-fig/fig-standards/blob/master/bylaws/004-psr-workflow.md) at this point would come into play quite nicely. We have the idea of a \"Pre-Draft\" proposal. This is just some file on the internet somewhere and has no relevance to anything. Somebody can put together as much information as they can and - even if its incomplete - find sponsors from within the FIG, one of which will bring start an Entrance Vote. \n\n* Anyone can propose a PSR.\n* If it passes the Entrance Vote we approve working on the idea.\n* You have people who know how to implement it available and interested.\n\nWhen this Draft PSR is considered ready, it is brought to the mailing list for \"Review\". People go through it at this point - when it has some form, and is more ready that initial ideas. People ask a lot of questions, the meta document gets updated, FAQs are built and it stays there for two weeks to let anyone have a chance to give feedback.\n\nThen after that two weeks it goes in for another vote. If it passes that vote it is then \"Accepted\", and we have a new PSR.\n\n### PHP Internals needs a workflow\n\nWhile the exact same workflow would not directly work, something could definitely be put together that would benefit everyone.\n\nSomething we HAVE to do is get away from the \"if you don't know C then fuck you\" mindset. \n\nI _completely_ understand that ideas are cheap and implementations are hard. I've worked in startups long enough to know everyone has a million ideas everyday, many of which are shit, unrealistic, or wonderful but without an implementation are just words.\n\nI'm not expecting anyone to say \"oh good, you had a nice idea, let me go and spend 3 weeks coding that up for you.\". What I am hoping is that we can get to a point where we can let self appointed working groups of 3+ come together to flesh out an idea, get some sort of \"yes, we like this idea\" stamp of approval from a majority, then focus on how it COULD be implemented before the time and effort goes into actually implementing it.\n\nFor example, the Named Parameter RFC contains reference to my syntax suggestions. Those syntax suggestions came from me (somebody who hasn't touched C since college) being interested in named parameters enough to put together a set of pros and cons of [potential syntax options](https://gist.github.com/philsturgeon/6405087#file-syntax-examples-md). \n\nIs it not better than this research into potential syntaxes can go ahead (and people on the mailing list can potentially vote on a syntax) before somebody puts the time and effort into making a syntax?\n\nGetting a stamp of approval BEFORE an implementation resolves a LOT of problems.\n\n* It will stop people wasting their time increasing the chances of repeat contributions. \n* It will stop the ego-attachment to their work, because \"their baby\" could be more in line with what the majority want before they get going. \n* It will ease the RFC process, as people have already obviously outlined an interest in the feature BEFORE we're getting to a chance to review the patch or vote.\n\n## PHP Internals could be AWESOME\n\nToday was an explosive day on internals, most likely driven by a resounding agreement by many that things are currently not ok. \n\nThe request for the mailing list to be [moved to a forum system](http://marc.info/?t=137891062900003&r=1&w=2) was initially fought against hard, but has since evolved into a brilliant solution: improving the web interface for [news.php.net](http://news.php.net) to handle threaded conversations and all handle actual conversation there, while still sending out posts to the mailing list - keeping the community in one location but removing yet another barrier to entry for smart new contributors.\n\nPeople are complaining and suggesting that wont solve all the problems, but it will solve a LOT. Much like when talking to a zealous anti-gun control believer who says \"Implementing background checks wont solve ALL gun crime ever!\" I feel like saying \"Of course it wont solve everything, but an X% improvement is an improvement, and there are no silver bullets.\". #pun\n\nSolving the interface will let a lot of people get involved, increase transparency and hopefully get some fresh blood into the group. \n\nThat is Step 1. \n\nStep 2? Improve the workflow so that there is a clear path to getting a feature approved. In the FIG having such a regimented workflow has _drastically_ improved the signal to noise ratio, and people have to read through far less content while knowing much more about what is happening in the group.\n\nIf anybody on the internals team would like to get in touch with me and flesh out a rock solid workflow much like I've done for the PHP-FIG please do so through my contact form, Twitter or whatever. We can easily make internals a useful productive place where everyone feels welcome, with a few little bylaws that everyone can enforce themselves.\n\nWe don't need leadership, we don't need a BDFL, we just need to stop arguing like we're in Mean Girls and get something useful done. A few rules can make that happen, and I'll be happy to get those rules written up.",
    "created_on": "1378946640",
    "updated_on": "1378946640",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "a63d9d0b6b99e42838621acbf76cb0e6",
    "type": "markdown",
    "parsed": "<p>On Monday I posted a <a href=\"/blog/2013/09/t-paamayim-nekudotayim-v-sanity\">tale of woe</a>, which like any good tale had a moral at the end.</p>\n\n<p>The moral was that while PHP internals has its troubles, the troubles are really being perpetuated by a small few, and there is a clear path to solving the problems.</p>\n\n<p>The article seemed to resonate with a lot of people:</p>\n\n<blockquote class=\"twitter-tweet\"><p>A great tale of trolls and heroes on php-internals, from <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a>. <a href=\"http://t.co/M0F99SXtmJ\">http://t.co/M0F99SXtmJ</a></p>&mdash; Ben Ramsey (@ramsey) <a href=\"https://twitter.com/ramsey/statuses/377555139726671872\">September 10, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote class=\"twitter-tweet\"><p>Agree with everything <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> has to say here <a href=\"http://t.co/tv9HkuuhI7\">http://t.co/tv9HkuuhI7</a></p>&mdash; Jonathan H. Wage (@jwage) <a href=\"https://twitter.com/jwage/statuses/377552951847694336\">September 10, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> Hilarious &amp; on-point as always. Thanks for writing it up for the rest of us who couldn&#39;t cringe through yet another bitchfest.</p>&mdash; Nate Abele (@nateabele) <a href=\"https://twitter.com/nateabele/statuses/377543022415974400\">September 10, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote class=\"twitter-tweet\"><p>Yay I&#39;m famous! Phil tells the story of my first nightmarish foray in <a href=\"https://twitter.com/search?q=%23PHP&amp;src=hash\">#PHP</a> <a href=\"https://twitter.com/search?q=%23internals&amp;src=hash\">#internals</a> <a href=\"http://t.co/wJfxNXPgNN\">http://t.co/wJfxNXPgNN</a></p>&mdash; Chad Minick (@cythrawll) <a href=\"https://twitter.com/cythrawll/statuses/377433173514133504\">September 10, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Time for another story.</p>\n\n<p>I joined the <a href=\"http://www.php-fig.org/\">PHP-FIG</a> while the <a href=\"http://www.php-fig.org/psr/1/\">PSR-1</a> &amp; <a href=\"http://www.php-fig.org/psr/2/\">PSR-2</a> votes were coming to a close, and as such I didn't have anything to do with their generation other than a bit of feedback on a few sentences. </p>\n\n<p><a href=\"http://www.php-fig.org/psr/3/\">PSR-3</a> came around while I was an active member and I had the chance to put in some feedback, which was tricky throughout a sea of bitching about - amongst other things - whether interfaces should be called FooInterface or Fooable. Seriously, that was about 60 emails alone.</p>\n\n<p>I saw that conversation happening, and I was part of conversations about a Caching PSR, one for HTTP Clients (which then morphed into HTTP Messages) and a few other PSRs being discussed. </p>\n\n<p>At the time things seemed great. The FIG was the wild-west and we were all doing our thing. The mailing list was modelled after internals, we were all throwing out our opinions, progress was made here and there and for a while things seemed ok. Every now and then a troll would pop up and derail the situation but we'd get him/her sorted out with some self-moderation and get on with the conversation eventually.</p>\n\n<p>But then a year later only PSR-3 had made it out of the gate. HTTP was dead in the water, Caching was \"nearly at a vote\" for <em>months</em>, a new autoloader nearly got through but then was attacked with about 3 different alternative proposals at the 11th hour and all sorts of other madness. </p>\n\n<p>It soon became incredibly clear that this approach would never work. </p>\n\n<p>We needed a workflow, and so does PHP.</p>\n\n<p>Right now the internals workflow is outlined on the <a href=\"https://wiki.php.net/rfc/howto\">How To Create A RFC</a>. Newcomers are routed to an <a href=\"https://blogs.oracle.com/opal/entry/the_mysterious_php_rfc_process\">Oracle blog</a> website to learn about the process:</p>\n\n<blockquote>\n  <p>If you're new to PHP core development, mail the \"internals\" mail list to judge interest before you start your RFC. If you get no reaction (this is likely) or positive reaction then create the RFC. Core PHP developers with karma will know when they can skip this step.</p>\n</blockquote>\n\n<p>So, you're brand new to PHP and the process is you should post to internals then if no reaction is received then they should get going?</p>\n\n<p><strong>Problem #1:</strong> I got no reactions to my posts for a several weeks before I discovered there was just a <a href=\"https://bugs.php.net/bug.php?id=65655\">bug in the mailing list system</a>. How would somebody know if their idea is getting no feedback, or is quietly approved? </p>\n\n<p><strong>Problem #2:</strong> Despite the exact wording of the guide, it's commonly accepted that \"An RFC without a patch is just noise\". This has two further problems:</p>\n\n<p><strong>Problem #3:</strong> Don't know C? Go learn it, because we won't take you seriously otherwise.</p>\n\n<p><strong>Problem #4:</strong> Don't know the intricacies of the parser/serialiser/etc? Go learn it, because we won't take you seriously otherwise.  </p>\n\n<p>Something like the <a href=\"https://github.com/php-fig/fig-standards/blob/master/bylaws/004-psr-workflow.md\">FIG workflow</a> at this point would come into play quite nicely. We have the idea of a \"Pre-Draft\" proposal. This is just some file on the internet somewhere and has no relevance to anything. Somebody can put together as much information as they can and - even if its incomplete - find sponsors from within the FIG, one of which will bring start an Entrance Vote. </p>\n\n<ul>\n<li>Anyone can propose a PSR.</li>\n<li>If it passes the Entrance Vote we approve working on the idea.</li>\n<li>You have people who know how to implement it available and interested.</li>\n</ul>\n\n<p>When this Draft PSR is considered ready, it is brought to the mailing list for \"Review\". People go through it at this point - when it has some form, and is more ready that initial ideas. People ask a lot of questions, the meta document gets updated, FAQs are built and it stays there for two weeks to let anyone have a chance to give feedback.</p>\n\n<p>Then after that two weeks it goes in for another vote. If it passes that vote it is then \"Accepted\", and we have a new PSR.</p>\n\n<h3>PHP Internals needs a workflow</h3>\n\n<p>While the exact same workflow would not directly work, something could definitely be put together that would benefit everyone.</p>\n\n<p>Something we HAVE to do is get away from the \"if you don't know C then fuck you\" mindset. </p>\n\n<p>I <em>completely</em> understand that ideas are cheap and implementations are hard. I've worked in startups long enough to know everyone has a million ideas everyday, many of which are shit, unrealistic, or wonderful but without an implementation are just words.</p>\n\n<p>I'm not expecting anyone to say \"oh good, you had a nice idea, let me go and spend 3 weeks coding that up for you.\". What I am hoping is that we can get to a point where we can let self appointed working groups of 3+ come together to flesh out an idea, get some sort of \"yes, we like this idea\" stamp of approval from a majority, then focus on how it COULD be implemented before the time and effort goes into actually implementing it.</p>\n\n<p>For example, the Named Parameter RFC contains reference to my syntax suggestions. Those syntax suggestions came from me (somebody who hasn't touched C since college) being interested in named parameters enough to put together a set of pros and cons of <a href=\"https://gist.github.com/philsturgeon/6405087#file-syntax-examples-md\">potential syntax options</a>. </p>\n\n<p>Is it not better than this research into potential syntaxes can go ahead (and people on the mailing list can potentially vote on a syntax) before somebody puts the time and effort into making a syntax?</p>\n\n<p>Getting a stamp of approval BEFORE an implementation resolves a LOT of problems.</p>\n\n<ul>\n<li>It will stop people wasting their time increasing the chances of repeat contributions. </li>\n<li>It will stop the ego-attachment to their work, because \"their baby\" could be more in line with what the majority want before they get going. </li>\n<li>It will ease the RFC process, as people have already obviously outlined an interest in the feature BEFORE we're getting to a chance to review the patch or vote.</li>\n</ul>\n\n<h2>PHP Internals could be AWESOME</h2>\n\n<p>Today was an explosive day on internals, most likely driven by a resounding agreement by many that things are currently not ok. </p>\n\n<p>The request for the mailing list to be <a href=\"http://marc.info/?t=137891062900003&amp;r=1&amp;w=2\">moved to a forum system</a> was initially fought against hard, but has since evolved into a brilliant solution: improving the web interface for <a href=\"http://news.php.net\">news.php.net</a> to handle threaded conversations and all handle actual conversation there, while still sending out posts to the mailing list - keeping the community in one location but removing yet another barrier to entry for smart new contributors.</p>\n\n<p>People are complaining and suggesting that wont solve all the problems, but it will solve a LOT. Much like when talking to a zealous anti-gun control believer who says \"Implementing background checks wont solve ALL gun crime ever!\" I feel like saying \"Of course it wont solve everything, but an X% improvement is an improvement, and there are no silver bullets.\". #pun</p>\n\n<p>Solving the interface will let a lot of people get involved, increase transparency and hopefully get some fresh blood into the group. </p>\n\n<p>That is Step 1. </p>\n\n<p>Step 2? Improve the workflow so that there is a clear path to getting a feature approved. In the FIG having such a regimented workflow has <em>drastically</em> improved the signal to noise ratio, and people have to read through far less content while knowing much more about what is happening in the group.</p>\n\n<p>If anybody on the internals team would like to get in touch with me and flesh out a rock solid workflow much like I've done for the PHP-FIG please do so through my contact form, Twitter or whatever. We can easily make internals a useful productive place where everyone feels welcome, with a few little bylaws that everyone can enforce themselves.</p>\n\n<p>We don't need leadership, we don't need a BDFL, we just need to stop arguing like we're in Mean Girls and get something useful done. A few rules can make that happen, and I'll be happy to get those rules written up.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "170",
    "created": "2013-10-15 11:39:00",
    "updated": "2013-10-15 11:39:00",
    "created_by": "2",
    "ordering_count": "23",
    "title": "PSR-2 v CodeSniffer PSR-2: A Success Story",
    "slug": "psr2-v-codesniffer-psr2",
    "category_id": "2",
    "attachment": "",
    "intro": "I&#39;ve had static analysis tools running in Sublime Text for a long time, but for most of that time I have had CodeSniffer and it&#39;s PSR-2 rules disabled. I couldn&#39;t for the life of me remember why I had done that, until I turned it back on again. All of a sudden it started complaining about code that I had always considered to be perfectly compliant.",
    "body": "I've had static analysis tools running in Sublime Text for a long time, but for most of that time I have had CodeSniffer and it's PSR-2 rules disabled. I couldn't for the life of me remember why I had done that, until I turned it back on again. All of a sudden it started complaining about code that I had always considered to be perfectly compliant.\n\nIt reminded me of multiple conversations I've had with others in the FIG and the community in general, about how CodeSniffer often enforces rules in the PSR-2 spec that do not exist, or were not what was meant when it was written.\n\nTwo months ago I set off on a mission, to get CodeSniffer in line with what PSR-2 really is.\n\n## The Story\n\nAs with anything I do, it started with an angry tweet:\n\n<blockquote class=\"twitter-tweet\"><p>Right, I’ve had enough. PHP CodeSniffer is drunk if it thinks this is how PSR-2 works: <a href=\"http://t.co/2KtSY9cywU\">pic.twitter.com/2KtSY9cywU</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/370657376699166720\">August 22, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThis was initially based around one issue, which I call \"The Multi-line Argument Issue\". In other words, this should be valid:\n\n{{ prism:syntax lang=\"php\" }}\nsomefunction($foo, $bar, [\n  // ...\n]);\n{{ /prism:syntax }}\n\nAfter talking to Greg Sherwood it was clear that he would not make changes to the PHP CodeSniffer ruleset without PSR-2 itself being changed to clarify the intentions, and the FIG has been pretty clear about the fact nobody wants to change PSRs once they have been approved.\n\nSo instead of throwing my toys out of the pram I decided to set out the milestones required to get this resolved.\n\n1. Poll the group and ask if Errata sounds like a good idea (as initially suggested by Larry Garfield).\n1. Create a list of potential Errata for PSR-2.\n1. Pull Request the first piece of Errata for PSR-2.\n1. Get Greg to implement the change.\n1. Repeat until no more issues.\n\nThe trouble is half of those things require two-week votes, so this was going to be a long process.\n\nI created a [Poll](https://groups.google.com/forum/?fromgroups=#!topic/php-fig/89he2UxZopk) in the FIG mailing list to see if people would be ok with the idea of allowing Errata in the PSR Meta Documents. This is a good way to get a few yes/nos and potentially have a discussion, which [happened](https://groups.google.com/d/msg/php-fig/lWA0nL_Rs3A/VxWstqQbLEQJ) but was nothing major.\n\nPeople seemed happy with the idea so I created a [vote for Errata](https://groups.google.com/d/msg/php-fig/qTROKw07848/oHrdnF_Y9fYJ).\n\nThe vote passed with 20 for and nobody against out of 27 people. Big success.\n\nThree weeks passed at this point, and we're only just decided that we'll allow Errata to PSRs in general. So the next step was to actually implement the specific Errata for the number 1 discrepancy on my list: \"The Multi-Line Argument\". \n\nI created a [poll](https://groups.google.com/d/msg/php-fig/tcOfuWcKNdM/RWX3AzMgNK4J) to work out which examples people felt were valid.\n\nEveryone seemed to believe that this was/should be valid:\n\n{{ prism:syntax lang=\"php\" }}\nsomefunction($foo, $bar, [\n  // ...\n]);\n{{ /prism:syntax }}\n\nSome disagreed that the following was valid:\n\n{{ prism:syntax lang=\"php\" }}\nsomefunction($foo, $bar, [\n  // ...\n], $ban);\n{{ /prism:syntax }}\n\nBut the majority spoke and I used the poll as a basis for the pull request, which then went to a [vote](https://groups.google.com/d/msg/php-fig/-7iArK7WZA0/6MmXRIWGPIMJ).\n\nThe vote passed and two months later PHP CodeSniffer 1.4.7 was a thing, containing all of these changes! \n\n## Next Steps\n\nCodeSniffer's PSR-2 support is far from perfect. While reporting discrepancies I discovered a few bugs, and from generally tweeting about this stuff I had reports of other issues where CodeSniffer would complain about things that it should have no reason to care about.\n\nI constructed a [PSR-2 v CodeSniffer PSR-2 gist](https://gist.github.com/philsturgeon/6320152#file-3-comment-indentation-md), where people could discuss these issues and report new ones. We're up to 5 and most of them have been fixed in 1.4.7, but we have two left.\n\nFor example, [Comment Alignment](https://gist.github.com/philsturgeon/6320152#file-3-comment-indentation-md) is an ongoing discussion but a few people have simply said that CodeSniffer should just ignore comments and let people put them wherever they want. If PSR-2 doesn't say it, CodeSniffer shouldn't flag it.\n\n## Why Bother?\n\nI care because despite the occasionally tricky wording, PSR-2 is actually a nice standard. Hindsight says that chunks of PSR-2 could have been a lot better, but I was around just in time for the vote and my first few reads through never made me consider these things issues. It's often only during the implementation that these things come out, and CodeSniffer is an implementation. This is essentially why I [pulled the PSR-4 vote](http://www.reddit.com/r/PHP/comments/1nks5e/ps4_voting_has_been_pulled_voting_is_closed_and/) at the last minute, because the FIG needs to focus on getting wording as accurate as it possibly can.\n\nThis was a huge investment of time and effort, taking the votes, polls, moderating discussions, etc and it is not done yet, but it is all worth it.\n\nMy girlfriend has several times complained about me arguing on the internet (yes, that XKCD comic is my life) but I feel happy that these issues have been resolved;\n\n* I can now follow PSR-2 without defining a custom ruleset.\n* My employees can now follow PSR-2 without me having to show them how to define a custom ruleset.\n* Several people who hate PSR-2 might now realise it's not that bad.\n* If they stop hating on PSR-2 so hard, they'll pay attention to other/future PSRs.\n* We now have a process for fixing future confusion over potentially badly worded sentences (but we should obviously try to word things better in the first place).\n\nIf you spot any more discrepancies get in touch on [Twitter](http://twitter.com/philsturgeon) or in the comments, but if you suggest we make an errata item to allow tabs instead of spaces I will swing the ban-hammer hard.",
    "created_on": "1381833540",
    "updated_on": "1381833540",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "0f1acf89448688e88ce1e3bebc3553db",
    "type": "markdown",
    "parsed": "<p>I've had static analysis tools running in Sublime Text for a long time, but for most of that time I have had CodeSniffer and it's PSR-2 rules disabled. I couldn't for the life of me remember why I had done that, until I turned it back on again. All of a sudden it started complaining about code that I had always considered to be perfectly compliant.</p>\n\n<p>It reminded me of multiple conversations I've had with others in the FIG and the community in general, about how CodeSniffer often enforces rules in the PSR-2 spec that do not exist, or were not what was meant when it was written.</p>\n\n<p>Two months ago I set off on a mission, to get CodeSniffer in line with what PSR-2 really is.</p>\n\n<h2>The Story</h2>\n\n<p>As with anything I do, it started with an angry tweet:</p>\n\n<blockquote class=\"twitter-tweet\"><p>Right, I’ve had enough. PHP CodeSniffer is drunk if it thinks this is how PSR-2 works: <a href=\"http://t.co/2KtSY9cywU\">pic.twitter.com/2KtSY9cywU</a></p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/370657376699166720\">August 22, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>This was initially based around one issue, which I call \"The Multi-line Argument Issue\". In other words, this should be valid:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nsomefunction($foo, $bar, [\n  // ...\n]);\n{{ /prism:syntax }}</p>\n\n<p>After talking to Greg Sherwood it was clear that he would not make changes to the PHP CodeSniffer ruleset without PSR-2 itself being changed to clarify the intentions, and the FIG has been pretty clear about the fact nobody wants to change PSRs once they have been approved.</p>\n\n<p>So instead of throwing my toys out of the pram I decided to set out the milestones required to get this resolved.</p>\n\n<ol>\n<li>Poll the group and ask if Errata sounds like a good idea (as initially suggested by Larry Garfield).</li>\n<li>Create a list of potential Errata for PSR-2.</li>\n<li>Pull Request the first piece of Errata for PSR-2.</li>\n<li>Get Greg to implement the change.</li>\n<li>Repeat until no more issues.</li>\n</ol>\n\n<p>The trouble is half of those things require two-week votes, so this was going to be a long process.</p>\n\n<p>I created a <a href=\"https://groups.google.com/forum/?fromgroups=#!topic/php-fig/89he2UxZopk\">Poll</a> in the FIG mailing list to see if people would be ok with the idea of allowing Errata in the PSR Meta Documents. This is a good way to get a few yes/nos and potentially have a discussion, which <a href=\"https://groups.google.com/d/msg/php-fig/lWA0nL_Rs3A/VxWstqQbLEQJ\">happened</a> but was nothing major.</p>\n\n<p>People seemed happy with the idea so I created a <a href=\"https://groups.google.com/d/msg/php-fig/qTROKw07848/oHrdnF_Y9fYJ\">vote for Errata</a>.</p>\n\n<p>The vote passed with 20 for and nobody against out of 27 people. Big success.</p>\n\n<p>Three weeks passed at this point, and we're only just decided that we'll allow Errata to PSRs in general. So the next step was to actually implement the specific Errata for the number 1 discrepancy on my list: \"The Multi-Line Argument\". </p>\n\n<p>I created a <a href=\"https://groups.google.com/d/msg/php-fig/tcOfuWcKNdM/RWX3AzMgNK4J\">poll</a> to work out which examples people felt were valid.</p>\n\n<p>Everyone seemed to believe that this was/should be valid:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nsomefunction($foo, $bar, [\n  // ...\n]);\n{{ /prism:syntax }}</p>\n\n<p>Some disagreed that the following was valid:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nsomefunction($foo, $bar, [\n  // ...\n], $ban);\n{{ /prism:syntax }}</p>\n\n<p>But the majority spoke and I used the poll as a basis for the pull request, which then went to a <a href=\"https://groups.google.com/d/msg/php-fig/-7iArK7WZA0/6MmXRIWGPIMJ\">vote</a>.</p>\n\n<p>The vote passed and two months later PHP CodeSniffer 1.4.7 was a thing, containing all of these changes! </p>\n\n<h2>Next Steps</h2>\n\n<p>CodeSniffer's PSR-2 support is far from perfect. While reporting discrepancies I discovered a few bugs, and from generally tweeting about this stuff I had reports of other issues where CodeSniffer would complain about things that it should have no reason to care about.</p>\n\n<p>I constructed a <a href=\"https://gist.github.com/philsturgeon/6320152#file-3-comment-indentation-md\">PSR-2 v CodeSniffer PSR-2 gist</a>, where people could discuss these issues and report new ones. We're up to 5 and most of them have been fixed in 1.4.7, but we have two left.</p>\n\n<p>For example, <a href=\"https://gist.github.com/philsturgeon/6320152#file-3-comment-indentation-md\">Comment Alignment</a> is an ongoing discussion but a few people have simply said that CodeSniffer should just ignore comments and let people put them wherever they want. If PSR-2 doesn't say it, CodeSniffer shouldn't flag it.</p>\n\n<h2>Why Bother?</h2>\n\n<p>I care because despite the occasionally tricky wording, PSR-2 is actually a nice standard. Hindsight says that chunks of PSR-2 could have been a lot better, but I was around just in time for the vote and my first few reads through never made me consider these things issues. It's often only during the implementation that these things come out, and CodeSniffer is an implementation. This is essentially why I <a href=\"http://www.reddit.com/r/PHP/comments/1nks5e/ps4_voting_has_been_pulled_voting_is_closed_and/\">pulled the PSR-4 vote</a> at the last minute, because the FIG needs to focus on getting wording as accurate as it possibly can.</p>\n\n<p>This was a huge investment of time and effort, taking the votes, polls, moderating discussions, etc and it is not done yet, but it is all worth it.</p>\n\n<p>My girlfriend has several times complained about me arguing on the internet (yes, that XKCD comic is my life) but I feel happy that these issues have been resolved;</p>\n\n<ul>\n<li>I can now follow PSR-2 without defining a custom ruleset.</li>\n<li>My employees can now follow PSR-2 without me having to show them how to define a custom ruleset.</li>\n<li>Several people who hate PSR-2 might now realise it's not that bad.</li>\n<li>If they stop hating on PSR-2 so hard, they'll pay attention to other/future PSRs.</li>\n<li>We now have a process for fixing future confusion over potentially badly worded sentences (but we should obviously try to word things better in the first place).</li>\n</ul>\n\n<p>If you spot any more discrepancies get in touch on <a href=\"http://twitter.com/philsturgeon\">Twitter</a> or in the comments, but if you suggest we make an errata item to allow tabs instead of spaces I will swing the ban-hammer hard.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "171",
    "created": "2013-11-08 18:32:00",
    "updated": "2013-11-08 18:32:00",
    "created_by": "2",
    "ordering_count": "24",
    "title": "Build API's That You Wont Hate: Part 1 - Useful Database Seeding",
    "slug": "build-apis-part-1-useful-database-seeding",
    "category_id": "2",
    "attachment": "",
    "intro": "A little while back I produced an article called Building a Decent API which was mostly a tongue-in-cheek list of things that I&#39;d come across in other APIs that pissed me off, or that I had done myself and used my super-power of hindsight combined with sarcasm to make a set of rules for you to live by when building APIs. Now I&#39;ll write more in-depth on various aspects of API development that you need to know if you&#39;re going to build something that isn&#39;t a total mess.",
    "body": "A little while back I produced an article called [Building a Decent API][] which was mostly a tongue-in-cheek list of things that I'd come across in other APIs that pissed me off, or that I had done myself and used my super-power of hindsight combined with sarcasm to make a set of rules for you to live by when building APIs. \n\nThe combination of cheek and naughty words made that \"eat your greens\" article go down a lot more smoothly, but it certainly lacked a little substance but I always wanted to turn that into a much more in depth of blog posts.\n\nLet's start at the very beginning. Well, an entity-relationship diagram is probably the first step unless you're a lunatic cowboy, but they're boring as hell. Whatever, let's start with seeding your database.\n\n## What is Database Seeding?\n\nThe idea is fairly simple. You have your database scheme built somehow, via a .sql file you imported, or a series of migrations, or it's mongo and your application will just magically build it for you, whatever, but you have an empty database and you need to fill it with data. This is often referred to as \"dummy data\".\n\nThis data could be the categories for your application, test users, content entries with a bunch of comments, fake locations available for checkin, fake notifications to display in the iPhone app (one of each type) or credit-card payments at various stages of processing - with some complete, some half done and some super-fraudulent looking ones.\n\nThis is all very helpful so you don't need to waste time creating this manually over and over again, because the data you enter like that is almost always half-arsed and will often miss out things you really should have considered already.\n\nUses for dummy data are testing (that's the next article), getting freelancers/new hires up to speed with useful content, and avoiding the temptation to copy live data over to your development environments.\n\n## Why is using production data in development bad?\n\nHave you ever been writing a script that sends out emails and used some dummy copy while you're building it? Ever used some cheeky words in that content? Ever accidentally sent that email out to 10,000 real customers email addresses? Ever been fired for losing a company north of £200,000? \n\nI haven't, but I know a guy that has. Don't be that guy.\n\n## F**k that. What data do we use? \n\nGarbage! Use absolute nonsense for your development database, but nonsense of the correct data type, size, and format. That can be done with a fun little library called [Faker][] by [François Zaninotto](https://twitter.com/francoisz/) which is a wonderful little library that can essentially bullshit for Queen and country.\n\nKapture uses Laravel which has the joys of having [Database Seeding][] baked in. This is essentially a tarted up CLI task which almost any modern PHP framework will have (or bloody well should do) so the principles are applicable to all.\n\nBreak your Database Seeders down into chunks. This doesn't need to be \"one seeder-per-table\" but it can be. The reason I don't try to stick to that rule is that sometimes your data needs to be built at the same time as other types of data, so for us Users are created in the same \"seeder\" as their settings, oauth tokens, and friendship data is made. Putting that stuff into multiple seeders purely to keep things tidy would be an exercise in futility, and slow everything down for no reason. \n\nSo, this is a drastically simplified version of our user seeder all in one go, ignoring the Laravel specific structure. _If you're using L4, just shove this in your `run()` method._\n\n{{ prism:syntax lang=\"php\" }}\n    $faker = Faker\\Factory::create();\n\n    for ($i = 0; $i < Config::get('seeding.users'); $i++) {\n\n        $user = User::create([\n            'name'               => $faker->name,\n            'email'              => $faker->email,\n            'active'             => $i === 0 ? true : rand(0, 1),\n            'gender'             => rand(0, 1) ? 'male' : 'female',\n            'timezone'           => mt_rand(-10, 10),\n            'birthday'           => rand(0, 1) ? $faker->dateTimeBetween('-40 years', '-18 years') : null,\n            'location'           => rand(0, 1) ? \"{$faker->city}, {$faker->state}\" : null,\n            'had_feedback_email' => (bool) rand(0, 1),\n            'sync_name_bio'      => (bool) rand(0, 1),\n            'bio'                => $faker->sentence(100),\n            'picture_url'        => $this->picture_url[rand(0, 19)],\n        ]);\n    }\n{{ /prism:syntax }}\n\nSo what do we have here? Let's go through this section at a time:\n\n{{ prism:syntax lang=\"php\" }}\n    $faker = Faker\\Factory::create();\n{{ /prism:syntax }}\n\t\nAn instance of Faker, our bullshit artist for-hire.\n\n{{ prism:syntax lang=\"php\" }}\n    for ($i = 0; $i < Config::get('seeding.users'); $i++) {\n{{ /prism:syntax }}\n\nWe're going to want a certain number of users, but I'd recommend you have a few less on development than you do on testing or staging, because time.\n\n{{ prism:syntax lang=\"php\" }}\n        $user = User::create([\n            'name'               => $faker->name,\n            'email'              => $faker->email,\n{{ /prism:syntax }}\n\nMake a random name and random email. We don't have to define the pool of random data it uses, because ITS MAGIC!\n\n{{ prism:syntax lang=\"php\" }}\n            'active'             => $i === 0 ? true : rand(0, 1),\n{{ /prism:syntax }}\n\t\t\t\t\nOk I lied, our garbage is not 100% random. We want user number 1 to be active for tests later on.\n\n{{ prism:syntax lang=\"php\" }}\n            'gender'             => rand(0, 1) ? 'male' : 'female',\n{{ /prism:syntax }}\n\t\t\t\t\nGender equality is important.\n\n{{ prism:syntax lang=\"php\" }}\n            'timezone'           => mt_rand(-10, 10),\n{{ /prism:syntax }}\n\t\t\t\t\nOur original developer decided that saving timezones as an integer was a clever thing to do. Bellend. How you gonna handle countries with +4.45 timezones bro? I still need to refactor this, but it's fine for now.\n\n{{ prism:syntax lang=\"php\" }}\n            'birthday'           => rand(0, 1) ? $faker->dateTimeBetween('-40 years', '-18 years') : null,\n{{ /prism:syntax }}\n\nUsers of all of our target age demographic. \n\n{{ prism:syntax lang=\"php\" }}\n            'location'           => rand(0, 1) ? \"{$faker->city}, {$faker->state}\" : null,\n{{ /prism:syntax }}\n\t\t\t\t\nGive us a city name and a state name. This works fine with foreign countries too which is cool.\n\n{{ prism:syntax lang=\"php\" }}\n            'had_feedback_email' => (bool) rand(0, 1),\n            'sync_name_bio'      => (bool) rand(0, 1),\n{{ /prism:syntax }}\n            \nSome user flags we don't care much about. True or false, whatever.\n\n{{ prism:syntax lang=\"php\" }}\n            'bio'                => $faker->sentence(100),\n{{ /prism:syntax }}\n\nMake a sentence with 100 characters in it. \n\n\n## That's about it\n\nYou will end up making a lot of these files, and you'll want to populate pretty much every table you have with data. You'll also want to tell your Database Seeder to wipe all the tables you're going to populate. Do this globally right at the start of the process, don't wipe each table at the top of each seeder or you'll be wiping out content in that table from other seeders in the same process.\n\nExample of a overall system in Laravel 4:\n\n{{ prism:syntax lang=\"php\" }}\nclass DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        if (App::environment() === 'production') {\n            exit('I just stopped you getting fired. Love Phil');\n        }\n\n        Eloquent::unguard();\n\n        $tables = [\n            'locations',\n            'merchants',\n            'opps',\n            'opps_locations',\n            'moments',\n            'rewards',\n            'users',\n            'oauth_sessions',\n            'notifications',\n            'favorites',\n            'settings',\n            'friendships',\n            'impressions',\n        ];\n\n        foreach ($tables as $table) {\n            DB::table($table)->truncate();\n        }\n\n        $this->call('MerchantTableSeeder');\n        $this->call('PlaceTableSeeder');\n        $this->call('UserTableSeeder');\n        $this->call('OppTableSeeder');\n        $this->call('MomentTableSeeder');\n    }\n}\n{{ /prism:syntax }}\n\nThis wipes everything, then runs other seeder classes to do their thing. \n\nThen I just run `$ php artisan db:seed` and it goes about it's business.\n\n## When to run this\n\nThis is run whenever a developer on the team wants fresh data in their system, at random intervals on the staging server and automatically on the jenkins testing server when we deploy new builds of the api.\n\nMore on testing automationy goodness with Jenkins and Behat coming up soon, and a lot more to come after that including how to represent your data output, how to handle nesting data (respecting context and avoiding unlimited nesting and memory-leaks) and authentication with [OAuth 2 Server](https://github.com/php-loep/oauth2-server) from [The PHP League of Extraordinary Packages](http://www.thephpleague.com/).\n\n[Building a Decent API]: http://philsturgeon.co.uk/blog/2013/07/building-a-decent-api\n[Faker]: https://github.com/fzaninotto/Faker\n[Database Seeding]: http://laravel.com/docs/migrations#database-seeding",
    "created_on": "1383935520",
    "updated_on": "1383935520",
    "status": "live",
    "comments_enabled": "1 month",
    "author_id": "2",
    "keywords": "87e1f45c12e658b348e1fedaca2ae851",
    "type": "markdown",
    "parsed": "<p>A little while back I produced an article called <a href=\"http://philsturgeon.co.uk/blog/2013/07/building-a-decent-api\">Building a Decent API</a> which was mostly a tongue-in-cheek list of things that I'd come across in other APIs that pissed me off, or that I had done myself and used my super-power of hindsight combined with sarcasm to make a set of rules for you to live by when building APIs. </p>\n\n<p>The combination of cheek and naughty words made that \"eat your greens\" article go down a lot more smoothly, but it certainly lacked a little substance but I always wanted to turn that into a much more in depth of blog posts.</p>\n\n<p>Let's start at the very beginning. Well, an entity-relationship diagram is probably the first step unless you're a lunatic cowboy, but they're boring as hell. Whatever, let's start with seeding your database.</p>\n\n<h2>What is Database Seeding?</h2>\n\n<p>The idea is fairly simple. You have your database scheme built somehow, via a .sql file you imported, or a series of migrations, or it's mongo and your application will just magically build it for you, whatever, but you have an empty database and you need to fill it with data. This is often referred to as \"dummy data\".</p>\n\n<p>This data could be the categories for your application, test users, content entries with a bunch of comments, fake locations available for checkin, fake notifications to display in the iPhone app (one of each type) or credit-card payments at various stages of processing - with some complete, some half done and some super-fraudulent looking ones.</p>\n\n<p>This is all very helpful so you don't need to waste time creating this manually over and over again, because the data you enter like that is almost always half-arsed and will often miss out things you really should have considered already.</p>\n\n<p>Uses for dummy data are testing (that's the next article), getting freelancers/new hires up to speed with useful content, and avoiding the temptation to copy live data over to your development environments.</p>\n\n<h2>Why is using production data in development bad?</h2>\n\n<p>Have you ever been writing a script that sends out emails and used some dummy copy while you're building it? Ever used some cheeky words in that content? Ever accidentally sent that email out to 10,000 real customers email addresses? Ever been fired for losing a company north of £200,000? </p>\n\n<p>I haven't, but I know a guy that has. Don't be that guy.</p>\n\n<h2>F**k that. What data do we use?</h2>\n\n<p>Garbage! Use absolute nonsense for your development database, but nonsense of the correct data type, size, and format. That can be done with a fun little library called <a href=\"https://github.com/fzaninotto/Faker\">Faker</a> by <a href=\"https://twitter.com/francoisz/\">François Zaninotto</a> which is a wonderful little library that can essentially bullshit for Queen and country.</p>\n\n<p>Kapture uses Laravel which has the joys of having <a href=\"http://laravel.com/docs/migrations#database-seeding\">Database Seeding</a> baked in. This is essentially a tarted up CLI task which almost any modern PHP framework will have (or bloody well should do) so the principles are applicable to all.</p>\n\n<p>Break your Database Seeders down into chunks. This doesn't need to be \"one seeder-per-table\" but it can be. The reason I don't try to stick to that rule is that sometimes your data needs to be built at the same time as other types of data, so for us Users are created in the same \"seeder\" as their settings, oauth tokens, and friendship data is made. Putting that stuff into multiple seeders purely to keep things tidy would be an exercise in futility, and slow everything down for no reason. </p>\n\n<p>So, this is a drastically simplified version of our user seeder all in one go, ignoring the Laravel specific structure. <em>If you're using L4, just shove this in your <code>run()</code> method.</em></p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    $faker = Faker\\Factory::create();</p>\n\n<pre><code>for ($i = 0; $i &lt; Config::get('seeding.users'); $i++) {\n\n    $user = User::create([\n        'name'               =&gt; $faker-&gt;name,\n        'email'              =&gt; $faker-&gt;email,\n        'active'             =&gt; $i === 0 ? true : rand(0, 1),\n        'gender'             =&gt; rand(0, 1) ? 'male' : 'female',\n        'timezone'           =&gt; mt_rand(-10, 10),\n        'birthday'           =&gt; rand(0, 1) ? $faker-&gt;dateTimeBetween('-40 years', '-18 years') : null,\n        'location'           =&gt; rand(0, 1) ? \"{$faker-&gt;city}, {$faker-&gt;state}\" : null,\n        'had_feedback_email' =&gt; (bool) rand(0, 1),\n        'sync_name_bio'      =&gt; (bool) rand(0, 1),\n        'bio'                =&gt; $faker-&gt;sentence(100),\n        'picture_url'        =&gt; $this-&gt;picture_url[rand(0, 19)],\n    ]);\n}\n</code></pre>\n\n<p>{{ /prism:syntax }}</p>\n\n<p>So what do we have here? Let's go through this section at a time:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    $faker = Faker\\Factory::create();\n{{ /prism:syntax }}</p>\n\n<p>An instance of Faker, our bullshit artist for-hire.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n    for ($i = 0; $i &lt; Config::get('seeding.users'); $i++) {\n{{ /prism:syntax }}</p>\n\n<p>We're going to want a certain number of users, but I'd recommend you have a few less on development than you do on testing or staging, because time.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n        $user = User::create([\n            'name'               => $faker->name,\n            'email'              => $faker->email,\n{{ /prism:syntax }}</p>\n\n<p>Make a random name and random email. We don't have to define the pool of random data it uses, because ITS MAGIC!</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n            'active'             => $i === 0 ? true : rand(0, 1),\n{{ /prism:syntax }}</p>\n\n<p>Ok I lied, our garbage is not 100% random. We want user number 1 to be active for tests later on.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n            'gender'             => rand(0, 1) ? 'male' : 'female',\n{{ /prism:syntax }}</p>\n\n<p>Gender equality is important.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n            'timezone'           => mt_rand(-10, 10),\n{{ /prism:syntax }}</p>\n\n<p>Our original developer decided that saving timezones as an integer was a clever thing to do. Bellend. How you gonna handle countries with +4.45 timezones bro? I still need to refactor this, but it's fine for now.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n            'birthday'           => rand(0, 1) ? $faker->dateTimeBetween('-40 years', '-18 years') : null,\n{{ /prism:syntax }}</p>\n\n<p>Users of all of our target age demographic. </p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n            'location'           => rand(0, 1) ? \"{$faker->city}, {$faker->state}\" : null,\n{{ /prism:syntax }}</p>\n\n<p>Give us a city name and a state name. This works fine with foreign countries too which is cool.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n            'had<em>feedback</em>email' => (bool) rand(0, 1),\n            'sync<em>name</em>bio'      => (bool) rand(0, 1),\n{{ /prism:syntax }}</p>\n\n<p>Some user flags we don't care much about. True or false, whatever.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n            'bio'                => $faker->sentence(100),\n{{ /prism:syntax }}</p>\n\n<p>Make a sentence with 100 characters in it. </p>\n\n<h2>That's about it</h2>\n\n<p>You will end up making a lot of these files, and you'll want to populate pretty much every table you have with data. You'll also want to tell your Database Seeder to wipe all the tables you're going to populate. Do this globally right at the start of the process, don't wipe each table at the top of each seeder or you'll be wiping out content in that table from other seeders in the same process.</p>\n\n<p>Example of a overall system in Laravel 4:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nclass DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        if (App::environment() === 'production') {\n            exit('I just stopped you getting fired. Love Phil');\n        }</p>\n\n<pre><code>    Eloquent::unguard();\n\n    $tables = [\n        'locations',\n        'merchants',\n        'opps',\n        'opps_locations',\n        'moments',\n        'rewards',\n        'users',\n        'oauth_sessions',\n        'notifications',\n        'favorites',\n        'settings',\n        'friendships',\n        'impressions',\n    ];\n\n    foreach ($tables as $table) {\n        DB::table($table)-&gt;truncate();\n    }\n\n    $this-&gt;call('MerchantTableSeeder');\n    $this-&gt;call('PlaceTableSeeder');\n    $this-&gt;call('UserTableSeeder');\n    $this-&gt;call('OppTableSeeder');\n    $this-&gt;call('MomentTableSeeder');\n}\n</code></pre>\n\n<p>}\n{{ /prism:syntax }}</p>\n\n<p>This wipes everything, then runs other seeder classes to do their thing. </p>\n\n<p>Then I just run <code>$ php artisan db:seed</code> and it goes about it's business.</p>\n\n<h2>When to run this</h2>\n\n<p>This is run whenever a developer on the team wants fresh data in their system, at random intervals on the staging server and automatically on the jenkins testing server when we deploy new builds of the api.</p>\n\n<p>More on testing automationy goodness with Jenkins and Behat coming up soon, and a lot more to come after that including how to represent your data output, how to handle nesting data (respecting context and avoiding unlimited nesting and memory-leaks) and authentication with <a href=\"https://github.com/php-loep/oauth2-server\">OAuth 2 Server</a> from <a href=\"http://www.thephpleague.com/\">The PHP League of Extraordinary Packages</a>.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "172",
    "created": "2013-11-12 03:01:00",
    "updated": "2013-11-12 03:01:00",
    "created_by": "2",
    "ordering_count": "25",
    "title": "Benchmarking Codswallop: NodeJS v PHP",
    "slug": "benchmarking-codswallop-nodejs-v-php",
    "category_id": "2",
    "attachment": "",
    "intro": "Sometimes people link me to articles and ask for my opinions. This one was a real doozy.",
    "body": "Sometimes people link me to articles and ask for my opinions. This one was a real doozy.\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/reactphp\">@reactphp</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> NodeJS owns PHP on website scraping ? <a href=\"http://t.co/zpWQBx3zvY\">http://t.co/zpWQBx3zvY</a></p>&mdash; GDmac (@GDmac) <a href=\"https://twitter.com/GDmac/statuses/399459655765618688\">November 10, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nOh goody, a framework versus language post. Let's try and chew through this probable linkbait.\n\n> This is more of a benchmark test than example.\n\nOk so we're benchmarking NodeJS v PHP. Weird, but I'll go along with it.\n\n> External library used for Nodejs was cheerio and PhpQuery for Php.\n\nWell, now we're testing cheerio v PhpQuery which is a bit different, but fine, let's go along with it. These two libraries do essentially the same thing, let you parse HTML and traverse about the DOM model. I can see how one might think it's fair, even if the title is already misleading...\n\n> Nodejs took 175.535 sec to complete where as Php took 711.790 sec to complete. Php was four times slower than Nodejs.\n\nSure it was, because phpQuery uses `file_get_contents()` which is blocking, meaning each and every single one of those web requests has to be done in turn. PHP is just sitting there waiting for the server to respond, when it could be doing something else. Also where were these tests being run from? The moon?!\n\nWe've come a long way from the original title of \"NodeJS v PHP\", to really asking \"cheerio v phpQuery\", which is realistically asking \"Blocking v Non-Blocking\", or Synchronous v Asynchronous\". \n\nBenchmarking to see if \"doing multiple things at once\" is faster than \"doing one thing at a time\" almost certainly sounds like a waste of time, but it would at least match the actual code examples being run and therefore be a valid test. Let's just pretend it _was_ worded like that, and have a go at this benchmark ourselves.\n\n## Setup\n\nI made [a repo](https://github.com/philsturgeon/nonblockingbro) and shoved a Vagrantfile in there with just the basic Ubuntu 12.10 image. I could have done up a whole Puppet manifest, but this will be a useful learning exercise for people who want to learn how to setup ReactPHP anyway. Vagrant up that box, then ssh in. All the test scripts are in there.\n\nI have no idea what version of PHP he is using because he does't actually say, but let's just go with PHP 5.5 ourselves because it is the current more recent stable version.\n\n{{ prism:syntax }}\n$ sudo add-apt-repository ppa:ondrej/php5\n$ sudo apt-get update\n$ sudo apt-get install php5-cli\n{{ /prism:syntax }}\n\nThat gets PHP ready.\n\n{{ prism:syntax }}\n$ sudo apt-get install -y php5-dev libevent-dev\n$ wget http://pecl.php.net/get/libevent-0.0.5.tgz\n$ tar -xzf libevent-0.0.5.tgz\n$ cd libevent-0.0.5 && phpize && ./configure && make && sudo make install\n$ echo \"extension=libevent.so\" | sudo tee -a /etc/php5/cli/php.ini\n{{ /prism:syntax }}\n\nThat should sort out libevent, so we can let PHP work with event loops.\n\n{{ prism:syntax }}\n$ sudo apt-get install -y python-software-properties python g++ make\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install -y nodejs\n{{ /prism:syntax }}\n\nThis will install a version of Node much newer than the 0.6.x Ubuntu's default repo will give you.\n\n{{ prism:syntax }}\n$ npm install request\n$ npm install cheerio\n{{ /prism:syntax }}\n\nNow we have the NPM modules for Node to do its thing.\n\n## Variables\n\n**Bandwidth:** 15 Mbps  \n**Vagrant Memory:** 1024MB  \n**PHP version:** v5.5.5  \n**NodeJS version:** v0.10.21\n\nI used phpQuery with the [one file](https://code.google.com/p/phpquery/downloads/detail?name=phpQuery-0.9.5.386-onefile.zip&can=2&q=) download, because they haven't bothered getting it on Composer yet. If they're going to flagrantly ignore PSR-0 and Composer I may as well go with performantly packaged option.\n\n## Run the Tests\n\n{{ prism:syntax }}\n$ cd /vagrant  \n$ chmod +x ./run.sh  \n$ ./run.sh\n{{ /prism:syntax }}\n\nThis will run the same two examples from the original article first, then run my non-blocking example put together with a little help from [Chris Boden](https://twitter.com/boden_c), one of the ReactPHP developers.\n\n## Results\n\nMy async re-do of the original PHP example kicked the fuck out of everything else. \n\nHere are the numbers:\n\n### Node v0.10.21 + Cheerio\n\n> real\t0m45.142s  \n> user\t0m8.081s  \n> sys\t0m0.888s  \n\n### PHP 5.5.5 + phpQuery (Blocking)\n\n> real\t3m33.601s  \n> user\t0m8.685s  \n> sys\t0m1.212s\n\n### PHP 5.5.5 + ReactPHP + phpQuery\n\n> real\t0m23.877s  \n> user\t0m10.237s  \n> sys\t0m1.568s\n\n\nPeople like pretty graphs:\n\n<img src=\"https://dl.dropboxusercontent.com/u/37978558/blog/php-v-node-results.png\" alt=\"Num. Seconds Passed v Page Number\" style=\"width: 750px;\"/>\n\n## Conclusions\n\nThe primary conclusion to draw from this is that doing 200 HTTP requests in sequence is slower than making multiple requests at the same time. Shocker that. \n\nWe can also be pretty confident that the original article was completely wrong about everything. PHP is not as pathetic at async code as the original \"benchmark\" alludes to. It is entirely down to how a package decides to implement libevent or libev, much like ReactPHP has done.\n\nBoth systems can probably go faster somehow, and both systems could probably have their API's cleaned up some to make this even easier. They both need some fault tolerance because when I cranked up the number to 1000 both systems had problems. \n\nI'm not going to say either system is faster, just that the massive gap in the original article comes down purely to picking a blocking system. Run it yourself, and make your own conclusions. Let's just say that PHP is not sucking as bad as some people would expect.\n\n_**Update:** A few people have mentioned that Node by default will use maxConnections of 5, but setting it higher would make NodeJS run much quicker. As I said, I was sure NodeJS could go faster but I would never make assumptions about something I don't know much about. I re-ran the test and the results reflect these suggestions. Removing the blocking PHP approach (because obviously it's slow as shit) and running just the other three scripts looks like this:_\n\n<img src=\"https://dl.dropboxusercontent.com/u/37978558/blog/php-v-node-results2.png\" alt=\"Num. Seconds Passed v Page Number\" style=\"width: 750px;\"/>\n\n_Look, they're the same. At this point it is just a network test. The speed between the two systems for handling this specific task is essentially identical, with both systems taking it in turns to \"win\" as they swap by about 0.3 seconds. This does not really effect any of the rest of the article, because it was assumed node could be tweaked to be more in line with PHP, I was never trying to suggest PHP was faster than node (even though a bunch of you seemed to think I did). Where did that come from?_\n\n## Observations\n\nIt is worth noting that the faster the network connection the less the difference is between the two. At 82 Mbps down [Jon Sherrard](http://twitter.com/jshez) was reporting \"PHP 5.5.5 + ReactPHP + phpQuery\" running at 15 seconds and \"Node + Cheerio\" running at 18 seconds. \n\nI asked a few friends to try having a go at improving the speed of the original posters NodeJS code, and a [few alternatives](https://gist.github.com/boxedfish/7423034) sprung up from [Alex Akass](https://twitter.com/alexjakass). His results have them pegged as only slight speed improvements, while mine had ps4.js clocked at about 9 seconds, which is mental. It did use a lot of child processes and fail when the page count was bumped to 1000 though, which is a useful reminder that none of this is magic and everything has costs.\n\n## Thoughts\n\nIt seems likely to me that people just assume PHP can't do this stuff, because by default most people arse around PHP with things like MAMP, or on their shitty web-host where is is hard to install things and as such get used to writing PHP without utilizing many extensions. It is probably exactly this which makes people think PHP just can't do something, when it easily can. It is also probably this that causes package developers to generally ignore depending on functionality that would be extension only, just like PyroCMS often has to do.\n\nThis is why the work being done by folks like the ReactPHP project is incredibly important. They're wrapping up things like libevent and libev to provide developers with a simple Composer package to base other code on. Simple dependencies abstracting complicated stuff is exactly what modern development is all about, and PHP is keeping up nicely.\n\nThe HTTP Client library I used in this example is a little weak and only works with HTTP 1.0, which is problematic. For this reason [Igor Wiedler](https://twitter.com/igorwesome) himself recommends that you don't use it, but there is no reason why a better version could not be built. \n\n[Guzzle](http://guzzlephp.org/) might get some async love soon too wrapping up [curl multi](http://php.net/manual/en/function.curl-multi-init.php), as [Nils Adermann](https://twitter.com/naderman/status/399988127705468928) just finished up a [pull request](https://github.com/guzzle/guzzle/pull/466). Great timing!\n\n## Summary\n\nThe trolls will no doubt say I am only defending PHP (again) because I am just not clever enough to learn other languages, but really I am tired of people making shit up. Once again people this is an example, not a specific piece of rage against just one person that wrote one shitty article. This happens a lot, and this should be an example to people who will try it again. \n\nPHP has enough [legitimate concerns](http://phpsadness.com/) without people just pretending they're scientists and using bullshit numbers to prove that up is left and cheese is made of potatoes.\n\n## Update: 08/11/2013\n\nI am happy that the vast majority of people got the point of this article. It got some amazing attention reaching about 40,000 hits on Google Analytics, front page on Hacker News for a bit, etc but the best was several tweets and RTs from the official NodeJS account, who have read it and seem to agree:\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>.<a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> Nice article.&#10;&#10;Node users don&#39;t know about maxSockets.&#10;&#10;PHP users don&#39;t know about React.&#10;&#10;Much work to do, all around!</p>&mdash; node js (@nodejs) <a href=\"https://twitter.com/nodejs/statuses/400295942311534592\">November 12, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nSo you can be happy or sad about this article, but it is not wrong.",
    "created_on": "1384225260",
    "updated_on": "1384225260",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "af5f3c3b9f0b88add3dca55bfeae9282",
    "type": "markdown",
    "parsed": "<p>Sometimes people link me to articles and ask for my opinions. This one was a real doozy.</p>\n\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/reactphp\">@reactphp</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> NodeJS owns PHP on website scraping ? <a href=\"http://t.co/zpWQBx3zvY\">http://t.co/zpWQBx3zvY</a></p>&mdash; GDmac (@GDmac) <a href=\"https://twitter.com/GDmac/statuses/399459655765618688\">November 10, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Oh goody, a framework versus language post. Let's try and chew through this probable linkbait.</p>\n\n<blockquote>\n  <p>This is more of a benchmark test than example.</p>\n</blockquote>\n\n<p>Ok so we're benchmarking NodeJS v PHP. Weird, but I'll go along with it.</p>\n\n<blockquote>\n  <p>External library used for Nodejs was cheerio and PhpQuery for Php.</p>\n</blockquote>\n\n<p>Well, now we're testing cheerio v PhpQuery which is a bit different, but fine, let's go along with it. These two libraries do essentially the same thing, let you parse HTML and traverse about the DOM model. I can see how one might think it's fair, even if the title is already misleading...</p>\n\n<blockquote>\n  <p>Nodejs took 175.535 sec to complete where as Php took 711.790 sec to complete. Php was four times slower than Nodejs.</p>\n</blockquote>\n\n<p>Sure it was, because phpQuery uses <code>file_get_contents()</code> which is blocking, meaning each and every single one of those web requests has to be done in turn. PHP is just sitting there waiting for the server to respond, when it could be doing something else. Also where were these tests being run from? The moon?!</p>\n\n<p>We've come a long way from the original title of \"NodeJS v PHP\", to really asking \"cheerio v phpQuery\", which is realistically asking \"Blocking v Non-Blocking\", or Synchronous v Asynchronous\". </p>\n\n<p>Benchmarking to see if \"doing multiple things at once\" is faster than \"doing one thing at a time\" almost certainly sounds like a waste of time, but it would at least match the actual code examples being run and therefore be a valid test. Let's just pretend it <em>was</em> worded like that, and have a go at this benchmark ourselves.</p>\n\n<h2>Setup</h2>\n\n<p>I made <a href=\"https://github.com/philsturgeon/nonblockingbro\">a repo</a> and shoved a Vagrantfile in there with just the basic Ubuntu 12.10 image. I could have done up a whole Puppet manifest, but this will be a useful learning exercise for people who want to learn how to setup ReactPHP anyway. Vagrant up that box, then ssh in. All the test scripts are in there.</p>\n\n<p>I have no idea what version of PHP he is using because he does't actually say, but let's just go with PHP 5.5 ourselves because it is the current more recent stable version.</p>\n\n<p>{{ prism:syntax }}\n$ sudo add-apt-repository ppa:ondrej/php5\n$ sudo apt-get update\n$ sudo apt-get install php5-cli\n{{ /prism:syntax }}</p>\n\n<p>That gets PHP ready.</p>\n\n<p>{{ prism:syntax }}\n$ sudo apt-get install -y php5-dev libevent-dev\n$ wget http://pecl.php.net/get/libevent-0.0.5.tgz\n$ tar -xzf libevent-0.0.5.tgz\n$ cd libevent-0.0.5 &amp;&amp; phpize &amp;&amp; ./configure &amp;&amp; make &amp;&amp; sudo make install\n$ echo \"extension=libevent.so\" | sudo tee -a /etc/php5/cli/php.ini\n{{ /prism:syntax }}</p>\n\n<p>That should sort out libevent, so we can let PHP work with event loops.</p>\n\n<p>{{ prism:syntax }}\n$ sudo apt-get install -y python-software-properties python g++ make\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install -y nodejs\n{{ /prism:syntax }}</p>\n\n<p>This will install a version of Node much newer than the 0.6.x Ubuntu's default repo will give you.</p>\n\n<p>{{ prism:syntax }}\n$ npm install request\n$ npm install cheerio\n{{ /prism:syntax }}</p>\n\n<p>Now we have the NPM modules for Node to do its thing.</p>\n\n<h2>Variables</h2>\n\n<p><strong>Bandwidth:</strong> 15 Mbps<br />\n<strong>Vagrant Memory:</strong> 1024MB<br />\n<strong>PHP version:</strong> v5.5.5<br />\n<strong>NodeJS version:</strong> v0.10.21</p>\n\n<p>I used phpQuery with the <a href=\"https://code.google.com/p/phpquery/downloads/detail?name=phpQuery-0.9.5.386-onefile.zip&amp;can=2&amp;q=\">one file</a> download, because they haven't bothered getting it on Composer yet. If they're going to flagrantly ignore PSR-0 and Composer I may as well go with performantly packaged option.</p>\n\n<h2>Run the Tests</h2>\n\n<p>{{ prism:syntax }}\n$ cd /vagrant<br />\n$ chmod +x ./run.sh<br />\n$ ./run.sh\n{{ /prism:syntax }}</p>\n\n<p>This will run the same two examples from the original article first, then run my non-blocking example put together with a little help from <a href=\"https://twitter.com/boden_c\">Chris Boden</a>, one of the ReactPHP developers.</p>\n\n<h2>Results</h2>\n\n<p>My async re-do of the original PHP example kicked the fuck out of everything else. </p>\n\n<p>Here are the numbers:</p>\n\n<h3>Node v0.10.21 + Cheerio</h3>\n\n<blockquote>\n  <p>real  0m45.142s<br />\n  user  0m8.081s<br />\n  sys   0m0.888s  </p>\n</blockquote>\n\n<h3>PHP 5.5.5 + phpQuery (Blocking)</h3>\n\n<blockquote>\n  <p>real  3m33.601s<br />\n  user  0m8.685s<br />\n  sys   0m1.212s</p>\n</blockquote>\n\n<h3>PHP 5.5.5 + ReactPHP + phpQuery</h3>\n\n<blockquote>\n  <p>real  0m23.877s<br />\n  user  0m10.237s<br />\n  sys   0m1.568s</p>\n</blockquote>\n\n<p>People like pretty graphs:</p>\n\n<p><img src=\"https://dl.dropboxusercontent.com/u/37978558/blog/php-v-node-results.png\" alt=\"Num. Seconds Passed v Page Number\" style=\"width: 750px;\"/></p>\n\n<h2>Conclusions</h2>\n\n<p>The primary conclusion to draw from this is that doing 200 HTTP requests in sequence is slower than making multiple requests at the same time. Shocker that. </p>\n\n<p>We can also be pretty confident that the original article was completely wrong about everything. PHP is not as pathetic at async code as the original \"benchmark\" alludes to. It is entirely down to how a package decides to implement libevent or libev, much like ReactPHP has done.</p>\n\n<p>Both systems can probably go faster somehow, and both systems could probably have their API's cleaned up some to make this even easier. They both need some fault tolerance because when I cranked up the number to 1000 both systems had problems. </p>\n\n<p>I'm not going to say either system is faster, just that the massive gap in the original article comes down purely to picking a blocking system. Run it yourself, and make your own conclusions. Let's just say that PHP is not sucking as bad as some people would expect.</p>\n\n<p><em><strong>Update:</strong> A few people have mentioned that Node by default will use maxConnections of 5, but setting it higher would make NodeJS run much quicker. As I said, I was sure NodeJS could go faster but I would never make assumptions about something I don't know much about. I re-ran the test and the results reflect these suggestions. Removing the blocking PHP approach (because obviously it's slow as shit) and running just the other three scripts looks like this:</em></p>\n\n<p><img src=\"https://dl.dropboxusercontent.com/u/37978558/blog/php-v-node-results2.png\" alt=\"Num. Seconds Passed v Page Number\" style=\"width: 750px;\"/></p>\n\n<p><em>Look, they're the same. At this point it is just a network test. The speed between the two systems for handling this specific task is essentially identical, with both systems taking it in turns to \"win\" as they swap by about 0.3 seconds. This does not really effect any of the rest of the article, because it was assumed node could be tweaked to be more in line with PHP, I was never trying to suggest PHP was faster than node (even though a bunch of you seemed to think I did). Where did that come from?</em></p>\n\n<h2>Observations</h2>\n\n<p>It is worth noting that the faster the network connection the less the difference is between the two. At 82 Mbps down <a href=\"http://twitter.com/jshez\">Jon Sherrard</a> was reporting \"PHP 5.5.5 + ReactPHP + phpQuery\" running at 15 seconds and \"Node + Cheerio\" running at 18 seconds. </p>\n\n<p>I asked a few friends to try having a go at improving the speed of the original posters NodeJS code, and a <a href=\"https://gist.github.com/boxedfish/7423034\">few alternatives</a> sprung up from <a href=\"https://twitter.com/alexjakass\">Alex Akass</a>. His results have them pegged as only slight speed improvements, while mine had ps4.js clocked at about 9 seconds, which is mental. It did use a lot of child processes and fail when the page count was bumped to 1000 though, which is a useful reminder that none of this is magic and everything has costs.</p>\n\n<h2>Thoughts</h2>\n\n<p>It seems likely to me that people just assume PHP can't do this stuff, because by default most people arse around PHP with things like MAMP, or on their shitty web-host where is is hard to install things and as such get used to writing PHP without utilizing many extensions. It is probably exactly this which makes people think PHP just can't do something, when it easily can. It is also probably this that causes package developers to generally ignore depending on functionality that would be extension only, just like PyroCMS often has to do.</p>\n\n<p>This is why the work being done by folks like the ReactPHP project is incredibly important. They're wrapping up things like libevent and libev to provide developers with a simple Composer package to base other code on. Simple dependencies abstracting complicated stuff is exactly what modern development is all about, and PHP is keeping up nicely.</p>\n\n<p>The HTTP Client library I used in this example is a little weak and only works with HTTP 1.0, which is problematic. For this reason <a href=\"https://twitter.com/igorwesome\">Igor Wiedler</a> himself recommends that you don't use it, but there is no reason why a better version could not be built. </p>\n\n<p><a href=\"http://guzzlephp.org/\">Guzzle</a> might get some async love soon too wrapping up <a href=\"http://php.net/manual/en/function.curl-multi-init.php\">curl multi</a>, as <a href=\"https://twitter.com/naderman/status/399988127705468928\">Nils Adermann</a> just finished up a <a href=\"https://github.com/guzzle/guzzle/pull/466\">pull request</a>. Great timing!</p>\n\n<h2>Summary</h2>\n\n<p>The trolls will no doubt say I am only defending PHP (again) because I am just not clever enough to learn other languages, but really I am tired of people making shit up. Once again people this is an example, not a specific piece of rage against just one person that wrote one shitty article. This happens a lot, and this should be an example to people who will try it again. </p>\n\n<p>PHP has enough <a href=\"http://phpsadness.com/\">legitimate concerns</a> without people just pretending they're scientists and using bullshit numbers to prove that up is left and cheese is made of potatoes.</p>\n\n<h2>Update: 08/11/2013</h2>\n\n<p>I am happy that the vast majority of people got the point of this article. It got some amazing attention reaching about 40,000 hits on Google Analytics, front page on Hacker News for a bit, etc but the best was several tweets and RTs from the official NodeJS account, who have read it and seem to agree:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>.<a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> Nice article.&#10;&#10;Node users don&#39;t know about maxSockets.&#10;&#10;PHP users don&#39;t know about React.&#10;&#10;Much work to do, all around!</p>&mdash; node js (@nodejs) <a href=\"https://twitter.com/nodejs/statuses/400295942311534592\">November 12, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>So you can be happy or sad about this article, but it is not wrong.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "173",
    "created": "2013-12-12 01:20:00",
    "updated": "2013-12-12 01:20:00",
    "created_by": "2",
    "ordering_count": "26",
    "title": "PHP API's: Fractal of GOOD Design",
    "slug": "php-apis-fractal-of-good-design",
    "category_id": "2",
    "attachment": "",
    "intro": "Recently I started a new blog series called &quot;Build API&#39;s That You Wont Hate&quot;. It was meant to be a fleshed out series based off of my experiences over the last several years building nontrivial RESTful API&#39;s for all sorts of clients. I didn&#39;t fully plan the series and just kinda got going with it, and after thinking about things a little more I realised that it was going to be a huge commitment.&nbsp;I figured I should turn it into an ebook, and it&#39;s coming along pretty well.&nbsp;",
    "body": "Recently I started a new blog series called \"Build API's That You Wont Hate\", starting off with [Part 1 - Useful Database Seeding](http://philsturgeon.co.uk/blog/2013/11/build-apis-part-1-useful-database-seeding). It was meant to be a fleshed out series based off of my experiences over the last several years building nontrivial RESTful API's for all sorts of clients. The first was not super API related, as database seeding is something that is useful for any application, but it was certainly a requirement for the rest of the series. I didn't fully plan the series and just kinda got going with it, and after thinking about things a little more I realised that it was going to be a huge commitment. I wanted it to be about twelve parts, and to do an article like that justice takes upwards of 6 hours. Thats an hour a night every night for months, and my girlfriend would not be impressed with me doing that all for free.\n\nI figured I should turn it into an ebook. I wrote an ebook a little while ago called [Catapult into PyroCMS](https://efendibooks.com/books/catapult-into-pyrocms) which was a fun experience, but definitely felt like the most niche of all niche possible markets. Finding people who like [PyroCMS](http://pyrocms.com/) enough to buy a book, but not enough to know how it works? Well, it didn't get onto the New York Times best sellers list, but it did ok, and it definitely didn't put me off going again.\n\nInstead of going with Efendi again I decided to go with LeanPub (for various reasons, and it looks like Efendi is moving content over to LeanPub anyway). The process was incredibly simple, and after taking out some swears, converting the first blog into a chapter and getting [Dayle Rees](https://twitter.com/daylerees) to make me a book cover I was well on my way to getting an early copy out. \n\nSince then I have been working on one chapter a week, covering various bits of theory and today getting Chapter 6 done, outputting formatted data, using \"Transformers\".\n\nThis most recent chapter was a big deal for me as it covers the basics of the new package I have been working on at the day job (where I build a nontrivial API) called [Fractal](https://github.com/php-loep/fractal). The aim of Fractal is to be the solution to pretty much every issue I have had building API's in regards to data output.\n\nSo far (at 0.4.4) its abilities are:\n\n* Allow an area for you to type-cast your data, so not all of your booleans look like \"0\"\n* Avoid db schema changes changing your output\n* Allow for simple, flexible and controllable embedding of data, avoiding infinite loops\n\nNext on the list is:\n\n* Implement HATEOAS/HAL links\n\nThose links are the final piece in the puzzle but I have a few ideas. \n\nFractal 0.1.0 is currently in production and its got a little bit quicker and cleaner since then. The main idea is that your data needs to be \"transformed\" somehow from whatever it is in the database, to standardised JSON output (or whatever format) and the place to do that does not fit in the responsibilities of our usual MVC components. \n\nChapter 6 shows off how you can make basic transformers for items which can be arrays, stdClass, ORM models, etc, and or collections which again can be arrays, ArrayItterator of models, arrays of stdClass objects, etc. They are all parsed with a singular instance of the data, so collections are iterated through for transformation. \n\n{{ prism:syntax lang=\"php\" }}\n<?php namespace App\\Transformer;\n\nuse Place;\nuse League\\Fractal\\TransformerAbstract;\n\nclass PlaceTransformer extends TransformerAbstract\n{\n    /**\n     * Turn this item object into a generic array\n     *\n     * @return array\n     */\n    public function transform(Place $place)\n    {\n        return [\n            'id'           => (int) $place->id,\n            'name'         => $place->name,\n            'lat'          => (float) $place->lat,\n            'lon'          => (float) $place->lon,\n            'address1'     => $place->address1,\n            'address2'     => $place->address2,\n            'city'         => $place->city,\n            'state'        => $place->state,\n            'zip'          => (float) $place->zip,\n            'website'      => $place->website,\n            'phone'        => $place->phone,\n        ];\n    }\n}\n{{ /prism:syntax }}\n\nThen in the controller you can do something really simple like this:\n\n{{ prism:syntax lang=\"php\" }}\n<?php\nuse App\\Transformer\\PlaceTransformer;\n\nclass PlaceController extends ApiController\n{\n    public function index()\n    {\n        $places = Place::take(10)->get();\n        return $this->respondWithCollection($places, new PlaceTransformer);\n    }\n\n    public function show($id)\n    {\n        $place = Place::find($id);\n        \n        if (! $place) {\n        \treturn $this->errorNotFound('Did you just invent an ID and try loading a place? Muppet.');\n\t\t}\n\t\t\n        return $this->respondWithItem($place, new PlaceTransformer);\n    }\n}\n{{ /prism:syntax }}\n\nThat is drastically simplified and of course you have no idea what `respondWithItem()` does, but you can get that from the README, or… you know… buying the book. ;)\n\nWhere this gets fun is when you add \"embeds\" to your transformer.\n\n{{ prism:syntax lang=\"php\" }}\n<?php namespace App\\Transformer;\n\nuse Place;\nuse League\\Fractal\\TransformerAbstract;\n\nclass PlaceTransformer extends TransformerAbstract\n{\n    protected $availableEmbeds = [\n        'checkins'\n    ];\n\n    /**\n     * Turn this item object into a generic array\n     *\n     * @return array\n     */\n    public function transform(Place $place)\n    {\n        return [\n            'id'           => (int) $place->id,\n            'name'         => $place->name,\n            'lat'          => (float) $place->lat,\n            'lon'          => (float) $place->lon,\n            'address1'     => $place->address1,\n            'address2'     => $place->address2,\n            'city'         => $place->city,\n            'state'        => $place->state,\n            'zip'          => (float) $place->zip,\n            'website'      => $place->website,\n            'phone'        => $place->phone,\n        ];\n    }\n\n    /**\n     * Embed Checkins\n     *\n     * @return League\\Fractal\\Resource\\Collection\n     */\n    public function embedCheckins(Place $place)\n    {\n        $checkins = $place->checkins;\n\n        return $this->collectionResource($checkins, new CheckinTransformer);\n    }\n}\n{{ /prism:syntax }}\n\nThis will allow you to send a query string parameter to Fractal, and enable URLs like \"/users?include=checkins,friends\". This can be nested to an unlimited level, and they can be collections or items. Or paginated items, but that is complicated as fuck and will have to be covered in the book.\n\nSo I guess this article is saying two things.\n\n1. Check out [Fractal](https://github.com/php-loep/fractal). It's early, but has a lot of potential. \n1. Buy my [ebook](https://leanpub.com/build-apis-you-wont-hate). It's going to get considerably better over time, but it's already got a lot of useful content.\n\nGet on Twitter with any feedback about the book or Fractal. @philsturgeon",
    "created_on": "1386811200",
    "updated_on": "1386811200",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "e4d2ea2af56a2f00506e8aa99a514910",
    "type": "markdown",
    "parsed": "<p>Recently I started a new blog series called \"Build API's That You Wont Hate\", starting off with <a href=\"http://philsturgeon.co.uk/blog/2013/11/build-apis-part-1-useful-database-seeding\">Part 1 - Useful Database Seeding</a>. It was meant to be a fleshed out series based off of my experiences over the last several years building nontrivial RESTful API's for all sorts of clients. The first was not super API related, as database seeding is something that is useful for any application, but it was certainly a requirement for the rest of the series. I didn't fully plan the series and just kinda got going with it, and after thinking about things a little more I realised that it was going to be a huge commitment. I wanted it to be about twelve parts, and to do an article like that justice takes upwards of 6 hours. Thats an hour a night every night for months, and my girlfriend would not be impressed with me doing that all for free.</p>\n\n<p>I figured I should turn it into an ebook. I wrote an ebook a little while ago called <a href=\"https://efendibooks.com/books/catapult-into-pyrocms\">Catapult into PyroCMS</a> which was a fun experience, but definitely felt like the most niche of all niche possible markets. Finding people who like <a href=\"http://pyrocms.com/\">PyroCMS</a> enough to buy a book, but not enough to know how it works? Well, it didn't get onto the New York Times best sellers list, but it did ok, and it definitely didn't put me off going again.</p>\n\n<p>Instead of going with Efendi again I decided to go with LeanPub (for various reasons, and it looks like Efendi is moving content over to LeanPub anyway). The process was incredibly simple, and after taking out some swears, converting the first blog into a chapter and getting <a href=\"https://twitter.com/daylerees\">Dayle Rees</a> to make me a book cover I was well on my way to getting an early copy out. </p>\n\n<p>Since then I have been working on one chapter a week, covering various bits of theory and today getting Chapter 6 done, outputting formatted data, using \"Transformers\".</p>\n\n<p>This most recent chapter was a big deal for me as it covers the basics of the new package I have been working on at the day job (where I build a nontrivial API) called <a href=\"https://github.com/php-loep/fractal\">Fractal</a>. The aim of Fractal is to be the solution to pretty much every issue I have had building API's in regards to data output.</p>\n\n<p>So far (at 0.4.4) its abilities are:</p>\n\n<ul>\n<li>Allow an area for you to type-cast your data, so not all of your booleans look like \"0\"</li>\n<li>Avoid db schema changes changing your output</li>\n<li>Allow for simple, flexible and controllable embedding of data, avoiding infinite loops</li>\n</ul>\n\n<p>Next on the list is:</p>\n\n<ul>\n<li>Implement HATEOAS/HAL links</li>\n</ul>\n\n<p>Those links are the final piece in the puzzle but I have a few ideas. </p>\n\n<p>Fractal 0.1.0 is currently in production and its got a little bit quicker and cleaner since then. The main idea is that your data needs to be \"transformed\" somehow from whatever it is in the database, to standardised JSON output (or whatever format) and the place to do that does not fit in the responsibilities of our usual MVC components. </p>\n\n<p>Chapter 6 shows off how you can make basic transformers for items which can be arrays, stdClass, ORM models, etc, and or collections which again can be arrays, ArrayItterator of models, arrays of stdClass objects, etc. They are all parsed with a singular instance of the data, so collections are iterated through for transformation. </p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n&lt;?php namespace App\\Transformer;</p>\n\n<p>use Place;\nuse League\\Fractal\\TransformerAbstract;</p>\n\n<p>class PlaceTransformer extends TransformerAbstract\n{\n    /**\n     * Turn this item object into a generic array\n     *\n     * @return array\n     */\n    public function transform(Place $place)\n    {\n        return [\n            'id'           => (int) $place->id,\n            'name'         => $place->name,\n            'lat'          => (float) $place->lat,\n            'lon'          => (float) $place->lon,\n            'address1'     => $place->address1,\n            'address2'     => $place->address2,\n            'city'         => $place->city,\n            'state'        => $place->state,\n            'zip'          => (float) $place->zip,\n            'website'      => $place->website,\n            'phone'        => $place->phone,\n        ];\n    }\n}\n{{ /prism:syntax }}</p>\n\n<p>Then in the controller you can do something really simple like this:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n&lt;?php\nuse App\\Transformer\\PlaceTransformer;</p>\n\n<p>class PlaceController extends ApiController\n{\n    public function index()\n    {\n        $places = Place::take(10)->get();\n        return $this->respondWithCollection($places, new PlaceTransformer);\n    }</p>\n\n<pre><code>public function show($id)\n{\n    $place = Place::find($id);\n\n    if (! $place) {\n        return $this-&gt;errorNotFound('Did you just invent an ID and try loading a place? Muppet.');\n    }\n\n    return $this-&gt;respondWithItem($place, new PlaceTransformer);\n}\n</code></pre>\n\n<p>}\n{{ /prism:syntax }}</p>\n\n<p>That is drastically simplified and of course you have no idea what <code>respondWithItem()</code> does, but you can get that from the README, or… you know… buying the book. ;)</p>\n\n<p>Where this gets fun is when you add \"embeds\" to your transformer.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n&lt;?php namespace App\\Transformer;</p>\n\n<p>use Place;\nuse League\\Fractal\\TransformerAbstract;</p>\n\n<p>class PlaceTransformer extends TransformerAbstract\n{\n    protected $availableEmbeds = [\n        'checkins'\n    ];</p>\n\n<pre><code>/**\n * Turn this item object into a generic array\n *\n * @return array\n */\npublic function transform(Place $place)\n{\n    return [\n        'id'           =&gt; (int) $place-&gt;id,\n        'name'         =&gt; $place-&gt;name,\n        'lat'          =&gt; (float) $place-&gt;lat,\n        'lon'          =&gt; (float) $place-&gt;lon,\n        'address1'     =&gt; $place-&gt;address1,\n        'address2'     =&gt; $place-&gt;address2,\n        'city'         =&gt; $place-&gt;city,\n        'state'        =&gt; $place-&gt;state,\n        'zip'          =&gt; (float) $place-&gt;zip,\n        'website'      =&gt; $place-&gt;website,\n        'phone'        =&gt; $place-&gt;phone,\n    ];\n}\n\n/**\n * Embed Checkins\n *\n * @return League\\Fractal\\Resource\\Collection\n */\npublic function embedCheckins(Place $place)\n{\n    $checkins = $place-&gt;checkins;\n\n    return $this-&gt;collectionResource($checkins, new CheckinTransformer);\n}\n</code></pre>\n\n<p>}\n{{ /prism:syntax }}</p>\n\n<p>This will allow you to send a query string parameter to Fractal, and enable URLs like \"/users?include=checkins,friends\". This can be nested to an unlimited level, and they can be collections or items. Or paginated items, but that is complicated as fuck and will have to be covered in the book.</p>\n\n<p>So I guess this article is saying two things.</p>\n\n<ol>\n<li>Check out <a href=\"https://github.com/php-loep/fractal\">Fractal</a>. It's early, but has a lot of potential. </li>\n<li>Buy my <a href=\"https://leanpub.com/build-apis-you-wont-hate\">ebook</a>. It's going to get considerably better over time, but it's already got a lot of useful content.</li>\n</ol>\n\n<p>Get on Twitter with any feedback about the book or Fractal. @philsturgeon</p>\n",
    "preview_hash": ""
  },
  {
    "id": "174",
    "created": "2014-01-02 17:58:00",
    "updated": "2014-01-02 17:58:00",
    "created_by": "2",
    "ordering_count": "27",
    "title": "The Tribal Framework Mindset",
    "slug": "the-tribal-framework-mindset",
    "category_id": "2",
    "attachment": "",
    "intro": "The PHP community has made some amazing leaps forward in the last few years, but some folks still (intentionally, or unintentionally) are contributing towards the siloing of the PHP community into framework-specific sub-sections. We used to work that was for a handful of reasons, but with Composer, the FIG and the onset of PSR&#39;s we have literally no reason to do this anymore. This article hopes to point out some of the ways in which that can happen, with potential solutions too.",
    "body": "Twitter seems to lead to the same thing happening over and over again.\n\n1. I say something I think is entirely uncontroversial\n2. People misunderstand and jump to weird conclusions\n3. Some folks start defending against that weird conclusion\n4. When I try to explain why they are mistaken, people go reporting to @PHPDrama\n\nYesterdays comment:\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>As much as I understand pushing the &quot;Laravel Community&quot;, content, blogs, etc, can we stop this soloing of efforts and be a PHP community?</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/418553604107431936\">January 2, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI meant to say \"siloing\", but being half asleep after a 24-hour session in Atlantic City in the back of a minivan with screaming kids meant that I made a mistake. It should still have made sense.\n\nWell, I thought so at least until I had a myriad of bizarre responses from people (mostly the well-known Laravel names) defending and picking issue with things I said, assuming instead of saying something logical I must have meant something moronic. That is rather offensive to me, so let's explain it for them. \n\n## Packages\n\nIf you are building a PHP package then you are faced with two options:\n\n1. Make it work with your favorite framework\n2. Make it run with every framework out there\n\nNow, if you pick option 1 then a) you are just trying to save time, or b) you suck. I've been talking about [framework agnostic packages](http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php) since early 2012 when Laravel 3 had bundles, CodeIgniter had Sparks, and everyone else had something else just for them. Frameworks didn't have much choice than to build their own solutions because the only other option was PEAR, and most of those frameworks were built with \"avoiding PEAR\" as one of their main selling points.\n\nWe've come a long way in that time through the proliferation of Composer, and frameworks like Laravel are doing a good job at making the Composer uptake better, but many people in the frameworks communities are bad at making their code work outside of their specific framework environment. Even Laravel 4 itself does not advertise much about how to use its packages outside of Laravel. I wrote about how to do it with the Database package back in [December 2012](http://12devsofxmas.co.uk/2012/12/day-4-mixing-and-matching-php-components-with-composer/) but that was made easier thanks to the Capsule package (later rolled into the core) built by an employee of mine to simplify the bootstrap process. **I mention this not to \"brag\" as somebody suggested, but to highlight that I am very aware that some packages CAN be used alone, but most packages are not as easy to bootstrap as Eloquent, and there is a reason why Eloquent is so easy.** Most L4 packages could benefit from this sort of easier bootstrapping, as it can be pretty tough on some packages, especially something like Pagination which requires an Environment variable, knowledge of the Symfony HttpRequest, Views, etc.\n\nSo if Laravel itself is not advertising its usage outside of Laravel with even the most basic README examples, and so many developers in the community are stuck in this \"I only ever use Laravel for everything, and why do I care if it works with CakePHP\" mindset we're left scarily close to where we were last year - with frameworks that don't play nicely together, and developers who don't build code that works together.\n\nIf you don't believe me, go and have a look at all of the Laravel specific packages on [packagist](https://packagist.org/search/?q=laravel). Some of them are bridge packages for generic code (which is excellent) but many of them are Laravel-only for basically no reason. That makes me sad.\n\nAn example I often use of a framework agnostic package is [Sentry](https://github.com/cartalyst/sentry/) which took the approach of \"build in support for everything\". This is an excellent solution as it means seamless integration for much of it, but certainly can be hard to do. Keeping it generic and linking to bridge packages in the README is another simplistic approach.\n\n[Fractal](https://github.com/php-loep/fractal) is another example, as is any package in [The PHP League of Extraordinary Packages](http://thephpleague.com/). The League is a silly/fun vendor namespace used by me and a group of friends so we can switch responsibilities on projects without having to move them around between ourselves or constantly pull request each other. All of our packages are completely framework agnostic and list bridge-packages in the README. Nice and easy.\n\n**Update:** People have suggested that writing framework agnostic code is something the average person doesn't have time for when they're trying to hit their business goals. Well two things to that:\n\n* It's not actually that hard. All you have to do is make sure your code (other than the service provider) does not directly require a piece of any other framework. NO HARD DEPENDENCIES. That makes testing easier anyway and is already something that most Laravel developers are doing with the repository pattern. If you use the repository pattern, you can easily tuck your framework dependencies behind an interface in a completely identical fashion.\n* Why are you releasing packages at all if you're rushing to hit your business goals? Come back and do that after \"the launch\".\n\n## Developers\n\nSomething that gets my back up is when developers brand themselves as \"Laravel Developers\" or \"CakePHP Developers\" instead of \"PHP Developers\". I have tried suggesting to people that \"Web Developer\" was a better term, but the more CLI, API and parallel work I do the less I feel like that term applies. \"Software Developer\" or \"Software Engineer\" fits like a glove, but regardless of wether you want to go that far: You are not purely a Laravel Developer!\n\nDoing this you are saying to the world: \"I only know FrameworkX.\" Like the JavaScipt developers who only know jQuery, and are therefore probably useless with AngularJS or Backbone. \n\nBy picking only one framework to represent your skills you make yourself less appealing to those who assume you don't have transferable skills. Sure they're wrong, but you just lost out on a potential job offer. After-all, if you are a good enough PHP developer to easily use any framework, why are you listing yourself so specifically with one specific framework? You are a PHP developer who specializes in Laravel, not a Laravel developer.\n\n## Books\n\nEveryone and their dog is writing a book at the moment (myself included) and a popular topic on the internets these days is Laravel. I suggested that if you are writing a book that _could_ be applicable to any framework then you definitely should do that. Obviously a book about \"how to learn Laravel\" should not have a \"to run Migrations in ZF2\", but a book almost anything else does not need a hard requirement on a specific framework. For the same reason packages shouldn't, and because it hurts your sales, hurts the PHP community at large and keeps people trapped in this tribe-like mindset which has been plaguing the PHP community for a decade.\n\nThe same applies to blog posts. An article about Laravel and some piece of technology should probably just be an article about PHP and the technology. This can just come down to SEO. If the only person to write about Neo4j is writing specifically about using it in Laravel then some other PHP developer might not spot it on the search terms and spend a few days trying to work things out for themselves. The number of man-hours wasted by these different PHP tribes doing the same things over and over again is an absolute travesty. \n\n## Resources\n\nThis same logic applies to Laravel community resources. \n\nJeffrey Way unfortunately assumed I was talking about his [Laracast video about community](https://laracasts.com/lessons/laravel-community-crash-course) with my original tweet. Again, not the case. Laracasts plays an incredibly powerful role in releasing high quality training resources for people that want to learn specifically about Laravel, so shoving AuraPHP advice in there might not be something anyone would care about. \n\nTo me it seems that this video was far from being a problem, but was confirmation of everything I've been saying. The intro describes the problem that the video then goes through solving: \"You know the drill, you join some new technical community but you dont yet know who is who or what is what.\" That is exactly the issue here. \n\nThis is what keeps people using their one-true-framework over all others for so long. With all their code in that system, and all their knowledge, and all their friends, and all their RSS feeds, all covering that one community, the thought of moving to another just seems like death.\n\nWe cannot expect all technical communities to be one because they share so little in common. Moving between Python, PHP and Ruby as I do there are certainly very separate communities, but we certainly shouldn't have this wall of confusion between different frameworks in the same language, and it certainly should not be such a large wall that it needs to be put into a video.\nIf I start using some Python framework I might expect to be a little lost learning about where to get my Python news, but I wish we didn't have to have to have any of this confusion between PHP frameworks. \n\nFurther to that, things like the [Laravel Packages Registry](http://registry.autopergamene.eu/) (linked to in the main wiki) are dangerous. Lots of developers coming into the Laravel community are _extremely_ inexperienced as it is all about having a minimal entry level. That is _excellent_ and was one of the biggest selling points of CodeIgniter for all those years, but folks managing various resources in the Laravel have to keep that in mind when making decisions. By making Laravel-only package repositories like this you are training these developers to go and find their packages in this one resource, instead of just… using packagist.\n\nEvery other day I see somebody saying \"Anyone know a good Laravel package for X?\" My answer is usually a link to https://packagist.org/search/?q=X. \n\n## Morals\n\nWhy is this any of my business? Why should you listen to me? Because I spent almost a decade doing this shit and it was awful. CodeIgniter this, CodeIgniter that. I was typecast as the CodeIgniter guy, all of my freelance requests were CodeIgniter. My blog was entirely CodeIgniter, I built APIs in CodeIgniter, I ran gave talks about CodeIgniter, I almost had CodeIgniter stamped on my tombstone.\n\nThen CodeIgniter pissed me off so hard I got involved with creating FuelPHP and using the two taught me some serious lessons about framework agnostic packages. Maintaining codeigniter-oauth2 and fuelphp-oauth2 was enough of a life lesson in itself.\n\nI vowed to never get stuck in that mindset again, and have since been working my arse off on the [PHP Framework Interoperability Group](http://www.php-fig.org) to help make new PSRs, help work on the community issues, get the website improved, create new bylaws to streamline the development of new PSRs, etc.\n\nAll of this work can easily be undermined by people unthinkingly staying in their tribal framework mindset, ignoring the rest of the PHP community and creating too many Laravel-only resources. \n\nAll of you developers. Guess what: In 5 years you probably wont be using the same framework. \n\nThat's not an insult to Laravel, or Taylor, or anyone else from any other framework. I'm just telling you it wont happen.\n\nYou'll change jobs, or something new will come out, or your management will randomly decide to go webscale with NodeJS, or the next version might change too much for you, or not enough for you: whatever. You will need to be ok with changing tools and knocking down the walls between the PHP frameworks by letting people continue to use the same packages and package managers, etc means changing between PHP tools is less drastic and time consuming for everyone. \n\nOne thing I am happy about is Taylor Otwell has learned from the issues of the Kohana community, which not only broke itself in half with the v2/v3 debacle, but isolated itself from the rest of the PHP community with leadership that was often nothing short of obnoxious, but definitely elitist.\n\nLuckily that itself is not happening. Laravel made it through v3 to v4 with minimal pushback and v4.1 is a feature-packed but simple upgrade. The leadership is also generally incredibly friendly… except for when they talk to me like I am just some basic bitch.\n\nBut the other concerns worry me. I don't want any PHP developers wasting their time on tribal bullshit. I don't want people having to spend time relearning over and over again. I don't want developers getting religious about their choice. I don't want people having to port packages to work on other frameworks. All of that is happening, and all of it needs to stop. We are the PHP community and together we are fucking huge. 80% of the internet is ours, and we need to remember to work together instead of fragmenting the community, siloing it with framework specific resources that have no reason to exist.\n\nI just ask that you keep that in mind when you are making decisions; developers and community leaders alike.",
    "created_on": "1388685480",
    "updated_on": "1388685480",
    "status": "live",
    "comments_enabled": "1 week",
    "author_id": "2",
    "keywords": "548343b66f0571cb780e0ef9493a3a6e",
    "type": "markdown",
    "parsed": "<p>Twitter seems to lead to the same thing happening over and over again.</p>\n\n<ol>\n<li>I say something I think is entirely uncontroversial</li>\n<li>People misunderstand and jump to weird conclusions</li>\n<li>Some folks start defending against that weird conclusion</li>\n<li>When I try to explain why they are mistaken, people go reporting to @PHPDrama</li>\n</ol>\n\n<p>Yesterdays comment:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>As much as I understand pushing the &quot;Laravel Community&quot;, content, blogs, etc, can we stop this soloing of efforts and be a PHP community?</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/418553604107431936\">January 2, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>I meant to say \"siloing\", but being half asleep after a 24-hour session in Atlantic City in the back of a minivan with screaming kids meant that I made a mistake. It should still have made sense.</p>\n\n<p>Well, I thought so at least until I had a myriad of bizarre responses from people (mostly the well-known Laravel names) defending and picking issue with things I said, assuming instead of saying something logical I must have meant something moronic. That is rather offensive to me, so let's explain it for them. </p>\n\n<h2>Packages</h2>\n\n<p>If you are building a PHP package then you are faced with two options:</p>\n\n<ol>\n<li>Make it work with your favorite framework</li>\n<li>Make it run with every framework out there</li>\n</ol>\n\n<p>Now, if you pick option 1 then a) you are just trying to save time, or b) you suck. I've been talking about <a href=\"http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php\">framework agnostic packages</a> since early 2012 when Laravel 3 had bundles, CodeIgniter had Sparks, and everyone else had something else just for them. Frameworks didn't have much choice than to build their own solutions because the only other option was PEAR, and most of those frameworks were built with \"avoiding PEAR\" as one of their main selling points.</p>\n\n<p>We've come a long way in that time through the proliferation of Composer, and frameworks like Laravel are doing a good job at making the Composer uptake better, but many people in the frameworks communities are bad at making their code work outside of their specific framework environment. Even Laravel 4 itself does not advertise much about how to use its packages outside of Laravel. I wrote about how to do it with the Database package back in <a href=\"http://12devsofxmas.co.uk/2012/12/day-4-mixing-and-matching-php-components-with-composer/\">December 2012</a> but that was made easier thanks to the Capsule package (later rolled into the core) built by an employee of mine to simplify the bootstrap process. <strong>I mention this not to \"brag\" as somebody suggested, but to highlight that I am very aware that some packages CAN be used alone, but most packages are not as easy to bootstrap as Eloquent, and there is a reason why Eloquent is so easy.</strong> Most L4 packages could benefit from this sort of easier bootstrapping, as it can be pretty tough on some packages, especially something like Pagination which requires an Environment variable, knowledge of the Symfony HttpRequest, Views, etc.</p>\n\n<p>So if Laravel itself is not advertising its usage outside of Laravel with even the most basic README examples, and so many developers in the community are stuck in this \"I only ever use Laravel for everything, and why do I care if it works with CakePHP\" mindset we're left scarily close to where we were last year - with frameworks that don't play nicely together, and developers who don't build code that works together.</p>\n\n<p>If you don't believe me, go and have a look at all of the Laravel specific packages on <a href=\"https://packagist.org/search/?q=laravel\">packagist</a>. Some of them are bridge packages for generic code (which is excellent) but many of them are Laravel-only for basically no reason. That makes me sad.</p>\n\n<p>An example I often use of a framework agnostic package is <a href=\"https://github.com/cartalyst/sentry/\">Sentry</a> which took the approach of \"build in support for everything\". This is an excellent solution as it means seamless integration for much of it, but certainly can be hard to do. Keeping it generic and linking to bridge packages in the README is another simplistic approach.</p>\n\n<p><a href=\"https://github.com/php-loep/fractal\">Fractal</a> is another example, as is any package in <a href=\"http://thephpleague.com/\">The PHP League of Extraordinary Packages</a>. The League is a silly/fun vendor namespace used by me and a group of friends so we can switch responsibilities on projects without having to move them around between ourselves or constantly pull request each other. All of our packages are completely framework agnostic and list bridge-packages in the README. Nice and easy.</p>\n\n<p><strong>Update:</strong> People have suggested that writing framework agnostic code is something the average person doesn't have time for when they're trying to hit their business goals. Well two things to that:</p>\n\n<ul>\n<li>It's not actually that hard. All you have to do is make sure your code (other than the service provider) does not directly require a piece of any other framework. NO HARD DEPENDENCIES. That makes testing easier anyway and is already something that most Laravel developers are doing with the repository pattern. If you use the repository pattern, you can easily tuck your framework dependencies behind an interface in a completely identical fashion.</li>\n<li>Why are you releasing packages at all if you're rushing to hit your business goals? Come back and do that after \"the launch\".</li>\n</ul>\n\n<h2>Developers</h2>\n\n<p>Something that gets my back up is when developers brand themselves as \"Laravel Developers\" or \"CakePHP Developers\" instead of \"PHP Developers\". I have tried suggesting to people that \"Web Developer\" was a better term, but the more CLI, API and parallel work I do the less I feel like that term applies. \"Software Developer\" or \"Software Engineer\" fits like a glove, but regardless of wether you want to go that far: You are not purely a Laravel Developer!</p>\n\n<p>Doing this you are saying to the world: \"I only know FrameworkX.\" Like the JavaScipt developers who only know jQuery, and are therefore probably useless with AngularJS or Backbone. </p>\n\n<p>By picking only one framework to represent your skills you make yourself less appealing to those who assume you don't have transferable skills. Sure they're wrong, but you just lost out on a potential job offer. After-all, if you are a good enough PHP developer to easily use any framework, why are you listing yourself so specifically with one specific framework? You are a PHP developer who specializes in Laravel, not a Laravel developer.</p>\n\n<h2>Books</h2>\n\n<p>Everyone and their dog is writing a book at the moment (myself included) and a popular topic on the internets these days is Laravel. I suggested that if you are writing a book that <em>could</em> be applicable to any framework then you definitely should do that. Obviously a book about \"how to learn Laravel\" should not have a \"to run Migrations in ZF2\", but a book almost anything else does not need a hard requirement on a specific framework. For the same reason packages shouldn't, and because it hurts your sales, hurts the PHP community at large and keeps people trapped in this tribe-like mindset which has been plaguing the PHP community for a decade.</p>\n\n<p>The same applies to blog posts. An article about Laravel and some piece of technology should probably just be an article about PHP and the technology. This can just come down to SEO. If the only person to write about Neo4j is writing specifically about using it in Laravel then some other PHP developer might not spot it on the search terms and spend a few days trying to work things out for themselves. The number of man-hours wasted by these different PHP tribes doing the same things over and over again is an absolute travesty. </p>\n\n<h2>Resources</h2>\n\n<p>This same logic applies to Laravel community resources. </p>\n\n<p>Jeffrey Way unfortunately assumed I was talking about his <a href=\"https://laracasts.com/lessons/laravel-community-crash-course\">Laracast video about community</a> with my original tweet. Again, not the case. Laracasts plays an incredibly powerful role in releasing high quality training resources for people that want to learn specifically about Laravel, so shoving AuraPHP advice in there might not be something anyone would care about. </p>\n\n<p>To me it seems that this video was far from being a problem, but was confirmation of everything I've been saying. The intro describes the problem that the video then goes through solving: \"You know the drill, you join some new technical community but you dont yet know who is who or what is what.\" That is exactly the issue here. </p>\n\n<p>This is what keeps people using their one-true-framework over all others for so long. With all their code in that system, and all their knowledge, and all their friends, and all their RSS feeds, all covering that one community, the thought of moving to another just seems like death.</p>\n\n<p>We cannot expect all technical communities to be one because they share so little in common. Moving between Python, PHP and Ruby as I do there are certainly very separate communities, but we certainly shouldn't have this wall of confusion between different frameworks in the same language, and it certainly should not be such a large wall that it needs to be put into a video.\nIf I start using some Python framework I might expect to be a little lost learning about where to get my Python news, but I wish we didn't have to have to have any of this confusion between PHP frameworks. </p>\n\n<p>Further to that, things like the <a href=\"http://registry.autopergamene.eu/\">Laravel Packages Registry</a> (linked to in the main wiki) are dangerous. Lots of developers coming into the Laravel community are <em>extremely</em> inexperienced as it is all about having a minimal entry level. That is <em>excellent</em> and was one of the biggest selling points of CodeIgniter for all those years, but folks managing various resources in the Laravel have to keep that in mind when making decisions. By making Laravel-only package repositories like this you are training these developers to go and find their packages in this one resource, instead of just… using packagist.</p>\n\n<p>Every other day I see somebody saying \"Anyone know a good Laravel package for X?\" My answer is usually a link to https://packagist.org/search/?q=X. </p>\n\n<h2>Morals</h2>\n\n<p>Why is this any of my business? Why should you listen to me? Because I spent almost a decade doing this shit and it was awful. CodeIgniter this, CodeIgniter that. I was typecast as the CodeIgniter guy, all of my freelance requests were CodeIgniter. My blog was entirely CodeIgniter, I built APIs in CodeIgniter, I ran gave talks about CodeIgniter, I almost had CodeIgniter stamped on my tombstone.</p>\n\n<p>Then CodeIgniter pissed me off so hard I got involved with creating FuelPHP and using the two taught me some serious lessons about framework agnostic packages. Maintaining codeigniter-oauth2 and fuelphp-oauth2 was enough of a life lesson in itself.</p>\n\n<p>I vowed to never get stuck in that mindset again, and have since been working my arse off on the <a href=\"http://www.php-fig.org\">PHP Framework Interoperability Group</a> to help make new PSRs, help work on the community issues, get the website improved, create new bylaws to streamline the development of new PSRs, etc.</p>\n\n<p>All of this work can easily be undermined by people unthinkingly staying in their tribal framework mindset, ignoring the rest of the PHP community and creating too many Laravel-only resources. </p>\n\n<p>All of you developers. Guess what: In 5 years you probably wont be using the same framework. </p>\n\n<p>That's not an insult to Laravel, or Taylor, or anyone else from any other framework. I'm just telling you it wont happen.</p>\n\n<p>You'll change jobs, or something new will come out, or your management will randomly decide to go webscale with NodeJS, or the next version might change too much for you, or not enough for you: whatever. You will need to be ok with changing tools and knocking down the walls between the PHP frameworks by letting people continue to use the same packages and package managers, etc means changing between PHP tools is less drastic and time consuming for everyone. </p>\n\n<p>One thing I am happy about is Taylor Otwell has learned from the issues of the Kohana community, which not only broke itself in half with the v2/v3 debacle, but isolated itself from the rest of the PHP community with leadership that was often nothing short of obnoxious, but definitely elitist.</p>\n\n<p>Luckily that itself is not happening. Laravel made it through v3 to v4 with minimal pushback and v4.1 is a feature-packed but simple upgrade. The leadership is also generally incredibly friendly… except for when they talk to me like I am just some basic bitch.</p>\n\n<p>But the other concerns worry me. I don't want any PHP developers wasting their time on tribal bullshit. I don't want people having to spend time relearning over and over again. I don't want developers getting religious about their choice. I don't want people having to port packages to work on other frameworks. All of that is happening, and all of it needs to stop. We are the PHP community and together we are fucking huge. 80% of the internet is ours, and we need to remember to work together instead of fragmenting the community, siloing it with framework specific resources that have no reason to exist.</p>\n\n<p>I just ask that you keep that in mind when you are making decisions; developers and community leaders alike.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "175",
    "created": "2014-01-03 23:27:00",
    "updated": "2014-01-03 23:27:00",
    "created_by": "2",
    "ordering_count": "28",
    "title": "Composer now supports PSR-4",
    "slug": "composer-now-supports-psr4",
    "category_id": "2",
    "attachment": "",
    "intro": "I haven&#39;t really posted about PSR-4 here, but if you follow me on Twitter or hang out on Reddit you&#39;ve probably seen some news about it.&nbsp;PSR-4 was voted in as an &quot;accepted&quot; PSR by the FIG in December. It took a little while to get done and went through a series of painful rewrites but when we have in the end is a document that reflects what this truly is: an improvement on PSR-0. Time to upgrade your packages, but don&#39;t release them just yet.",
    "body": "I haven't really posted about PSR-4 here other than as a footnote in [this old article](http://philsturgeon.co.uk/blog/2013/05/composer-and-psr0-friends-not-relatives), but if you follow me on Twitter or hang out on Reddit you've probably seen some news about it. \n\n[PSR-4](http://www.php-fig.org/psr/psr-4/) was voted in as an \"accepted\" PSR by the FIG in December. It took a little while to get done and went through a series of painful rewrites but when we have in the end is a document that reflects what this truly is: an improvement on PSR-0.\n\nToday [Jordi Boggiano](https://twitter.com/Seldaek) merged a [pull request](https://github.com/composer/composer/pull/2459) by [Andreas Hennings](https://github.com/donquixote) into master branch of Composer that contained support for PSR-4. Andreas was a massive help to the FIG while we were trying to shake the issues out of PSR-4 during Draft and Review stages, so he really outdone himself by providing the code too.\n\nJordi wrote a blog about why you don't want to switch all of your packages immediately to [PSR-4](http://seld.be/notes/psr-4-autoloading-support-in-composer) as many users won't be reminded to update for another 30 days, so for now I am suggesting people create a feature branch called \"feature/psr4\" for those who want to try it out, to get their packages and unit-tests ready for February 4th 2014 - when it will be \"PSR-4 Upgrade Day\".\n\nConverting is easy as hell. Take a look at [Fractal feature/psr4](https://github.com/php-loep/fractal/tree/feature/psr4) to see how to do it yourself.\n\nThe [Composer Autoload documentation](http://getcomposer.org/doc/04-schema.md#autoload) is already updated for PSR-4 too.\n\nPlease post up here in the comments or on Twitter if you upgrade your package(s) to PSR-4. I'd love to make a list of early adopters on here, and maybe make it into another article in a few weeks.",
    "created_on": "1388791620",
    "updated_on": "1388791620",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "01fd12782d81b670a656f223679fcb5e",
    "type": "markdown",
    "parsed": "<p>I haven't really posted about PSR-4 here other than as a footnote in <a href=\"http://philsturgeon.co.uk/blog/2013/05/composer-and-psr0-friends-not-relatives\">this old article</a>, but if you follow me on Twitter or hang out on Reddit you've probably seen some news about it. </p>\n\n<p><a href=\"http://www.php-fig.org/psr/psr-4/\">PSR-4</a> was voted in as an \"accepted\" PSR by the FIG in December. It took a little while to get done and went through a series of painful rewrites but when we have in the end is a document that reflects what this truly is: an improvement on PSR-0.</p>\n\n<p>Today <a href=\"https://twitter.com/Seldaek\">Jordi Boggiano</a> merged a <a href=\"https://github.com/composer/composer/pull/2459\">pull request</a> by <a href=\"https://github.com/donquixote\">Andreas Hennings</a> into master branch of Composer that contained support for PSR-4. Andreas was a massive help to the FIG while we were trying to shake the issues out of PSR-4 during Draft and Review stages, so he really outdone himself by providing the code too.</p>\n\n<p>Jordi wrote a blog about why you don't want to switch all of your packages immediately to <a href=\"http://seld.be/notes/psr-4-autoloading-support-in-composer\">PSR-4</a> as many users won't be reminded to update for another 30 days, so for now I am suggesting people create a feature branch called \"feature/psr4\" for those who want to try it out, to get their packages and unit-tests ready for February 4th 2014 - when it will be \"PSR-4 Upgrade Day\".</p>\n\n<p>Converting is easy as hell. Take a look at <a href=\"https://github.com/php-loep/fractal/tree/feature/psr4\">Fractal feature/psr4</a> to see how to do it yourself.</p>\n\n<p>The <a href=\"http://getcomposer.org/doc/04-schema.md#autoload\">Composer Autoload documentation</a> is already updated for PSR-4 too.</p>\n\n<p>Please post up here in the comments or on Twitter if you upgrade your package(s) to PSR-4. I'd love to make a list of early adopters on here, and maybe make it into another article in a few weeks.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "176",
    "created": "2014-01-04 16:31:00",
    "updated": "2014-01-04 16:31:00",
    "created_by": "2",
    "ordering_count": "29",
    "title": "Negative Feedback: The Good, The Bad and The Ugly",
    "slug": "negative-feedback-the-good-the-bad-and-the-ugly",
    "category_id": "1",
    "attachment": "",
    "intro": "Learning to handle negative feedback is one of the most difficult mental challenges I have ever tried to go through. Lots of people can&#39;t handle it at all and flip out. I have - in the past - been great at this thanks to some sage advice from some very smart people. Sadly I have recently lost my cool a few times, mostly down to around being called arrogant or egotistical, which is actually down to following the advice given to me by those smart people. I&#39;d like to shed a little insight on that. Maybe it will help you avoid it, or at least give you something to think about.",
    "body": "Learning to handle negative feedback is one of the most difficult mental challenges I have ever tried to go through. Lots of people can't handle it at all and flip out. I have - in the past - been great at this thanks to some sage advice from some very smart people. Sadly I have recently lost my cool a few times, mostly down to around being called arrogant or egotistical, which is actually down to following the advice given to me by those smart people. I'd like to shed a little insight on that. Maybe it will help you avoid it, or at least give you something to think about.\n\nTwo pieces of advice are the main factors of how I handle myself online, in regards to feedback both incoming and outgoing. \n\n## Know Your Audience\n\nI was lucky enough to be part of a 20-person group Skype-call with Dennis Crowley, a co-founder of Foursquare. This was part of some advisor/mentorship stuff happening at a startup incubator called [ignite100](http://ignite100.com/) back in 2011, for which I was contracted to one of the teams. \n\n_Not a brag, I never said a word, just listened to the advice and questions asked by those more brave than I._\n\nHe said in the early days of Foursquare he would absolutely troll \"foursquare\" on Twitter, Facebook and anywhere else looking for feedback. If someone was happy about it he would spread that feedback around amongst the team as motivation. If somebody was sad he would get in touch to find out why and see if he could improve their situation.\n\nHe explained that finding out _why_ somebody has negative feedback is amazingly powerful. Even if they are rage tweeting without specifics, while your first reaction might be to hate them you should try to find out _why_ they are sad/angry/annoyed/frustrated you can fix it. If you can fix a problem for somebody you can turn them into your biggest ally or evangelist. \n\nWhoever it was this advice came at me from a few people at roughly the same time and it was taken very much to heart. It helped out _drastically_ when working on [PyroCMS](http://pyrocms.com/), [PancakeApp](http://pancakeapp.com), [FuelPHP](http://fuelphp.com/) and a few other projects I was lucky enough to be part of now and then.\n\nWhenever you work for a CMS, framework, or product of any sort - you're going to need to expect haters. A _lot_ of haters. They come in hoards. If you are ready to ask them what their issue is you can turn things around and get some truly valuable feedback from them - which is actually why I post on Reddit. Lots of haters, occasional nuggets of amazing feedback I never would have thought of - good or bad. In some examples that previously pissed off user was complaining about a missing feature which we would then consider adding, and were in the end so happy with the implementation of their feedback that they became proponents of the product. Some went so far as to become unofficial evangelists leading in some cases to hundreds of extra sales.\n\nOn the flip side of course there is the chance that they have no useful feedback to give. If they are unable to explain their complaints then guess what: they are just they are just noise with no valid complaint. This is the same message that came from Dennis, and has really proved true in the last few years of my involvement in these projects. \n\nIf you have a valid concern, you'll be happy to share it in a constructive way. I will have all the time for you in the world, I will talk to you on Skype about what it is that can be done to resolve your problems or help make the situation better. If you have no valid concern and you have nothing to share, you are therefore just being a cock and I have no time for you at all.\n\nThis is one of the most valuable lessons I have held onto and it has got me a long way in the last few years. \n\n## Absolute Honesty\n\nI have always been raised to believe that absolute honesty is key. Bear with me on this, it's getting a little bit \"emo\" as I'm going to talk about my mother. Seriously. Keep going.\n\nI have a mother, father and sister who I love dearly. We're all one big happy family. My mother taught me that honesty was always key, and during childhood I ignored that like any other child. As I grew older I started to learn the value to the extent that I got in a few fights, lost a few friends, but eventually became a better person.\n\nShe'd ask me how she looked in a certain outfit. My sister would say she looked great even when she knew my mother didn't to avoid hurting her feelings. I'd give her my honest answer regardless. At first she'd be sad that she had to change, but as we grew older she would stop asking my sister and just come to me for feedback because she knew for a fact that regardless of anything else I would be completely honest with her about my opinions and it eventually made her happy. \n\nShe both respected and appreciated that and I take this through into grownup life, doing it with my friends and colleagues. If anyone I consider to be a friend is doing something shitty, I'm going to tell them, and the vast majority of the time they thank me for the feedback because I do it in a constructive way: providing options and solutions, not just baseless \"X sucks\" sort of way.\n\nI consider a large number of framework and CMS developers to be my friends. Hell, I just went drinking with developers from the core team of Lithium and CakePHP and we had a blast. They give me as much feedback as I give them. We don't always agree but a) it would be weird if we did, and b) we appreciate the honesty from our peers.\n\n_Not an arrogant comment, I happen to live in NYC now and there are a bunch of developers floating around here that like beer._\n\n## I recently cannot win\n\nSome called me egotistical for writing an article about reactions to that Laravel tweet accidentally angered the masses. They said who cares about the tweet, even though upwards of 20 people were freaking out assuming I was insulting people who I consider friends - the same friends who are helping me with a visa, and who I care about.\n\nSome have called me a coward for retracting my \"previous attacks\" after the community response, but that is impossible: _THERE WERE NEVER ANY ATTACKS_. I tried to cover this with explaining I consider myself friends with people like Taylor and Jeffrey and we talk on Skype a fair bit. Apparently that was arrogant too.\n\nSome people were saying I should read the docs, then when I pointed out I've been building applications in Laravel 4 since before there were docs that is apparently egotistical.\n\nSome people say I hate Laravel then when I point out I've given talks at various conferences about how I think it is great (one of them was literally called [Why I <3 Laravel 4](http://lanyrd.com/2012/true-north-php-conference/scctcc/#link-wyzf)), that is apparently arrogant.\n\nSome people tried to explain that obviously you can use components like Eloquent outside of Laravel easily, but when I tried to explain that I knew that well due to it being written by an employee of mine - and he had only done it for that one package - that was apparently unnecessary gloating...\n\nSome people will say I should simply ignore it all, and let the character assassination continue unchecked.\n\nThe one thing I wont do is ever stop doing what I do:\n\n* I write blogs about things I see, think, feel and do\n* I help out at the FIG\n* I report bugs when I find them\n* I patch broken shit whenever I can\n* I write books about my experiences if people think it has value\n* I record screencasts to share complicated subjects that are hard to portray with written words\n* I advise people that ask for it, free and paid\n* I correct people who are spreading FUD, outdated or dangerous advice\n* I support my friends, and their projects, as much as I possibly can\n* I point out when good things are good\n* I point out when bad things are bad\n* I point out when dickheads are being dickheads\n* I will thank anyone who proves me wrong, or gives me constructive criticism, redacting, tweeting, re-blogging and swallowing my words if needs be\n* I let people I respect poke fun at me and my projects publicly\n* I will tell people I don't know to shut the fuck up if they belittle me for no reason\n\nThese are my directives, and you should define your own. Doing so helps you keep a handle on what you're doing and where you're going. \n\nWriting this list helped me remember the things that are important, so when trolls get me down I can check back at the list. If they are complaining about me doing something on here then... well that is their problem, because that is who I am.\n\n## Advice\n\nLet this be something to think about if you wish to get into blogging. It's generally amazingly helpful for your career, but you'd be amazed at what you think is a simple comment or logical point can be interpreted in ways you had never even conceived. After years of blogging I still can't work out what issues people will pick with something, but it's always worth trying to cover as many angles of attack as possible in the first round and using other conversations to arm yourself against more potential attacks next time.\n\nBut, even trying to write in a forward thinking manner, you will never protected against everything. If somebody really wants to troll you, they'll find a way.\n\nBack to tech in the next post. I have an article on \"real-world\" Composer usage and \"Using PyroCMS with PostgreSQL and Heorku\" to come.",
    "created_on": "1388853060",
    "updated_on": "1388853060",
    "status": "draft",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p>Learning to handle negative feedback is one of the most difficult mental challenges I have ever tried to go through. Lots of people can't handle it at all and flip out. I have - in the past - been great at this thanks to some sage advice from some very smart people. Sadly I have recently lost my cool a few times, mostly down to around being called arrogant or egotistical, which is actually down to following the advice given to me by those smart people. I'd like to shed a little insight on that. Maybe it will help you avoid it, or at least give you something to think about.</p>\n\n<p>Two pieces of advice are the main factors of how I handle myself online, in regards to feedback both incoming and outgoing. </p>\n\n<h2>Know Your Audience</h2>\n\n<p>I was lucky enough to be part of a 20-person group Skype-call with Dennis Crowley, a co-founder of Foursquare. This was part of some advisor/mentorship stuff happening at a startup incubator called <a href=\"http://ignite100.com/\">ignite100</a> back in 2011, for which I was contracted to one of the teams. </p>\n\n<p><em>Not a brag, I never said a word, just listened to the advice and questions asked by those more brave than I.</em></p>\n\n<p>He said in the early days of Foursquare he would absolutely troll \"foursquare\" on Twitter, Facebook and anywhere else looking for feedback. If someone was happy about it he would spread that feedback around amongst the team as motivation. If somebody was sad he would get in touch to find out why and see if he could improve their situation.</p>\n\n<p>He explained that finding out <em>why</em> somebody has negative feedback is amazingly powerful. Even if they are rage tweeting without specifics, while your first reaction might be to hate them you should try to find out <em>why</em> they are sad/angry/annoyed/frustrated you can fix it. If you can fix a problem for somebody you can turn them into your biggest ally or evangelist. </p>\n\n<p>Whoever it was this advice came at me from a few people at roughly the same time and it was taken very much to heart. It helped out <em>drastically</em> when working on <a href=\"http://pyrocms.com/\">PyroCMS</a>, <a href=\"http://pancakeapp.com\">PancakeApp</a>, <a href=\"http://fuelphp.com/\">FuelPHP</a> and a few other projects I was lucky enough to be part of now and then.</p>\n\n<p>Whenever you work for a CMS, framework, or product of any sort - you're going to need to expect haters. A <em>lot</em> of haters. They come in hoards. If you are ready to ask them what their issue is you can turn things around and get some truly valuable feedback from them - which is actually why I post on Reddit. Lots of haters, occasional nuggets of amazing feedback I never would have thought of - good or bad. In some examples that previously pissed off user was complaining about a missing feature which we would then consider adding, and were in the end so happy with the implementation of their feedback that they became proponents of the product. Some went so far as to become unofficial evangelists leading in some cases to hundreds of extra sales.</p>\n\n<p>On the flip side of course there is the chance that they have no useful feedback to give. If they are unable to explain their complaints then guess what: they are just they are just noise with no valid complaint. This is the same message that came from Dennis, and has really proved true in the last few years of my involvement in these projects. </p>\n\n<p>If you have a valid concern, you'll be happy to share it in a constructive way. I will have all the time for you in the world, I will talk to you on Skype about what it is that can be done to resolve your problems or help make the situation better. If you have no valid concern and you have nothing to share, you are therefore just being a cock and I have no time for you at all.</p>\n\n<p>This is one of the most valuable lessons I have held onto and it has got me a long way in the last few years. </p>\n\n<h2>Absolute Honesty</h2>\n\n<p>I have always been raised to believe that absolute honesty is key. Bear with me on this, it's getting a little bit \"emo\" as I'm going to talk about my mother. Seriously. Keep going.</p>\n\n<p>I have a mother, father and sister who I love dearly. We're all one big happy family. My mother taught me that honesty was always key, and during childhood I ignored that like any other child. As I grew older I started to learn the value to the extent that I got in a few fights, lost a few friends, but eventually became a better person.</p>\n\n<p>She'd ask me how she looked in a certain outfit. My sister would say she looked great even when she knew my mother didn't to avoid hurting her feelings. I'd give her my honest answer regardless. At first she'd be sad that she had to change, but as we grew older she would stop asking my sister and just come to me for feedback because she knew for a fact that regardless of anything else I would be completely honest with her about my opinions and it eventually made her happy. </p>\n\n<p>She both respected and appreciated that and I take this through into grownup life, doing it with my friends and colleagues. If anyone I consider to be a friend is doing something shitty, I'm going to tell them, and the vast majority of the time they thank me for the feedback because I do it in a constructive way: providing options and solutions, not just baseless \"X sucks\" sort of way.</p>\n\n<p>I consider a large number of framework and CMS developers to be my friends. Hell, I just went drinking with developers from the core team of Lithium and CakePHP and we had a blast. They give me as much feedback as I give them. We don't always agree but a) it would be weird if we did, and b) we appreciate the honesty from our peers.</p>\n\n<p><em>Not an arrogant comment, I happen to live in NYC now and there are a bunch of developers floating around here that like beer.</em></p>\n\n<h2>I recently cannot win</h2>\n\n<p>Some called me egotistical for writing an article about reactions to that Laravel tweet accidentally angered the masses. They said who cares about the tweet, even though upwards of 20 people were freaking out assuming I was insulting people who I consider friends - the same friends who are helping me with a visa, and who I care about.</p>\n\n<p>Some have called me a coward for retracting my \"previous attacks\" after the community response, but that is impossible: <em>THERE WERE NEVER ANY ATTACKS</em>. I tried to cover this with explaining I consider myself friends with people like Taylor and Jeffrey and we talk on Skype a fair bit. Apparently that was arrogant too.</p>\n\n<p>Some people were saying I should read the docs, then when I pointed out I've been building applications in Laravel 4 since before there were docs that is apparently egotistical.</p>\n\n<p>Some people say I hate Laravel then when I point out I've given talks at various conferences about how I think it is great (one of them was literally called <a href=\"http://lanyrd.com/2012/true-north-php-conference/scctcc/#link-wyzf\">Why I &lt;3 Laravel 4</a>), that is apparently arrogant.</p>\n\n<p>Some people tried to explain that obviously you can use components like Eloquent outside of Laravel easily, but when I tried to explain that I knew that well due to it being written by an employee of mine - and he had only done it for that one package - that was apparently unnecessary gloating...</p>\n\n<p>Some people will say I should simply ignore it all, and let the character assassination continue unchecked.</p>\n\n<p>The one thing I wont do is ever stop doing what I do:</p>\n\n<ul>\n<li>I write blogs about things I see, think, feel and do</li>\n<li>I help out at the FIG</li>\n<li>I report bugs when I find them</li>\n<li>I patch broken shit whenever I can</li>\n<li>I write books about my experiences if people think it has value</li>\n<li>I record screencasts to share complicated subjects that are hard to portray with written words</li>\n<li>I advise people that ask for it, free and paid</li>\n<li>I correct people who are spreading FUD, outdated or dangerous advice</li>\n<li>I support my friends, and their projects, as much as I possibly can</li>\n<li>I point out when good things are good</li>\n<li>I point out when bad things are bad</li>\n<li>I point out when dickheads are being dickheads</li>\n<li>I will thank anyone who proves me wrong, or gives me constructive criticism, redacting, tweeting, re-blogging and swallowing my words if needs be</li>\n<li>I let people I respect poke fun at me and my projects publicly</li>\n<li>I will tell people I don't know to shut the fuck up if they belittle me for no reason</li>\n</ul>\n\n<p>These are my directives, and you should define your own. Doing so helps you keep a handle on what you're doing and where you're going. </p>\n\n<p>Writing this list helped me remember the things that are important, so when trolls get me down I can check back at the list. If they are complaining about me doing something on here then... well that is their problem, because that is who I am.</p>\n\n<h2>Advice</h2>\n\n<p>Let this be something to think about if you wish to get into blogging. It's generally amazingly helpful for your career, but you'd be amazed at what you think is a simple comment or logical point can be interpreted in ways you had never even conceived. After years of blogging I still can't work out what issues people will pick with something, but it's always worth trying to cover as many angles of attack as possible in the first round and using other conversations to arm yourself against more potential attacks next time.</p>\n\n<p>But, even trying to write in a forward thinking manner, you will never protected against everything. If somebody really wants to troll you, they'll find a way.</p>\n\n<p>Back to tech in the next post. I have an article on \"real-world\" Composer usage and \"Using PyroCMS with PostgreSQL and Heorku\" to come.</p>\n",
    "preview_hash": "32c1b391e8850d5cd336c1015cff1c88"
  },
  {
    "id": "178",
    "created": "2014-01-13 22:15:00",
    "updated": "2014-01-13 22:15:00",
    "created_by": "2",
    "ordering_count": "31",
    "title": "The &quot;Framework&quot; is Dead, Long live the Framework",
    "slug": "the-framework-is-dead-long-live-the-framework",
    "category_id": "2",
    "attachment": "",
    "intro": "There have been a few posts over the last few months saying that the age of the framework is dead, and that Composer is the true savior, and other similar messages. This is half-true, but lots of people have been using the word &quot;framework&quot; differently over the years and I wanted to really work out a good definition of what a &quot;framework&quot; was in relation to PHP development, and in relation to these discussions.&nbsp;",
    "body": "There have been a few posts over the last few months saying that the age of the framework is dead, and that Composer is the true savior, and other similar messages. This is half-true, but lots of people have been using the word \"framework\" differently over the years and I wanted to really work out a good definition of what a \"framework\" was in relation to PHP development, and in relation to these discussions.\n\nI had my own idea of what a framework really meant, but after reading an article by Brandon Savage, named [You don't need a framework](http://www.brandonsavage.net/you-dont-need-a-framework/) I felt really confused. \n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> My stance: people have been using FW wrong for years. FW is the architecture. Libraries are the &quot;components&quot;...</p>&mdash; Anthony Ferrara (@ircmaxell) <a href=\"https://twitter.com/ircmaxell/statuses/421061661311508480\">January 8, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nIf you read through that thread I was certainly wrong about a few bits and didn't immediately notice, but as I said I was genuinely confused. This conversation helped me get my own definition clear in my head, and now I think it is a good one.\n\n**Frameworks dictate architecture, handle your bootstrapping and essentially give you a set of lines to color inside.**\n\nComponents, libraries and packages are all interchangeable-ish words that can add functionality to a framework, but really are not A) part of the framework, or B) a framework themselves. \n\n## Back in Time\n\nI got on the PHP framework train with CodeIgniter back in 2006. Before that I was munging together abominations with phpBB, Postnuke and all sorts of other systems that did not make for clean living as a programmer. \n\nCodeIgniter came around and it had two clear goals:\n\n* Provide a clean \"OOP\" architecture for your applications\n* Avoid systems like PEAR, bundling lots of useful components with it\n\nCakePHP and the other similar systems were all doing the same around the same time, some before and some shortly after.\n\nThat was the beginning of 8 years of thousands of us using the term \"framework\" incorrectly.\n\nCodeIgniter is a framework. CodeIgniter had a bunch of libraries including file uploads and a query builder. File uploads and the query builder were not part of the framework, they were simply bundled with it because dependency management at the time was shitty. If it wasn't bundled then it would need to be PEAR or some other ZIP download, which would be awful.\n\nKohana is a framework. It added an ORM. People said Kohana was a better framework **because** it had an ORM. Wrong, it might have been a better framework **and** it just so happened to have an ORM bundled with it, which made it a nice ZIP file to use.\n\n## Modern Frameworks\n\nThings like Zend Framework and SF2 are clearly a bunch of components, but call themselves frameworks.\n\n> Basically, a framework consists of:  \n> **A toolbox** - a set of prefabricated, rapidly integratable software components. This means that you will have to write less code, with less risk of error. This also means greater productivity and the ability to devote more time to doing those things which provide greater added value, such as managing guiding principles, side effects, etc.  \n> **A methodology** – an \"assembly diagram\" for applications. A structured approach may seem constraining at first. But in reality it allows developers to work both efficiently and effectively on the most complex aspects of a task, and the use of Best Practices guarantees the stability, maintainability and upgradeability of the applications you develop.\n\n**[Source](http://symfony.com/at-a-glance)**\n\nThat seems to me to be the old definition of a PHP framework, back in the days where we used to bundle all of our shit together in a ZIP file. That was SF1, so is it possible for SF2 they just kept the name because it was easier? \n\n### FuelPHP\n\nThe name FuelPHP applies to a component vendor AND a framework.\n\n* [fuelphp](https://github.com/fuelphp) - A collection of components.\n* [fuelphp/fuelphp](https://github.com/fuelphp/fuelphp/) - This is a sample application which defines the architecture of your code. This is \"correctly\" described called a framework.\n* [fuelphp/foundation](https://github.com/fuelphp/foundation) - This is required by the framework to run, but is not a framework by itself, just an important component.\n\n### Laravel\n\nLaravel is a framework, but not a component vendor. It uses a component vendor called Illuminate.\n\n* [illuminate](https://github.com/illuminate) - A collection of components. I'd call this the \"Component Vendor\".\n* [laravel/laravel](https://github.com/laravel/laravel/) - This is a \"sample application\", which would be better named as \"framework\"\n* [laravel/framework](https://github.com/laravel/framework) - Unfortunately named. This should be something other than \"framework\", like \"foundation\" or \"kernel\". \n\n_I mentioned that to Taylor, and he agreed but wasn't too fussed. It's not a complaint, I just wanted to point out how it fits in with this definition. IM NOT ATTACKING YOU LARAVEL PEOPLE. ;-)_\n\n### Aura\n\nThe name Aura is a component vendor AND a framework. More specifically, one of the Aura components is called \"Aura Framework\".\n\n* [Packages v2](http://auraphp.com/packages/v2)\n* [Framework](https://github.com/auraphp/Aura.Framework_Project)\n\nAgain, Aura points out the different between the two things, even if it does happen to share the same name.\n\n### Semantic Wankery?\n\nMaybe. I didn't start this conversation to argue the meaning of vague terms, I did however want to know if I agreed or disagreed with Brandon, and it turns out the answer is… both.\n\n> ... we all preached a common message of “you need to adopt one of the common, established frameworks! Don’t do it alone!”\n> This message makes a lot of sense. Developing your own framework limits your options and opens you up to security problems and architectural challenges that most of the other frameworks are already solving. Not to mention the fact that most of the time, adding a collective set of brains together results in a better product. And I’ll be the first to admit I don’t want to compete with Matthew Weier O’Phinney in a battle of intellect; he’s smarter than I am.\n\nAbsolutely. Sure [Reinventing the Wheel](http://blog.ircmaxell.com/2012/08/reinvent-wheel.html) can be a great move if you are interested in learning how things are done, but putting your home-made framework into production can be scary if you're a junior dev. You're potentially opening yourself up to all sorts of security issues that just don't need to be toyed with.\n\nAnd Brandon is of course right that dependency managers have given us the return of components which can be used outside of frameworks, as Composer (PEAR on crack, but… smart too) helped developers distribute code outside of just lumping it into a framework.\n\nBut where we start to disagree a bit is right here:\n\n> New libraries like Aura allow for the integration of framework-like components without the heavy framework. \n\nWith Composer becoming considerably more widespread, ALL major frameworks short of CodeIgniter (trollololol) have moved their components out into separate packages, meaning this whole \"heavy framework\" is: \"the application architecture\" + \"whatever components your application structure would like\".\n\nSo, the application architecture IS the framework. The rest of it is components. \n\nBrandon here is suggesting that we don't need the \"framework\" anymore because we can just use components and make our own application layer. But... the application layer **is** the framework.\n\nSo going by the \"correct\" definition of a PHP framework, Brandon is actually suggesting that we code our own frameworks - something that he at the start of the article advised against:\n\n> Developing your own framework limits your options and opens you up to security problems and architectural challenges that most of the other frameworks are already solving.\n\nSee why the article caused some confusion? \n\n### Framework GOOD or Framework BAD?\n\nSo, old-style \"heavy frameworks\" no longer exist. GREAT. In retrospect, those things fucking sucked.\n\nThese days all you need to do is grab a bunch of components that work together (relying on each other, or working despite each other), bootstrap them altogether, set up some routing, hook up a config system, lay your controllers out, handle session configuration and connect to your database.\n\nYou can do that completely with random pick-and-mixed Composer components. But when you've done writing that application layer... guess what you've done? \n\n**You've just written a framework.**\n\nAs I said above, writing your own can be a good learning experience for beginners, but it's terrible for getting things into production. It's terrible for hitting deadlines, terrible for hack projects, terrible for prototypes, terrible for a lot of things.\n\nIf you know what you're doing it can be excellent. You can custom build a real pride and joy, it might be faster, and it will probably work just how you want it to. Yaaaaay.\n\nBut, it's really not as easy as people keep saying. \n\nComposer is not also some magic bullet, and lots of these components are more difficult to set up than people say. Brandon gave the FIG some props which was kind of him, and I have seen [this sort of idea before](http://happyaccidents.me/do-we-need-a-framework-for-that/), but unless you want a logger these shared interfaces just have not had a chance to be completed yet. \n\nCache and HTTP Messages are on the cards, but the former has been going for two years and the latter is going in for an entrance vote probably tomorrow, meaning we're going to be at least 3 months away from completion, probably 6.\n\nSo... what is the harm in letting a framework do this for you?\n\n### Frameworks are bad for Beginners\n\nNot something that Brandon said, but a mentality I've seen around a lot.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>“Beginners should not use frameworks” is idealistic tripe. Not everyone wants to be a world class programmer, some just wanna ship. :)</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/422829649652383745\">January 13, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n(Yeah I'm pasting in my own quotes. Deal with it.)\n\nThis came from people saying things like:\n\n> Newbies should stay away from frameworks! Ever seen a bricklayer easily become an engineer. First he should study, if not want to follow good practices will never have a good credential to do the job.\n\nThis was a conversation on the [Stop Using Facades](http://programmingarehard.com/2014/01/11/stop-using-facades.html) article comments, and I had another the day before on Reddit:\n\n> And I'm not really sure the user with no discernible understanding of programming is the right demographic to be targeting with a framework in the first place. I believe firmly that no user should touch a framework before she has a firm grasp on a language. Anything else is asking for trouble.\n\nThese are not just comments from Reddit and a blog, but something I have heard a lot recently. \n\nI feel like this is a very idealistic view of development. I know a shitload of people who do not want to become a top-level programmer, who couldn't care less. One of my close friends is a top-level DJ in the UK, playing in London at a bunch of fancy clubs. He is also a businessman, with a startup that is about to launch. He has his interests and he is great at what he does.\n\n**He does however have literally no interest in becoming a world-class programmer. He barely even wants to code, but he can thanks to frameworks like Laravel.**\n\nUsing frameworks he can get shit done. He's written an awful lot of extremely good applications - that work - and that has made him some money. Ship ship ship. \n\nThis was mostly done with CodeIgniter back in the day, then he hoped over to Laravel last year.\n\nDoes he know what separation of concerns means? Ha.\n\nIs his code SOLID? Nope.\n\nIs the Laravel application he made unit-testable? Fuck no.\n\nIs it going to function well enough to get him to his next round of funding? Absolutely.\n\nIs he going to have to throw the whole thing away? Not at all.\n\nFrameworks are great for beginners, who literally could not possibly smash together a series of random components if they wanted to. Regardless of the efforts of the FIG and PHP The Right Way combines, now or even what we've done in 3 years time, frameworks are not going to go away.\n\nThey are however moving away from being heavy, bloated omnishamble ZIP files that require all of the rest of it to work, and they _are_ improving their interoperability slowly. So that's nice.\n\n## Polarization is misleading\n\nGenerally speaking, it's impossible to be so polar about whether a \"framework\" is \"good\" or \"bad\". You can't say wether you need one or not, because there are a lot of factors.\n\n1. Literally every single PHP framework out there has a different definition of what a framework is\n1. What \"framework\" means is to you is different than what it means to me\n1. I only worked out a decent definition for what a framework was the other day\n1. Even if we all had the same definition, saying they are good or bad for beginners is insane. Everyone learns in a different way. Seeing, doing, building, all are different\n1. If you ask me how \"heavy\" a framework is I have no idea what you mean\n1. Composer is a great tool, but not all packages work together as well as a lot of people seem to think. Yet...\n1. Even the most advanced developers sometimes just want to smash out a website in a night, and using a framework will save you a lot of time bullshitting around. Not every project is a flagship enterprise product\n\nSo... let's ship stuff? \n\nNo, thats a shitty bail-out ending. \n\nI think Brandon had a great point. We are moving away from the age of requiring these monolithic ZIP files, and we have some great tools that let us distribute these framework agnostic packages. We have a group of people working really fucking hard on making standards that help these packages work together better, so by the looks of things everything is on the up-and-up.\n\nWhat is popularly called a framework will change over time to reflect changes in the ecosystem - right or wrong - and that's cool. We just shouldn't be too quick to throw the baby out with the bathwater when a nice shiny thing comes out, and notice the changes to the tools that we used to hate as they notice the changes and follow along.\n\nOld-frameworks are old. Modern frameworks are lovely. You should probably use one. But maybe you don't _need_ to, and that's ok too.",
    "created_on": "1389651300",
    "updated_on": "1389651300",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "0768a08263d32054ac1354153d322ae3",
    "type": "markdown",
    "parsed": "<p>There have been a few posts over the last few months saying that the age of the framework is dead, and that Composer is the true savior, and other similar messages. This is half-true, but lots of people have been using the word \"framework\" differently over the years and I wanted to really work out a good definition of what a \"framework\" was in relation to PHP development, and in relation to these discussions.</p>\n\n<p>I had my own idea of what a framework really meant, but after reading an article by Brandon Savage, named <a href=\"http://www.brandonsavage.net/you-dont-need-a-framework/\">You don't need a framework</a> I felt really confused. </p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> My stance: people have been using FW wrong for years. FW is the architecture. Libraries are the &quot;components&quot;...</p>&mdash; Anthony Ferrara (@ircmaxell) <a href=\"https://twitter.com/ircmaxell/statuses/421061661311508480\">January 8, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>If you read through that thread I was certainly wrong about a few bits and didn't immediately notice, but as I said I was genuinely confused. This conversation helped me get my own definition clear in my head, and now I think it is a good one.</p>\n\n<p><strong>Frameworks dictate architecture, handle your bootstrapping and essentially give you a set of lines to color inside.</strong></p>\n\n<p>Components, libraries and packages are all interchangeable-ish words that can add functionality to a framework, but really are not A) part of the framework, or B) a framework themselves. </p>\n\n<h2>Back in Time</h2>\n\n<p>I got on the PHP framework train with CodeIgniter back in 2006. Before that I was munging together abominations with phpBB, Postnuke and all sorts of other systems that did not make for clean living as a programmer. </p>\n\n<p>CodeIgniter came around and it had two clear goals:</p>\n\n<ul>\n<li>Provide a clean \"OOP\" architecture for your applications</li>\n<li>Avoid systems like PEAR, bundling lots of useful components with it</li>\n</ul>\n\n<p>CakePHP and the other similar systems were all doing the same around the same time, some before and some shortly after.</p>\n\n<p>That was the beginning of 8 years of thousands of us using the term \"framework\" incorrectly.</p>\n\n<p>CodeIgniter is a framework. CodeIgniter had a bunch of libraries including file uploads and a query builder. File uploads and the query builder were not part of the framework, they were simply bundled with it because dependency management at the time was shitty. If it wasn't bundled then it would need to be PEAR or some other ZIP download, which would be awful.</p>\n\n<p>Kohana is a framework. It added an ORM. People said Kohana was a better framework <strong>because</strong> it had an ORM. Wrong, it might have been a better framework <strong>and</strong> it just so happened to have an ORM bundled with it, which made it a nice ZIP file to use.</p>\n\n<h2>Modern Frameworks</h2>\n\n<p>Things like Zend Framework and SF2 are clearly a bunch of components, but call themselves frameworks.</p>\n\n<blockquote>\n  <p>Basically, a framework consists of:<br />\n  <strong>A toolbox</strong> - a set of prefabricated, rapidly integratable software components. This means that you will have to write less code, with less risk of error. This also means greater productivity and the ability to devote more time to doing those things which provide greater added value, such as managing guiding principles, side effects, etc.<br />\n  <strong>A methodology</strong> – an \"assembly diagram\" for applications. A structured approach may seem constraining at first. But in reality it allows developers to work both efficiently and effectively on the most complex aspects of a task, and the use of Best Practices guarantees the stability, maintainability and upgradeability of the applications you develop.</p>\n</blockquote>\n\n<p><strong><a href=\"http://symfony.com/at-a-glance\">Source</a></strong></p>\n\n<p>That seems to me to be the old definition of a PHP framework, back in the days where we used to bundle all of our shit together in a ZIP file. That was SF1, so is it possible for SF2 they just kept the name because it was easier? </p>\n\n<h3>FuelPHP</h3>\n\n<p>The name FuelPHP applies to a component vendor AND a framework.</p>\n\n<ul>\n<li><a href=\"https://github.com/fuelphp\">fuelphp</a> - A collection of components.</li>\n<li><a href=\"https://github.com/fuelphp/fuelphp/\">fuelphp/fuelphp</a> - This is a sample application which defines the architecture of your code. This is \"correctly\" described called a framework.</li>\n<li><a href=\"https://github.com/fuelphp/foundation\">fuelphp/foundation</a> - This is required by the framework to run, but is not a framework by itself, just an important component.</li>\n</ul>\n\n<h3>Laravel</h3>\n\n<p>Laravel is a framework, but not a component vendor. It uses a component vendor called Illuminate.</p>\n\n<ul>\n<li><a href=\"https://github.com/illuminate\">illuminate</a> - A collection of components. I'd call this the \"Component Vendor\".</li>\n<li><a href=\"https://github.com/laravel/laravel/\">laravel/laravel</a> - This is a \"sample application\", which would be better named as \"framework\"</li>\n<li><a href=\"https://github.com/laravel/framework\">laravel/framework</a> - Unfortunately named. This should be something other than \"framework\", like \"foundation\" or \"kernel\". </li>\n</ul>\n\n<p><em>I mentioned that to Taylor, and he agreed but wasn't too fussed. It's not a complaint, I just wanted to point out how it fits in with this definition. IM NOT ATTACKING YOU LARAVEL PEOPLE. ;-)</em></p>\n\n<h3>Aura</h3>\n\n<p>The name Aura is a component vendor AND a framework. More specifically, one of the Aura components is called \"Aura Framework\".</p>\n\n<ul>\n<li><a href=\"http://auraphp.com/packages/v2\">Packages v2</a></li>\n<li><a href=\"https://github.com/auraphp/Aura.Framework_Project\">Framework</a></li>\n</ul>\n\n<p>Again, Aura points out the different between the two things, even if it does happen to share the same name.</p>\n\n<h3>Semantic Wankery?</h3>\n\n<p>Maybe. I didn't start this conversation to argue the meaning of vague terms, I did however want to know if I agreed or disagreed with Brandon, and it turns out the answer is… both.</p>\n\n<blockquote>\n  <p>... we all preached a common message of “you need to adopt one of the common, established frameworks! Don’t do it alone!”\n  This message makes a lot of sense. Developing your own framework limits your options and opens you up to security problems and architectural challenges that most of the other frameworks are already solving. Not to mention the fact that most of the time, adding a collective set of brains together results in a better product. And I’ll be the first to admit I don’t want to compete with Matthew Weier O’Phinney in a battle of intellect; he’s smarter than I am.</p>\n</blockquote>\n\n<p>Absolutely. Sure <a href=\"http://blog.ircmaxell.com/2012/08/reinvent-wheel.html\">Reinventing the Wheel</a> can be a great move if you are interested in learning how things are done, but putting your home-made framework into production can be scary if you're a junior dev. You're potentially opening yourself up to all sorts of security issues that just don't need to be toyed with.</p>\n\n<p>And Brandon is of course right that dependency managers have given us the return of components which can be used outside of frameworks, as Composer (PEAR on crack, but… smart too) helped developers distribute code outside of just lumping it into a framework.</p>\n\n<p>But where we start to disagree a bit is right here:</p>\n\n<blockquote>\n  <p>New libraries like Aura allow for the integration of framework-like components without the heavy framework. </p>\n</blockquote>\n\n<p>With Composer becoming considerably more widespread, ALL major frameworks short of CodeIgniter (trollololol) have moved their components out into separate packages, meaning this whole \"heavy framework\" is: \"the application architecture\" + \"whatever components your application structure would like\".</p>\n\n<p>So, the application architecture IS the framework. The rest of it is components. </p>\n\n<p>Brandon here is suggesting that we don't need the \"framework\" anymore because we can just use components and make our own application layer. But... the application layer <strong>is</strong> the framework.</p>\n\n<p>So going by the \"correct\" definition of a PHP framework, Brandon is actually suggesting that we code our own frameworks - something that he at the start of the article advised against:</p>\n\n<blockquote>\n  <p>Developing your own framework limits your options and opens you up to security problems and architectural challenges that most of the other frameworks are already solving.</p>\n</blockquote>\n\n<p>See why the article caused some confusion? </p>\n\n<h3>Framework GOOD or Framework BAD?</h3>\n\n<p>So, old-style \"heavy frameworks\" no longer exist. GREAT. In retrospect, those things fucking sucked.</p>\n\n<p>These days all you need to do is grab a bunch of components that work together (relying on each other, or working despite each other), bootstrap them altogether, set up some routing, hook up a config system, lay your controllers out, handle session configuration and connect to your database.</p>\n\n<p>You can do that completely with random pick-and-mixed Composer components. But when you've done writing that application layer... guess what you've done? </p>\n\n<p><strong>You've just written a framework.</strong></p>\n\n<p>As I said above, writing your own can be a good learning experience for beginners, but it's terrible for getting things into production. It's terrible for hitting deadlines, terrible for hack projects, terrible for prototypes, terrible for a lot of things.</p>\n\n<p>If you know what you're doing it can be excellent. You can custom build a real pride and joy, it might be faster, and it will probably work just how you want it to. Yaaaaay.</p>\n\n<p>But, it's really not as easy as people keep saying. </p>\n\n<p>Composer is not also some magic bullet, and lots of these components are more difficult to set up than people say. Brandon gave the FIG some props which was kind of him, and I have seen <a href=\"http://happyaccidents.me/do-we-need-a-framework-for-that/\">this sort of idea before</a>, but unless you want a logger these shared interfaces just have not had a chance to be completed yet. </p>\n\n<p>Cache and HTTP Messages are on the cards, but the former has been going for two years and the latter is going in for an entrance vote probably tomorrow, meaning we're going to be at least 3 months away from completion, probably 6.</p>\n\n<p>So... what is the harm in letting a framework do this for you?</p>\n\n<h3>Frameworks are bad for Beginners</h3>\n\n<p>Not something that Brandon said, but a mentality I've seen around a lot.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>“Beginners should not use frameworks” is idealistic tripe. Not everyone wants to be a world class programmer, some just wanna ship. :)</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/422829649652383745\">January 13, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>(Yeah I'm pasting in my own quotes. Deal with it.)</p>\n\n<p>This came from people saying things like:</p>\n\n<blockquote>\n  <p>Newbies should stay away from frameworks! Ever seen a bricklayer easily become an engineer. First he should study, if not want to follow good practices will never have a good credential to do the job.</p>\n</blockquote>\n\n<p>This was a conversation on the <a href=\"http://programmingarehard.com/2014/01/11/stop-using-facades.html\">Stop Using Facades</a> article comments, and I had another the day before on Reddit:</p>\n\n<blockquote>\n  <p>And I'm not really sure the user with no discernible understanding of programming is the right demographic to be targeting with a framework in the first place. I believe firmly that no user should touch a framework before she has a firm grasp on a language. Anything else is asking for trouble.</p>\n</blockquote>\n\n<p>These are not just comments from Reddit and a blog, but something I have heard a lot recently. </p>\n\n<p>I feel like this is a very idealistic view of development. I know a shitload of people who do not want to become a top-level programmer, who couldn't care less. One of my close friends is a top-level DJ in the UK, playing in London at a bunch of fancy clubs. He is also a businessman, with a startup that is about to launch. He has his interests and he is great at what he does.</p>\n\n<p><strong>He does however have literally no interest in becoming a world-class programmer. He barely even wants to code, but he can thanks to frameworks like Laravel.</strong></p>\n\n<p>Using frameworks he can get shit done. He's written an awful lot of extremely good applications - that work - and that has made him some money. Ship ship ship. </p>\n\n<p>This was mostly done with CodeIgniter back in the day, then he hoped over to Laravel last year.</p>\n\n<p>Does he know what separation of concerns means? Ha.</p>\n\n<p>Is his code SOLID? Nope.</p>\n\n<p>Is the Laravel application he made unit-testable? Fuck no.</p>\n\n<p>Is it going to function well enough to get him to his next round of funding? Absolutely.</p>\n\n<p>Is he going to have to throw the whole thing away? Not at all.</p>\n\n<p>Frameworks are great for beginners, who literally could not possibly smash together a series of random components if they wanted to. Regardless of the efforts of the FIG and PHP The Right Way combines, now or even what we've done in 3 years time, frameworks are not going to go away.</p>\n\n<p>They are however moving away from being heavy, bloated omnishamble ZIP files that require all of the rest of it to work, and they <em>are</em> improving their interoperability slowly. So that's nice.</p>\n\n<h2>Polarization is misleading</h2>\n\n<p>Generally speaking, it's impossible to be so polar about whether a \"framework\" is \"good\" or \"bad\". You can't say wether you need one or not, because there are a lot of factors.</p>\n\n<ol>\n<li>Literally every single PHP framework out there has a different definition of what a framework is</li>\n<li>What \"framework\" means is to you is different than what it means to me</li>\n<li>I only worked out a decent definition for what a framework was the other day</li>\n<li>Even if we all had the same definition, saying they are good or bad for beginners is insane. Everyone learns in a different way. Seeing, doing, building, all are different</li>\n<li>If you ask me how \"heavy\" a framework is I have no idea what you mean</li>\n<li>Composer is a great tool, but not all packages work together as well as a lot of people seem to think. Yet...</li>\n<li>Even the most advanced developers sometimes just want to smash out a website in a night, and using a framework will save you a lot of time bullshitting around. Not every project is a flagship enterprise product</li>\n</ol>\n\n<p>So... let's ship stuff? </p>\n\n<p>No, thats a shitty bail-out ending. </p>\n\n<p>I think Brandon had a great point. We are moving away from the age of requiring these monolithic ZIP files, and we have some great tools that let us distribute these framework agnostic packages. We have a group of people working really fucking hard on making standards that help these packages work together better, so by the looks of things everything is on the up-and-up.</p>\n\n<p>What is popularly called a framework will change over time to reflect changes in the ecosystem - right or wrong - and that's cool. We just shouldn't be too quick to throw the baby out with the bathwater when a nice shiny thing comes out, and notice the changes to the tools that we used to hate as they notice the changes and follow along.</p>\n\n<p>Old-frameworks are old. Modern frameworks are lovely. You should probably use one. But maybe you don't <em>need</em> to, and that's ok too.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "241",
    "created": "2014-07-19 16:21:00",
    "updated": "2014-07-19 16:21:00",
    "created_by": "2",
    "ordering_count": "41",
    "title": "Send PSR-0 to the Standards Farm in the Sky",
    "slug": "send-psr0-to-the-standards-farm-in-the-sky",
    "category_id": "2",
    "attachment": "",
    "intro": "This article attempts to convince you that deprecating the PSR-0 auto-loading standard in favor of the PSR-4 auto-loading standard is not only a good idea, but a problemless wonderland of happy benefits, in the hope that when I try to get this done on the FIG mailing list, people will be happy about it instead of sad or rage-mode.",
    "body": "This article attempts to convince you that deprecating the PSR-0 auto-loading standard in favor of the PSR-4 auto-loading standard is not only a good idea, but a problemless wonderland of happy benefits, in the hope that when I try to get this done on the FIG mailing list, people will be happy about it instead of sad or rage-mode.\n\nIn December 2013, the PHP-FIG voted PSR-4 into place, which Paul Jones and a few others always billed as an \"alternative\" to PSR-0. I believe it was talked about as an alternative at the time because we _knew_ that the PHP community would drop their collective bricks if we tried to pull PSR-0 out from under them, right as they were just slowly getting used to using it. It was always going to be bumped off at some point - in my head, but left to co-exist with PSR-0 for a while to ease the transition.\n\nIn February 2014, the PHP-FIG [approved](https://groups.google.com/forum/#!searchin/php-fig/amendment$20bylaw/php-fig/4ivPkEZZlPo/lZXwusvNdoYJ) the [Amendments Bylaw](https://github.com/php-fig/fig-standards/blob/master/bylaws/006-psr-amendments.md), which was pushed by me for two reasons:\n\n1. PSR-1 had a hard dependency on PSR-0, and I wanted PSR-4 [to be able to play](https://www.youtube.com/watch?v=hd9t6jgGcYE) too. They're basically compatible. \n2. I knew that at some point, I would want to put a bolt through PSR-0.\n\n## \"Why the hate for PSR-0?\"\n\nI am actually very impressed with PSR-0 in general. Thanks to Composer, in the last two years PSR-0 adoption has gone through the roof, and it has revolutionized auto-loading in the PHP community. As of some time a few months ago (when I pestered Jordi for some obscure but apparently very important statistics for my O-1 US visa), of the 20,097 packages hosted on Composer, 15,668 of them use PSR-0.\n\nThat is nuts. \n\n**75% of the PHP community agreed on something.**\n\nLiterally never happened.\n\n## \"So why deprecate a great standard?\"\n\nWell imaginary interviewer who has been constructed purely as a narrative device, PSR-0 might have done some great things but with the power of hindsight, various people have come to realize that PSR-0 is not all unicorn farts and rainbow kisses. \n\nPSR-0 was made back in 2009 when the group was smaller, less experienced (it was their first standard), and it had some troubles that only came to light at a later date. \n\nAnthony Ferrera [listed a bunch of troubles](http://blog.ircmaxell.com/2011/11/on-psr-0-being-included-in-phps-core.html). He was mostly talking about why it should not be included in the core of PHP, and - as a quick sidenote - I agree with that part entirely. If PSR-0 is ever deprecated at some point then having it baked into PHP means it will be stuck with us for about 15 years. No ta.\n\nOther than the \"why it shouldn't be in the core\" arguments, he listed some inconsistencies:\n\n> If a file doesn't exist, PSR-0 doesn't play nice with other auto-loaders. It will try to require the file, but then the require will fail and fatal error out. This is a problem since a later autoloader may know how to load it. So it's not following the normal convention of \"if you can't load it, don't error out\".\n\nThat is only the \"sample implementation\" which the PHP-FIG consider to be only an example, not a canonical piece of code, but yeah he is right, PSR-0 looks pretty broken in that example.\n\nPSR-4 fixed that.\n\n> With PSR-0, multiple classes actually map to the same file. For example, all of the following map to the same file (Foo/Bar/Baz.php): \n> * \\Foo\\Bar\\Baz\n> * \\Foo\\Bar_Baz\n> * \\Foo_Bar_Baz\n\nAbsolutely, that is a mess. I explained this in the [PSR-0 Naming Oddityy](https://github.com/philsturgeon/psr0-naming-oddity). This has only once caused me a problem in development and never any sort of issue in production, but it is a WTF that should be taken care of.\n\nPSR-4 fixed that.\n\n## \"Ok I get that PSR-4 is awesome, but we still need PSR-0!\"\n\nAbsolutely, PSR-0 will not be going anywhere. I asked for feedback about deprecating PSR-0 and got a lot of responses I wasn't expecting, like this one:\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/benmarks\">@benmarks</a> deprecating it would mean to set every framework lib and app to be depricates who still uses it</p>&mdash; Daniel Fahlke (@Flyingmana) <a href=\"https://twitter.com/Flyingmana/statuses/490474082262339584\">July 19, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThat is simply not true. Deprecating the standard has no effect on existing projects. It would have no effect on the usage of Composer, Packagist, existing code, Travis or GitHub any more than it would mess with the migratory patterns of dolphins in mating season. Deprecating PSR-0 does literally nothing, other than let people know at some point they should probably consider upgrading their packages to use PSR-4 instead. \n\nThey can also just ignore the deprecation message forever.\n\nThe FIG wont be sending out heavies to break kneecaps if people are still on PSR-0 in a year.\n\nI think some people have a slight misunderstanding of the word \"deprecation.\" Maybe I do, but it seems like [Wikipedia agrees](https://en.wikipedia.org/wiki/Deprecation) with my understanding. The first bit:\n\n> Deprecation is an attribute applied to a computer software feature, characteristic, or practice to indicate that it should be avoided (often because it is being superseded). Beyond describing software, the term is also used for a feature, design, or practice that is permitted but no longer recommended in other areas, such as hardware design or compliance to building codes.\n\nYep, that is about right. We have effectively superseded it with PSR-4. The next bit says:\n\n> While a deprecated software feature remains in the software, it is use may raise warning messages recommending alternative practices; deprecated status may also indicate that feature will be removed in the future.\n\nNotice that it says \"may also indicate that feature will be removed.\" The \"removal\" bit is optional, and that optional step is something that the [Amendment Bylaw](https://github.com/php-fig/fig-standards/blob/master/bylaws/006-psr-amendments.md) does not allow at all. The FIG does not remove, delete, invalidate or expire in any way a standard once it is accepted.\n\nSo again, put simply, PSR-0 is not going anywhere. It **can't** go anywhere, and auto-loaders like Composer will still support it.\n\nDeprecation in this instance is just the FIG saying \"Hey buddy, there is a new thing over there you should probably use instead.\"\n\n## \"What about PHPUnit and Twig?!\"\n\nIn previous conversations about PSR-4 or potential PSR-0 deprecation, Twig and PHPUnit have been used as examples of large projects that could not easily switch to PSR-4 because they use \"poor-mans namespaces\" (underscores with special meaning instead of actual namespaces). Somehow, people have the idea that deprecating PSR-0 would somehow either a) shame these projects and make them feel bad, or b) force them to bump their PHP version requirement to PHP 5.3 to use namespaces.\n\nWell, since those conversations, PHPUnit has bumped the [minimum depdencencies](https://github.com/sebastianbergmann/phpunit/blob/a29e4505867735f4f4457cfc6a6386f96dda6eef/composer.json#L25) to PHP >=5.3.3. Comically PHPUnit does not even use PSR-0, so the deprecation of PSR-0 does not effect them either.\n\nI asked Fabien Potencier if he would consider switching Twig to PSR-4, and he is now asking [if Twig v2.0 should drop 5.2 support](https://twitter.com/fabpot/status/490475547412406273). Many people are saying yes.\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/fabpot\">@fabpot</a> Do it. Kill 5.2 with fire.</p>&mdash; David McKay (@rawkode) <a href=\"https://twitter.com/rawkode/statuses/490481522433331200\">July 19, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n## \"What about us poor PHP 5.2 users?\"\n\nThere are plenty of people stuck on PHP 5.2, and judging by recent tweets I've seen that number is as high as about 5, maybe even 6.\n\nOld legacy systems have old legacy code, and they have Composered in some PHP 5.2-only PSR-0 code. They don't want their dependencies to suddenly switch to PHP 5.3 and force them to upgrade their systems, leading them down a path of pain and suffering. I understand everyone, really, but this is what [SemVer](http://semver.org/) is for.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/fabpot\">@fabpot</a> there&#39;ll still be 1.x branch, which is great software for 5.2. Up req for V2 and see if PHP&#39;s newer features allow for new ideas.</p>&mdash; Jelmer Schreuder (@jelmer_php) <a href=\"https://twitter.com/jelmer_php/statuses/490496818879660032\">July 19, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nIf you are releasing packages, a framework, a CMS, etc then tag a new major version which drops support for PHP 5.2 and switch to some namespaces. PyroCMS did this for the last version, and our community seems happy.\n\nKeep a branch around for 5.2 and do some patches now and then, but use this 5.3 jump as a chance to go and clean up your package. Maybe see if you can use closures to make some of your API a little nicer, and take advantage of all the other PHP 5.3 packages out there to offload some of your code onto hard-baked dependencies.\n\nHave fun with it. Major versions are a time for change and prosperity, but you can't just support PHP 5.2 forever because \"legacy systems require it.\"\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> The only reason Major versions exist, is to allow for BC.</p>&mdash; Zack Kitzmiller (@zackkitzmiller) <a href=\"https://twitter.com/zackkitzmiller/statuses/490185999226765312\">July 18, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nIn my experience, most of these old legacy systems are barely worked on, and when they are it is only minor updates. Minor updates do not require using the very latest major version of a package, so they can stick to the PHP 5.2 version until that legacy app gets ditched, at which point they can use PHP 5.3, 5.4, 5.5 or 5.6, but PHP 5.2 can piss right off. \n\n## \"But upgrading is haaaaaard!\"\n\nIf you have code that you are trying to upgrade from PSR-0 to PSR-4 and you already use namespaces (the vast majority of you) then upgrading your code could take you as little as 10 seconds.\n\nI explained this with more detail in [PHP-FIG: Autoloaders, Amendments and The \"15th Standard\"](http://philsturgeon.uk/blog/2014/02/phpfig-autoloaders-amendments-and-the-15th-standard), but basically you have two options:\n\n1. Keep the folder structure identical as it was in PSR-0.\n2. Simplify the folder structure by removing the namespace prefix. \n\nSome people don't like that second option, so... don't use it. If you want to keep the PSR-0 style folder structure but use PSR-4 then you can keep doing that, again: **Forever**.\n\nUpgrading is either: \n\n* Insanely easy\n* Relatively easy\n* Fairly easy\n\nYou can pick your own path, but none of them are hard, even if you have to switch `_` to `\\` and add some `use` statements to your code. If you are trying to upgrade an entire application and that seems hard then yeah, it might be, so don't do it. Make your next application PSR-4 because why the shit aren't you using namespaces already.\n\n_Somebody could also almost certainly produce a \"poor-man namespace\" to \"actual namespace\" converter, much along the lines of Nikita Popov's [varVar script](https://gist.github.com/nikic/ffd019ef78b72934c7cc), used to detect variable variable usages of stuff that might break in his [Uniform Variable Syntax RFC](https://wiki.php.net/rfc/uniform_variable_syntax). That would be awesome. If you do this, please get in touch._\n\n## \"Ok I get it, we should deprecate, but why the rush?\"\n\nI would like to have PSR-0 deprecated at some point. It does not _have to be_ right now, but I don't understand any benefit of waiting. There will always be poor souls stuck using 5.2, there will always be people using PSR-0 who don't want to change, but we need to clean up any confusion for new users coming into the world of PHP and wondering why the hell we have two autoloaders.\n\nIf deprecation simply directs users from one PSR to the other and has zero effect on anyone actually using it, then the negatives are literally nothing and the benefits are a slight shunt in the right direction for getting a version of packages onto PHP 5.3 and improved clarity for beginners.\n\n**There is no perfect time to deprecate PSR-0, so let's just do it now.**\n\n## Next Step\n\nIf you want to upgrade your own code, take a look at the [Composer autoloading documentation](https://getcomposer.org/doc/04-schema.md#autoload).\n\nI wanted to get this discussion started in public before voting on the FIG mailing list to see how people feel about the situation. If the vast majority of people are freaking out then I can wait a while to deprecate, but I really cannot see the point of doing that.\n\nThe tl;dr here is that I am going to make a PR shortly with this being added to the top of the PSR-0 standard, and when I do that it would be great to have some support.\n\n> Deprecated - As of 2014-12-30 PSR-0 has been marked as deprecated. [PSR-4](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md) is now recommended as an alternative.\n\nAnswer in the comments with a +1, or tell me why my arguments have not swayed you.",
    "created_on": "1405786860",
    "updated_on": "1405786860",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "ebbd6ce38fb1f7f87e42a0d3ec9c638e",
    "type": "markdown",
    "parsed": "<p>This article attempts to convince you that deprecating the PSR-0 auto-loading standard in favor of the PSR-4 auto-loading standard is not only a good idea, but a problemless wonderland of happy benefits, in the hope that when I try to get this done on the FIG mailing list, people will be happy about it instead of sad or rage-mode.</p>\n\n<p>In December 2013, the PHP-FIG voted PSR-4 into place, which Paul Jones and a few others always billed as an \"alternative\" to PSR-0. I believe it was talked about as an alternative at the time because we <em>knew</em> that the PHP community would drop their collective bricks if we tried to pull PSR-0 out from under them, right as they were just slowly getting used to using it. It was always going to be bumped off at some point - in my head, but left to co-exist with PSR-0 for a while to ease the transition.</p>\n\n<p>In February 2014, the PHP-FIG <a href=\"https://groups.google.com/forum/#!searchin/php-fig/amendment$20bylaw/php-fig/4ivPkEZZlPo/lZXwusvNdoYJ\">approved</a> the <a href=\"https://github.com/php-fig/fig-standards/blob/master/bylaws/006-psr-amendments.md\">Amendments Bylaw</a>, which was pushed by me for two reasons:</p>\n\n<ol>\n<li>PSR-1 had a hard dependency on PSR-0, and I wanted PSR-4 <a href=\"https://www.youtube.com/watch?v=hd9t6jgGcYE\">to be able to play</a> too. They're basically compatible. </li>\n<li>I knew that at some point, I would want to put a bolt through PSR-0.</li>\n</ol>\n\n<h2>\"Why the hate for PSR-0?\"</h2>\n\n<p>I am actually very impressed with PSR-0 in general. Thanks to Composer, in the last two years PSR-0 adoption has gone through the roof, and it has revolutionized auto-loading in the PHP community. As of some time a few months ago (when I pestered Jordi for some obscure but apparently very important statistics for my O-1 US visa), of the 20,097 packages hosted on Composer, 15,668 of them use PSR-0.</p>\n\n<p>That is nuts. </p>\n\n<p><strong>75% of the PHP community agreed on something.</strong></p>\n\n<p>Literally never happened.</p>\n\n<h2>\"So why deprecate a great standard?\"</h2>\n\n<p>Well imaginary interviewer who has been constructed purely as a narrative device, PSR-0 might have done some great things but with the power of hindsight, various people have come to realize that PSR-0 is not all unicorn farts and rainbow kisses. </p>\n\n<p>PSR-0 was made back in 2009 when the group was smaller, less experienced (it was their first standard), and it had some troubles that only came to light at a later date. </p>\n\n<p>Anthony Ferrera <a href=\"http://blog.ircmaxell.com/2011/11/on-psr-0-being-included-in-phps-core.html\">listed a bunch of troubles</a>. He was mostly talking about why it should not be included in the core of PHP, and - as a quick sidenote - I agree with that part entirely. If PSR-0 is ever deprecated at some point then having it baked into PHP means it will be stuck with us for about 15 years. No ta.</p>\n\n<p>Other than the \"why it shouldn't be in the core\" arguments, he listed some inconsistencies:</p>\n\n<blockquote>\n  <p>If a file doesn't exist, PSR-0 doesn't play nice with other auto-loaders. It will try to require the file, but then the require will fail and fatal error out. This is a problem since a later autoloader may know how to load it. So it's not following the normal convention of \"if you can't load it, don't error out\".</p>\n</blockquote>\n\n<p>That is only the \"sample implementation\" which the PHP-FIG consider to be only an example, not a canonical piece of code, but yeah he is right, PSR-0 looks pretty broken in that example.</p>\n\n<p>PSR-4 fixed that.</p>\n\n<blockquote>\n  <p>With PSR-0, multiple classes actually map to the same file. For example, all of the following map to the same file (Foo/Bar/Baz.php): \n  * \\Foo\\Bar\\Baz\n  * \\Foo\\Bar<em>Baz\n  * \\Foo</em>Bar_Baz</p>\n</blockquote>\n\n<p>Absolutely, that is a mess. I explained this in the <a href=\"https://github.com/philsturgeon/psr0-naming-oddity\">PSR-0 Naming Oddityy</a>. This has only once caused me a problem in development and never any sort of issue in production, but it is a WTF that should be taken care of.</p>\n\n<p>PSR-4 fixed that.</p>\n\n<h2>\"Ok I get that PSR-4 is awesome, but we still need PSR-0!\"</h2>\n\n<p>Absolutely, PSR-0 will not be going anywhere. I asked for feedback about deprecating PSR-0 and got a lot of responses I wasn't expecting, like this one:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/benmarks\">@benmarks</a> deprecating it would mean to set every framework lib and app to be depricates who still uses it</p>&mdash; Daniel Fahlke (@Flyingmana) <a href=\"https://twitter.com/Flyingmana/statuses/490474082262339584\">July 19, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>That is simply not true. Deprecating the standard has no effect on existing projects. It would have no effect on the usage of Composer, Packagist, existing code, Travis or GitHub any more than it would mess with the migratory patterns of dolphins in mating season. Deprecating PSR-0 does literally nothing, other than let people know at some point they should probably consider upgrading their packages to use PSR-4 instead. </p>\n\n<p>They can also just ignore the deprecation message forever.</p>\n\n<p>The FIG wont be sending out heavies to break kneecaps if people are still on PSR-0 in a year.</p>\n\n<p>I think some people have a slight misunderstanding of the word \"deprecation.\" Maybe I do, but it seems like <a href=\"https://en.wikipedia.org/wiki/Deprecation\">Wikipedia agrees</a> with my understanding. The first bit:</p>\n\n<blockquote>\n  <p>Deprecation is an attribute applied to a computer software feature, characteristic, or practice to indicate that it should be avoided (often because it is being superseded). Beyond describing software, the term is also used for a feature, design, or practice that is permitted but no longer recommended in other areas, such as hardware design or compliance to building codes.</p>\n</blockquote>\n\n<p>Yep, that is about right. We have effectively superseded it with PSR-4. The next bit says:</p>\n\n<blockquote>\n  <p>While a deprecated software feature remains in the software, it is use may raise warning messages recommending alternative practices; deprecated status may also indicate that feature will be removed in the future.</p>\n</blockquote>\n\n<p>Notice that it says \"may also indicate that feature will be removed.\" The \"removal\" bit is optional, and that optional step is something that the <a href=\"https://github.com/php-fig/fig-standards/blob/master/bylaws/006-psr-amendments.md\">Amendment Bylaw</a> does not allow at all. The FIG does not remove, delete, invalidate or expire in any way a standard once it is accepted.</p>\n\n<p>So again, put simply, PSR-0 is not going anywhere. It <strong>can't</strong> go anywhere, and auto-loaders like Composer will still support it.</p>\n\n<p>Deprecation in this instance is just the FIG saying \"Hey buddy, there is a new thing over there you should probably use instead.\"</p>\n\n<h2>\"What about PHPUnit and Twig?!\"</h2>\n\n<p>In previous conversations about PSR-4 or potential PSR-0 deprecation, Twig and PHPUnit have been used as examples of large projects that could not easily switch to PSR-4 because they use \"poor-mans namespaces\" (underscores with special meaning instead of actual namespaces). Somehow, people have the idea that deprecating PSR-0 would somehow either a) shame these projects and make them feel bad, or b) force them to bump their PHP version requirement to PHP 5.3 to use namespaces.</p>\n\n<p>Well, since those conversations, PHPUnit has bumped the <a href=\"https://github.com/sebastianbergmann/phpunit/blob/a29e4505867735f4f4457cfc6a6386f96dda6eef/composer.json#L25\">minimum depdencencies</a> to PHP >=5.3.3. Comically PHPUnit does not even use PSR-0, so the deprecation of PSR-0 does not effect them either.</p>\n\n<p>I asked Fabien Potencier if he would consider switching Twig to PSR-4, and he is now asking <a href=\"https://twitter.com/fabpot/status/490475547412406273\">if Twig v2.0 should drop 5.2 support</a>. Many people are saying yes.</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/fabpot\">@fabpot</a> Do it. Kill 5.2 with fire.</p>&mdash; David McKay (@rawkode) <a href=\"https://twitter.com/rawkode/statuses/490481522433331200\">July 19, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<h2>\"What about us poor PHP 5.2 users?\"</h2>\n\n<p>There are plenty of people stuck on PHP 5.2, and judging by recent tweets I've seen that number is as high as about 5, maybe even 6.</p>\n\n<p>Old legacy systems have old legacy code, and they have Composered in some PHP 5.2-only PSR-0 code. They don't want their dependencies to suddenly switch to PHP 5.3 and force them to upgrade their systems, leading them down a path of pain and suffering. I understand everyone, really, but this is what <a href=\"http://semver.org/\">SemVer</a> is for.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/fabpot\">@fabpot</a> there&#39;ll still be 1.x branch, which is great software for 5.2. Up req for V2 and see if PHP&#39;s newer features allow for new ideas.</p>&mdash; Jelmer Schreuder (@jelmer_php) <a href=\"https://twitter.com/jelmer_php/statuses/490496818879660032\">July 19, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>If you are releasing packages, a framework, a CMS, etc then tag a new major version which drops support for PHP 5.2 and switch to some namespaces. PyroCMS did this for the last version, and our community seems happy.</p>\n\n<p>Keep a branch around for 5.2 and do some patches now and then, but use this 5.3 jump as a chance to go and clean up your package. Maybe see if you can use closures to make some of your API a little nicer, and take advantage of all the other PHP 5.3 packages out there to offload some of your code onto hard-baked dependencies.</p>\n\n<p>Have fun with it. Major versions are a time for change and prosperity, but you can't just support PHP 5.2 forever because \"legacy systems require it.\"</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> The only reason Major versions exist, is to allow for BC.</p>&mdash; Zack Kitzmiller (@zackkitzmiller) <a href=\"https://twitter.com/zackkitzmiller/statuses/490185999226765312\">July 18, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>In my experience, most of these old legacy systems are barely worked on, and when they are it is only minor updates. Minor updates do not require using the very latest major version of a package, so they can stick to the PHP 5.2 version until that legacy app gets ditched, at which point they can use PHP 5.3, 5.4, 5.5 or 5.6, but PHP 5.2 can piss right off. </p>\n\n<h2>\"But upgrading is haaaaaard!\"</h2>\n\n<p>If you have code that you are trying to upgrade from PSR-0 to PSR-4 and you already use namespaces (the vast majority of you) then upgrading your code could take you as little as 10 seconds.</p>\n\n<p>I explained this with more detail in <a href=\"http://philsturgeon.uk/blog/2014/02/phpfig-autoloaders-amendments-and-the-15th-standard\">PHP-FIG: Autoloaders, Amendments and The \"15th Standard\"</a>, but basically you have two options:</p>\n\n<ol>\n<li>Keep the folder structure identical as it was in PSR-0.</li>\n<li>Simplify the folder structure by removing the namespace prefix. </li>\n</ol>\n\n<p>Some people don't like that second option, so... don't use it. If you want to keep the PSR-0 style folder structure but use PSR-4 then you can keep doing that, again: <strong>Forever</strong>.</p>\n\n<p>Upgrading is either: </p>\n\n<ul>\n<li>Insanely easy</li>\n<li>Relatively easy</li>\n<li>Fairly easy</li>\n</ul>\n\n<p>You can pick your own path, but none of them are hard, even if you have to switch <code>_</code> to <code>\\</code> and add some <code>use</code> statements to your code. If you are trying to upgrade an entire application and that seems hard then yeah, it might be, so don't do it. Make your next application PSR-4 because why the shit aren't you using namespaces already.</p>\n\n<p><em>Somebody could also almost certainly produce a \"poor-man namespace\" to \"actual namespace\" converter, much along the lines of Nikita Popov's <a href=\"https://gist.github.com/nikic/ffd019ef78b72934c7cc\">varVar script</a>, used to detect variable variable usages of stuff that might break in his <a href=\"https://wiki.php.net/rfc/uniform_variable_syntax\">Uniform Variable Syntax RFC</a>. That would be awesome. If you do this, please get in touch.</em></p>\n\n<h2>\"Ok I get it, we should deprecate, but why the rush?\"</h2>\n\n<p>I would like to have PSR-0 deprecated at some point. It does not <em>have to be</em> right now, but I don't understand any benefit of waiting. There will always be poor souls stuck using 5.2, there will always be people using PSR-0 who don't want to change, but we need to clean up any confusion for new users coming into the world of PHP and wondering why the hell we have two autoloaders.</p>\n\n<p>If deprecation simply directs users from one PSR to the other and has zero effect on anyone actually using it, then the negatives are literally nothing and the benefits are a slight shunt in the right direction for getting a version of packages onto PHP 5.3 and improved clarity for beginners.</p>\n\n<p><strong>There is no perfect time to deprecate PSR-0, so let's just do it now.</strong></p>\n\n<h2>Next Step</h2>\n\n<p>If you want to upgrade your own code, take a look at the <a href=\"https://getcomposer.org/doc/04-schema.md#autoload\">Composer autoloading documentation</a>.</p>\n\n<p>I wanted to get this discussion started in public before voting on the FIG mailing list to see how people feel about the situation. If the vast majority of people are freaking out then I can wait a while to deprecate, but I really cannot see the point of doing that.</p>\n\n<p>The tl;dr here is that I am going to make a PR shortly with this being added to the top of the PSR-0 standard, and when I do that it would be great to have some support.</p>\n\n<blockquote>\n  <p>Deprecated - As of 2014-12-30 PSR-0 has been marked as deprecated. <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md\">PSR-4</a> is now recommended as an alternative.</p>\n</blockquote>\n\n<p>Answer in the comments with a +1, or tell me why my arguments have not swayed you.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "177",
    "created": "2014-01-09 03:56:00",
    "updated": "2014-01-09 03:56:00",
    "created_by": "2",
    "ordering_count": "30",
    "title": "Autoloading Laravel application code with PSR-4",
    "slug": "autoloading-laravel-application-code-with-psr4",
    "category_id": "2",
    "attachment": "",
    "intro": "When you use Laravel it&#39;s very likely you autoload extra code than just the controllers/models that are autoloaded by default. Some use classmap, others use PSR-0. Well, now you can use PSR-4 too.",
    "body": "When you use Laravel it's very likely you autoload extra code than just the controllers/models that are autoloaded by default. Some use classmap, others use PSR-0. Well, now you can use PSR-4 too.\n\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/hb7drRpDxgY\" frameborder=\"0\" allowfullscreen></iframe>",
    "created_on": "1389239760",
    "updated_on": "1389239760",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "",
    "type": "markdown",
    "parsed": "<p>When you use Laravel it's very likely you autoload extra code than just the controllers/models that are autoloaded by default. Some use classmap, others use PSR-0. Well, now you can use PSR-4 too.</p>\n\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/hb7drRpDxgY\" frameborder=\"0\" allowfullscreen></iframe>\n",
    "preview_hash": ""
  },
  {
    "id": "179",
    "created": "2014-02-13 19:53:00",
    "updated": "2014-02-13 19:53:00",
    "created_by": "2",
    "ordering_count": "32",
    "title": "PHP-FIG: Autoloaders, Amendments and The &quot;15th Standard&quot;",
    "slug": "phpfig-autoloaders-amendments-and-the-15th-standard",
    "category_id": "2",
    "attachment": "",
    "intro": "Recently I&#39;ve been putting in lots of time for bits around the PHP-FIG, and I wanted to highlight what they were, what they are and what I personally think needs to happen in the near future to make things better.",
    "body": "I've managed to get myself involved in a lot of projects in and around the PHP community because I like to offer my advice, experience and time to trying to make things better. Recently, I've been putting in _lots_ of time for bits around the PHP-FIG.\n\nLike it or not, tabs or spaces, PSR-2 or no, the PHP-FIG has had a huge impact on the PHP community and it's going to continue to do so. We have more PSR's in the works now that at any point before, and they're awesome ones. \n\n## PSR-5: PHPDoc\n\nIn Draft status and being worked on hard, most actively on GitHub. My guess? 6 months... probably.\n\n## PSR-6: Cache\n\nTwo years in the making? Ha. Well, we never used to have a workflow, so I spent a few months creating, editing, convincing and pushing through a [workflow bylaw] for that. The workflow stops multiple alternative proposals from being supported by different members and having this crazy duel between two totally disparate files. That was nuts! \n\nThis workflow should get PSR-6 moving along, and I've suggested to the chap in charge that now would be a great time to bump it up to \"Review\". getting it one step closer to completion and forcing updates to be small. There's nothing big left on the todo list, so that seems like a decent plan.\n\n## PSR-7: HTTP Message\n\n[This one](https://github.com/php-fig/fig-standards/pull/244) is mainly being worked on by [Michael Dowling](https://twitter.com/mtdowling), from AWS and Guzzle fame, but has my name on the bill as a coordinator much like PSR-4 and PSR-5. This one is very fresh and still in Draft stage, but will start picking up steam once the rest of the FIG take a look and offer feedback. I'll be pushing that if it doesn't happen fairly soon.\n\nYou can see a full index of PSR's along with their statuses [here](https://github.com/php-fig/fig-standards/wiki/PHP-Standard-Recommendations).\n\nSo, progress is happening but I feel like we still have some problems at the FIG, and I would like to solve these issues. \n\n_The following is almost entirely just my opinion, so others in the FIG do not necessarily agree. If we all agreed about everything it wouldn't be very representative of the PHP community at large._\n\n## Problem 1: PSR-0 AND PSR-4?\n\nSome people have been calling the FIG a laughing stock because we have two active PSR's that achieve the same goal: autoloading.\n\nThis \"You can use either one\" approach was (in my head at least, as coordinator of this PSR) intended to provide a \"grace period\" for people to upgrade without making them freak out and think they had to rush.\n\nPSR-0 and PSR-4 both do the exact same thing: they autoload code, and they do it in a 100% compatible way unless you're a PHP 5.2 project making use of legacy \"poor mans namespaces\", which was an old convention where _ would be converted to folder separator. Zend, Symfony, PEAR all did this for their code and a lot of projects like PHPUnit and Twig currently require that, and PHP 5.2. Those projects are big, and sometime they should upgrade, but that is what deprecation means: put it on your todo list.\n\nI've seen some people piss and moan about PSR-4 and it's namespace prefix support. For those of you unfamiliar with the feature, it means this:\n\n> vendor/league/fractal/src/League/Fractal/Resource/Collection.php\n\n... can be shortened to this:\n\n> vendor/league/fractal/src/Resource/Collection.php\n\nBut let me be clear, that is an optional usage of PSR-4, and an optional feature in Composer too. If you would like to continue to be that verbose structure in your own code you're welcome to. \n\nTo compare, this is how I achieved the shorter folder structure in the example above:\n\n        \"psr-4\": {\n            \"League\\\\Fractal\\\\\": \"src\",\n            \"League\\\\Fractal\\\\Tests\\\\\": \"tests\"\n        }\n        \nIf you would like to continue using the more verbose folder structure known in PSR-0 then great, simply change the above to this:\n\n        \"psr-4\": {\n            \"League\\\\Fractal\\\\\": \"src/League/Fractal\",\n            \"League\\\\Fractal\\\\Tests\\\\\": \"tests/League/Fractal/Tests\"\n        }\n\nOnce again, PSR-0 folder structures are supported, and that example loads this identical path to the PSR-0 example:\n\n> vendor/league/fractal/src/League/Fractal/Resource/Collection.php\n\nThat means PSR-4 is a completely compatible replacement for PSR-0, with the exception of dropping support for a long unsupported version of PHP, which helps us gladly ditch an [edge case bug], and provides a great optional feature to those who felt like it was frustrating as f**k to have to replicate their entire folder structure every time. Literally no downside there.\n\nPaul Jones and myself agreed (I think) that once PSR-4 was approved then the two would be \"alternatives\" for a while, then we'd eventually deprecate one. Deprecating PSR-0 now (or soon) sends a message, that PSR-4 is the preferred successor, and you should work on getting onto it at some point. You can still use a \"deprecated\" PSR, and no PSR will ever be \"deleted\" (maybe it could be \"unrecommended\"), but we should definitely deprecate it as we do not need both to be considered \"recommended\".\n\nIf you're using PHP 5.2 forever, then you can keep on using PSR-0 forever, but The PHP Group suggests you should upgrade to PHP 5.4 and the FIG suggests you upgrade to PSR-4. That's fine. You can ignore both of us forever.\n\nI'm going to try and get PSR-0 deprecated, but first I have to complete a sub-quest...\n\n## Problem 2: Amendments\n\nWe have a situation where PSR-1 depended on PSR-0, and if PSR-0 is ever deprecated or not, anyone who switched from PSR-0 to PSR-4 is suddently technically in violation of PSR-1.\n\n> - Namespaces and classes MUST follow [PSR-0].\n\nWell, that should say:\n\n> - Namespaces and classes MUST follow [PSR-0] or [PSR-4].\n\nRight? WRONG. I'm not going to complain about that again because I did it in a video already.\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/hd9t6jgGcYE\" frameborder=\"0\" allowfullscreen></iframe>\n\nPeople were super against our potential future selves saying \"Look, they edited this file once, so now we can change things willy nilly!\".\n\nErf. So to avoid that I've come up with an [amendment bylaw] which states that you can't make changes _except_ some reasonable conditions. Here is a real short summary:\n\n### Deprecation and Replacement\n\nShove a link at the top of the old one saying: you should use this newer one instead, if you can.\n\n### Dependencies\n\nPLEASE try and avoid them, but if you have to then put them in a \"dependency list\" which can always have new items pushed onto the stack but never have any removed. This is dependency injection for markdown. BOOM.\n\n### Annotations\n\nIf something needs to be clarified with errata, we can shove a link into the original document to link to the errata line in the meta document, otherwise people have literally no idea it exists.\n\n### Formatting & Typos\n\nOur table syntax on GitHub is broken, or some fucking Englishman snuck a British spelling past the group? Or straight up spelled something wrong? Fix that.\n\n\nThe full [Pull Request](https://github.com/php-fig/fig-standards/pull/247/files) is here. \n\nI'm probably going to put this to a vote for the rest of the group over the weekend, but as people who potentially use these standards, do you love or hate the idea of new standards coming out, old ones being deprecated and new ones being recommended? I know that it might seem like a lot of fuss as PSR-0 and PSR-4 is the first replacement, it's not the only time its going to happen, because...\n\n\n## Problem 3: PSR-2 needs to be replaced\n\nI'm into that idea, and Pádraic Brady (ZF's FIG rep) [is not against the idea](http://blog.astrumfutura.com/2014/02/coding-standards-humans-are-not-computers/) if you have a look in the comments.\n\nPSR-2 was never intended to be a 100% complete style guide. It was essentially split off of PSR-1 (considered for a while to be named PSR-1 Basic and PSR-1 Advanced) because some of the rules were considered so contentious that they would effect uptake of PSR-1 itself. So, we have this extra PSR-2 code style guide that huge projects like Laravel flagrantly ignore and which SF2 and ZF2 say they use but technically violate a few things in every file.\n\nWhat we need is... \n\n![14 standards...](http://www.explainxkcd.com/wiki/images/6/60/standards.png)\n\nSo replacing PSR-2 with PSR-Whatever would definitely get us up to 15 standards, but if we have a deprecation and replacement process set up then we're back down to 14... so it's not all that insane.\n\nIf we take the extensive guides from Drupal, Symfony, etc into account and can make something that is truly a logical merge of them, then we can potentially cut things down from 14 to maybe about 5. With PSR-1 and PSR-2 helping to bring a LOT of projects closer to the same style we're definitely making improvements to the situation, but we have a long way to go. \n\nHow would you feel about a more involved PSR for code style based off of PSR-2 but drastically improved? \n\nIt would almost definitely still involve spaces instead of tabs so don't freak out over that one, but it would take care of all the weird edge cases that have come up during the lifespan of PSR-2, like [this](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide-meta.md#31---multi-line-arguments-09082013) or [this](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide-meta.md#32---multi-line-arguments-10172013) or [any of these](https://github.com/php-fig/fig-standards/wiki/Further-Style-Guide-Considerations). That last link is a list of \"further style guide considerations\" of questions, irregularities or omissions that have been raised over the last few years, and would make for a good start for this. \n\nThe whole time I'm keeping an eye on Python's PEP system and the IETF rules for doing this. We cannot outright copy their processes, but they are definitely influencing the bylaws.\n\n### Summary\n\nI feel like the FIG is a great project/organisation/group with a lot of smart people working on/in it. I got the chance to meet many more FIG reps at [SunshinePHP](http://2014.sunshinephp.com), meaning I've met about half of the group now and it's a great crowd.\n\nWhile I consider the rest of them to be smart as hell, we do have an issue where this thing has kinda grown in a really ad-hoc way, been more successful than probably anyone expected and now we're dealing with the artifacts of that growth and early naivety.\n\n* Dependencies are a bad idea\n* No \"Review\" phases existed, where projects could implement standards before use\n* PSR-2 was not implemented by anyone before it was approved, and hardly even still\n* Nobody ever discussed how to deprecate/replace a standard\n\nI'm trying to help solve these issues, better the workflows and processes and help people learn from the mistakes, while the entire time taking flack from a lot of the community who just want to troll the FIG for not being perfect. To those people I feel like saying: do better, or go home. I'm doing what I can to make the situation better, and I'd be really grateful to hear feedback from the rest of the community about how to make the situation better. \n\nAgree, disagree, have alternative ideas, etc, all great. Just keep it positive.\n\n[workflow bylaw]: https://github.com/php-fig/fig-standards/blob/master/bylaws/004-psr-workflow.md\n[edge case bug]: https://github.com/philsturgeon/psr0-naming-oddity\n[amendment bylaw]: https://groups.google.com/forum/#!topic/php-fig/1-cVtxoGDRU",
    "created_on": "1392321180",
    "updated_on": "1392321180",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "322a91a4bb09c00b76c17b7c34b6e4fa",
    "type": "markdown",
    "parsed": "<p>I've managed to get myself involved in a lot of projects in and around the PHP community because I like to offer my advice, experience and time to trying to make things better. Recently, I've been putting in <em>lots</em> of time for bits around the PHP-FIG.</p>\n\n<p>Like it or not, tabs or spaces, PSR-2 or no, the PHP-FIG has had a huge impact on the PHP community and it's going to continue to do so. We have more PSR's in the works now that at any point before, and they're awesome ones. </p>\n\n<h2>PSR-5: PHPDoc</h2>\n\n<p>In Draft status and being worked on hard, most actively on GitHub. My guess? 6 months... probably.</p>\n\n<h2>PSR-6: Cache</h2>\n\n<p>Two years in the making? Ha. Well, we never used to have a workflow, so I spent a few months creating, editing, convincing and pushing through a <a href=\"https://github.com/php-fig/fig-standards/blob/master/bylaws/004-psr-workflow.md\">workflow bylaw</a> for that. The workflow stops multiple alternative proposals from being supported by different members and having this crazy duel between two totally disparate files. That was nuts! </p>\n\n<p>This workflow should get PSR-6 moving along, and I've suggested to the chap in charge that now would be a great time to bump it up to \"Review\". getting it one step closer to completion and forcing updates to be small. There's nothing big left on the todo list, so that seems like a decent plan.</p>\n\n<h2>PSR-7: HTTP Message</h2>\n\n<p><a href=\"https://github.com/php-fig/fig-standards/pull/244\">This one</a> is mainly being worked on by <a href=\"https://twitter.com/mtdowling\">Michael Dowling</a>, from AWS and Guzzle fame, but has my name on the bill as a coordinator much like PSR-4 and PSR-5. This one is very fresh and still in Draft stage, but will start picking up steam once the rest of the FIG take a look and offer feedback. I'll be pushing that if it doesn't happen fairly soon.</p>\n\n<p>You can see a full index of PSR's along with their statuses <a href=\"https://github.com/php-fig/fig-standards/wiki/PHP-Standard-Recommendations\">here</a>.</p>\n\n<p>So, progress is happening but I feel like we still have some problems at the FIG, and I would like to solve these issues. </p>\n\n<p><em>The following is almost entirely just my opinion, so others in the FIG do not necessarily agree. If we all agreed about everything it wouldn't be very representative of the PHP community at large.</em></p>\n\n<h2>Problem 1: PSR-0 AND PSR-4?</h2>\n\n<p>Some people have been calling the FIG a laughing stock because we have two active PSR's that achieve the same goal: autoloading.</p>\n\n<p>This \"You can use either one\" approach was (in my head at least, as coordinator of this PSR) intended to provide a \"grace period\" for people to upgrade without making them freak out and think they had to rush.</p>\n\n<p>PSR-0 and PSR-4 both do the exact same thing: they autoload code, and they do it in a 100% compatible way unless you're a PHP 5.2 project making use of legacy \"poor mans namespaces\", which was an old convention where _ would be converted to folder separator. Zend, Symfony, PEAR all did this for their code and a lot of projects like PHPUnit and Twig currently require that, and PHP 5.2. Those projects are big, and sometime they should upgrade, but that is what deprecation means: put it on your todo list.</p>\n\n<p>I've seen some people piss and moan about PSR-4 and it's namespace prefix support. For those of you unfamiliar with the feature, it means this:</p>\n\n<blockquote>\n  <p>vendor/league/fractal/src/League/Fractal/Resource/Collection.php</p>\n</blockquote>\n\n<p>... can be shortened to this:</p>\n\n<blockquote>\n  <p>vendor/league/fractal/src/Resource/Collection.php</p>\n</blockquote>\n\n<p>But let me be clear, that is an optional usage of PSR-4, and an optional feature in Composer too. If you would like to continue to be that verbose structure in your own code you're welcome to. </p>\n\n<p>To compare, this is how I achieved the shorter folder structure in the example above:</p>\n\n<pre><code>    \"psr-4\": {\n        \"League\\\\Fractal\\\\\": \"src\",\n        \"League\\\\Fractal\\\\Tests\\\\\": \"tests\"\n    }\n</code></pre>\n\n<p>If you would like to continue using the more verbose folder structure known in PSR-0 then great, simply change the above to this:</p>\n\n<pre><code>    \"psr-4\": {\n        \"League\\\\Fractal\\\\\": \"src/League/Fractal\",\n        \"League\\\\Fractal\\\\Tests\\\\\": \"tests/League/Fractal/Tests\"\n    }\n</code></pre>\n\n<p>Once again, PSR-0 folder structures are supported, and that example loads this identical path to the PSR-0 example:</p>\n\n<blockquote>\n  <p>vendor/league/fractal/src/League/Fractal/Resource/Collection.php</p>\n</blockquote>\n\n<p>That means PSR-4 is a completely compatible replacement for PSR-0, with the exception of dropping support for a long unsupported version of PHP, which helps us gladly ditch an <a href=\"https://github.com/philsturgeon/psr0-naming-oddity\">edge case bug</a>, and provides a great optional feature to those who felt like it was frustrating as f**k to have to replicate their entire folder structure every time. Literally no downside there.</p>\n\n<p>Paul Jones and myself agreed (I think) that once PSR-4 was approved then the two would be \"alternatives\" for a while, then we'd eventually deprecate one. Deprecating PSR-0 now (or soon) sends a message, that PSR-4 is the preferred successor, and you should work on getting onto it at some point. You can still use a \"deprecated\" PSR, and no PSR will ever be \"deleted\" (maybe it could be \"unrecommended\"), but we should definitely deprecate it as we do not need both to be considered \"recommended\".</p>\n\n<p>If you're using PHP 5.2 forever, then you can keep on using PSR-0 forever, but The PHP Group suggests you should upgrade to PHP 5.4 and the FIG suggests you upgrade to PSR-4. That's fine. You can ignore both of us forever.</p>\n\n<p>I'm going to try and get PSR-0 deprecated, but first I have to complete a sub-quest...</p>\n\n<h2>Problem 2: Amendments</h2>\n\n<p>We have a situation where PSR-1 depended on PSR-0, and if PSR-0 is ever deprecated or not, anyone who switched from PSR-0 to PSR-4 is suddently technically in violation of PSR-1.</p>\n\n<blockquote>\n  <ul>\n  <li>Namespaces and classes MUST follow [PSR-0].</li>\n  </ul>\n</blockquote>\n\n<p>Well, that should say:</p>\n\n<blockquote>\n  <ul>\n  <li>Namespaces and classes MUST follow [PSR-0] or [PSR-4].</li>\n  </ul>\n</blockquote>\n\n<p>Right? WRONG. I'm not going to complain about that again because I did it in a video already.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/hd9t6jgGcYE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>People were super against our potential future selves saying \"Look, they edited this file once, so now we can change things willy nilly!\".</p>\n\n<p>Erf. So to avoid that I've come up with an <a href=\"https://groups.google.com/forum/#!topic/php-fig/1-cVtxoGDRU\">amendment bylaw</a> which states that you can't make changes <em>except</em> some reasonable conditions. Here is a real short summary:</p>\n\n<h3>Deprecation and Replacement</h3>\n\n<p>Shove a link at the top of the old one saying: you should use this newer one instead, if you can.</p>\n\n<h3>Dependencies</h3>\n\n<p>PLEASE try and avoid them, but if you have to then put them in a \"dependency list\" which can always have new items pushed onto the stack but never have any removed. This is dependency injection for markdown. BOOM.</p>\n\n<h3>Annotations</h3>\n\n<p>If something needs to be clarified with errata, we can shove a link into the original document to link to the errata line in the meta document, otherwise people have literally no idea it exists.</p>\n\n<h3>Formatting &amp; Typos</h3>\n\n<p>Our table syntax on GitHub is broken, or some fucking Englishman snuck a British spelling past the group? Or straight up spelled something wrong? Fix that.</p>\n\n<p>The full <a href=\"https://github.com/php-fig/fig-standards/pull/247/files\">Pull Request</a> is here. </p>\n\n<p>I'm probably going to put this to a vote for the rest of the group over the weekend, but as people who potentially use these standards, do you love or hate the idea of new standards coming out, old ones being deprecated and new ones being recommended? I know that it might seem like a lot of fuss as PSR-0 and PSR-4 is the first replacement, it's not the only time its going to happen, because...</p>\n\n<h2>Problem 3: PSR-2 needs to be replaced</h2>\n\n<p>I'm into that idea, and Pádraic Brady (ZF's FIG rep) <a href=\"http://blog.astrumfutura.com/2014/02/coding-standards-humans-are-not-computers/\">is not against the idea</a> if you have a look in the comments.</p>\n\n<p>PSR-2 was never intended to be a 100% complete style guide. It was essentially split off of PSR-1 (considered for a while to be named PSR-1 Basic and PSR-1 Advanced) because some of the rules were considered so contentious that they would effect uptake of PSR-1 itself. So, we have this extra PSR-2 code style guide that huge projects like Laravel flagrantly ignore and which SF2 and ZF2 say they use but technically violate a few things in every file.</p>\n\n<p>What we need is... </p>\n\n<p><img src=\"http://www.explainxkcd.com/wiki/images/6/60/standards.png\" alt=\"14 standards...\" /></p>\n\n<p>So replacing PSR-2 with PSR-Whatever would definitely get us up to 15 standards, but if we have a deprecation and replacement process set up then we're back down to 14... so it's not all that insane.</p>\n\n<p>If we take the extensive guides from Drupal, Symfony, etc into account and can make something that is truly a logical merge of them, then we can potentially cut things down from 14 to maybe about 5. With PSR-1 and PSR-2 helping to bring a LOT of projects closer to the same style we're definitely making improvements to the situation, but we have a long way to go. </p>\n\n<p>How would you feel about a more involved PSR for code style based off of PSR-2 but drastically improved? </p>\n\n<p>It would almost definitely still involve spaces instead of tabs so don't freak out over that one, but it would take care of all the weird edge cases that have come up during the lifespan of PSR-2, like <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide-meta.md#31---multi-line-arguments-09082013\">this</a> or <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide-meta.md#32---multi-line-arguments-10172013\">this</a> or <a href=\"https://github.com/php-fig/fig-standards/wiki/Further-Style-Guide-Considerations\">any of these</a>. That last link is a list of \"further style guide considerations\" of questions, irregularities or omissions that have been raised over the last few years, and would make for a good start for this. </p>\n\n<p>The whole time I'm keeping an eye on Python's PEP system and the IETF rules for doing this. We cannot outright copy their processes, but they are definitely influencing the bylaws.</p>\n\n<h3>Summary</h3>\n\n<p>I feel like the FIG is a great project/organisation/group with a lot of smart people working on/in it. I got the chance to meet many more FIG reps at <a href=\"http://2014.sunshinephp.com\">SunshinePHP</a>, meaning I've met about half of the group now and it's a great crowd.</p>\n\n<p>While I consider the rest of them to be smart as hell, we do have an issue where this thing has kinda grown in a really ad-hoc way, been more successful than probably anyone expected and now we're dealing with the artifacts of that growth and early naivety.</p>\n\n<ul>\n<li>Dependencies are a bad idea</li>\n<li>No \"Review\" phases existed, where projects could implement standards before use</li>\n<li>PSR-2 was not implemented by anyone before it was approved, and hardly even still</li>\n<li>Nobody ever discussed how to deprecate/replace a standard</li>\n</ul>\n\n<p>I'm trying to help solve these issues, better the workflows and processes and help people learn from the mistakes, while the entire time taking flack from a lot of the community who just want to troll the FIG for not being perfect. To those people I feel like saying: do better, or go home. I'm doing what I can to make the situation better, and I'd be really grateful to hear feedback from the rest of the community about how to make the situation better. </p>\n\n<p>Agree, disagree, have alternative ideas, etc, all great. Just keep it positive.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "180",
    "created": "2014-03-13 18:23:00",
    "updated": "2014-03-13 18:23:00",
    "created_by": "2",
    "ordering_count": "33",
    "title": "Made in Production",
    "slug": "made-in-production",
    "category_id": "2",
    "attachment": "",
    "intro": "Late last summer I was riding my bike around the mountains of New Jersey. I&#39;m not sure if it was exhaustion, the heat or the fact that I had run out of podcasts to listen to but I had an idea: I should get into the t-shirt sale business.",
    "body": "Late last summer I was riding my bike around the mountains of New Jersey. I'm not sure if it was exhaustion, the heat or the fact that I had run out of podcasts to listen to but I had an idea: I should get into the t-shirt sale business.\n\nOn the ride I kept thinking of potential shirts and quotes. A lot of them got thrown away, and some are chalked to be produced later. The first t-shirt of course had to be something iconic, that PHP developers around the world would understand, love and immediately want. \n\nAs PHP developers we are often linked to the [Fractal of Bad Design blog post](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/), as though it is somehow relevant to actual PHP developers and not just some big list of bizare edge-cases and complaints about not being Python. It's annoying, but it has created some amazing imagery for us. \n\n> I can’t even say what’s wrong with PHP, because— okay. Imagine you have uh, a toolbox. A set of tools. Looks okay, standard stuff in there.\n\n> You pull out a screwdriver, and you see it’s one of those weird tri-headed things. Okay, well, that’s not very useful to you, but you guess it comes in handy sometimes.\n\n> You pull out the hammer, but to your dismay, it has the claw part on both sides. Still serviceable though, I mean, you can hit nails with the middle of the head holding it sideways.\n\n> [ramble ramble]\n\n> That’s what’s wrong with PHP.\n\nDouble-clawed hammer? That sounds f**king terrifying in the right hands. I figured it would probably look cool too, and Laura did not disappoint:\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Respect the <a href=\"https://twitter.com/search?q=%23DOUBLECLAW&amp;src=hash\">#DOUBLECLAW</a> <a href=\"http://t.co/5YNp0ZuhqX\">pic.twitter.com/5YNp0ZuhqX</a></p>&mdash; Josh Lockhart (@codeguy) <a href=\"https://twitter.com/codeguy/statuses/430446415588765696\">February 3, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThe general meaning here is that we have a powerful too. It's a bit odd, but in the right hands it can have some serious effects, so make fun at your own risk.\n\nAfter a few months of occasional hackaton-style code jams with [Zack Kitzmiller](http://twitter.com/zackkitzmiller) and some first-rate scribbling from [Laura Bee](http://twitter.com/LauRARbee), the first is [available for sale](https://www.madeinproduction.com/)!\n\nIn the few months since we started this, the mighty double-claws have managed to get around the world. We started international sales a few weeks ago and before that the stowed away with a few Americans, getting as far as Madrid.\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p>.<a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/zackkitzmiller\">@zackkitzmiller</a> Double claw landed in Madrid RT <a href=\"https://twitter.com/diazwatson\">@diazwatson</a> <a href=\"https://twitter.com/benmarks\">@benmarks</a> <a href=\"https://twitter.com/search?q=%23MM14ES&amp;src=hash\">#MM14ES</a> <a href=\"http://t.co/qNFa3oy7Z2\">pic.twitter.com/qNFa3oy7Z2</a></p>&mdash; Ben (@benmarks) <a href=\"https://twitter.com/benmarks/statuses/441196097105838080\">March 5, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThis is the first of many t-shirts. We're using profits from the sales of this t-shirt to cover the time it will take to develop and design the site further. We hope this t-shirt can raise enough money to get another designed and maybe get some love for the website design. \n\nComing next on the development side will be checkouts and the ability to buy multiple shirts. \n\nPlease do me a favor and tweet out a link to the website. I want this to be amazing, but we will need help getting the sales up enough to really further it.",
    "created_on": "1394734980",
    "updated_on": "1394734980",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "c59bcf79c280e318f69985660a7e64d7",
    "type": "markdown",
    "parsed": "<p>Late last summer I was riding my bike around the mountains of New Jersey. I'm not sure if it was exhaustion, the heat or the fact that I had run out of podcasts to listen to but I had an idea: I should get into the t-shirt sale business.</p>\n\n<p>On the ride I kept thinking of potential shirts and quotes. A lot of them got thrown away, and some are chalked to be produced later. The first t-shirt of course had to be something iconic, that PHP developers around the world would understand, love and immediately want. </p>\n\n<p>As PHP developers we are often linked to the <a href=\"http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/\">Fractal of Bad Design blog post</a>, as though it is somehow relevant to actual PHP developers and not just some big list of bizare edge-cases and complaints about not being Python. It's annoying, but it has created some amazing imagery for us. </p>\n\n<blockquote>\n  <p>I can’t even say what’s wrong with PHP, because— okay. Imagine you have uh, a toolbox. A set of tools. Looks okay, standard stuff in there.</p>\n  \n  <p>You pull out a screwdriver, and you see it’s one of those weird tri-headed things. Okay, well, that’s not very useful to you, but you guess it comes in handy sometimes.</p>\n  \n  <p>You pull out the hammer, but to your dismay, it has the claw part on both sides. Still serviceable though, I mean, you can hit nails with the middle of the head holding it sideways.</p>\n  \n  <p>[ramble ramble]</p>\n  \n  <p>That’s what’s wrong with PHP.</p>\n</blockquote>\n\n<p>Double-clawed hammer? That sounds f**king terrifying in the right hands. I figured it would probably look cool too, and Laura did not disappoint:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Respect the <a href=\"https://twitter.com/search?q=%23DOUBLECLAW&amp;src=hash\">#DOUBLECLAW</a> <a href=\"http://t.co/5YNp0ZuhqX\">pic.twitter.com/5YNp0ZuhqX</a></p>&mdash; Josh Lockhart (@codeguy) <a href=\"https://twitter.com/codeguy/statuses/430446415588765696\">February 3, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>The general meaning here is that we have a powerful too. It's a bit odd, but in the right hands it can have some serious effects, so make fun at your own risk.</p>\n\n<p>After a few months of occasional hackaton-style code jams with <a href=\"http://twitter.com/zackkitzmiller\">Zack Kitzmiller</a> and some first-rate scribbling from <a href=\"http://twitter.com/LauRARbee\">Laura Bee</a>, the first is <a href=\"https://www.madeinproduction.com/\">available for sale</a>!</p>\n\n<p>In the few months since we started this, the mighty double-claws have managed to get around the world. We started international sales a few weeks ago and before that the stowed away with a few Americans, getting as far as Madrid.</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p>.<a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> <a href=\"https://twitter.com/zackkitzmiller\">@zackkitzmiller</a> Double claw landed in Madrid RT <a href=\"https://twitter.com/diazwatson\">@diazwatson</a> <a href=\"https://twitter.com/benmarks\">@benmarks</a> <a href=\"https://twitter.com/search?q=%23MM14ES&amp;src=hash\">#MM14ES</a> <a href=\"http://t.co/qNFa3oy7Z2\">pic.twitter.com/qNFa3oy7Z2</a></p>&mdash; Ben (@benmarks) <a href=\"https://twitter.com/benmarks/statuses/441196097105838080\">March 5, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>This is the first of many t-shirts. We're using profits from the sales of this t-shirt to cover the time it will take to develop and design the site further. We hope this t-shirt can raise enough money to get another designed and maybe get some love for the website design. </p>\n\n<p>Coming next on the development side will be checkouts and the ability to buy multiple shirts. </p>\n\n<p>Please do me a favor and tweet out a link to the website. I want this to be amazing, but we will need help getting the sales up enough to really further it.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "201",
    "created": "2014-05-11 20:36:00",
    "updated": "2014-05-11 20:36:00",
    "created_by": "2",
    "ordering_count": "37",
    "title": "RESTful URLs: Actions Need Not Apply",
    "slug": "restful-urls-actions-need-not-apply",
    "category_id": "31",
    "attachment": "",
    "intro": "I was doing a little consulting for a company while I was out in South Africa and we played the game. You fire SOAP functionality at me, and I write down RESTful endpoints. Once or twice I found myself considering suggesting a dodgy unRESTful endpoints, but each time I wrangled my brain a little harder to work out what combinations of slashes and squiggles would appease the RESTful Overlords, and avoid them throwing lightning bolts down from upon high.",
    "body": "I was doing a little consulting for a company while I was out in South Africa and we played the game. You fire SOAP functionality at me, and I write down RESTful endpoints. This was rapid-fire API design with 20 people in the room. \n\nIt was fun, but a few of them were tricky. Their requirements were far from trivial, being a company that sends millions of emails and text messages a day to people based on various different type of phone number, short-code, or user id. Once or twice I found myself considering suggesting a dodgy unRESTful endpoints, but each time I wrangled my brain a little harder to work out what combinations of slashes and squiggles would appease the RESTful Overlords, and avoid them throwing lightning bolts down from upon high.\n\n## SOAP Style\n\nTraditionally APIs would consist of a series of endpoints which all described verbs (actions):\n\n> POST /SendUserMessage HTTP/1.1  \n> Host: example.com  \n> Content-Type: application/x-www-form-urlencoded  \n>  \n> id=5&message=Hello!\n\nAs you might have already gathered, this is not how things are done with REST.\n\n## Kinda RESTful\n\nSome API developers consider the following approach to be more RESTful because it uses a \"sub-resource\":\n\n> POST /users/5/send-message HTTP/1.1  \n> Host: example.com  \n> Content-Type: application/json  \n>  \n> { \"message\" : \"Hello!\" }\n\nNope, because that is still using a verb in the URL. A verb is an action - a doing term, and our API only needs one verb - the HTTP Method. All other verbs need to stay out of the URL.\n\nA noun is a \"place\" or a \"thing\". Resources are \"things\", and a URL becomes the \"place\" on the Internet where a \"thing\" lives.\n\n## Proper RESTful\n\nThis example would be drastically more RESTful:\n\n> POST /users/5/messages HTTP/1.1  \n> Host: example.com  \n> Content-Type: application/json  \n>  \n> { \"message\" : \"Hello!\" }\n\n\nPerfect! We are creating a new message, which belongs to a user. The best part about keeping it nice and RESTful like this, is that other HTTP actions can be made to the identical URL:\n\n* `GET /users/philsturgeon/messages`\n* `PATCH /users/philsturgeon/messages/xdWRwerG`\n* `DELETE /users/philsturgeon/messages/xdWRwerG`\n\nThis is all much easier to document and much easier to understand for both humans and software which is \"RESTfully aware.\"\n\nSo for this client, they had to send potentially hundreds of thousands of messages on a regular basis. The solution we went with was to make `/messages` its own endpoint and send the messages in batches of a few hundred:\n\n{{ prism:syntax }}POST /messages HTTP/1.1\nHost: example.com\nContent-Type: application/json\n\n{\n\t[{\n\t\t\"user\" : { \"id\" : 10 },\n\t\t\"message\" : \"Hello!\"\n\t},  \n\t{\n\t\t\"user\" : { \"username\" : \"philsturgeon\" },\n\t\t\"message\" : \"Hello!\"\n\t}]\n}{{ /prism:syntax }}\n\n\nThis would look incredibly similar to create the data as it would to retrieve the data, which is intentional. Regardless of the HTTP verb and regardless of the specific URL, a spade should always look like a spade, and a bag of spanners should always look like a bag of spanners. Things should be a specific pattern and it should not require guesswork to figure out how things look for GET or POST... unless you're Facebook and then it's just one big gameshow with no prizes.\n\n_After the session with that company I made a note to write this up in my API book and blog about it too. It took me a while to get around to it, and in the meantime somebody else wrote a blog on the same subject which I cannot remember or find. Gimme the link if you know it, I don't want anyone getting in a flap saying I stole this._",
    "created_on": "1399840560",
    "updated_on": "1399840560",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "772f407f457adac5334e9f90305e66f3",
    "type": "markdown",
    "parsed": "<p>I was doing a little consulting for a company while I was out in South Africa and we played the game. You fire SOAP functionality at me, and I write down RESTful endpoints. This was rapid-fire API design with 20 people in the room. </p>\n\n<p>It was fun, but a few of them were tricky. Their requirements were far from trivial, being a company that sends millions of emails and text messages a day to people based on various different type of phone number, short-code, or user id. Once or twice I found myself considering suggesting a dodgy unRESTful endpoints, but each time I wrangled my brain a little harder to work out what combinations of slashes and squiggles would appease the RESTful Overlords, and avoid them throwing lightning bolts down from upon high.</p>\n\n<h2>SOAP Style</h2>\n\n<p>Traditionally APIs would consist of a series of endpoints which all described verbs (actions):</p>\n\n<blockquote>\n  <p>POST /SendUserMessage HTTP/1.1<br />\n  Host: example.com<br />\n  Content-Type: application/x-www-form-urlencoded<br />\n   \n  id=5&amp;message=Hello!</p>\n</blockquote>\n\n<p>As you might have already gathered, this is not how things are done with REST.</p>\n\n<h2>Kinda RESTful</h2>\n\n<p>Some API developers consider the following approach to be more RESTful because it uses a \"sub-resource\":</p>\n\n<blockquote>\n  <p>POST /users/5/send-message HTTP/1.1<br />\n  Host: example.com<br />\n  Content-Type: application/json<br />\n   \n  { \"message\" : \"Hello!\" }</p>\n</blockquote>\n\n<p>Nope, because that is still using a verb in the URL. A verb is an action - a doing term, and our API only needs one verb - the HTTP Method. All other verbs need to stay out of the URL.</p>\n\n<p>A noun is a \"place\" or a \"thing\". Resources are \"things\", and a URL becomes the \"place\" on the Internet where a \"thing\" lives.</p>\n\n<h2>Proper RESTful</h2>\n\n<p>This example would be drastically more RESTful:</p>\n\n<blockquote>\n  <p>POST /users/5/messages HTTP/1.1<br />\n  Host: example.com<br />\n  Content-Type: application/json<br />\n   \n  { \"message\" : \"Hello!\" }</p>\n</blockquote>\n\n<p>Perfect! We are creating a new message, which belongs to a user. The best part about keeping it nice and RESTful like this, is that other HTTP actions can be made to the identical URL:</p>\n\n<ul>\n<li><code>GET /users/philsturgeon/messages</code></li>\n<li><code>PATCH /users/philsturgeon/messages/xdWRwerG</code></li>\n<li><code>DELETE /users/philsturgeon/messages/xdWRwerG</code></li>\n</ul>\n\n<p>This is all much easier to document and much easier to understand for both humans and software which is \"RESTfully aware.\"</p>\n\n<p>So for this client, they had to send potentially hundreds of thousands of messages on a regular basis. The solution we went with was to make <code>/messages</code> its own endpoint and send the messages in batches of a few hundred:</p>\n\n<p>{{ prism:syntax }}POST /messages HTTP/1.1\nHost: example.com\nContent-Type: application/json</p>\n\n<p>{\n    [{\n        \"user\" : { \"id\" : 10 },\n        \"message\" : \"Hello!\"\n    },<br />\n    {\n        \"user\" : { \"username\" : \"philsturgeon\" },\n        \"message\" : \"Hello!\"\n    }]\n}{{ /prism:syntax }}</p>\n\n<p>This would look incredibly similar to create the data as it would to retrieve the data, which is intentional. Regardless of the HTTP verb and regardless of the specific URL, a spade should always look like a spade, and a bag of spanners should always look like a bag of spanners. Things should be a specific pattern and it should not require guesswork to figure out how things look for GET or POST... unless you're Facebook and then it's just one big gameshow with no prizes.</p>\n\n<p><em>After the session with that company I made a note to write this up in my API book and blog about it too. It took me a while to get around to it, and in the meantime somebody else wrote a blog on the same subject which I cannot remember or find. Gimme the link if you know it, I don't want anyone getting in a flap saying I stole this.</em></p>\n",
    "preview_hash": ""
  },
  {
    "id": "182",
    "created": "2014-05-07 21:21:00",
    "updated": "2014-05-07 21:21:00",
    "created_by": "2",
    "ordering_count": "35",
    "title": "The Tale of Tom, Dick and Harry",
    "slug": "the-tale-of-tom-dick-and-harry",
    "category_id": "0",
    "attachment": "",
    "intro": "This article describes three fictional characters as they all learn how various tools and methodologies work in the world of technology, internets and programming.",
    "body": "This article describes three fictional characters as they all learn how various tools and methodologies work in the world of technology, internets and programming. \n\n## Tom\n\nTom works with some massive clients these days and has been in the industry for 10+ years, seeing various tools, frameworks and methodologies come and go. He is very used to the \"right tool for the job\" idea and is happy to switch between tools, languages and workflows based on the project he is working on, and the team he is working on that project with. \n\nTom has recently decided to learn about InternetThingX, after he saw somebody give a great talk about it. In part his interest is down to his love of learning new things, but he also thinks it might solve a problem he has run into on a few other projects, and thinks it will help in some cases in the future.\n \nTom is an eager learner, an explorer and is motivated by playing with new things. He also has a real penchant  for teaching, and after learning and successfully implementing InternetThingX in a project or two Tom starts to recommend that others take a look too.\n\n## Harry\n\nHarry - like Tom - is interested in learning new things too, but is a little less experienced. He is also incredibly busy, being a respected Symfony and Drupal developer. He makes enough money to get all of his bills paid, and does not have much time outside of that due to his clients _never ending_ demands.\n\nHarry only knows PHP but never saw a problem with that. He sometimes uses Drupal when he needs a CMS, Symfony when he needs a framework, and his web stack uses XAMPP because he is on Windows.\n\nHarry saw Tom give a talk about InternetThingX, and loved it. Harry struggled for a while with InternetThingX because it was quite new, but after finding some more documentation he eventually realized it's a really useful tool for some of his projects. \n\nHe has added this to his reasonably small tool-belt for occasional use, and will actively recommend it to others because he is proud about learning a new thing. After all, it's not often Harry has the chance to learn new technologies with all those bloody clients blowing up his phone around the clock.\n \n## Dick\n\nDick has only been a programmer for about a year. He is very confident in his skill-set and has built a few sites, but his tool-belt is restricted to just one of each type of thing, which he has learned as he needed to use it. Dick is actively looking for things to learn so that he can become a better developer. \n\nDick sees Harry suggesting that InternetThingX is good, so InternetThingX goes straight on Dicks todo list. \n \nIt takes Dick a _really_ long time to get the hang of InternetThingX. InternetThingX is quite a bit more complicated than InternetThingA but Dick keeps at it because he saw Harry saying that it was good. Harry missed out some of the \"InternetThingX in useful in this context...\" because he was just proud about learning the tool, and so Dick just keeps on chugging away trying to learn it. He never used InternetThingA anyway, so he can't give up now after spending so much time to wrap his brain around it. \n\nWhen Dick has finally learned all about InternetThingX he feels like a superstar for mastering it, and now uses it for absobloodyutelyeverygoddamnthing.\n\nAfter spending that long trying to learn it, why wouldn't he? It has more features than that other thing and it can theoretically help Dick avoid some big scary problems that happen at large scale. Problems sound bad, so... cool!\n\nDick now goes around recommending it to everyone who mentions trying to do something _near_ the problem space, not even necessarily in it. He doesn't have many options available so he proudly shouts about the closest one and it will _technically_ work. If Dick spots anyone talking negatively about InternetThingX he pounces, telling them they're wrong. He might not even realize it's a defense mechanism, but whatever, they're stupid. They don't understand. \n\nDick screams at Tom when Tom suggests at a conference that InternetThingX might not always be the right tool for the job. Why the hell would Tom go spreading stupid shit like that? Dick remembers that it was complex to learn and took him a while, but maybe that was just because he was fairly new to things. Really it was good for Dick jumping in at the deep end. If others drown in missed deadlines due to not learning the tool quick enough then... well that is their fault. It's make or break. _In the long run_ Dick feels better off for for doing things the complicated way.\n\n## \"Conclusion\"\n\nDick is well intentioned, but has been mislead to believe a meal must _always_ be a four-course culinary masterpiece, when sometimes a basic meat and two veg will satisfy the criteria.  He is likely to run around forcing beginners to get confused by overly complex solutions to problems that they (and he) do not have yet, and might not have for years.\n\nEveryone has to start somewhere, but don't be a Dick.\n\nHarry is a good lad, but he should have explained the uses cases a little better in the blogs he released.\n\nMaybe Tom is just a know-it-all with too much time on his hands due to charging his clients through the nose.\n\nNobody is perfect.\n\nIn this story, InternetThingX could have been:\n\n* Vagrant\n* PaaS\n* Laravel\n* The \"Repository\" Pattern\n* TDD\n\n_These two were mentioned on Reddit as a joke, but they fit in here perfectly too:_\n\n* NodeJS\n* MongoDB\n\nLearn what you reasonably can in the time you have available. You can't learn everything, but you should learn more. \n\nTry to learn **when** something is useful, but more importantly learn **when not** to use something. You don't need to use Vagrant for every project ever.\n\nFor example, Vagrant is excellent. I wrote about how excellent Vagrant is and how it can avoid obscure problems on production. I forgot to write that I use MAMP for basic CMS projects because the CMSs have all been built to abstract away those differences and most of the time it doesn't matter. \n\nI also forgot to mention that sometimes clients don't really feel like paying you the day/week it takes to get their architecture moved over and all of their other staff upgraded and switched over.\n\nVagrant is cool. Use it when it fits. Don't bother if its trouble.\n\nPaaS is cool. Use it when it fits. Don't bother if its trouble.\n\nLaravel is cool. Use it when it fits. Don't bother if its trouble.\n\nThe \"Repository\" Pattern is cool. Use it when it fits. Don't bother if its trouble.\n\nTDD is cool. Use it when it fits. Don't bother if its trouble.",
    "created_on": "1399497660",
    "updated_on": "1399497660",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "d7f7f04bcad429cfaabf4f10e11632a6",
    "type": "markdown",
    "parsed": "<p>This article describes three fictional characters as they all learn how various tools and methodologies work in the world of technology, internets and programming. </p>\n\n<h2>Tom</h2>\n\n<p>Tom works with some massive clients these days and has been in the industry for 10+ years, seeing various tools, frameworks and methodologies come and go. He is very used to the \"right tool for the job\" idea and is happy to switch between tools, languages and workflows based on the project he is working on, and the team he is working on that project with. </p>\n\n<p>Tom has recently decided to learn about InternetThingX, after he saw somebody give a great talk about it. In part his interest is down to his love of learning new things, but he also thinks it might solve a problem he has run into on a few other projects, and thinks it will help in some cases in the future.</p>\n\n<p>Tom is an eager learner, an explorer and is motivated by playing with new things. He also has a real penchant  for teaching, and after learning and successfully implementing InternetThingX in a project or two Tom starts to recommend that others take a look too.</p>\n\n<h2>Harry</h2>\n\n<p>Harry - like Tom - is interested in learning new things too, but is a little less experienced. He is also incredibly busy, being a respected Symfony and Drupal developer. He makes enough money to get all of his bills paid, and does not have much time outside of that due to his clients <em>never ending</em> demands.</p>\n\n<p>Harry only knows PHP but never saw a problem with that. He sometimes uses Drupal when he needs a CMS, Symfony when he needs a framework, and his web stack uses XAMPP because he is on Windows.</p>\n\n<p>Harry saw Tom give a talk about InternetThingX, and loved it. Harry struggled for a while with InternetThingX because it was quite new, but after finding some more documentation he eventually realized it's a really useful tool for some of his projects. </p>\n\n<p>He has added this to his reasonably small tool-belt for occasional use, and will actively recommend it to others because he is proud about learning a new thing. After all, it's not often Harry has the chance to learn new technologies with all those bloody clients blowing up his phone around the clock.</p>\n\n<h2>Dick</h2>\n\n<p>Dick has only been a programmer for about a year. He is very confident in his skill-set and has built a few sites, but his tool-belt is restricted to just one of each type of thing, which he has learned as he needed to use it. Dick is actively looking for things to learn so that he can become a better developer. </p>\n\n<p>Dick sees Harry suggesting that InternetThingX is good, so InternetThingX goes straight on Dicks todo list. </p>\n\n<p>It takes Dick a <em>really</em> long time to get the hang of InternetThingX. InternetThingX is quite a bit more complicated than InternetThingA but Dick keeps at it because he saw Harry saying that it was good. Harry missed out some of the \"InternetThingX in useful in this context...\" because he was just proud about learning the tool, and so Dick just keeps on chugging away trying to learn it. He never used InternetThingA anyway, so he can't give up now after spending so much time to wrap his brain around it. </p>\n\n<p>When Dick has finally learned all about InternetThingX he feels like a superstar for mastering it, and now uses it for absobloodyutelyeverygoddamnthing.</p>\n\n<p>After spending that long trying to learn it, why wouldn't he? It has more features than that other thing and it can theoretically help Dick avoid some big scary problems that happen at large scale. Problems sound bad, so... cool!</p>\n\n<p>Dick now goes around recommending it to everyone who mentions trying to do something <em>near</em> the problem space, not even necessarily in it. He doesn't have many options available so he proudly shouts about the closest one and it will <em>technically</em> work. If Dick spots anyone talking negatively about InternetThingX he pounces, telling them they're wrong. He might not even realize it's a defense mechanism, but whatever, they're stupid. They don't understand. </p>\n\n<p>Dick screams at Tom when Tom suggests at a conference that InternetThingX might not always be the right tool for the job. Why the hell would Tom go spreading stupid shit like that? Dick remembers that it was complex to learn and took him a while, but maybe that was just because he was fairly new to things. Really it was good for Dick jumping in at the deep end. If others drown in missed deadlines due to not learning the tool quick enough then... well that is their fault. It's make or break. <em>In the long run</em> Dick feels better off for for doing things the complicated way.</p>\n\n<h2>\"Conclusion\"</h2>\n\n<p>Dick is well intentioned, but has been mislead to believe a meal must <em>always</em> be a four-course culinary masterpiece, when sometimes a basic meat and two veg will satisfy the criteria.  He is likely to run around forcing beginners to get confused by overly complex solutions to problems that they (and he) do not have yet, and might not have for years.</p>\n\n<p>Everyone has to start somewhere, but don't be a Dick.</p>\n\n<p>Harry is a good lad, but he should have explained the uses cases a little better in the blogs he released.</p>\n\n<p>Maybe Tom is just a know-it-all with too much time on his hands due to charging his clients through the nose.</p>\n\n<p>Nobody is perfect.</p>\n\n<p>In this story, InternetThingX could have been:</p>\n\n<ul>\n<li>Vagrant</li>\n<li>PaaS</li>\n<li>Laravel</li>\n<li>The \"Repository\" Pattern</li>\n<li>TDD</li>\n</ul>\n\n<p><em>These two were mentioned on Reddit as a joke, but they fit in here perfectly too:</em></p>\n\n<ul>\n<li>NodeJS</li>\n<li>MongoDB</li>\n</ul>\n\n<p>Learn what you reasonably can in the time you have available. You can't learn everything, but you should learn more. </p>\n\n<p>Try to learn <strong>when</strong> something is useful, but more importantly learn <strong>when not</strong> to use something. You don't need to use Vagrant for every project ever.</p>\n\n<p>For example, Vagrant is excellent. I wrote about how excellent Vagrant is and how it can avoid obscure problems on production. I forgot to write that I use MAMP for basic CMS projects because the CMSs have all been built to abstract away those differences and most of the time it doesn't matter. </p>\n\n<p>I also forgot to mention that sometimes clients don't really feel like paying you the day/week it takes to get their architecture moved over and all of their other staff upgraded and switched over.</p>\n\n<p>Vagrant is cool. Use it when it fits. Don't bother if its trouble.</p>\n\n<p>PaaS is cool. Use it when it fits. Don't bother if its trouble.</p>\n\n<p>Laravel is cool. Use it when it fits. Don't bother if its trouble.</p>\n\n<p>The \"Repository\" Pattern is cool. Use it when it fits. Don't bother if its trouble.</p>\n\n<p>TDD is cool. Use it when it fits. Don't bother if its trouble.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "191",
    "created": "2014-05-09 12:54:00",
    "updated": "2014-05-09 12:54:00",
    "created_by": "2",
    "ordering_count": "36",
    "title": "Heroku and PHP Sitting in a Tree. K.I.S.S.I.N.G",
    "slug": "heroku-and-php-sitting-in-a-tree",
    "category_id": "2",
    "attachment": "",
    "intro": "Heroku was - as far as I remember - the first (mainstream) PaaS on the market. It was Ruby-only but it was that symbol of modern web development at the time, with the whole &quot;slinging code&quot;, &quot;getting shit done&quot;, make a Git repo and start shipping bro, hack project/agile-til-it-works mindset. &nbsp;Since then I&#39;ve been wishing they would add official PHP support. And... guess what they just did.",
    "body": "Heroku was - as far as I remember - the first (mainstream) PaaS on the market. It was Ruby-only but it was that symbol of modern web development at the time, with the whole \"slinging code\", \"getting shit done\", make a Git repo and start shipping bro, hack project/agile-til-it-works mindset. \n\nI made a few Rails apps back in the day, one of them being [Travlr](http://travlrapp.com/) (which I should probably take down) and more recently [Bieber.ly](http://techcrunch.com/2011/01/13/bieberly-justin-bieber/) and it was always amazing to work with. Git push your code, its deployed, one-click installs and drag to scale. It sucked that it was always for Ruby, because as I was also doing a _lot_ of work in PHP I obviously wished I could have the same for my other projects.\n\nThen PHP-Fog (later rebranded as App Fog) came along, with the slogan \"Heroku for PHP!\" I got excited and started using it - immediately taking my blog over to them and putting a few simple new client applications on there, but it was early days and it didn't do as much. It was ok, but it wasn't amazing. The scaling would sometimes take a REALLY long time and it would essentially delete your app and install a new copy, losing any temporary data. There was also no way to SSH in and download stuff or tweak anything or do... anything that you realistically wanted to do. \n\nOrchestra.io came along, and the founder [Eamon Leonard](https://twitter.com/EamonLeonard) was kind enough to give me a demo of the early versions. Again, it was early, but it didn't seem to do as much as PHP Fog did, which was already less than I wanted. \n\n[Pagodabox](https://pagodabox.com/) came along and offered a _lot_ more functionality. It was amazing. It had instant scaling up and down, both horizontally and vertically, it offered all sorts of caching options and had SSH access so you could rsync any user generated content down and make backups. (Yes, you should use S3 or something, but try telling that to clients using old shitty CMSs that dont support it). Pagodabox was amazing, so I moved my blog to it, and put a few simple client projects up there.\n\nHeroku then started offering official support for Python, Node, Java... a _bunch_ of platforms but... not PHP. I mean, you could kinda hack it in there but the platform was shitty and setup was a combination of weird commands. It was a second class citizen only supported by third-party buildpacks like the -incredibly good -  [CHH](https://github.com/CHH/heroku-buildpack-php) buildpack. I played around with it a bit, but continued to wait for PHP support before moving anything substantial over there. \n\nOrchestra.io then was [acquired by EngineYard](http://techcrunch.com/2011/08/23/engine-yard-acquires-orchestra-to-add-php-support-to-its-paas/), Heorku's biggest competitor. Woah! I hoped Heroku would get going with PHP properly then, but no... ahh sod it though,we still have these other three options to play with. Right?\n\nWith these options available I optimistically called 2012 [The Year of PHP Cloud Hosting](http://philsturgeon.co.uk/blog/2012/01/2012-the-year-of-php-cloud-hosting). By the end of the year I was [calling myself a fool](http://philsturgeon.co.uk/blog/2012/10/cloud-hosting-php-pipe-dream) for ever thinking it could be done properly.\n\nPagodabox was the most feature complete, but as stable as a wet fart. PHP Fog stopped having work done as App Fog came along, and App Fog just seemed to be missing crucial features. A few other options came and went within the space of a few months and some were always there but... there were a lot of shit options around.\n\nIt seemed like a lot of these companies were making these platforms for the sake of making them, and not really understanding the problem space properly.\n\n[Fortrabbit](http://fortrabbit.com) was the savior for the last year and they've been a big hit in the Laravel community, but they sadly do not have all that many addons and compared to some other hosting solutions (and some of their since failed competition) they felt a little on the expensive side.\n\nThe only time I got to use Heroku properly recently was when me and [Zack](http://twitter.com/zackkitzmiller) built [madeinproduction.com](http://madeinproduction.com) with Python/Flask. I still missed it.\n\nThen guess who came along? \n\n[BLOODY HEROKU DID!](https://blog.heroku.com/archives/2014/4/29/introducing_the_new_php_on_heroku)\n\nHeroku hired [David Zuelke](https://twitter.com/dzuelke) to help them bring PHP onto the platform as an officially supported language. I'd seen his name around GitHub plenty whilst working with the CHH buildpack and a few other pieces, and I knew this would be a good sign. A few months later there was a private beta, and now PHP is public beta on Heroku. \n\n![WINNING](http://www.reactiongifs.com/r/yay.gif)\n\nIt took me longer to write this blog than it did to migrate this [PyroCMS](http://pyrocms.com)-based blog to Heroku.\n\nPyroCMS 2.2 is a little old now, and it only supports MySQL. Luckily 2.3 will be out soon which supports PostgreSQL and SQLite too, but in the mean-time I just added the [ClearDB MySQL Addon](https://addons.heroku.com/cleardb) and I'm up and running. It took me literally about 10 minutes.\n\nI create the app on Heroku through their web interface.\n\nI had to link my local codebase to a Heroku app.\n\n> $ git remote add heroku git@heroku.com:philsturgeon.git\n\nLogged into heroku on the command line. If you dont have the command-line app you will want to [install that](https://devcenter.heroku.com/articles/quickstart).\n\n> $ heroku login\n\nPick an SSH key to add to your account. (No waiting 5-15 minutes like most other PHP PaaS systems, this one is instant.)\n\n> $ heroku keys:add \n\nAdded a database (for free, up to 5mb).\n\n> $ heroku addons:add clearedb\n\nUpdated my system/cms/database.php to use the ENV variable they set pointing to the database. Make your own system/cms/development/database.php to override this with your local MySQL config.\n\n{{ prism:syntax lang=\"php\" }}\n<?php if (!defined('BASEPATH')) exit('No direct script access allowed');\n\n$url = parse_url(getenv(\"CLEARDB\\_DATABASE\\_URL\"));\n\n// Staging and Production\n$db['default'] = array(\n    'hostname'\t\t=> \t$url[\"host\"],\n    'username'\t\t=> \t$url[\"user\"],\n    'password'\t\t=> \t$url[\"pass\"],\n    'database'\t\t=> \tsubstr($url[\"path\"], 1),\n    'dbdriver' \t\t=> \t'mysqli',\n    'active_r' \t\t=>\ttrue,\n    'pconnect' \t\t=>\tfalse,\n    'db_debug' \t\t=>\ttrue,\n    'cache_on' \t\t=>\tfalse,\n    'char_set' \t\t=>\t'utf8',\n    'dbcollat' \t\t=>\t'utf8_unicode_ci',\n);\n\n// Assign the group to be used\n$active_group = 'default';\n{{ /prism:syntax }}\n\n\nThey need a composer.json in there and PyroCMS 2.2 doesn't have one. ([PyroCMS 2.3 does](https://github.com/pyrocms/pyrocms/blob/2.3/develop/composer.json).)\n\n> $ touch composer.json && git add composer.json\n\nSet the `PYRO_ENV` to be production, so it doesn't try using your development config. \n\n> $ heroku config:set PYRO_ENV='production'\n\nPush all of that stuff up to Heroku. \n\n> $ git commit -am \"Added all the heroku-related changes\"\n> $ git push heroku master\n\nTADAAAAAAAAA.\n\nMy PyroCMS 2.2 blog here is now running on Heroku. I finally get to check that off my todo list.\n\nStill on the list is:\n\n* \"Upgrade to 2.3.0-beta1 as soon as its out\"\n* \"Convert to PostgreSQL because its web-scale\"\n* \"Blog about all of it properly\"\n\nHeroku is an awesome solution because not only do they properly understand the problem, but they have been doing this for _years_. They've been around since 2007 so they completely understand how to set up simple hosting, from the basic blog to [The Twelve Factor App](http://12factor.net), which if we're honest, is becoming more and more common these days, especially with all these people going around telling you to build API-first and API-centric applications... *cough*",
    "created_on": "1399640040",
    "updated_on": "1399640040",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "dd3df53f12775efc88543addde2fdb15",
    "type": "markdown",
    "parsed": "<p>Heroku was - as far as I remember - the first (mainstream) PaaS on the market. It was Ruby-only but it was that symbol of modern web development at the time, with the whole \"slinging code\", \"getting shit done\", make a Git repo and start shipping bro, hack project/agile-til-it-works mindset. </p>\n\n<p>I made a few Rails apps back in the day, one of them being <a href=\"http://travlrapp.com/\">Travlr</a> (which I should probably take down) and more recently <a href=\"http://techcrunch.com/2011/01/13/bieberly-justin-bieber/\">Bieber.ly</a> and it was always amazing to work with. Git push your code, its deployed, one-click installs and drag to scale. It sucked that it was always for Ruby, because as I was also doing a <em>lot</em> of work in PHP I obviously wished I could have the same for my other projects.</p>\n\n<p>Then PHP-Fog (later rebranded as App Fog) came along, with the slogan \"Heroku for PHP!\" I got excited and started using it - immediately taking my blog over to them and putting a few simple new client applications on there, but it was early days and it didn't do as much. It was ok, but it wasn't amazing. The scaling would sometimes take a REALLY long time and it would essentially delete your app and install a new copy, losing any temporary data. There was also no way to SSH in and download stuff or tweak anything or do... anything that you realistically wanted to do. </p>\n\n<p>Orchestra.io came along, and the founder <a href=\"https://twitter.com/EamonLeonard\">Eamon Leonard</a> was kind enough to give me a demo of the early versions. Again, it was early, but it didn't seem to do as much as PHP Fog did, which was already less than I wanted. </p>\n\n<p><a href=\"https://pagodabox.com/\">Pagodabox</a> came along and offered a <em>lot</em> more functionality. It was amazing. It had instant scaling up and down, both horizontally and vertically, it offered all sorts of caching options and had SSH access so you could rsync any user generated content down and make backups. (Yes, you should use S3 or something, but try telling that to clients using old shitty CMSs that dont support it). Pagodabox was amazing, so I moved my blog to it, and put a few simple client projects up there.</p>\n\n<p>Heroku then started offering official support for Python, Node, Java... a <em>bunch</em> of platforms but... not PHP. I mean, you could kinda hack it in there but the platform was shitty and setup was a combination of weird commands. It was a second class citizen only supported by third-party buildpacks like the -incredibly good -  <a href=\"https://github.com/CHH/heroku-buildpack-php\">CHH</a> buildpack. I played around with it a bit, but continued to wait for PHP support before moving anything substantial over there. </p>\n\n<p>Orchestra.io then was <a href=\"http://techcrunch.com/2011/08/23/engine-yard-acquires-orchestra-to-add-php-support-to-its-paas/\">acquired by EngineYard</a>, Heorku's biggest competitor. Woah! I hoped Heroku would get going with PHP properly then, but no... ahh sod it though,we still have these other three options to play with. Right?</p>\n\n<p>With these options available I optimistically called 2012 <a href=\"http://philsturgeon.co.uk/blog/2012/01/2012-the-year-of-php-cloud-hosting\">The Year of PHP Cloud Hosting</a>. By the end of the year I was <a href=\"http://philsturgeon.co.uk/blog/2012/10/cloud-hosting-php-pipe-dream\">calling myself a fool</a> for ever thinking it could be done properly.</p>\n\n<p>Pagodabox was the most feature complete, but as stable as a wet fart. PHP Fog stopped having work done as App Fog came along, and App Fog just seemed to be missing crucial features. A few other options came and went within the space of a few months and some were always there but... there were a lot of shit options around.</p>\n\n<p>It seemed like a lot of these companies were making these platforms for the sake of making them, and not really understanding the problem space properly.</p>\n\n<p><a href=\"http://fortrabbit.com\">Fortrabbit</a> was the savior for the last year and they've been a big hit in the Laravel community, but they sadly do not have all that many addons and compared to some other hosting solutions (and some of their since failed competition) they felt a little on the expensive side.</p>\n\n<p>The only time I got to use Heroku properly recently was when me and <a href=\"http://twitter.com/zackkitzmiller\">Zack</a> built <a href=\"http://madeinproduction.com\">madeinproduction.com</a> with Python/Flask. I still missed it.</p>\n\n<p>Then guess who came along? </p>\n\n<p><a href=\"https://blog.heroku.com/archives/2014/4/29/introducing_the_new_php_on_heroku\">BLOODY HEROKU DID!</a></p>\n\n<p>Heroku hired <a href=\"https://twitter.com/dzuelke\">David Zuelke</a> to help them bring PHP onto the platform as an officially supported language. I'd seen his name around GitHub plenty whilst working with the CHH buildpack and a few other pieces, and I knew this would be a good sign. A few months later there was a private beta, and now PHP is public beta on Heroku. </p>\n\n<p><img src=\"http://www.reactiongifs.com/r/yay.gif\" alt=\"WINNING\" /></p>\n\n<p>It took me longer to write this blog than it did to migrate this <a href=\"http://pyrocms.com\">PyroCMS</a>-based blog to Heroku.</p>\n\n<p>PyroCMS 2.2 is a little old now, and it only supports MySQL. Luckily 2.3 will be out soon which supports PostgreSQL and SQLite too, but in the mean-time I just added the <a href=\"https://addons.heroku.com/cleardb\">ClearDB MySQL Addon</a> and I'm up and running. It took me literally about 10 minutes.</p>\n\n<p>I create the app on Heroku through their web interface.</p>\n\n<p>I had to link my local codebase to a Heroku app.</p>\n\n<blockquote>\n  <p>$ git remote add heroku git@heroku.com:philsturgeon.git</p>\n</blockquote>\n\n<p>Logged into heroku on the command line. If you dont have the command-line app you will want to <a href=\"https://devcenter.heroku.com/articles/quickstart\">install that</a>.</p>\n\n<blockquote>\n  <p>$ heroku login</p>\n</blockquote>\n\n<p>Pick an SSH key to add to your account. (No waiting 5-15 minutes like most other PHP PaaS systems, this one is instant.)</p>\n\n<blockquote>\n  <p>$ heroku keys:add </p>\n</blockquote>\n\n<p>Added a database (for free, up to 5mb).</p>\n\n<blockquote>\n  <p>$ heroku addons:add clearedb</p>\n</blockquote>\n\n<p>Updated my system/cms/database.php to use the ENV variable they set pointing to the database. Make your own system/cms/development/database.php to override this with your local MySQL config.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');</p>\n\n<p>$url = parse_url(getenv(\"CLEARDB&#95;DATABASE&#95;URL\"));</p>\n\n<p>// Staging and Production\n$db['default'] = array(\n    'hostname'      =>  $url[\"host\"],\n    'username'      =>  $url[\"user\"],\n    'password'      =>  $url[\"pass\"],\n    'database'      =>  substr($url[\"path\"], 1),\n    'dbdriver'      =>  'mysqli',\n    'active<em>r'      =>  true,\n    'pconnect'      =>  false,\n    'db</em>debug'      =>  true,\n    'cache<em>on'      =>  false,\n    'char</em>set'      =>  'utf8',\n    'dbcollat'      =>  'utf8<em>unicode</em>ci',\n);</p>\n\n<p>// Assign the group to be used\n$active_group = 'default';\n{{ /prism:syntax }}</p>\n\n<p>They need a composer.json in there and PyroCMS 2.2 doesn't have one. (<a href=\"https://github.com/pyrocms/pyrocms/blob/2.3/develop/composer.json\">PyroCMS 2.3 does</a>.)</p>\n\n<blockquote>\n  <p>$ touch composer.json &amp;&amp; git add composer.json</p>\n</blockquote>\n\n<p>Set the <code>PYRO_ENV</code> to be production, so it doesn't try using your development config. </p>\n\n<blockquote>\n  <p>$ heroku config:set PYRO_ENV='production'</p>\n</blockquote>\n\n<p>Push all of that stuff up to Heroku. </p>\n\n<blockquote>\n  <p>$ git commit -am \"Added all the heroku-related changes\"\n  $ git push heroku master</p>\n</blockquote>\n\n<p>TADAAAAAAAAA.</p>\n\n<p>My PyroCMS 2.2 blog here is now running on Heroku. I finally get to check that off my todo list.</p>\n\n<p>Still on the list is:</p>\n\n<ul>\n<li>\"Upgrade to 2.3.0-beta1 as soon as its out\"</li>\n<li>\"Convert to PostgreSQL because its web-scale\"</li>\n<li>\"Blog about all of it properly\"</li>\n</ul>\n\n<p>Heroku is an awesome solution because not only do they properly understand the problem, but they have been doing this for <em>years</em>. They've been around since 2007 so they completely understand how to set up simple hosting, from the basic blog to <a href=\"http://12factor.net\">The Twelve Factor App</a>, which if we're honest, is becoming more and more common these days, especially with all these people going around telling you to build API-first and API-centric applications... <em>cough</em></p>\n",
    "preview_hash": ""
  },
  {
    "id": "211",
    "created": "2014-05-25 14:20:00",
    "updated": "2014-05-25 14:20:00",
    "created_by": "2",
    "ordering_count": "38",
    "title": "RESTful Deletions, Restorations and Revisions",
    "slug": "restful-deletions-restorations-and-revisions",
    "category_id": "31",
    "attachment": "",
    "intro": "A friend asked me for some advice on how to approach building article revisions and restoring deleted content from API in a RESTful way. With most things, it didn&#39;t fit on Twitter, so I promised him a blog.&nbsp;",
    "body": "Two weeks ago I posted [RESTful URLs: Actions Need Not Apply](/blog/2014/05/restful-urls-actions-need-not-apply) which was all about how the only action/verb to appear in the HTTP Request should be the HTTP Method itself (GET, POST, PUT, DELETE, HEAD, etc). \n\nThis was figured out as myself and others were working on complex use-cases which aren't the usual \"apples\" and \"pears\" crap a lot of API design material is based around. Simple APIs are simple, but trying to figure out \"How do I make it RESTful\" on more complex stuff like mass message sending can break your brain. \n\nNow that I'm \"The REST Guy\" to some in the PHP community, I've been getting a few questions about how to approach other challenges.\n\nThe rules are: \n\n* No verbs in the URL\n* Input should look as much like output as possible\n* Do not invent fields that only exist for input\n* Use each HTTP method for its exact intended purpose\n\nSo, lets go!\n\n## Deleting, then... undeleting?\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Hey <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> - what&#39;s the &quot;most RESTful&quot; way to restore/undelete a resource?</p>&mdash; Christopher Pitt (@followchrisp) <a href=\"https://twitter.com/followchrisp/statuses/469477939101597696\">May 22, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nChris had a set of routes like this:\n\n* GET articles\n* POST articles\n* PATCH articles/{article}\n* DELETE articles/{article}\n\nPretty straight forward so far right? Get them all, create one, update an existing one and delete one. Cool.\n\nWhat happens if you want to restore a deleted article? \n\nObviously if you have actually deleted it from the database (hard-delete) then tough cheese, but if the record exists in there somewhere\nwith a changed status or a deleted_at field like in Laravel (soft-delete) then you can do this easily enough.\n\nThe two approaches I can see that follow all of the rules are this:\n\n### Archive then Hard-Delete\n\nDelete should probably do what it says, actually delete the item. If delete is a destructive and unrecoverable action, then you will need to invent some other status for the article to exist in, which is still hidden from the API but not entirely gone from the database. \n\n> PATCH /articles/foo HTTP/1.1  \n> Host: api.example.com  \n> Content-Type: application/json  \n> \n> { \"status\" : \"archived\" }  \n\nThis would keep it available everywhere in the API, and you could get it if you wanted, or ignore it with filters. For example, running a `GET /articles?status=archived` could very easily get you archived items, and running `GET /articles?status=published` would get you the live ones.\n\nMaking a `GET` request to an archived item still works fine, but you see `\"status\" : \"archived\"` in the body. \n\nIf you then want to actually remove something from the system then you could use `DELETE /articles/foo` to remove it entirely.\n\n\n## Soft-Delete and Restore\n\nIn this approach we use `DELETE` to delete stuff and do not play around with a status field initially. \n\nOnce you delete it, it is gone. It will not show up in `GET /articles` regardless of any filter provided. If you try and call it up you get a 404 or a 410. \n\n<strike>_**Aside:** I am wary of 410 as I am not allowed to return a body which means no human-friendly error message, error code or link to error documentation. If all other errors contain this, it seems strange to me that missing content just has an empty body. You decide._</strike>\n\n**Update:** It turns out I was wrong about 410's not being allowed to have a HTTP response body. [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) says nothing of the sort. That sounds like one of those little non-facts somebody told me at some point that just stuck in my head without me ever verifying it. I usually try to avoid that sort of thing, so sorry that slipped through.\n\nThis article is no longer amongst the general population of the API. \n\nTo win the game we need some way to see \"deleted\" content and restore them so maybe... just maybe `GET /articles/trashed`. \n\nThe reason I think this works is because trashed items are a specific sub-set of articles. It does not just use a filter - because those articles are gone as far as the rest of the API is concerned - they are in a whole different place, and therefore a new resource with a new collection makes sense.\n\nOne you have found the item you could once again `PATCH` the status to `\"published\"` (or whatever):\n\n> PATCH /articles/trashed/foo HTTP/1.1  \n> Host: api.example.com  \n> Content-Type: application/json  \n> \n> { \"status\" : \"published\" }  \n\nAlternatively you could use some sort of `is_trash` boolean field which always shows when you `GET` something, trash or not, then use `PATCH` with a body like `\"is_trash\" : false` to restore it. Regardless of choosing a bool field or a status field, patching it seems to work.\n\n### Which to use?\n\nI think I personally prefer the first approach. To me, a delete means delete. It's the most semantic. If your application is not actually deleting stuff then calling any of it delete is misleading.\n\nOffering a way to \"Trash\" or \"Archive\" or \"Ban\" a resource by changing the status of the resource seems incredibly semantic too.\n\n\n## Multiple Revisions\n\nAnother thing Chris asked about was how to promote and demote various revisions that relate to an article. \n\nHe has these routes:\n\n* GET articles/{article}/revisions\n* POST articles/{article}/revisions\n* PATCH articles/{article}/revisions/{article-revision}\n* DELETE articles/{article}/revisions/{article-revision}\n\nOne rule mentioned above is:\n\n* Input should look as much like output as possible\n\nTo me, it would be pretty handy if all revisions had a `\"is_current\"` value to let me know if this was the current revision. You can \nadd new ones and they might be promoted to the current automatically, or somebody might want to roll back the revision through an interface somewhere, but whatever happens the interface and the output will need to highlight the current revision. \n\n_**Aside:** This does not mean you literally need a field in the database called `is_current`. Maybe your articles table has a `revision_id` field in there pointing to the current revision in use. Your JSON input and output should not be a direct mapping or your SQL schema, so do not feel obliged to make this field._\n\nBecause we have that field as output, it should not be that much of a stretch to assume we can PATCH on it. \n\nIf article `foo` has three revisions, this should be possible to make revision 2 the current revision:\n\n> PATCH /articles/foo/revisions/2 HTTP/1.1  \n> Host: api.example.com  \n> Content-Type: application/json  \n> \n> { \"is_current\" : true }  \n\nAt that point maybe your internal logic updates that revision record with a `true` and set the other revisions for that article to be `false`, or maybe you go and update the articles table and set the `revision_id` to the ID provided. Whatever you do, this will now effect which is the current promoted revision and we've not had to make anything gross like `/articles/foo/revisions/promote/34` which I have seen suggested before.\n\n## Summary\n\nAs I have said before, sometimes trying to make things RESTful for the sake of it is more a religious choice than a technical one. In some instances the most RESTful way is not initially the most obvious way, but that is only down to a decade of us being taught that shit like `/articles/foo/revisions/promote/34` is helpful. Maybe for a website, but a RESTful API is a platform of never-ending possibilities and not just a collection of functions with custom parameters like XML-RPC/SOAP. Once you start to grasp how this stuff works, a lot of the things that seemed pointless but RESTful actually start to seem much cleaner, and more flexible.",
    "created_on": "1401027600",
    "updated_on": "1401027600",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "527abbd22024a97f5bc343bd6ec1fa13",
    "type": "markdown",
    "parsed": "<p>Two weeks ago I posted <a href=\"/blog/2014/05/restful-urls-actions-need-not-apply\">RESTful URLs: Actions Need Not Apply</a> which was all about how the only action/verb to appear in the HTTP Request should be the HTTP Method itself (GET, POST, PUT, DELETE, HEAD, etc). </p>\n\n<p>This was figured out as myself and others were working on complex use-cases which aren't the usual \"apples\" and \"pears\" crap a lot of API design material is based around. Simple APIs are simple, but trying to figure out \"How do I make it RESTful\" on more complex stuff like mass message sending can break your brain. </p>\n\n<p>Now that I'm \"The REST Guy\" to some in the PHP community, I've been getting a few questions about how to approach other challenges.</p>\n\n<p>The rules are: </p>\n\n<ul>\n<li>No verbs in the URL</li>\n<li>Input should look as much like output as possible</li>\n<li>Do not invent fields that only exist for input</li>\n<li>Use each HTTP method for its exact intended purpose</li>\n</ul>\n\n<p>So, lets go!</p>\n\n<h2>Deleting, then... undeleting?</h2>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Hey <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> - what&#39;s the &quot;most RESTful&quot; way to restore/undelete a resource?</p>&mdash; Christopher Pitt (@followchrisp) <a href=\"https://twitter.com/followchrisp/statuses/469477939101597696\">May 22, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>Chris had a set of routes like this:</p>\n\n<ul>\n<li>GET articles</li>\n<li>POST articles</li>\n<li>PATCH articles/{article}</li>\n<li>DELETE articles/{article}</li>\n</ul>\n\n<p>Pretty straight forward so far right? Get them all, create one, update an existing one and delete one. Cool.</p>\n\n<p>What happens if you want to restore a deleted article? </p>\n\n<p>Obviously if you have actually deleted it from the database (hard-delete) then tough cheese, but if the record exists in there somewhere\nwith a changed status or a deleted_at field like in Laravel (soft-delete) then you can do this easily enough.</p>\n\n<p>The two approaches I can see that follow all of the rules are this:</p>\n\n<h3>Archive then Hard-Delete</h3>\n\n<p>Delete should probably do what it says, actually delete the item. If delete is a destructive and unrecoverable action, then you will need to invent some other status for the article to exist in, which is still hidden from the API but not entirely gone from the database. </p>\n\n<blockquote>\n  <p>PATCH /articles/foo HTTP/1.1<br />\n  Host: api.example.com<br />\n  Content-Type: application/json  </p>\n  \n  <p>{ \"status\" : \"archived\" }  </p>\n</blockquote>\n\n<p>This would keep it available everywhere in the API, and you could get it if you wanted, or ignore it with filters. For example, running a <code>GET /articles?status=archived</code> could very easily get you archived items, and running <code>GET /articles?status=published</code> would get you the live ones.</p>\n\n<p>Making a <code>GET</code> request to an archived item still works fine, but you see <code>\"status\" : \"archived\"</code> in the body. </p>\n\n<p>If you then want to actually remove something from the system then you could use <code>DELETE /articles/foo</code> to remove it entirely.</p>\n\n<h2>Soft-Delete and Restore</h2>\n\n<p>In this approach we use <code>DELETE</code> to delete stuff and do not play around with a status field initially. </p>\n\n<p>Once you delete it, it is gone. It will not show up in <code>GET /articles</code> regardless of any filter provided. If you try and call it up you get a 404 or a 410. </p>\n\n<p><strike><em><strong>Aside:</strong> I am wary of 410 as I am not allowed to return a body which means no human-friendly error message, error code or link to error documentation. If all other errors contain this, it seems strange to me that missing content just has an empty body. You decide.</em></strike></p>\n\n<p><strong>Update:</strong> It turns out I was wrong about 410's not being allowed to have a HTTP response body. <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">RFC 2616</a> says nothing of the sort. That sounds like one of those little non-facts somebody told me at some point that just stuck in my head without me ever verifying it. I usually try to avoid that sort of thing, so sorry that slipped through.</p>\n\n<p>This article is no longer amongst the general population of the API. </p>\n\n<p>To win the game we need some way to see \"deleted\" content and restore them so maybe... just maybe <code>GET /articles/trashed</code>. </p>\n\n<p>The reason I think this works is because trashed items are a specific sub-set of articles. It does not just use a filter - because those articles are gone as far as the rest of the API is concerned - they are in a whole different place, and therefore a new resource with a new collection makes sense.</p>\n\n<p>One you have found the item you could once again <code>PATCH</code> the status to <code>\"published\"</code> (or whatever):</p>\n\n<blockquote>\n  <p>PATCH /articles/trashed/foo HTTP/1.1<br />\n  Host: api.example.com<br />\n  Content-Type: application/json  </p>\n  \n  <p>{ \"status\" : \"published\" }  </p>\n</blockquote>\n\n<p>Alternatively you could use some sort of <code>is_trash</code> boolean field which always shows when you <code>GET</code> something, trash or not, then use <code>PATCH</code> with a body like <code>\"is_trash\" : false</code> to restore it. Regardless of choosing a bool field or a status field, patching it seems to work.</p>\n\n<h3>Which to use?</h3>\n\n<p>I think I personally prefer the first approach. To me, a delete means delete. It's the most semantic. If your application is not actually deleting stuff then calling any of it delete is misleading.</p>\n\n<p>Offering a way to \"Trash\" or \"Archive\" or \"Ban\" a resource by changing the status of the resource seems incredibly semantic too.</p>\n\n<h2>Multiple Revisions</h2>\n\n<p>Another thing Chris asked about was how to promote and demote various revisions that relate to an article. </p>\n\n<p>He has these routes:</p>\n\n<ul>\n<li>GET articles/{article}/revisions</li>\n<li>POST articles/{article}/revisions</li>\n<li>PATCH articles/{article}/revisions/{article-revision}</li>\n<li>DELETE articles/{article}/revisions/{article-revision}</li>\n</ul>\n\n<p>One rule mentioned above is:</p>\n\n<ul>\n<li>Input should look as much like output as possible</li>\n</ul>\n\n<p>To me, it would be pretty handy if all revisions had a <code>\"is_current\"</code> value to let me know if this was the current revision. You can \nadd new ones and they might be promoted to the current automatically, or somebody might want to roll back the revision through an interface somewhere, but whatever happens the interface and the output will need to highlight the current revision. </p>\n\n<p><em><strong>Aside:</strong> This does not mean you literally need a field in the database called <code>is_current</code>. Maybe your articles table has a <code>revision_id</code> field in there pointing to the current revision in use. Your JSON input and output should not be a direct mapping or your SQL schema, so do not feel obliged to make this field.</em></p>\n\n<p>Because we have that field as output, it should not be that much of a stretch to assume we can PATCH on it. </p>\n\n<p>If article <code>foo</code> has three revisions, this should be possible to make revision 2 the current revision:</p>\n\n<blockquote>\n  <p>PATCH /articles/foo/revisions/2 HTTP/1.1<br />\n  Host: api.example.com<br />\n  Content-Type: application/json  </p>\n  \n  <p>{ \"is_current\" : true }  </p>\n</blockquote>\n\n<p>At that point maybe your internal logic updates that revision record with a <code>true</code> and set the other revisions for that article to be <code>false</code>, or maybe you go and update the articles table and set the <code>revision_id</code> to the ID provided. Whatever you do, this will now effect which is the current promoted revision and we've not had to make anything gross like <code>/articles/foo/revisions/promote/34</code> which I have seen suggested before.</p>\n\n<h2>Summary</h2>\n\n<p>As I have said before, sometimes trying to make things RESTful for the sake of it is more a religious choice than a technical one. In some instances the most RESTful way is not initially the most obvious way, but that is only down to a decade of us being taught that shit like <code>/articles/foo/revisions/promote/34</code> is helpful. Maybe for a website, but a RESTful API is a platform of never-ending possibilities and not just a collection of functions with custom parameters like XML-RPC/SOAP. Once you start to grasp how this stuff works, a lot of the things that seemed pointless but RESTful actually start to seem much cleaner, and more flexible.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "221",
    "created": "2014-05-29 14:13:00",
    "updated": "2014-05-29 14:13:00",
    "created_by": "2",
    "ordering_count": "39",
    "title": "Fractal v0.8.0, now with Serializers",
    "slug": "fractal-v080-now-with-serializers",
    "category_id": "2",
    "attachment": "",
    "intro": "A new version of Fractal is out, which is a package aimed at making life easier to API developers handling output. At a basic level it acts as a way to typecast an array of data, like array_map() but defined in classes, but at most it can do much more. It can help include other resources inside the response based on user input, so /books?include=author,comments for example will give you exactly what you expect without hardcoding it to always display. The new version provides some serializers, to allow you to change the way that data is represented as output.",
    "body": "A new version of [Fractal](http://fractal.thephpleague.com) is out, which is a package aimed at making life easier to API developers handling output.\n\nAt a basic level it acts as a way to typecast an array of data, like array_map() but defined in classes, but at most it can do much more. It can help include other resources inside the response based on user input, so /books?include=author,comments for example will give you exactly what you expect without hardcoding it to always display.\n\nUntil [v0.8.0](https://github.com/thephpleague/fractal/releases/tag/0.8.0) - when Jason Lewis got involved with a series of pull requests - the data structure had always been rather hardcoded. You could not change how pagination looked, and I was using a `data` namespace which people wanted to remove. Serializers were always on the todo list, but Jason jumped in there and sorted things out like a champ.\n\nSo, I'm gonna repost the new documentation page I just wrote up.\n\nA <em>Serializer</em> structures your <em>Transformed</em> data in certain ways. There are many output\nstructures for APIs, two popular ones being [HAL] and [JSON-API]. Twitter and Facebook output data\ndifferently to each other, and Google does it differently too. Most of the differences between these\nserializers are how data is namespaced.\n\n<em>Serializer</em> classes let you switch between various output formats with minimal effect on your <em>Transformers</em>.\n\n[HAL]: http://stateless.co/hal_specification.html\n[JSON-API]: http://jsonapi.org/\n\nA very basic usage of Fractal will look like this, as has been seen in other sections:\n\n{{ prism:syntax lang=\"php\" }}\nuse Acme\\Model\\Book;\nuse Acme\\Transformer\\BookTransformer;\nuse League\\Fractal\\Manager;\nuse League\\Fractal\\Resource\\Item;\nuse League\\Fractal\\Serializer\\DataArraySerializer;\n\n$manager = new Manager();\n$manager->setSerializer(new DataArraySerializer());\n\n// Some sort of ORM call\n$book = Book::find(1);\n\n// Make a resource out of the data and \n$resource = new Item($book, new BookTransformer(), 'book');\n\n// Run all transformers\n$manager->createData($resource)->toArray();\n\n// Outputs:\n// [\n//     'data' => [\n//         'id' => 'Foo',\n//         'title' => 'Foo',\n//         'year' => 1991,\n//     ],\n// ];\n{{ /prism:syntax }}\n\nWhat is new here is the `$manager->setSerializer(new DataArraySerializer());` part. \n`DataArraySerializer` is the name of the default serializer in Fractal, but there are more.\n\n## DataArraySerializer\n\nThis serializer is not to everyones tastes, because it adds a `'data'` namespace to the output:\n\n{{ prism:syntax lang=\"php\" }}\n// Item\n[\n    'data' => [\n        'foo' => 'bar'\n    ],\n];\n\n// Collection\n[\n    'data' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n];\n{{ /prism:syntax }}\n\nThis is handy because it allows space for meta data (like pagination, or totals) in both Items and Collections. \n\n{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'data' => [\n        'foo' => 'bar'\n    ],\n    'meta' => [\n        ...\n    ]\n];\n\n// Collection with Meta\n[\n    'data' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n    'meta' => [\n        ...\n    ]\n];\n{{ /prism:syntax }}\n\nThis fits in nicely for meta and included resources, using the `'data'` namespace. This means meta data can be added for those included resources too.\n\n{{ prism:syntax lang=\"php\" }}\n// Item with included resource using meta\n[\n    'data' => [\n        'foo' => 'bar'\n        'comments' => [\n            'data' => [\n                ...\n            ],\n            'meta' => [\n                ...\n            ]\n        ]\n    ],\n];\n{{ /prism:syntax }}\n\n\n## ArraySerializer\n\nSometimes people want to remove that `'data'` namespace, and that can be done using the `ArraySerializer`,\nwhich is mostly the same other than that namespace.\n\n{{ prism:syntax lang=\"php\" }}\nuse League\\Fractal\\Serializer\\ArraySerializer;\n$manager->setSerializer(new ArraySerializer());\n{{ /prism:syntax }}\n\n{{ prism:syntax lang=\"php\" }}\n// Item\n[\n    'foo' => 'bar'\n];\n\n// Collection\n[\n    [\n        'foo' => 'bar'\n    ]\n];\n{{ /prism:syntax }}\n\nMeta data is is fine for items, but gets a little confusing for collections:\n\n{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'foo' => 'bar'\n    'meta' => [\n        ...\n    ]\n];\n\n// Collection with Meta\n[\n    [\n        'foo' => 'bar'\n    ]\n    'meta' => [\n        ...\n    ]\n];\n{{ /prism:syntax }}\n\nAdding a named key to what is otherwise just a list confuses JSON:\n\n> {\"0\":{\"foo\":\"bar\"},\"meta\":{}}\n\nThat `\"0\"` is there because you cannot mix index keys and non-indexed keys without JSON deciding to make\nit a structure (object) instead of a list (array).\n\nThis is why ArraySerialzier is not recommended, but if you are not using meta data then... carry on.\n\n\n## JsonApiSerializer\n\nThis is a work in progress representation of the [JSON-API] standard. It is included as it is partially working, but has some work left. \n\nThere are few differences with the `JsonApiSerializer`. The first is that it uses \"side-loading\" to include\nother related resources, which is different from the \"embedding\" approach that is used to include resources\nby the other two serializers.\n\nThe second is that it requires a _Resource Key_, which the other two do not. \n\n{{ prism:syntax lang=\"php\" }}\nuse League\\Fractal\\Serializer\\JsonApiSerializer;\n$manager->setSerializer(new JsonApiSerializer());\n\n// Important, notice the Resource Key in the third parameter:\n$resource = new Item($book, new GenericBookTransformer(), 'book');\n$resource = new Collection($books, new GenericBookTransformer(), 'books');\n{{ /prism:syntax }}\n\nThat resource key is used to give it a named namespace:\n\n{{ prism:syntax lang=\"php\" }}\n// Item\n[\n    'book' => [\n        'foo' => 'bar'\n    ],\n];\n\n// Collection\n[\n    'books' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n];\n{{ /prism:syntax }}\n\nJust like `DataArraySerializer`, this works nicely for meta data:\n\n{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'book' => [\n        'foo' => 'bar'\n    ],\n    'meta' => [\n        ...\n    ]\n];\n\n// Collection with Meta\n[\n    'books' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n    'meta' => [\n        ...\n    ]\n];\n{{ /prism:syntax }}\n\nAdding a resource to a item response would look like this:\n\n{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'book' => [\n        'foo' => 'bar'\n    ],\n    'linked' => [\n        'author' => [\n            [\n                'name' => 'Dave'\n            ]\n        ]\n    ]\n];\n{{ /prism:syntax }}\n\n## Custom Serializers\n\nYou can make your own Serializers by implementing [SerializerAbstract]. \n\n{{ prism:syntax lang=\"php\" }}\nuse Acme\\Serializer\\CustomSerializer;\n$manager->setSerializer(new CustomSerializer());\n{{ /prism:syntax }}\n\nThe structure of serializers will change at some point, to allow items and collections to be handled differently\nand to improve side-loading logic. Keep an eye on the change log, but do not be afraid to make one.\n\n[SerializerAbstract]: https://github.com/thephpleague/fractal/blob/master/src/Serializer/SerializerAbstract.php\n\nThere is some work to go on serializers, but they are already pretty handy. If you are using Fractal and would like to implement a new serializer, let me know if it doesn't cover your use case and try to help me out with a PR if at all possible. I have added some features I needed for a client project, but I cannot work on too many more if I am going to hit this deadline.",
    "created_on": "1401372780",
    "updated_on": "1401372780",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "e3d09f7c6fff5171668e30951a20b3b7",
    "type": "markdown",
    "parsed": "<p>A new version of <a href=\"http://fractal.thephpleague.com\">Fractal</a> is out, which is a package aimed at making life easier to API developers handling output.</p>\n\n<p>At a basic level it acts as a way to typecast an array of data, like array_map() but defined in classes, but at most it can do much more. It can help include other resources inside the response based on user input, so /books?include=author,comments for example will give you exactly what you expect without hardcoding it to always display.</p>\n\n<p>Until <a href=\"https://github.com/thephpleague/fractal/releases/tag/0.8.0\">v0.8.0</a> - when Jason Lewis got involved with a series of pull requests - the data structure had always been rather hardcoded. You could not change how pagination looked, and I was using a <code>data</code> namespace which people wanted to remove. Serializers were always on the todo list, but Jason jumped in there and sorted things out like a champ.</p>\n\n<p>So, I'm gonna repost the new documentation page I just wrote up.</p>\n\n<p>A <em>Serializer</em> structures your <em>Transformed</em> data in certain ways. There are many output\nstructures for APIs, two popular ones being <a href=\"http://stateless.co/hal_specification.html\">HAL</a> and <a href=\"http://jsonapi.org/\">JSON-API</a>. Twitter and Facebook output data\ndifferently to each other, and Google does it differently too. Most of the differences between these\nserializers are how data is namespaced.</p>\n\n<p><em>Serializer</em> classes let you switch between various output formats with minimal effect on your <em>Transformers</em>.</p>\n\n<p>A very basic usage of Fractal will look like this, as has been seen in other sections:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nuse Acme\\Model\\Book;\nuse Acme\\Transformer\\BookTransformer;\nuse League\\Fractal\\Manager;\nuse League\\Fractal\\Resource\\Item;\nuse League\\Fractal\\Serializer\\DataArraySerializer;</p>\n\n<p>$manager = new Manager();\n$manager->setSerializer(new DataArraySerializer());</p>\n\n<p>// Some sort of ORM call\n$book = Book::find(1);</p>\n\n<p>// Make a resource out of the data and \n$resource = new Item($book, new BookTransformer(), 'book');</p>\n\n<p>// Run all transformers\n$manager->createData($resource)->toArray();</p>\n\n<p>// Outputs:\n// [\n//     'data' => [\n//         'id' => 'Foo',\n//         'title' => 'Foo',\n//         'year' => 1991,\n//     ],\n// ];\n{{ /prism:syntax }}</p>\n\n<p>What is new here is the <code>$manager-&gt;setSerializer(new DataArraySerializer());</code> part. \n<code>DataArraySerializer</code> is the name of the default serializer in Fractal, but there are more.</p>\n\n<h2>DataArraySerializer</h2>\n\n<p>This serializer is not to everyones tastes, because it adds a <code>'data'</code> namespace to the output:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item\n[\n    'data' => [\n        'foo' => 'bar'\n    ],\n];</p>\n\n<p>// Collection\n[\n    'data' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n];\n{{ /prism:syntax }}</p>\n\n<p>This is handy because it allows space for meta data (like pagination, or totals) in both Items and Collections. </p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'data' => [\n        'foo' => 'bar'\n    ],\n    'meta' => [\n        ...\n    ]\n];</p>\n\n<p>// Collection with Meta\n[\n    'data' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n    'meta' => [\n        ...\n    ]\n];\n{{ /prism:syntax }}</p>\n\n<p>This fits in nicely for meta and included resources, using the <code>'data'</code> namespace. This means meta data can be added for those included resources too.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item with included resource using meta\n[\n    'data' => [\n        'foo' => 'bar'\n        'comments' => [\n            'data' => [\n                ...\n            ],\n            'meta' => [\n                ...\n            ]\n        ]\n    ],\n];\n{{ /prism:syntax }}</p>\n\n<h2>ArraySerializer</h2>\n\n<p>Sometimes people want to remove that <code>'data'</code> namespace, and that can be done using the <code>ArraySerializer</code>,\nwhich is mostly the same other than that namespace.</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nuse League\\Fractal\\Serializer\\ArraySerializer;\n$manager->setSerializer(new ArraySerializer());\n{{ /prism:syntax }}</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item\n[\n    'foo' => 'bar'\n];</p>\n\n<p>// Collection\n[\n    [\n        'foo' => 'bar'\n    ]\n];\n{{ /prism:syntax }}</p>\n\n<p>Meta data is is fine for items, but gets a little confusing for collections:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'foo' => 'bar'\n    'meta' => [\n        ...\n    ]\n];</p>\n\n<p>// Collection with Meta\n[\n    [\n        'foo' => 'bar'\n    ]\n    'meta' => [\n        ...\n    ]\n];\n{{ /prism:syntax }}</p>\n\n<p>Adding a named key to what is otherwise just a list confuses JSON:</p>\n\n<blockquote>\n  <p>{\"0\":{\"foo\":\"bar\"},\"meta\":{}}</p>\n</blockquote>\n\n<p>That <code>\"0\"</code> is there because you cannot mix index keys and non-indexed keys without JSON deciding to make\nit a structure (object) instead of a list (array).</p>\n\n<p>This is why ArraySerialzier is not recommended, but if you are not using meta data then... carry on.</p>\n\n<h2>JsonApiSerializer</h2>\n\n<p>This is a work in progress representation of the <a href=\"http://jsonapi.org/\">JSON-API</a> standard. It is included as it is partially working, but has some work left. </p>\n\n<p>There are few differences with the <code>JsonApiSerializer</code>. The first is that it uses \"side-loading\" to include\nother related resources, which is different from the \"embedding\" approach that is used to include resources\nby the other two serializers.</p>\n\n<p>The second is that it requires a <em>Resource Key</em>, which the other two do not. </p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nuse League\\Fractal\\Serializer\\JsonApiSerializer;\n$manager->setSerializer(new JsonApiSerializer());</p>\n\n<p>// Important, notice the Resource Key in the third parameter:\n$resource = new Item($book, new GenericBookTransformer(), 'book');\n$resource = new Collection($books, new GenericBookTransformer(), 'books');\n{{ /prism:syntax }}</p>\n\n<p>That resource key is used to give it a named namespace:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item\n[\n    'book' => [\n        'foo' => 'bar'\n    ],\n];</p>\n\n<p>// Collection\n[\n    'books' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n];\n{{ /prism:syntax }}</p>\n\n<p>Just like <code>DataArraySerializer</code>, this works nicely for meta data:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'book' => [\n        'foo' => 'bar'\n    ],\n    'meta' => [\n        ...\n    ]\n];</p>\n\n<p>// Collection with Meta\n[\n    'books' => [\n        [\n            'foo' => 'bar'\n        ]\n    ],\n    'meta' => [\n        ...\n    ]\n];\n{{ /prism:syntax }}</p>\n\n<p>Adding a resource to a item response would look like this:</p>\n\n<p>{{ prism:syntax lang=\"php\" }}\n// Item with Meta\n[\n    'book' => [\n        'foo' => 'bar'\n    ],\n    'linked' => [\n        'author' => [\n            [\n                'name' => 'Dave'\n            ]\n        ]\n    ]\n];\n{{ /prism:syntax }}</p>\n\n<h2>Custom Serializers</h2>\n\n<p>You can make your own Serializers by implementing <a href=\"https://github.com/thephpleague/fractal/blob/master/src/Serializer/SerializerAbstract.php\">SerializerAbstract</a>. </p>\n\n<p>{{ prism:syntax lang=\"php\" }}\nuse Acme\\Serializer\\CustomSerializer;\n$manager->setSerializer(new CustomSerializer());\n{{ /prism:syntax }}</p>\n\n<p>The structure of serializers will change at some point, to allow items and collections to be handled differently\nand to improve side-loading logic. Keep an eye on the change log, but do not be afraid to make one.</p>\n\n<p>There is some work to go on serializers, but they are already pretty handy. If you are using Fractal and would like to implement a new serializer, let me know if it doesn't cover your use case and try to help me out with a PR if at all possible. I have added some features I needed for a client project, but I cannot work on too many more if I am going to hit this deadline.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "231",
    "created": "2014-05-31 22:24:00",
    "updated": "2014-05-31 22:24:00",
    "created_by": "2",
    "ordering_count": "40",
    "title": "The Pocket Guide to Sexism in Tech",
    "slug": "the-pocket-guide-to-sexism-in-tech",
    "category_id": "0",
    "attachment": "",
    "intro": "I had somebody explain to me on Reddit that they just didn&#39;t believe there was a problem with sexism in tech. Just flat out said it is not a thing. I explained things I have seen and heard with my own eyes and ears in various jobs and events and still, apparently that was just anecdotal - which was somehow not relevant. He wanted cold, hard proof. This is me trying out a little thing called Google.",
    "body": "So yesterday I blew a nerve. Reddit normally has some trolls, but if you get them on the subject of sexism in tech, or PHPWomen then stupid explodes out and spills all over the floor. There were a lot of people not reading an article explain that A was not true, then everyone went around going on about how they hated how A was true. That was frustrating and insanely ignorant, but then it got worse.\n\nI had somebody explain to me that they just didn't believe there was a problem with sexism in tech. Just flat out said it is not a thing. I explained things I have seen and heard with my own eyes and ears in various jobs and events and still, apparently that was just anecdotal - which was somehow not relevant. He wanted cold, hard proof. \n\nAlright. I don't normally play the white knight card and I normally wouldn't play the burden of proof game with one jackass in a comment thread, but I figure having a resource that collates ridiculous examples of sexism in the tech community for me to link to in the future can't hurt, and after I spent the time writing this up I felt like it could be put to use. \n\nOne of the first articles I remember really making me pay attention to the situation is [a first-hand account by Sarah Parmenter](http://www.sazzy.co.uk/2013/02/speaking-up/). She is a very prominent figure in the community who was too scared to talk about it for a long time. If a well known public speaker is too scared then what about the other people with less of an established following? They must be even more scared to come out. They might think they [are over-thinking it](http://juliepagano.tumblr.com/post/62034537968/i-think-im-in-an-emotionally-abusive-relationship-with).\n\nThere was the guy that [couldn't get any interviews](http://whatwouldkingleonidasdo.tumblr.com/post/54989171152/how-i-discovered-gender-discrimination) because his name was Kim, until he put a more traditionally male-sounding name on the CV and got a shitload of jobs.\n\nThere are [TechCrunch hackathons](http://www.theguardian.com/commentisfree/2013/sep/09/titstare-app-women-tech-sexism) that fail to screen anything being presented that have wanking applications and applications called \"Tit-stare\" on the same stage as a 9-year old girl presenting her app. I'm glad she won, hopefully that stopped her being put off the tech community.\n\nThere is the ongoing problem of girls being in such a low minority that they are picked on and [harassed by boys at school](https://www.usenix.org/blog/my-daughters-high-school-programming-teacher), forcing many to drop out at a young level. Read the update on that one, the teachers wouldn't do a shitting thing about it. \n\nSure you might just label it as teasing, but its bullying and I had enough of that shit myself to know that it is not a motivator. I was bullied like hell in physical education classes for years and used to just get the shit kicked out of me regularly along with plenty of verbal abuse. That made me feel like shit, so I stopped going to PE. If 12 year old me was being bullied by programmers then he would have stopped programming. \n\nThis is something that I have heard from a lot of women. In some cases these bullying/harassment victims managed to overcome their early setbacks at a later stage and teach themselves programming. That often sets them back a few years, and maintains the \"women are paid less and do lower level jobs\" pattern that is oh so common.\n\nThere are plenty of surveys around about [the salary gap between men and women](http://www.drdobbs.com/architecture-and-design/2014-developer-salary-survey/240168195?pgno=6). You can argue the sample base of that one is quite small, but it is representative of [plenty](http://geekfeminism.wikia.com/wiki/FLOSS) of [other sources](http://geekfeminism.wikia.com/wiki/Technology_industry). Studies show that even when women do negotiate salaries, they [often ask for less](http://www.npr.org/blogs/money/2014/04/08/300290240/why-women-dont-ask-for-more-money). If they do ask for similar numbers to men, they have to deal with [the \"social cost\" of negotiation](http://blogs.hbr.org/2014/06/why-women-dont-negotiate-their-job-offers/) which is unfairly biased against women who ask for higher salaries. \n\nNow and then there are huge figures in the community like Uncle Bob, who whilst being very well respected for his views on technology can't help himself from making sexist comments. I've seen [several apologies](https://gist.github.com/unclebob/2508746) from him, and [the most recent](https://gist.github.com/unclebob/2abcce451bafeab421f2) was sarcastic as hell until he updated it about 6 times (check the revisions). [Tom Dale](https://twitter.com/tomdale/status/465526826576916481) didn't like the last one.\n\nThere was [CodeBabes](https://codebabes.com). Joke or not, it's f**king terrible.\n\nThere was this whole post [covering a few problems](http://www.businessinsider.com/sexism-in-tech-on-secret-2014-5). That's like a combo.\n\n[Hackers and Hookers costume party](https://www.eventbrite.com/e/hackers-hookers-costume-party-techies-entrepreneurs-tickets-8938393977). Whothef**k signed off on that one.\n\n[Little shits on IRC](https://lindseykuper.livejournal.com/418854.html) shouting \"boobs or gtfo\" at women, and the fact that she had to think to herself \"Do I have enough social credit to report this?\" That is a massive part of the problem, and a huge part of why we don't hear about things.\n\nTechnology giants [portraying women as housewives who don't understand how to computer](http://programmersbeingdicks.tumblr.com/post/59106824903/samsungs-new-ad-for-an-ssd-which-women), while the two guys obviously understand it immediately. \n\nThis PHP Framework has a [heavy chested mascot](http://phpixie.com/tutorials/). Not entirely sure what the point of that is. _**Update:** I've seen designs for a new version of this pixie which doesn't sport the same utterly ridiculous cleavage as the original._\n\nThe male startup founder who thought it was ok to send a female tech reporter he doesn't know [a basket of sex toys and tequila](http://www.businessinsider.com/startup-sends-female-reporter-sex-schwag-2014-10). Also how do you just have oysters in a basket? \n\nIn the gaming community it is a generally accepted fact that [sexism is rife](http://www.theguardian.com/technology/gamesblog/2012/nov/28/games-industry-sexism-on-twitter), from the [developer/publisher companies](http://www.vg247.com/2014/02/17/deep-down-the-rabbit-hole-of-ingrained-games-industry-sexism/) through to [gaming retailers](http://www.gizmodo.co.uk/2011/10/how-an-unknown-games-retailer-committed-suicide-at-a-gaming-awards-event/) too.\n\nMy main point here is that I am not some uptight, super offended, white knight lunatic that is trying to impress anyone by making a big point about how mean all men are to all women all the time. The point really is that you don't NEED to be to be offended by the sexist bullshit that happens around our unnecessarily male dominated industry. I am furthermore absolutely shocked that anyone who actively participates in this community can not only fail to notice any sexism at all, but assumes that people are either lying or exaggerating when people provide personal accounts.\n\nI was involved with [an incident back in 2012](https://github.com/EllisLab/CodeIgniter/pull/1615), where I too quickly dismissed something. I saw it as an unnecessary pull request which could have had breaking changes. I guess if a woman had sent the PR and said she was offended I would have treated it differently than a guy saying something _could be_ offensive, but again as we we didn't have any testing at all back then I didn't really fancy changing it. \n\nIf it was as simple as a [documentation change](https://www.joyent.com/blog/the-power-of-a-pronoun) then I would have been much more likely to [speak up](https://github.com/joyent/libuv/pull/1015#issuecomment-29538615). \n\nRegardless, these days I make sure I am not part of the problem. [This article](http://bellejar.ca/2014/02/22/why-wont-you-educate-me-about-feminism/) really helped me improve some of my views on the situation. There are more articles like it on [Days Since the Last Tech Incident](http://dayssincelasttechincident.com). Some great advice can be found in [What Can Men Do?](https://medium.com/tech-culture-briefs/what-can-men-do-a1e93d985af0).\n\nPeople think its ironic that I care about this issue because I am considered by some to be abrasive. I will shout at anyone who is ignorant or factually wrong, but I will not do it based on age, gender, race or religion. The only group of people I hate are ignorant assholes, and sexism is one of the largest forms of ignorance I can think of.",
    "created_on": "1401575040",
    "updated_on": "1401575040",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "6786f646924e84cef48b305d6bfa7ba6",
    "type": "markdown",
    "parsed": "<p>So yesterday I blew a nerve. Reddit normally has some trolls, but if you get them on the subject of sexism in tech, or PHPWomen then stupid explodes out and spills all over the floor. There were a lot of people not reading an article explain that A was not true, then everyone went around going on about how they hated how A was true. That was frustrating and insanely ignorant, but then it got worse.</p>\n\n<p>I had somebody explain to me that they just didn't believe there was a problem with sexism in tech. Just flat out said it is not a thing. I explained things I have seen and heard with my own eyes and ears in various jobs and events and still, apparently that was just anecdotal - which was somehow not relevant. He wanted cold, hard proof. </p>\n\n<p>Alright. I don't normally play the white knight card and I normally wouldn't play the burden of proof game with one jackass in a comment thread, but I figure having a resource that collates ridiculous examples of sexism in the tech community for me to link to in the future can't hurt, and after I spent the time writing this up I felt like it could be put to use. </p>\n\n<p>One of the first articles I remember really making me pay attention to the situation is <a href=\"http://www.sazzy.co.uk/2013/02/speaking-up/\">a first-hand account by Sarah Parmenter</a>. She is a very prominent figure in the community who was too scared to talk about it for a long time. If a well known public speaker is too scared then what about the other people with less of an established following? They must be even more scared to come out. They might think they <a href=\"http://juliepagano.tumblr.com/post/62034537968/i-think-im-in-an-emotionally-abusive-relationship-with\">are over-thinking it</a>.</p>\n\n<p>There was the guy that <a href=\"http://whatwouldkingleonidasdo.tumblr.com/post/54989171152/how-i-discovered-gender-discrimination\">couldn't get any interviews</a> because his name was Kim, until he put a more traditionally male-sounding name on the CV and got a shitload of jobs.</p>\n\n<p>There are <a href=\"http://www.theguardian.com/commentisfree/2013/sep/09/titstare-app-women-tech-sexism\">TechCrunch hackathons</a> that fail to screen anything being presented that have wanking applications and applications called \"Tit-stare\" on the same stage as a 9-year old girl presenting her app. I'm glad she won, hopefully that stopped her being put off the tech community.</p>\n\n<p>There is the ongoing problem of girls being in such a low minority that they are picked on and <a href=\"https://www.usenix.org/blog/my-daughters-high-school-programming-teacher\">harassed by boys at school</a>, forcing many to drop out at a young level. Read the update on that one, the teachers wouldn't do a shitting thing about it. </p>\n\n<p>Sure you might just label it as teasing, but its bullying and I had enough of that shit myself to know that it is not a motivator. I was bullied like hell in physical education classes for years and used to just get the shit kicked out of me regularly along with plenty of verbal abuse. That made me feel like shit, so I stopped going to PE. If 12 year old me was being bullied by programmers then he would have stopped programming. </p>\n\n<p>This is something that I have heard from a lot of women. In some cases these bullying/harassment victims managed to overcome their early setbacks at a later stage and teach themselves programming. That often sets them back a few years, and maintains the \"women are paid less and do lower level jobs\" pattern that is oh so common.</p>\n\n<p>There are plenty of surveys around about <a href=\"http://www.drdobbs.com/architecture-and-design/2014-developer-salary-survey/240168195?pgno=6\">the salary gap between men and women</a>. You can argue the sample base of that one is quite small, but it is representative of <a href=\"http://geekfeminism.wikia.com/wiki/FLOSS\">plenty</a> of <a href=\"http://geekfeminism.wikia.com/wiki/Technology_industry\">other sources</a>. Studies show that even when women do negotiate salaries, they <a href=\"http://www.npr.org/blogs/money/2014/04/08/300290240/why-women-dont-ask-for-more-money\">often ask for less</a>. If they do ask for similar numbers to men, they have to deal with <a href=\"http://blogs.hbr.org/2014/06/why-women-dont-negotiate-their-job-offers/\">the \"social cost\" of negotiation</a> which is unfairly biased against women who ask for higher salaries. </p>\n\n<p>Now and then there are huge figures in the community like Uncle Bob, who whilst being very well respected for his views on technology can't help himself from making sexist comments. I've seen <a href=\"https://gist.github.com/unclebob/2508746\">several apologies</a> from him, and <a href=\"https://gist.github.com/unclebob/2abcce451bafeab421f2\">the most recent</a> was sarcastic as hell until he updated it about 6 times (check the revisions). <a href=\"https://twitter.com/tomdale/status/465526826576916481\">Tom Dale</a> didn't like the last one.</p>\n\n<p>There was <a href=\"https://codebabes.com\">CodeBabes</a>. Joke or not, it's f**king terrible.</p>\n\n<p>There was this whole post <a href=\"http://www.businessinsider.com/sexism-in-tech-on-secret-2014-5\">covering a few problems</a>. That's like a combo.</p>\n\n<p><a href=\"https://www.eventbrite.com/e/hackers-hookers-costume-party-techies-entrepreneurs-tickets-8938393977\">Hackers and Hookers costume party</a>. Whothef**k signed off on that one.</p>\n\n<p><a href=\"https://lindseykuper.livejournal.com/418854.html\">Little shits on IRC</a> shouting \"boobs or gtfo\" at women, and the fact that she had to think to herself \"Do I have enough social credit to report this?\" That is a massive part of the problem, and a huge part of why we don't hear about things.</p>\n\n<p>Technology giants <a href=\"http://programmersbeingdicks.tumblr.com/post/59106824903/samsungs-new-ad-for-an-ssd-which-women\">portraying women as housewives who don't understand how to computer</a>, while the two guys obviously understand it immediately. </p>\n\n<p>This PHP Framework has a <a href=\"http://phpixie.com/tutorials/\">heavy chested mascot</a>. Not entirely sure what the point of that is. <em><strong>Update:</strong> I've seen designs for a new version of this pixie which doesn't sport the same utterly ridiculous cleavage as the original.</em></p>\n\n<p>The male startup founder who thought it was ok to send a female tech reporter he doesn't know <a href=\"http://www.businessinsider.com/startup-sends-female-reporter-sex-schwag-2014-10\">a basket of sex toys and tequila</a>. Also how do you just have oysters in a basket? </p>\n\n<p>In the gaming community it is a generally accepted fact that <a href=\"http://www.theguardian.com/technology/gamesblog/2012/nov/28/games-industry-sexism-on-twitter\">sexism is rife</a>, from the <a href=\"http://www.vg247.com/2014/02/17/deep-down-the-rabbit-hole-of-ingrained-games-industry-sexism/\">developer/publisher companies</a> through to <a href=\"http://www.gizmodo.co.uk/2011/10/how-an-unknown-games-retailer-committed-suicide-at-a-gaming-awards-event/\">gaming retailers</a> too.</p>\n\n<p>My main point here is that I am not some uptight, super offended, white knight lunatic that is trying to impress anyone by making a big point about how mean all men are to all women all the time. The point really is that you don't NEED to be to be offended by the sexist bullshit that happens around our unnecessarily male dominated industry. I am furthermore absolutely shocked that anyone who actively participates in this community can not only fail to notice any sexism at all, but assumes that people are either lying or exaggerating when people provide personal accounts.</p>\n\n<p>I was involved with <a href=\"https://github.com/EllisLab/CodeIgniter/pull/1615\">an incident back in 2012</a>, where I too quickly dismissed something. I saw it as an unnecessary pull request which could have had breaking changes. I guess if a woman had sent the PR and said she was offended I would have treated it differently than a guy saying something <em>could be</em> offensive, but again as we we didn't have any testing at all back then I didn't really fancy changing it. </p>\n\n<p>If it was as simple as a <a href=\"https://www.joyent.com/blog/the-power-of-a-pronoun\">documentation change</a> then I would have been much more likely to <a href=\"https://github.com/joyent/libuv/pull/1015#issuecomment-29538615\">speak up</a>. </p>\n\n<p>Regardless, these days I make sure I am not part of the problem. <a href=\"http://bellejar.ca/2014/02/22/why-wont-you-educate-me-about-feminism/\">This article</a> really helped me improve some of my views on the situation. There are more articles like it on <a href=\"http://dayssincelasttechincident.com\">Days Since the Last Tech Incident</a>. Some great advice can be found in <a href=\"https://medium.com/tech-culture-briefs/what-can-men-do-a1e93d985af0\">What Can Men Do?</a>.</p>\n\n<p>People think its ironic that I care about this issue because I am considered by some to be abrasive. I will shout at anyone who is ignorant or factually wrong, but I will not do it based on age, gender, race or religion. The only group of people I hate are ignorant assholes, and sexism is one of the largest forms of ignorance I can think of.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "251",
    "created": "2014-07-23 15:24:00",
    "updated": "2014-07-23 15:24:00",
    "created_by": "2",
    "ordering_count": "42",
    "title": "The Neverending Muppet Debate of PHP 6 v PHP 7",
    "slug": "neverending-muppet-debate-of-php-6-v-php-7",
    "category_id": "2",
    "attachment": "",
    "intro": "There are a few major, important conversations happening in the PHP internals mailing list as we speak... and then there is the discussion about calling the version that comes after PHP 5 either PHP 6 or PHP 7. Um?",
    "body": "There are a few major, important conversations happening in the PHP internals mailing list as we speak:\n\n* [The Facebook lot heading up a specification based off of PHP 5.6](http://grokbase.com/t/php/php-internals/147p423vvz/php-language-specification)\n* Should [phpng](https://wiki.php.net/rfc/phpng) be [moved into master](http://grokbase.com/t/php/php-internals/147nyavwwv/rfc-move-phpng-to-master) to be the base of the next major PHP version\n* How can we best go about [scalar typehinting](http://grokbase.com/t/php/php-internals/147dp561xm/rfc-scalar-type-hinting-with-casts-re-opening)\n\nThere is also another conversation:\n\n* Should it be PHP 6 or PHP 7\n\nWait... what? \n\n## A little history\n\nPHP 6 was [attempted back in about 2010](https://wiki.php.net/todo/php60) and it ended up getting stuck in the mud. One of the largest changes that caused the troubles was that they tried to tackle Unicode support in the core of the language, then - as I remember it - kinda ditched out due to being [unable to get the feature](http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6) exactly right. \n\nThere is no doubt more to it than that, but the end result was that each feature slated for PHP 6 was back-ported into the 5.x branch, which is why we saw such a jump in awesome useful features for PHP 5.3. \n\n## The current argument\n\nThe question \"Should we use PHP 6 as the name for the next version?\" has been asked many times, but this time it is really taking off because the next major version of PHP is getting much closer. The timeframe of that is of course being discussed too, and bets currently range from 12 months to 3 years, but it is coming and it should probably have a name other than \"PHP.next\".\n\nTo try and answer once and for all whether it should be 6 or not, which seemed like a simple call. \"Can we call it PHP 6\" was the aim, but he was shouted down for not making a definitive \"Make it PHP 6 or PHP 7\" vote. \n\nAfter some back and forth, and some bickering, and some squabbling, and one side deleting part of the argument from the others section of the RFC, we have [a new vote on PHP 6 v PHP 7](https://wiki.php.net/rfc/php6).\n\n## Arguments for PHP 7\n\nUnfortunately, this whole conversation has been based around the mindset of: \"If you cannot prove why PHP 6 is better than PHP 7, then we should use PHP 7.\"\n\nI am totally down for letting whichever side piles up the most number of logical arguments to win, as that is pretty much how a discussion works. Sadly, it feels a little less like a discussion and more like a railroad of irrelevant arguments. One side has a lot of reasons, the other just has the one:\n\n**5 + 1 = 6**\n\nThat is the strongest reason. Doing the logical thing should not be something that needs to be proved with 20 arguments from 20 different angles. But whatever, lets look at the pro-7 arguments in the RFC:\n\n> First and foremost, PHP 6 already existed and it was something completely different. The decimal system (or more accurately the infinite supply of numbers we have) makes it easy for us to skip a version, with plenty more left for future versions to come.\n\nThe idea of PHP 6 actually existing ever is a weird one. I've worked in all sorts of open-source projects and often a release will be scheduled for one version, then end up being done differently. \n\nI've made a 3.0 branch before, then decided it didn't warrant a major release at this point.\n\nI've made a 3.2 branch before, then decided that it actually needed to be a major after a few more additions came in. \n\nThings change.\n\nThe only releases that exist are those that are actually released.\n\n> While it's true that the other PHP 6 never reached General Availability, it was still a very widely published and well-known project conducted by php.net that will share absolutely nothing with the version that is under discussion now. Anybody who knew what PHP 6 is (and there are many) will have a strong misconception in his or her mind as to the contents and features of this new upcoming version (essentially, that it's all about Unicode).\n\nSo, to my earlier point, \"PHP 6 never reached General Availability.\" This mainly means that only \"those in the know\" really have any idea what PHP 6 is, and \"those in the know\" know enough to be fine with this lot having another crack at getting PHP 6 done.\n\n> PHP 6, the original PHP 6, has been discussed in detail in many PHP conferences. It was taught to users as a done-deal, including detailed explanations about features and behavior (by php.net developers, not 'evil' book authors).\n\nOh the book argument. Kill me.\n\nSome authors jumped the gun a little, and some publishers forced the authors to make the title PHP 6, because they wanted to be relevant for a long time. \n\nThe book argument for years has been the strongest \"pro-7\" argument, but it is not something I find to be even slightly valid. Most of those books are low quality, and they're all years old and irrelevant. Shit books exist now, and will always exist, but the way we know a book is shit is down to reviews.\n\nOne review on there saying \"This book is outdated and nothing to do with PHP 6\" and that book is shot.\n\nThe conference argument is also not particularly relevant, as again \"those in the know\" know better.\n\n> PHP 6 was widely known not only within the Internals community, but around the PHP community at large. It was a high profile project that many - if not most - PHP community members knew about.\n\nI'd love to see a survey on this. My experience is that most developers have not got a clue that PHP 6 was ever even half a thing, and most drop a jaw when calling it PHP 7 is mentioned.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>“Unless you can’t prove why we shouldn’t do a stupid thing, we’re gonna do the stupid thing” <a href=\"https://t.co/R0bLgCISES\">https://t.co/R0bLgCISES</a> Voted PHP 6.</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/491947247118991361\">July 23, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n> There's lots of PHP 6 information, about the original PHP 6, that exists around the web. Books are the smallest part of the problem.\n\nLots of old, shit, useless information.\n\n1. People know where to go to get their quality information, otherwise we'd all still be using mysql_connect() in our view files\n2. Responsible tutorial writes redact, or add a bit of errata\n3. In the world of a tech an article that is a few years old is hardly relevant anymore\n\n> Unlike the 'trivia question' of 'why did we skip into 7?', reusing version 6 is likely to call real confusion in people's minds, with ample information on two completely different versions with entirely different feature sets that have the exact same name.\n\nAmple is misleading. There are a few hits on Google about PHP 6 as a thing, but mostly its me and a few other people making of, or explaining, what did happen to 6. \n\nAs soon as we release PHP 6, there will be a lot of us writing blogs, books and talks about PHP 6. I'll make it my personal mission to dominate the homepage if you like, but I'm sure others will help me. NetTuts, Reddit, SitePoint, YouTube and the like will all have fresh content saying \"PHP 6 is out! They tried a while back, but we got it now.\"\n\nAssuming that 4 year old content will ever somehow outweigh the sheer force of an actual new release is truly absurd.\n\n> Skipping versions isn't unprecedented or uncommon in both open source projects and commercial products. MariaDB, jumped all the way up to version 10.0 to avoid confusion, Netscape Communicator skipped version 5.0 directly into 6.0, and Symantec skipped version 13. Each and every one of those had different reasons for the skipping, but the common denominator is that skipping versions is hardly a big deal.\n\nYeah and Salt jumped from 0.10.0 to 10, or something, and everyone called them out on marketing bullshit. \n\nPeople jump around with their numbers and it is usually a dumb marketing ploy that gets called out as a dumb marketing ploy. This is less of a marketing ploy, than a poor marketing choice.\n\n\"Oh, they went from 5 to 7 because they fucked up 6 and couldn't get it out?\"\n\nand \n\n\"PHP developers can't count to 6\"\n\nInstead of just:\n\n\"A second attempt PHP 6 is out\"\n\n> Version 6 is generally associated with failure in the world of dynamic languages. PHP 6 was a failure; Perl 6 was a failure. It's actually associated with failure also outside the dynamic language world - MySQL 6 also existed but never released. The perception of version 6 as a failure - not as a superstition but as a real world fact (similar to the association of the word 'Vista' with failure) - will reflect badly on this PHP version.\n\nOMFG DONT CARE\n\n> The case for 6 is mostly a rebuttal of some of the points above, but without providing a strong case for why we *shouldn't* skip version 6. If we go with PHP 7, the worst case scenario is that we needlessly skipped a version. We'd still have an infinite supply of major versions at our disposal for future use. If, however, we pick 6 instead of 7 - the worst case scenario is widespread confusion in our community and potential negative perception about this version.\n\nSure, nobody is arguing 6 to protect the environment from wasted integers, they're just saying that the number that comes after 5 is 6.\n\n## Not Actually Caring\n\nI, like many knowledgeable onlookers don't actually care which is picked. I am totally in favour of a vote and a series of arguments, but I feel like every argument in that pro-7 list is completely invalid, and the attitude is \"well, 7 have more arguments than 6 so... 7!\"\n\nThe whole time I've been watching this I've just been thinking about the Ministry of Silly Walks:\n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/9ZlBUglE6Hc\" frameborder=\"0\" allowfullscreen></iframe>\n\nI have no arguments that are valid to tell John or his friends to _not_ walk like that. Other than, it is not logical, it looks silly to everyone outside of the ministry and it just is not necessary. \n\nDo what you want internals, just don't cancel the vote [[again](http://grokbase.com/t/php/php-internals/147kc487cb/vote-rfc-name-of-next-release-of-php)]. Pick an answer and everyone on the losing side needs to bite their tongue, and hopefully the winning side will too.\n\n\n## Alternatives\n\nHere are some of my favourite alternative name suggestions.\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/jensaronsson\">@jensaronsson</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP XP Ultimate Edition</p>&mdash; Matthew Wheeler (@afoozle) <a href=\"https://twitter.com/afoozle/statuses/485744250504478720\">July 6, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/jensaronsson\">@jensaronsson</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP 5se.</p>&mdash; Luke John Steadman (@steadweb) <a href=\"https://twitter.com/steadweb/statuses/485768068598333440\">July 6, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHPX &quot;Rabid Ocelot&quot;</p>&mdash; Ben (@benmarks) <a href=\"https://twitter.com/benmarks/statuses/485864709535825920\">July 6, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP 8 Sophisticated Sturgeon (the fish, obviously)</p>&mdash; Andrea Faulds (@AndreaFaulds) <a href=\"https://twitter.com/AndreaFaulds/statuses/486124612602712067\">July 7, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP Episode VII</p>&mdash; Aalaap (@aalaap) <a href=\"https://twitter.com/aalaap/statuses/486135234883502080\">July 7, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI'll take any name that internals pick, but for crying out loud please pick something and let this vote actually go through.",
    "created_on": "1406129040",
    "updated_on": "1406129040",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "516b84b936af2153271706fdafc7e0e7",
    "type": "markdown",
    "parsed": "<p>There are a few major, important conversations happening in the PHP internals mailing list as we speak:</p>\n\n<ul>\n<li><a href=\"http://grokbase.com/t/php/php-internals/147p423vvz/php-language-specification\">The Facebook lot heading up a specification based off of PHP 5.6</a></li>\n<li>Should <a href=\"https://wiki.php.net/rfc/phpng\">phpng</a> be <a href=\"http://grokbase.com/t/php/php-internals/147nyavwwv/rfc-move-phpng-to-master\">moved into master</a> to be the base of the next major PHP version</li>\n<li>How can we best go about <a href=\"http://grokbase.com/t/php/php-internals/147dp561xm/rfc-scalar-type-hinting-with-casts-re-opening\">scalar typehinting</a></li>\n</ul>\n\n<p>There is also another conversation:</p>\n\n<ul>\n<li>Should it be PHP 6 or PHP 7</li>\n</ul>\n\n<p>Wait... what? </p>\n\n<h2>A little history</h2>\n\n<p>PHP 6 was <a href=\"https://wiki.php.net/todo/php60\">attempted back in about 2010</a> and it ended up getting stuck in the mud. One of the largest changes that caused the troubles was that they tried to tackle Unicode support in the core of the language, then - as I remember it - kinda ditched out due to being <a href=\"http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6\">unable to get the feature</a> exactly right. </p>\n\n<p>There is no doubt more to it than that, but the end result was that each feature slated for PHP 6 was back-ported into the 5.x branch, which is why we saw such a jump in awesome useful features for PHP 5.3. </p>\n\n<h2>The current argument</h2>\n\n<p>The question \"Should we use PHP 6 as the name for the next version?\" has been asked many times, but this time it is really taking off because the next major version of PHP is getting much closer. The timeframe of that is of course being discussed too, and bets currently range from 12 months to 3 years, but it is coming and it should probably have a name other than \"PHP.next\".</p>\n\n<p>To try and answer once and for all whether it should be 6 or not, which seemed like a simple call. \"Can we call it PHP 6\" was the aim, but he was shouted down for not making a definitive \"Make it PHP 6 or PHP 7\" vote. </p>\n\n<p>After some back and forth, and some bickering, and some squabbling, and one side deleting part of the argument from the others section of the RFC, we have <a href=\"https://wiki.php.net/rfc/php6\">a new vote on PHP 6 v PHP 7</a>.</p>\n\n<h2>Arguments for PHP 7</h2>\n\n<p>Unfortunately, this whole conversation has been based around the mindset of: \"If you cannot prove why PHP 6 is better than PHP 7, then we should use PHP 7.\"</p>\n\n<p>I am totally down for letting whichever side piles up the most number of logical arguments to win, as that is pretty much how a discussion works. Sadly, it feels a little less like a discussion and more like a railroad of irrelevant arguments. One side has a lot of reasons, the other just has the one:</p>\n\n<p><strong>5 + 1 = 6</strong></p>\n\n<p>That is the strongest reason. Doing the logical thing should not be something that needs to be proved with 20 arguments from 20 different angles. But whatever, lets look at the pro-7 arguments in the RFC:</p>\n\n<blockquote>\n  <p>First and foremost, PHP 6 already existed and it was something completely different. The decimal system (or more accurately the infinite supply of numbers we have) makes it easy for us to skip a version, with plenty more left for future versions to come.</p>\n</blockquote>\n\n<p>The idea of PHP 6 actually existing ever is a weird one. I've worked in all sorts of open-source projects and often a release will be scheduled for one version, then end up being done differently. </p>\n\n<p>I've made a 3.0 branch before, then decided it didn't warrant a major release at this point.</p>\n\n<p>I've made a 3.2 branch before, then decided that it actually needed to be a major after a few more additions came in. </p>\n\n<p>Things change.</p>\n\n<p>The only releases that exist are those that are actually released.</p>\n\n<blockquote>\n  <p>While it's true that the other PHP 6 never reached General Availability, it was still a very widely published and well-known project conducted by php.net that will share absolutely nothing with the version that is under discussion now. Anybody who knew what PHP 6 is (and there are many) will have a strong misconception in his or her mind as to the contents and features of this new upcoming version (essentially, that it's all about Unicode).</p>\n</blockquote>\n\n<p>So, to my earlier point, \"PHP 6 never reached General Availability.\" This mainly means that only \"those in the know\" really have any idea what PHP 6 is, and \"those in the know\" know enough to be fine with this lot having another crack at getting PHP 6 done.</p>\n\n<blockquote>\n  <p>PHP 6, the original PHP 6, has been discussed in detail in many PHP conferences. It was taught to users as a done-deal, including detailed explanations about features and behavior (by php.net developers, not 'evil' book authors).</p>\n</blockquote>\n\n<p>Oh the book argument. Kill me.</p>\n\n<p>Some authors jumped the gun a little, and some publishers forced the authors to make the title PHP 6, because they wanted to be relevant for a long time. </p>\n\n<p>The book argument for years has been the strongest \"pro-7\" argument, but it is not something I find to be even slightly valid. Most of those books are low quality, and they're all years old and irrelevant. Shit books exist now, and will always exist, but the way we know a book is shit is down to reviews.</p>\n\n<p>One review on there saying \"This book is outdated and nothing to do with PHP 6\" and that book is shot.</p>\n\n<p>The conference argument is also not particularly relevant, as again \"those in the know\" know better.</p>\n\n<blockquote>\n  <p>PHP 6 was widely known not only within the Internals community, but around the PHP community at large. It was a high profile project that many - if not most - PHP community members knew about.</p>\n</blockquote>\n\n<p>I'd love to see a survey on this. My experience is that most developers have not got a clue that PHP 6 was ever even half a thing, and most drop a jaw when calling it PHP 7 is mentioned.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>“Unless you can’t prove why we shouldn’t do a stupid thing, we’re gonna do the stupid thing” <a href=\"https://t.co/R0bLgCISES\">https://t.co/R0bLgCISES</a> Voted PHP 6.</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/statuses/491947247118991361\">July 23, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote>\n  <p>There's lots of PHP 6 information, about the original PHP 6, that exists around the web. Books are the smallest part of the problem.</p>\n</blockquote>\n\n<p>Lots of old, shit, useless information.</p>\n\n<ol>\n<li>People know where to go to get their quality information, otherwise we'd all still be using mysql_connect() in our view files</li>\n<li>Responsible tutorial writes redact, or add a bit of errata</li>\n<li>In the world of a tech an article that is a few years old is hardly relevant anymore</li>\n</ol>\n\n<blockquote>\n  <p>Unlike the 'trivia question' of 'why did we skip into 7?', reusing version 6 is likely to call real confusion in people's minds, with ample information on two completely different versions with entirely different feature sets that have the exact same name.</p>\n</blockquote>\n\n<p>Ample is misleading. There are a few hits on Google about PHP 6 as a thing, but mostly its me and a few other people making of, or explaining, what did happen to 6. </p>\n\n<p>As soon as we release PHP 6, there will be a lot of us writing blogs, books and talks about PHP 6. I'll make it my personal mission to dominate the homepage if you like, but I'm sure others will help me. NetTuts, Reddit, SitePoint, YouTube and the like will all have fresh content saying \"PHP 6 is out! They tried a while back, but we got it now.\"</p>\n\n<p>Assuming that 4 year old content will ever somehow outweigh the sheer force of an actual new release is truly absurd.</p>\n\n<blockquote>\n  <p>Skipping versions isn't unprecedented or uncommon in both open source projects and commercial products. MariaDB, jumped all the way up to version 10.0 to avoid confusion, Netscape Communicator skipped version 5.0 directly into 6.0, and Symantec skipped version 13. Each and every one of those had different reasons for the skipping, but the common denominator is that skipping versions is hardly a big deal.</p>\n</blockquote>\n\n<p>Yeah and Salt jumped from 0.10.0 to 10, or something, and everyone called them out on marketing bullshit. </p>\n\n<p>People jump around with their numbers and it is usually a dumb marketing ploy that gets called out as a dumb marketing ploy. This is less of a marketing ploy, than a poor marketing choice.</p>\n\n<p>\"Oh, they went from 5 to 7 because they fucked up 6 and couldn't get it out?\"</p>\n\n<p>and </p>\n\n<p>\"PHP developers can't count to 6\"</p>\n\n<p>Instead of just:</p>\n\n<p>\"A second attempt PHP 6 is out\"</p>\n\n<blockquote>\n  <p>Version 6 is generally associated with failure in the world of dynamic languages. PHP 6 was a failure; Perl 6 was a failure. It's actually associated with failure also outside the dynamic language world - MySQL 6 also existed but never released. The perception of version 6 as a failure - not as a superstition but as a real world fact (similar to the association of the word 'Vista' with failure) - will reflect badly on this PHP version.</p>\n</blockquote>\n\n<p>OMFG DONT CARE</p>\n\n<blockquote>\n  <p>The case for 6 is mostly a rebuttal of some of the points above, but without providing a strong case for why we <em>shouldn't</em> skip version 6. If we go with PHP 7, the worst case scenario is that we needlessly skipped a version. We'd still have an infinite supply of major versions at our disposal for future use. If, however, we pick 6 instead of 7 - the worst case scenario is widespread confusion in our community and potential negative perception about this version.</p>\n</blockquote>\n\n<p>Sure, nobody is arguing 6 to protect the environment from wasted integers, they're just saying that the number that comes after 5 is 6.</p>\n\n<h2>Not Actually Caring</h2>\n\n<p>I, like many knowledgeable onlookers don't actually care which is picked. I am totally in favour of a vote and a series of arguments, but I feel like every argument in that pro-7 list is completely invalid, and the attitude is \"well, 7 have more arguments than 6 so... 7!\"</p>\n\n<p>The whole time I've been watching this I've just been thinking about the Ministry of Silly Walks:</p>\n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/9ZlBUglE6Hc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>I have no arguments that are valid to tell John or his friends to <em>not</em> walk like that. Other than, it is not logical, it looks silly to everyone outside of the ministry and it just is not necessary. </p>\n\n<p>Do what you want internals, just don't cancel the vote [<a href=\"http://grokbase.com/t/php/php-internals/147kc487cb/vote-rfc-name-of-next-release-of-php\">again</a>]. Pick an answer and everyone on the losing side needs to bite their tongue, and hopefully the winning side will too.</p>\n\n<h2>Alternatives</h2>\n\n<p>Here are some of my favourite alternative name suggestions.</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/jensaronsson\">@jensaronsson</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP XP Ultimate Edition</p>&mdash; Matthew Wheeler (@afoozle) <a href=\"https://twitter.com/afoozle/statuses/485744250504478720\">July 6, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/jensaronsson\">@jensaronsson</a> <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP 5se.</p>&mdash; Luke John Steadman (@steadweb) <a href=\"https://twitter.com/steadweb/statuses/485768068598333440\">July 6, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHPX &quot;Rabid Ocelot&quot;</p>&mdash; Ben (@benmarks) <a href=\"https://twitter.com/benmarks/statuses/485864709535825920\">July 6, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP 8 Sophisticated Sturgeon (the fish, obviously)</p>&mdash; Andrea Faulds (@AndreaFaulds) <a href=\"https://twitter.com/AndreaFaulds/statuses/486124612602712067\">July 7, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> PHP Episode VII</p>&mdash; Aalaap (@aalaap) <a href=\"https://twitter.com/aalaap/statuses/486135234883502080\">July 7, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>I'll take any name that internals pick, but for crying out loud please pick something and let this vote actually go through.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "261",
    "created": "2014-08-04 20:51:00",
    "updated": "2014-08-04 20:51:00",
    "created_by": "2",
    "ordering_count": "43",
    "title": "I was an Extraordinary Alien... For a Week",
    "slug": "i-was-an-extraordinary-alien-for-a-week",
    "category_id": "1",
    "attachment": "",
    "intro": "A personal write-up of something I&#39;ve not been able to talk about for a while. Probably the most complicated year of my life.",
    "body": "The last seven months have been a weird time.\n\nI started off the year with the knowledge that the startup I worked for was running out of money. This was not huge in itself as most startups are defined by their time to live, or their \"runway.\" It did mean that most of the team got dropped before the next major version of our iPhone application hit the store. The new API went in the bin and the iPhone codebase went with it.\n\nThe plan was to stop flogging the dead horse, create a new idea, mock up or build an MVP and try to seek further funding to create that idea.\n\nMany people would have just jumped ship at that point. I had invested a huge amount of time and effort into this company, and I wanted my riches. Realistically, I wanted my O-1 visa which the company had decided to apply for. The O-1 is the **hardest** visa to get for working in the USA, and has a great name to boot: \"Alien of Extraordinary Ability.\"\n\nMost folks get a H-1B working visa, but the selection process had changed that year. It went from first-come first-serve, to a lottery. That unfortunately meant the process could take years, instead of months. It would leave me stuck in England, away from my girlfriend and my friends. It is rather difficult to accept a change like that after I have spent two years making a brand new life here in New York. It made me stick around when a more logical choice would have been to go home. \n\n_Ironically since drafting this article a few days ago my girlfriend and I have split up._\n\nSome new ideas happened at Kapture. We spent some time fleshing them out, I worked on some prototypes and built some kinda cool stuff, but in the end I was back in the UK. While I was there I was freelancing, waiting on a \"We'll let you know when we come up with a new idea for you to build.\" from the company. I figured I would just focus on getting my visa sorted out, have a little holiday and we could get back to work when I returned to the States.\n\nI worked my ass off to get this O-1 visa. I was so fucking excited, ecstatic and grateful to get it too. Not only did it mean that the US government thought I was \"extraordinary,\" but the support from the PHP community was amazing. \n\nThe PHP community proven itself capable of [great things](http://www.gofundme.com/b9dfcg). Everyone that replied to [this tweet](https://twitter.com/philsturgeon/status/464495467016245248) helped believe it or not. I had so many people say they had used and benefitted from my code that we actually supplied the replies as evidence. The support also came in the form of letters of recommendation, emails, introductions to people. \n\nThese names stuck out, and everyone on the list will be getting a bottle of something through the mail when I'm not financially crippled.\n\n**Adam Jackett**\nWrote  an email explaining how many hours of development time my various bits of code save him per week. Immigration people like provable numbers and stats, and proving I have saved people time or money is a good quality to have.\n\n**Anthony Ferrera**\nAnthony wrote a great letter of recommendation at short notice and even picked up the whiskey tab while we worked on it. Star.\n\n**Bruno Skvorc**\nAs Managing Editor of PHP for SitePoint, Bruno was able to say a few positive things about PHP The Right Way. He reviewed the book a while ago and spoke of that, and talked about my contributions towards PSR-4 and the FIG in general. This helped a great deal.\n\n**Cal Evans**\nCal was able to confirm my position on the FIG, and said I was doing good stuff helping out there. They liked that.\n\n**Chris Cornutt**\nAnother letter of recommendation saying he's seen my name pop up a few times on the articles hes posting recently. Chris was amazing here as my lawyers played the back and forth game about 10 times, even needing a 2nd letter for some damn reason.\n\n**Chris Kacerguis**\nChris let immigration people know that Apple had been using my CodeIgniter Rest-Server and a few other bits and bobs for a while. Super handy.\n\n**Jamie Hannaford**\nAfter tweet-panicing about needing more evidence, Jamie wrote a letter from Rackspace. He explained why and how Rackspace was a big awesome company, and had been using a bunch of my code internally. That one came out of the blue, and was so useful!\n\n**Jamie Holdroyd**\nJamie wrote an email explaining that my CodeIgniter libraries and PyroCMS had saved thousands of British pounds in development costs.\n\n**Joshua Lockhart**\nJosh wrote a great letter explaining that I had been a big help to him getting PHP The Right Way, making \"substantive additions.\" This ticked a few criteria about influencing my peers or something.\n\n**Mark Ryan**\nMark wrote a letter saying I'd helped his startup [Blooie](https://bloo.ie/) at an early start. Cheers fella!\n\n**Michael Dowling**\nMichael wrote an awesome letter saying that they use many FIG standards at Amazon Web Services, and will be using PSR-4 soon. This in turn helped me because it showed support for something I had  involved with. Tenuous, but amazingly helpful.\n\n**Ryan Beck & Steven Wade**\nRyan has helped me out massively twice now. His company Fueled gave me a huge chunk of sponsorship money (over $1k) for a [charity bike ride] back in 2013. I went out to do some free consulting for them. Now, they've written me a letter saying how helpful that consulting was to them, and wrote a bunch of nice stuff to try and convince immigration to let me stay in the country. Being ex-military was useful too.\n\n[charity bike ride]: http://philsturgeon.uk/blog/2013/07/geeks-giving-for-aids\n\nSteven made all that possible by putting us in touch and chasing Ryan to get the sponsorship _and letter_ sorted. Absolute champs both of them.\n\n**Ryan Thompson**\nRyan runs a company called AI Web Systems, which has just acquired PyroCMS. They use PyroCMS after ditching all other CMS' and have been contributing for years. Ryan wrote about how useful that product has been for them, again saving X amount of time and money every Y.\n\n**Jerel Unruh**\nJerel wrote a great letter saying how he had been working with a local county on their emergency dispatch systems. As previous owner of PyroCMS LLC he explained again how useful PyroCMS had been to him over the years and how he has used it to make a living.\n\n**Jim Morrison**\nI only worked for Jim at Deep Blue Sky for three months, but since then he has spent more time than that writing me letters of recommendation. Sorry boss. One day I'll work my life out and I can stop pestering you. Beers again soon. \n\n**Jordi Bogianno**\nI \"had to\" get Jordi to look into his stats for Packagist and tell me how many Composer packages use PSR-0. This let us say that a certain % of all PHP packages used the old autoloading standard and would more than likely upgrade to use PSR-4. The answer was about 16k out of 21k, but how fucking tenuous is that? \n\nApparently it _really_ helped.\n\n**Serkan Piantino**\nA Kapture investor who works for Facebook. Another reason to stick with Kapture, as having a big name at Facebook support my visa helped.\n\n**Shealan Forshaw**\nShort but sweet email saying every product he's built over the last few years has had a bunch of my code and saved them a bunch of time. Thank you!\n\n**Zachary Blank**\nI met Zach through Kapture people but we'd known each other on the internets for ages. He wrote about how I had helped out with CodeIgniter and gave some stats about FuelPHP and PyroCMS downloads and usages. He has had some great success in the New York startup world and explained about what he had done.\n\n## \"Big whoop, so they wrote a letter.\"\n\nEach of these letters required approval from my visa lawyer, who knew exactly what immigration wanted to see. This led to a fair bit of back and forth with everyone, as not a single first draft got accepted. It was heart-breaking for me to have to pester these legends with my own personal bullshit, but luckily everyone was cool with it.\n\nSo that was that. I got my visa, I got into the States, and before I could even finish my catchup drinks with various friends guess what? \n\nKapture has gone [bees-wax](http://www.collegehumor.com/video/6507690/hardly-working-start-up-guys). It is an ex-startup.\n\nOk, well I can just transfer this visa to a new company, right?\n\n**WRONG.**\n\nUnlike a H-1B which is transferrable, a change of employer under an O-1 requires a brand new petition. That means literally starting again with the O-1 process, which last time was like a part-time job for 6 months.\n\nI made quite a large and stupid assumption, and it is one of the factors that right now are contributing to this fucked situation. If I had known they were not transferable I would have just said \"fuck it\" and jumped ship on Kapture back in bloody January.\n\n## Next\n\nI have a few things to focus on. \n\n### A new visa\n\nTrying to find a visa lawyer who will let me pay in installments, because I don't have $8k tucked in my ass.\n\n### Made In Production\n\nThe [t-shirt empire] needs to expand. We need more shirts, womens shirts, a new website and a new fulfillment solution. It started as a bit of a silly experiment but I believe it could be a real business.\n\n[t-shirt empire]: https://www.madeinproduction.com\n\n### Build APIs You Won't Hate\n\nI need to get a [proper site up] and get a print version of the book out. The royalties from LeanPub have been covering my rent for the last few months, and without it I have no idea what I would have done.\n\n[proper site up]: http://apisyouwonthate.com/\n\n### Downsizing\n\nI'm going to sell everything I own pretty much. If I stay here I'm going to get a smaller apartment, because I can't know where I will be. Paying over $2k a month for an apartment you are not in is devastating.\n\n### CakeFest\n\nI have a conference coming up in Spain at the end of the month. I've nearly cancelled it a few times because I am not sure if I can even get back into the US afterwards, but I refuse to let the organizers down. I'll cross the re-entry bridge when I come to it.\n\nOne day, this visa drama will be over. And when I have my new, valid, O-1 visa I will get Dayle to hold it up for [his new Tumblr]. One day I will be vaguely in control of my life and not have it held on a thread by whoever happens to control my visa.\n\n[his new Tumblr]: http://dayleholdingstuff.tumblr.com/\n\nI am trying to avoid panicking my way straight into a 9-5 job that I'll regret taking, and I am trying to avoid slinking back to the UK, where I was depressed for years. New York makes me happy strangely enough, and my new friends are amazing. They even let me come over at 6am when I wake up in Queens after falling asleep on the train, let me sleep a bit then take me out for coffee and bacon. And more beer.\n\nOn that note, I'm going to meet a few of them now and teach them all about my new thing: Tequila spiked Cider.\n\nGive that shit it a try when you don't have anything else to do for a while.",
    "created_on": "1407185460",
    "updated_on": "1407185460",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "26d8d93cc7029926162a7338b23e8798",
    "type": "markdown",
    "parsed": "<p>The last seven months have been a weird time.</p>\n\n<p>I started off the year with the knowledge that the startup I worked for was running out of money. This was not huge in itself as most startups are defined by their time to live, or their \"runway.\" It did mean that most of the team got dropped before the next major version of our iPhone application hit the store. The new API went in the bin and the iPhone codebase went with it.</p>\n\n<p>The plan was to stop flogging the dead horse, create a new idea, mock up or build an MVP and try to seek further funding to create that idea.</p>\n\n<p>Many people would have just jumped ship at that point. I had invested a huge amount of time and effort into this company, and I wanted my riches. Realistically, I wanted my O-1 visa which the company had decided to apply for. The O-1 is the <strong>hardest</strong> visa to get for working in the USA, and has a great name to boot: \"Alien of Extraordinary Ability.\"</p>\n\n<p>Most folks get a H-1B working visa, but the selection process had changed that year. It went from first-come first-serve, to a lottery. That unfortunately meant the process could take years, instead of months. It would leave me stuck in England, away from my girlfriend and my friends. It is rather difficult to accept a change like that after I have spent two years making a brand new life here in New York. It made me stick around when a more logical choice would have been to go home. </p>\n\n<p><em>Ironically since drafting this article a few days ago my girlfriend and I have split up.</em></p>\n\n<p>Some new ideas happened at Kapture. We spent some time fleshing them out, I worked on some prototypes and built some kinda cool stuff, but in the end I was back in the UK. While I was there I was freelancing, waiting on a \"We'll let you know when we come up with a new idea for you to build.\" from the company. I figured I would just focus on getting my visa sorted out, have a little holiday and we could get back to work when I returned to the States.</p>\n\n<p>I worked my ass off to get this O-1 visa. I was so fucking excited, ecstatic and grateful to get it too. Not only did it mean that the US government thought I was \"extraordinary,\" but the support from the PHP community was amazing. </p>\n\n<p>The PHP community proven itself capable of <a href=\"http://www.gofundme.com/b9dfcg\">great things</a>. Everyone that replied to <a href=\"https://twitter.com/philsturgeon/status/464495467016245248\">this tweet</a> helped believe it or not. I had so many people say they had used and benefitted from my code that we actually supplied the replies as evidence. The support also came in the form of letters of recommendation, emails, introductions to people. </p>\n\n<p>These names stuck out, and everyone on the list will be getting a bottle of something through the mail when I'm not financially crippled.</p>\n\n<p><strong>Adam Jackett</strong>\nWrote  an email explaining how many hours of development time my various bits of code save him per week. Immigration people like provable numbers and stats, and proving I have saved people time or money is a good quality to have.</p>\n\n<p><strong>Anthony Ferrera</strong>\nAnthony wrote a great letter of recommendation at short notice and even picked up the whiskey tab while we worked on it. Star.</p>\n\n<p><strong>Bruno Skvorc</strong>\nAs Managing Editor of PHP for SitePoint, Bruno was able to say a few positive things about PHP The Right Way. He reviewed the book a while ago and spoke of that, and talked about my contributions towards PSR-4 and the FIG in general. This helped a great deal.</p>\n\n<p><strong>Cal Evans</strong>\nCal was able to confirm my position on the FIG, and said I was doing good stuff helping out there. They liked that.</p>\n\n<p><strong>Chris Cornutt</strong>\nAnother letter of recommendation saying he's seen my name pop up a few times on the articles hes posting recently. Chris was amazing here as my lawyers played the back and forth game about 10 times, even needing a 2nd letter for some damn reason.</p>\n\n<p><strong>Chris Kacerguis</strong>\nChris let immigration people know that Apple had been using my CodeIgniter Rest-Server and a few other bits and bobs for a while. Super handy.</p>\n\n<p><strong>Jamie Hannaford</strong>\nAfter tweet-panicing about needing more evidence, Jamie wrote a letter from Rackspace. He explained why and how Rackspace was a big awesome company, and had been using a bunch of my code internally. That one came out of the blue, and was so useful!</p>\n\n<p><strong>Jamie Holdroyd</strong>\nJamie wrote an email explaining that my CodeIgniter libraries and PyroCMS had saved thousands of British pounds in development costs.</p>\n\n<p><strong>Joshua Lockhart</strong>\nJosh wrote a great letter explaining that I had been a big help to him getting PHP The Right Way, making \"substantive additions.\" This ticked a few criteria about influencing my peers or something.</p>\n\n<p><strong>Mark Ryan</strong>\nMark wrote a letter saying I'd helped his startup <a href=\"https://bloo.ie/\">Blooie</a> at an early start. Cheers fella!</p>\n\n<p><strong>Michael Dowling</strong>\nMichael wrote an awesome letter saying that they use many FIG standards at Amazon Web Services, and will be using PSR-4 soon. This in turn helped me because it showed support for something I had  involved with. Tenuous, but amazingly helpful.</p>\n\n<p><strong>Ryan Beck &amp; Steven Wade</strong>\nRyan has helped me out massively twice now. His company Fueled gave me a huge chunk of sponsorship money (over $1k) for a <a href=\"http://philsturgeon.uk/blog/2013/07/geeks-giving-for-aids\">charity bike ride</a> back in 2013. I went out to do some free consulting for them. Now, they've written me a letter saying how helpful that consulting was to them, and wrote a bunch of nice stuff to try and convince immigration to let me stay in the country. Being ex-military was useful too.</p>\n\n<p>Steven made all that possible by putting us in touch and chasing Ryan to get the sponsorship <em>and letter</em> sorted. Absolute champs both of them.</p>\n\n<p><strong>Ryan Thompson</strong>\nRyan runs a company called AI Web Systems, which has just acquired PyroCMS. They use PyroCMS after ditching all other CMS' and have been contributing for years. Ryan wrote about how useful that product has been for them, again saving X amount of time and money every Y.</p>\n\n<p><strong>Jerel Unruh</strong>\nJerel wrote a great letter saying how he had been working with a local county on their emergency dispatch systems. As previous owner of PyroCMS LLC he explained again how useful PyroCMS had been to him over the years and how he has used it to make a living.</p>\n\n<p><strong>Jim Morrison</strong>\nI only worked for Jim at Deep Blue Sky for three months, but since then he has spent more time than that writing me letters of recommendation. Sorry boss. One day I'll work my life out and I can stop pestering you. Beers again soon. </p>\n\n<p><strong>Jordi Bogianno</strong>\nI \"had to\" get Jordi to look into his stats for Packagist and tell me how many Composer packages use PSR-0. This let us say that a certain % of all PHP packages used the old autoloading standard and would more than likely upgrade to use PSR-4. The answer was about 16k out of 21k, but how fucking tenuous is that? </p>\n\n<p>Apparently it <em>really</em> helped.</p>\n\n<p><strong>Serkan Piantino</strong>\nA Kapture investor who works for Facebook. Another reason to stick with Kapture, as having a big name at Facebook support my visa helped.</p>\n\n<p><strong>Shealan Forshaw</strong>\nShort but sweet email saying every product he's built over the last few years has had a bunch of my code and saved them a bunch of time. Thank you!</p>\n\n<p><strong>Zachary Blank</strong>\nI met Zach through Kapture people but we'd known each other on the internets for ages. He wrote about how I had helped out with CodeIgniter and gave some stats about FuelPHP and PyroCMS downloads and usages. He has had some great success in the New York startup world and explained about what he had done.</p>\n\n<h2>\"Big whoop, so they wrote a letter.\"</h2>\n\n<p>Each of these letters required approval from my visa lawyer, who knew exactly what immigration wanted to see. This led to a fair bit of back and forth with everyone, as not a single first draft got accepted. It was heart-breaking for me to have to pester these legends with my own personal bullshit, but luckily everyone was cool with it.</p>\n\n<p>So that was that. I got my visa, I got into the States, and before I could even finish my catchup drinks with various friends guess what? </p>\n\n<p>Kapture has gone <a href=\"http://www.collegehumor.com/video/6507690/hardly-working-start-up-guys\">bees-wax</a>. It is an ex-startup.</p>\n\n<p>Ok, well I can just transfer this visa to a new company, right?</p>\n\n<p><strong>WRONG.</strong></p>\n\n<p>Unlike a H-1B which is transferrable, a change of employer under an O-1 requires a brand new petition. That means literally starting again with the O-1 process, which last time was like a part-time job for 6 months.</p>\n\n<p>I made quite a large and stupid assumption, and it is one of the factors that right now are contributing to this fucked situation. If I had known they were not transferable I would have just said \"fuck it\" and jumped ship on Kapture back in bloody January.</p>\n\n<h2>Next</h2>\n\n<p>I have a few things to focus on. </p>\n\n<h3>A new visa</h3>\n\n<p>Trying to find a visa lawyer who will let me pay in installments, because I don't have $8k tucked in my ass.</p>\n\n<h3>Made In Production</h3>\n\n<p>The <a href=\"https://www.madeinproduction.com\">t-shirt empire</a> needs to expand. We need more shirts, womens shirts, a new website and a new fulfillment solution. It started as a bit of a silly experiment but I believe it could be a real business.</p>\n\n<h3>Build APIs You Won't Hate</h3>\n\n<p>I need to get a <a href=\"http://apisyouwonthate.com/\">proper site up</a> and get a print version of the book out. The royalties from LeanPub have been covering my rent for the last few months, and without it I have no idea what I would have done.</p>\n\n<h3>Downsizing</h3>\n\n<p>I'm going to sell everything I own pretty much. If I stay here I'm going to get a smaller apartment, because I can't know where I will be. Paying over $2k a month for an apartment you are not in is devastating.</p>\n\n<h3>CakeFest</h3>\n\n<p>I have a conference coming up in Spain at the end of the month. I've nearly cancelled it a few times because I am not sure if I can even get back into the US afterwards, but I refuse to let the organizers down. I'll cross the re-entry bridge when I come to it.</p>\n\n<p>One day, this visa drama will be over. And when I have my new, valid, O-1 visa I will get Dayle to hold it up for <a href=\"http://dayleholdingstuff.tumblr.com/\">his new Tumblr</a>. One day I will be vaguely in control of my life and not have it held on a thread by whoever happens to control my visa.</p>\n\n<p>I am trying to avoid panicking my way straight into a 9-5 job that I'll regret taking, and I am trying to avoid slinking back to the UK, where I was depressed for years. New York makes me happy strangely enough, and my new friends are amazing. They even let me come over at 6am when I wake up in Queens after falling asleep on the train, let me sleep a bit then take me out for coffee and bacon. And more beer.</p>\n\n<p>On that note, I'm going to meet a few of them now and teach them all about my new thing: Tequila spiked Cider.</p>\n\n<p>Give that shit it a try when you don't have anything else to do for a while.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "271",
    "created": "2014-08-15 22:10:00",
    "updated": "2014-08-15 22:10:00",
    "created_by": "2",
    "ordering_count": "44",
    "title": "Stop Pretending Everything Is OK",
    "slug": "stop-pretending-everything-is-ok",
    "category_id": "1",
    "attachment": "",
    "intro": "We work in an industry where far too many people pretend that everything is O.K. We pretend that sexism isn&#39;t rife. We pretend that startup failures are a &quot;success&quot; in some way. We ignore negative feedback and only publish success. We pretend that our work is amazing and worry too much about how it was a good idea, and never admit that it became outdated.&nbsp;That is unrealistic bullshit and I am asking you to stop.",
    "body": "We work in an industry where far too many people pretend that everything is O.K. We pretend that sexism isn't rife. We pretend that startup failures are a \"success\" in some way. We ignore negative feedback and only publish success. We pretend that our work is amazing and worry too much about how it was a good idea, and never admit that it became outdated.\n\nThat is unrealistic bullshit and I am asking you to stop.\n\nToday my good friend Alex Bilbie posted about [Open Source Guilt](http://alexbilbie.com/2014/08/open-source-guilt/). Alex posted about how hard it was for him to keep maintaining two popular open source packages whilst going through a job change. He moved to London. He lost his free time. All the while was getting bitched at about it.\n\nHe had one person freak out at him for not merging [his PR](https://github.com/thephpleague/oauth2-client/pull/88) within a week, even though it was a rewrite. That same person then \"forked\" his project and removed all attribution. When Alex pointed out that was not cricket, that guy tried to get lawyers involved. \n\n_**Side Note:** That lawyer specialised in military law. I was praying things went forward so I could laugh that jackass out of the door._\n\nHe had one person question his abilities as an open-source maintainer, even though he has done a stellar job for years.\n\nHe had somebody send him a dicky email which upset him on a personal level, and that shit does not stop in the inbox. It affects you.\n\nBullshit. Why?\n\nPosting about the hardships is great for the community. It adds realism to peoples expectations. No you are not going to open source a bit of PHP and have it live on forever, with people giving you rockstar status for life.\n\nOpen sourcing code is an investment. You have to want to maintain it. If at any point you do not have the time and do not think you can recover the situation, you need to give that shit to somebody else or close it down.\n\nIn 2009 I wrote CodeIgniter Rest-Server.\n\nI used it quite a few times and other people used it a lot more. It's got 1,870 stars for shits sake. USA.gov, countless startups and even the fucking United Nations use it for something. Apple use it too.\n\nI stopped using it and I felt guilty about not developing it further. I merged PRs for a while but didn't do anything else. I felt like an ass. It sucked. \n\nChris Kacerguis got in touch about taking it over and I threw it at him. It now [belongs to Chris](https://github.com/chriskacerguis/codeigniter-restserver). Awesome!\n\nIn 2009 I also wrote [CodeIgniter Curl](https://github.com/philsturgeon/codeigniter-curl). \n\nIt seemed handy for a long time. A lot of people used it. It only got 332 starts but that is more than 5. \n\nI stopped using it and stopped working on it. I felt guilty. It sucked. \n\nThen I told people to stop using it and use [Guzzle](http://guzzlephp.org/) or [Requests](http://requests.ryanmccue.info/), because they do the same thing and they're much much better. And they have unit tests.\n\n_What were unit tests in a 2009 CodeIgniter world?_\n\nIn 2012 I wrote [CodeIgniter OAuth 2](https://github.com/philsturgeon/codeigniter-oauth2). At some point I stopped using it because fuck CodeIgniter. It just sat there lingering. I stopped using it and other people did not. Guess what, that sucked for me and I felt guilty.\n\nAlex Bilbie took that codebase and we made [thephpleague/oauth2-client](https://github.com/thephpleague/oauth2-client). That was a great move, but that brings us full circle on the story, because people started being dicks to him too.\n\nLets stop this cycle.\n\nWe're all here trying to get shit done. We all want the same thing: more good code, less shit code. We want to build great things and sometimes life gets in the way.\n\nFuck, I've been completely destroyed for a few months because life double-footed me in the nutsack. A combination of [losing my job, visa, money and girlfriend](http://philsturgeon.uk/blog/2014/08/i-was-an-extraordinary-alien-for-a-week) meant I have had to defer all open source commitments to the rest of [The PHP League](http://thephpleague.com/) and [FIG](http://www.php-fig.org/). I have had to hide under a fucking rock while I sort my life out.\n\nIf you have a problem with somebodies code, [send a fucking pull request](https://spaz.spreadshirt.com/pull-request-or-stfu-black-A6928817). \n\nIf you don't have the bandwidth to maintain that code, pass that code on to somebody else who does.\n\nIf you have a hard time, thats cool. I owned my troubles and the Internet completely had my back. \n\nIt will have your back too.\n\nPeople need to avoid pretending we're fine because of ego. Life is a bitch and then you die (or something), so in the mean time just try and avoid being a dickhead whenever possible.",
    "created_on": "1408140600",
    "updated_on": "1408140600",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "261abb877f91e273e8e4d2f85f6031e4",
    "type": "markdown",
    "parsed": "<p>We work in an industry where far too many people pretend that everything is O.K. We pretend that sexism isn't rife. We pretend that startup failures are a \"success\" in some way. We ignore negative feedback and only publish success. We pretend that our work is amazing and worry too much about how it was a good idea, and never admit that it became outdated.</p>\n\n<p>That is unrealistic bullshit and I am asking you to stop.</p>\n\n<p>Today my good friend Alex Bilbie posted about <a href=\"http://alexbilbie.com/2014/08/open-source-guilt/\">Open Source Guilt</a>. Alex posted about how hard it was for him to keep maintaining two popular open source packages whilst going through a job change. He moved to London. He lost his free time. All the while was getting bitched at about it.</p>\n\n<p>He had one person freak out at him for not merging <a href=\"https://github.com/thephpleague/oauth2-client/pull/88\">his PR</a> within a week, even though it was a rewrite. That same person then \"forked\" his project and removed all attribution. When Alex pointed out that was not cricket, that guy tried to get lawyers involved. </p>\n\n<p><em><strong>Side Note:</strong> That lawyer specialised in military law. I was praying things went forward so I could laugh that jackass out of the door.</em></p>\n\n<p>He had one person question his abilities as an open-source maintainer, even though he has done a stellar job for years.</p>\n\n<p>He had somebody send him a dicky email which upset him on a personal level, and that shit does not stop in the inbox. It affects you.</p>\n\n<p>Bullshit. Why?</p>\n\n<p>Posting about the hardships is great for the community. It adds realism to peoples expectations. No you are not going to open source a bit of PHP and have it live on forever, with people giving you rockstar status for life.</p>\n\n<p>Open sourcing code is an investment. You have to want to maintain it. If at any point you do not have the time and do not think you can recover the situation, you need to give that shit to somebody else or close it down.</p>\n\n<p>In 2009 I wrote CodeIgniter Rest-Server.</p>\n\n<p>I used it quite a few times and other people used it a lot more. It's got 1,870 stars for shits sake. USA.gov, countless startups and even the fucking United Nations use it for something. Apple use it too.</p>\n\n<p>I stopped using it and I felt guilty about not developing it further. I merged PRs for a while but didn't do anything else. I felt like an ass. It sucked. </p>\n\n<p>Chris Kacerguis got in touch about taking it over and I threw it at him. It now <a href=\"https://github.com/chriskacerguis/codeigniter-restserver\">belongs to Chris</a>. Awesome!</p>\n\n<p>In 2009 I also wrote <a href=\"https://github.com/philsturgeon/codeigniter-curl\">CodeIgniter Curl</a>. </p>\n\n<p>It seemed handy for a long time. A lot of people used it. It only got 332 starts but that is more than 5. </p>\n\n<p>I stopped using it and stopped working on it. I felt guilty. It sucked. </p>\n\n<p>Then I told people to stop using it and use <a href=\"http://guzzlephp.org/\">Guzzle</a> or <a href=\"http://requests.ryanmccue.info/\">Requests</a>, because they do the same thing and they're much much better. And they have unit tests.</p>\n\n<p><em>What were unit tests in a 2009 CodeIgniter world?</em></p>\n\n<p>In 2012 I wrote <a href=\"https://github.com/philsturgeon/codeigniter-oauth2\">CodeIgniter OAuth 2</a>. At some point I stopped using it because fuck CodeIgniter. It just sat there lingering. I stopped using it and other people did not. Guess what, that sucked for me and I felt guilty.</p>\n\n<p>Alex Bilbie took that codebase and we made <a href=\"https://github.com/thephpleague/oauth2-client\">thephpleague/oauth2-client</a>. That was a great move, but that brings us full circle on the story, because people started being dicks to him too.</p>\n\n<p>Lets stop this cycle.</p>\n\n<p>We're all here trying to get shit done. We all want the same thing: more good code, less shit code. We want to build great things and sometimes life gets in the way.</p>\n\n<p>Fuck, I've been completely destroyed for a few months because life double-footed me in the nutsack. A combination of <a href=\"http://philsturgeon.uk/blog/2014/08/i-was-an-extraordinary-alien-for-a-week\">losing my job, visa, money and girlfriend</a> meant I have had to defer all open source commitments to the rest of <a href=\"http://thephpleague.com/\">The PHP League</a> and <a href=\"http://www.php-fig.org/\">FIG</a>. I have had to hide under a fucking rock while I sort my life out.</p>\n\n<p>If you have a problem with somebodies code, <a href=\"https://spaz.spreadshirt.com/pull-request-or-stfu-black-A6928817\">send a fucking pull request</a>. </p>\n\n<p>If you don't have the bandwidth to maintain that code, pass that code on to somebody else who does.</p>\n\n<p>If you have a hard time, thats cool. I owned my troubles and the Internet completely had my back. </p>\n\n<p>It will have your back too.</p>\n\n<p>People need to avoid pretending we're fine because of ego. Life is a bitch and then you die (or something), so in the mean time just try and avoid being a dickhead whenever possible.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "281",
    "created": "2014-10-12 22:59:00",
    "updated": "2014-10-12 22:59:00",
    "created_by": "2",
    "ordering_count": "45",
    "title": "Try out PHPbrew and VirtPHP",
    "slug": "try-out-phpbrew-and-virtphp",
    "category_id": "2",
    "attachment": "",
    "intro": "As a developer working with multiple languages regularly, I come across a lot of different ways of doing things. Some of the flows and development tools available in other languages are nothing at all to do with the language, they were just something a developer using that language decided to do. Now and then, those things cross the &quot;barriers&quot; between languages, and PHP gets some nice new toys.",
    "body": "As a developer working with multiple languages regularly, I come across a lot of different ways of doing things. Some of the flows and development tools available in other languages are nothing at all to do with the language, they were just something a developer using that language decided to do. \n\nFor those of you familiar with Ruby or Python at any decent level, you'll probably know all about [rbenv](https://github.com/sstephenson/rbenv), [RVM](http://rvm.io/), or [virtualenv](http://virtualenv.readthedocs.org/en/latest/). These tools are all a little bit same-but-different, but they are all powerful and awesome.\n\nThe main use of these tools is to allow you to use all sorts of different versions of Ruby or Python on your development machine, play around with configuration in one environment, install various versions of different PIP packages or whatever else you feel like doing. \n\nIn PHP, we've never really had that. We had XAMPP/WAMP/MAMP and for the last few years Vagrant has been taking off like a rocket giving us easy control over virtual machines. These are two extreme ends of the solution spectrum. \n\n*AMP all-in-one installers are rather shit for easily switching between versions, or having two versions active at the same time for different applications, and Vagrant can be somewhat of a nuclear option if you have a simple application.\n\nI know that Vagrant is amazing for tight dev/prod parity, and I [wrote all about that](http://code.tutsplus.com/tutorials/vagrant-what-why-and-how--net-26500) for NetTuts a while back, but if you just need to run some unit-tests in a different version of PHP then you probably don't need a full Vagrant install. If you do, then you've probably done your unit-tests wrong. \n\nAnyhow, I wrote an article called [How to Use PHPbrew and VirtPHP](http://www.sitepoint.com/use-phpbrew-virtphp/) for SitePoint, and it covers how you can get going with them. [PHPbrew](http://phpbrew.github.io/phpbrew/) helps you manage multiple versions of PHP, and VirtPHP can sit on top of that and help you isolate PECL extensions, php.ini files and even... gulp... PEAR.\n\nKeep in mind that [VirtPHP](http://virtphp.org/) is still in alpha. I noticed a few issues getting started, but a few PR's later and the problems were all solved. \n\nPlease, before you run off and delete all your Vagrant installs, please keep in mind my article [The Tale of Tom, Dick and Harry](https://philsturgeon.uk/blog/2014/05/the-tale-of-tom-dick-and-harry). If I was being \"Dick\" from that article, I'd be telling you to use this for everything and it's amazing because I heard about it somewhere, and you'd be a \"Dick\" to parrot this advice on to anyone without context. This is very much not just me getting excited over the \"next new thing, which will replace the old thing.\" This is more of a suggestion, to try out a way of working that has been doing extremely well in other language communities for years. \n\nVagrant is often going to be what you want to use if you have complex architectures, or your only major project is the day-job and you have a lot of developers who you dont want to have to force to learn about multiple tools. Sometimes just installing Vagrant on a juniors computer and telling them to vagrant up in the morning is all you want.\n\nThat said, if you flit around between a lot of different PHP projects like me, use TDD more than you refresh a browser and need to switch PHP versions regularly, then these tools are incredibly useful. \n\nFor more information on VirtPHP, watch/listen to [PHP Town Hall Episode 23: VirtPHP - Managing Your Herd of ElePHPants](http://phptownhall.com/blog/2014/04/09/virtphp-managing-your-herd-of-php-versions/).\n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/94wOO8P13wA\" frameborder=\"0\" allowfullscreen=\"\"></iframe>",
    "created_on": "1413154740",
    "updated_on": "1413154740",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "f196b7c721520dff11a1e47ccb378298",
    "type": "markdown",
    "parsed": "<p>As a developer working with multiple languages regularly, I come across a lot of different ways of doing things. Some of the flows and development tools available in other languages are nothing at all to do with the language, they were just something a developer using that language decided to do. </p>\n\n<p>For those of you familiar with Ruby or Python at any decent level, you'll probably know all about <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a>, <a href=\"http://rvm.io/\">RVM</a>, or <a href=\"http://virtualenv.readthedocs.org/en/latest/\">virtualenv</a>. These tools are all a little bit same-but-different, but they are all powerful and awesome.</p>\n\n<p>The main use of these tools is to allow you to use all sorts of different versions of Ruby or Python on your development machine, play around with configuration in one environment, install various versions of different PIP packages or whatever else you feel like doing. </p>\n\n<p>In PHP, we've never really had that. We had XAMPP/WAMP/MAMP and for the last few years Vagrant has been taking off like a rocket giving us easy control over virtual machines. These are two extreme ends of the solution spectrum. </p>\n\n<p>*AMP all-in-one installers are rather shit for easily switching between versions, or having two versions active at the same time for different applications, and Vagrant can be somewhat of a nuclear option if you have a simple application.</p>\n\n<p>I know that Vagrant is amazing for tight dev/prod parity, and I <a href=\"http://code.tutsplus.com/tutorials/vagrant-what-why-and-how--net-26500\">wrote all about that</a> for NetTuts a while back, but if you just need to run some unit-tests in a different version of PHP then you probably don't need a full Vagrant install. If you do, then you've probably done your unit-tests wrong. </p>\n\n<p>Anyhow, I wrote an article called <a href=\"http://www.sitepoint.com/use-phpbrew-virtphp/\">How to Use PHPbrew and VirtPHP</a> for SitePoint, and it covers how you can get going with them. <a href=\"http://phpbrew.github.io/phpbrew/\">PHPbrew</a> helps you manage multiple versions of PHP, and VirtPHP can sit on top of that and help you isolate PECL extensions, php.ini files and even... gulp... PEAR.</p>\n\n<p>Keep in mind that <a href=\"http://virtphp.org/\">VirtPHP</a> is still in alpha. I noticed a few issues getting started, but a few PR's later and the problems were all solved. </p>\n\n<p>Please, before you run off and delete all your Vagrant installs, please keep in mind my article <a href=\"https://philsturgeon.uk/blog/2014/05/the-tale-of-tom-dick-and-harry\">The Tale of Tom, Dick and Harry</a>. If I was being \"Dick\" from that article, I'd be telling you to use this for everything and it's amazing because I heard about it somewhere, and you'd be a \"Dick\" to parrot this advice on to anyone without context. This is very much not just me getting excited over the \"next new thing, which will replace the old thing.\" This is more of a suggestion, to try out a way of working that has been doing extremely well in other language communities for years. </p>\n\n<p>Vagrant is often going to be what you want to use if you have complex architectures, or your only major project is the day-job and you have a lot of developers who you dont want to have to force to learn about multiple tools. Sometimes just installing Vagrant on a juniors computer and telling them to vagrant up in the morning is all you want.</p>\n\n<p>That said, if you flit around between a lot of different PHP projects like me, use TDD more than you refresh a browser and need to switch PHP versions regularly, then these tools are incredibly useful. </p>\n\n<p>For more information on VirtPHP, watch/listen to <a href=\"http://phptownhall.com/blog/2014/04/09/virtphp-managing-your-herd-of-php-versions/\">PHP Town Hall Episode 23: VirtPHP - Managing Your Herd of ElePHPants</a>.</p>\n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/94wOO8P13wA\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n",
    "preview_hash": ""
  },
  {
    "id": "291",
    "created": "2014-10-16 14:00:00",
    "updated": "2014-10-16 14:00:00",
    "created_by": "2",
    "ordering_count": "46",
    "title": "What is The League of Extraordinary Packages?",
    "slug": "what-is-the-league-of-extraordinary-packages",
    "category_id": "2",
    "attachment": "",
    "intro": "This is the story of group of friends, who decided to write some code, but somehow confused and angered everyone with a keyboard.",
    "body": "This is the story of group of friends, who decided to write some code, but somehow confused and angered everyone with a keyboard.\n\ntl:dr; \"Waaaaah why doesn't _everyone_ like usssss...\" That said, the long-form might entertain anyone who is curious about [The League](http://thephpleague.com). It has a bizarrely controversial existence. \n\n## The Origin\n\nIt was a cold winter morning, February 2013, heading over the Williamsburg Bridge by subway into Manhattan. I had spent the whole night working on some code that I was super excited about releasing.\n\nIt had been a few months since [I quit CodeIgniter](https://philsturgeon.uk/blog/2012/09/moving-on) and FuelPHP, and I was a man without an open-source organisation for the first time in ages. \n\nWhere should I release this code? Should I release it with a vendor name of `Sturgeon\\`? That seemed rather egotistical. \n\nI could make something up, but what is the point of a single vendor with a single package?  I wondered if any of my buddies were having this problem.\n\nI DMed @alexbilbie and @ben_corlett, what would they release their code under if they had any?\n\nThey didn't know, but liked the idea of doing something together.\n\nBeing as hungover as I was, I thought long and hard, for about 5 seconds until something amazing happened in my brain...\n\n**The PHP Super Best Friends Club!**\n\nThe guys loved it, and we started making plans immediately. \n\n## The Goals\n\nWe'd all worked on projects together before. PyroCMS, CodeIgniter libraries, freelance projects and various other components. We all knew each other well and trusted each other, and expanded our little group to a few other people via email within a week.\n\nThere was no concern about trust or leadership or setting up complex rules, because we were all just people and why the hell. \n\nI grabbed a domain, somebody set up a GitHub organisation, and we were up and running. \n\nWe started laying out goals for this little group, which were super simple.\n\n1. Do nothing half-arsed. There is a _lot_ of shitty PHP code floating around, and we don't need to add to that.\n2. Make sure this never looks even a bit like a framework.\n3. Keep it framework agnostic. Nothing for one single framework. Ever.\n4. Follow standards and best practices, as a guide for how others can do the same. - This component world is new, and we need examples for the everyman.\n5. Avoid bus-factor, by adding each other to Packagist and GitHub.\n6. Avoid stale code, but swapping duties or finding help for the project.\n7. Cover for others while they were on holiday.\n8. Unit test the shit out of it all.\n\nThe most important - and least mentioned part - was the bus factor. At the time, I was Lead Engineer of Kapture. I had somebody working for me who chose to release bits of what we'd been building as open-source code under his own name without consent, which was a bit of a dick move, but not a surprising one if you know the chap.\n\nHe vanished off the face of the earth one day. Just up and left. No show at work. No contact. Nothing. \n\nWe had a lot of code that relied on that code, so we had to fork it, and a lot of the Laravel community was confused about it too, as it was rather popular!\n\nNow, if one of us vanishes, for whatever reason, that code is not lost. It's in the same repo, we just switch out \"Project Leads\" and thats it.\n\n## Name Change\n\nThe PHPSBFC was a bit of a mouth-full, and had a terrible PHP vendor namespace.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>The “PHP Super Best Friends Club” is about to launch, we just need a vendor namespace. Besties, Super, Sbfc, or something else?</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/status/322409684151701504\">April 11, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI was having a little think about names and ran a few past people over IRC, and somebody said: The League of Extraordinary Packages. I bounced that off a few people and the name seemed to go down well.\n\nNobody thought that was elitist at the time. It was just a play on that stupid Sean Connery movie [The League of Extraordinary Gentlemen] for crying out loud. \n\nIf anything, the advice we had was that \"extraordinary packages\" might sound like a dick joke, and we should be careful not to offend.\n\nStrangely, its others in the community that have been a huge set of dicks.\n\n[The League of Extraordinary Gentlemen]: http://www.imdb.com/title/tt0311429/\n\n## League Draft\n\nI slapped together some list of silly rules and requirements in the space of about 20 minutes using the GitHub Page Builder. Within about an hour somebody had shoved that up on Reddit, and a certain somebody was screaming off about elitism due to some jovial wording in a _very_ early rough draft.\n\nA lot of people, who I know and respect, were being utterly obnoxious about it all on StackOverflow Chat. \n\nOthers were diving on us on Twitter.\n\nA great start.\n\nBut, fuck em. Let's just write code the best we can. \n\nAnd we did. For a long time. \n\nWe made [Fractal](https://github.com/thephpleague/fractal), [Flysystem](https://github.com/thephpleague/flysystem), [Plates](https://github.com/thephpleague/plates) and Alex brought [OAuth 2 Server](https://github.com/thephpleague/oauth2-server) over from its old home at the University of Lincoln.\n\nThere was some great code here. Really, really useful stuff, and it worked _everywhere_. Not just in Symfony, or Laravel, or WhoGivesADamn, but everywhere. \n\nLaravel recently implemented Flysystem into the - currently unreleased - Laravel 5.0 branch, which was huge!\n\nWorking together with frameworks to reduce the amount of crap they have to do seems like a big win. There are a fair few domain problems that full-stack frameworks have to deal with. Writing a system that abstracts local and cloud-based filesystems does not seem like one.\n\nKayla Daniels took over maintenance of the incredibly popular [Omnipay](https://github.com/thephpleague/omnipay) and brought it to the League, which was huge again! \n\n## Premier League\n\nThings were flying at the League. Clearly, we were becoming a serious player in the PHP community. \n\n1. Frank is working on a PSR for Events\n2. I was handing my position as the PyroCMS voting representative over to the chap who bought PyroCMS LLC off me as soon as PSR-7 got approved\n\nLogical next step? The League should get on the FIG. \n\nRight then Kayla, why don't you go and apply for...\n\nINTERNETSPLOSION!\n\n[Five pages of this shit](https://groups.google.com/forum/#!topic/php-fig/Toukmt2jkNk%5B1-25-false%5D), but the tl:dr; is that half the FIG freaked out. I don't need to play-by-play this stuff, but if you want some chuckles then I'd suggest cracking out a bottle of the strong stuff; It will take you quite some time to wade through it. It's bizarre, amazing and... well I don't have any more words for it. I can't even with that thread.\n\nFollowing their logic, as I bought the domain name for the League and was active in conversations around it, I must be the BDFL. The issue there is that - despite explaining I have [sold PyroCMS](https://www.pyrocms.com/blog/2014/08/hard-decisions) and am currently only a Technical Advisor - I must still be the BDFL of that too. This would theoretically give me \"two votes\" on FIG votes, as some folks seem to think that Kayla is just some mindless peon/puppet voter.  \n\nIgnoring the various offensive undertones of those assertions, there was clear confusion around the League.\n\n## League != PHPClasses\n\nPHPClasses is a package directory. It was built probably about 15 years ago, and has barely changed since then. \n\nAt some point last year, people got angry and sad with us that we would not let other packages in. People saw as as a closed group who were saying we were better than everyone else, and kept the common muck out - or something. We never had rules against third-parties bringing their components over to the League. We just never considered it, and didn't think anyone would want to! \n\nWe put some simple rules on the site, saying they could come over if they promised to try to make their code excellent. Part of that involved consistent branding, as we're a component vendor after-all. Imagine if [Symfony], [Zend], [Aura], [Orno] or [Hoa] had random components with other vendor names?\n\n[Symfony]: http://symfony.com/doc/current/components/\n[Zend]: http://framework.zend.com/manual/2.3/en/index.html#zendframeworkreference\n[Aura]: http://auraphp.com/packages/v2\n[Orno]: https://github.com/orno\n[Hoa]: https://github.com/hoaproject\n\nAllowing packages to occasionally join does not make us into a package directory like PHPClasses. Not even slightly!\n\nPHPClasses focuses on getting as many packages and users as it can. This all helps it generate ad-revenue, derived from aggressive email campaigns, and forced sign-ins to download code. \n\nThe League is a completely free and open GitHub repository, with no adverts, no newsletter and no logins. We just write code and put it on GitHub, them manage issues and pull requests with the help of our growing community of open-source contributors. You can move your code over to our repo and we can all work together if you like.\n\nThe League also recommends approved standards, and suggests the use of established best practices.\n\nI'm not seeing a similarity between the two there at all. \n\n## League != PEAR\n\nI think people look at the points we define as metrics of quality, as a checklist to apply to our project. We do not want a million packages. The League probably only ever have about 50, max. \n\nPEAR required votes for packages to get in, but with the League the whole \"Apply to join\" thing was just an afterthought. \n\nKeep packages out? Anger about elitism.  \nLet packages in but ask they follow our rules? We make people beg and jump through hoops, like forced PSR-2 usage.  \nLet any packages in regardless of quality? Angry about poor quality code.\n\nRegardless what we do, somebodies cornflakes are going to taste like piss.\n\n## League Leadership\n\nAlso diffused from that bat-shit FIG thread, is obvious confusion about the leadership of the League. \n\nIt's quite simple. We don't have a leader.\n\nPaul Jones suggested the term \"Open-Source Cabal\", which sounds cool but has negative connotations. \n\nI don't know what you'd call it, other than an organisation. \n\nWhy would we need leadership? We're all people, with brains, and email addresses. Some of us even have phones. If we're not sure about something, we ask. If we're in disagreement, we work something out. \n\nNot every single open-source project needs a crown and a staff - although Kayla would definitely take them if offered.\n\n## Return of the League\n\nWhile I am still co-ordinating [PSR-7](https://github.com/php-fig/fig-standards/blob/master/proposed/http-message.md), I won't be rushed out of the FIG. When I'm done there, I can hand things over to Ryan Thompson. There will be no further issue with the League's imagined \"conflict\" with PyroCMS, and folks can apply again.\n\nIn the mean time, The League is still trucking along nicely. The two newest contenders are [CLImate](http://climate.thephpleague.com/) and [Period](http://period.thephpleague.com/). The last was only brought over today, but it's looking super smooth already.\n\nMy next article will be about when it makes sense to build new packages, versus contributing to existing code, which will cover a lot of points I would have liked to put into here. It seems The League stepped on some toes with a few packages, and it leads to a great discussion on \"When you should start over.\"",
    "created_on": "1413468000",
    "updated_on": "1413468000",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "f2b57ec30a8e5b553c940e20a6e348cc",
    "type": "markdown",
    "parsed": "<p>This is the story of group of friends, who decided to write some code, but somehow confused and angered everyone with a keyboard.</p>\n\n<p>tl:dr; \"Waaaaah why doesn't <em>everyone</em> like usssss...\" That said, the long-form might entertain anyone who is curious about <a href=\"http://thephpleague.com\">The League</a>. It has a bizarrely controversial existence. </p>\n\n<h2>The Origin</h2>\n\n<p>It was a cold winter morning, February 2013, heading over the Williamsburg Bridge by subway into Manhattan. I had spent the whole night working on some code that I was super excited about releasing.</p>\n\n<p>It had been a few months since <a href=\"https://philsturgeon.uk/blog/2012/09/moving-on\">I quit CodeIgniter</a> and FuelPHP, and I was a man without an open-source organisation for the first time in ages. </p>\n\n<p>Where should I release this code? Should I release it with a vendor name of <code>Sturgeon\\</code>? That seemed rather egotistical. </p>\n\n<p>I could make something up, but what is the point of a single vendor with a single package?  I wondered if any of my buddies were having this problem.</p>\n\n<p>I DMed @alexbilbie and @ben_corlett, what would they release their code under if they had any?</p>\n\n<p>They didn't know, but liked the idea of doing something together.</p>\n\n<p>Being as hungover as I was, I thought long and hard, for about 5 seconds until something amazing happened in my brain...</p>\n\n<p><strong>The PHP Super Best Friends Club!</strong></p>\n\n<p>The guys loved it, and we started making plans immediately. </p>\n\n<h2>The Goals</h2>\n\n<p>We'd all worked on projects together before. PyroCMS, CodeIgniter libraries, freelance projects and various other components. We all knew each other well and trusted each other, and expanded our little group to a few other people via email within a week.</p>\n\n<p>There was no concern about trust or leadership or setting up complex rules, because we were all just people and why the hell. </p>\n\n<p>I grabbed a domain, somebody set up a GitHub organisation, and we were up and running. </p>\n\n<p>We started laying out goals for this little group, which were super simple.</p>\n\n<ol>\n<li>Do nothing half-arsed. There is a <em>lot</em> of shitty PHP code floating around, and we don't need to add to that.</li>\n<li>Make sure this never looks even a bit like a framework.</li>\n<li>Keep it framework agnostic. Nothing for one single framework. Ever.</li>\n<li>Follow standards and best practices, as a guide for how others can do the same. - This component world is new, and we need examples for the everyman.</li>\n<li>Avoid bus-factor, by adding each other to Packagist and GitHub.</li>\n<li>Avoid stale code, but swapping duties or finding help for the project.</li>\n<li>Cover for others while they were on holiday.</li>\n<li>Unit test the shit out of it all.</li>\n</ol>\n\n<p>The most important - and least mentioned part - was the bus factor. At the time, I was Lead Engineer of Kapture. I had somebody working for me who chose to release bits of what we'd been building as open-source code under his own name without consent, which was a bit of a dick move, but not a surprising one if you know the chap.</p>\n\n<p>He vanished off the face of the earth one day. Just up and left. No show at work. No contact. Nothing. </p>\n\n<p>We had a lot of code that relied on that code, so we had to fork it, and a lot of the Laravel community was confused about it too, as it was rather popular!</p>\n\n<p>Now, if one of us vanishes, for whatever reason, that code is not lost. It's in the same repo, we just switch out \"Project Leads\" and thats it.</p>\n\n<h2>Name Change</h2>\n\n<p>The PHPSBFC was a bit of a mouth-full, and had a terrible PHP vendor namespace.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>The “PHP Super Best Friends Club” is about to launch, we just need a vendor namespace. Besties, Super, Sbfc, or something else?</p>&mdash; Phil Sturgeon (@philsturgeon) <a href=\"https://twitter.com/philsturgeon/status/322409684151701504\">April 11, 2013</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>I was having a little think about names and ran a few past people over IRC, and somebody said: The League of Extraordinary Packages. I bounced that off a few people and the name seemed to go down well.</p>\n\n<p>Nobody thought that was elitist at the time. It was just a play on that stupid Sean Connery movie <a href=\"http://www.imdb.com/title/tt0311429/\">The League of Extraordinary Gentlemen</a> for crying out loud. </p>\n\n<p>If anything, the advice we had was that \"extraordinary packages\" might sound like a dick joke, and we should be careful not to offend.</p>\n\n<p>Strangely, its others in the community that have been a huge set of dicks.</p>\n\n<h2>League Draft</h2>\n\n<p>I slapped together some list of silly rules and requirements in the space of about 20 minutes using the GitHub Page Builder. Within about an hour somebody had shoved that up on Reddit, and a certain somebody was screaming off about elitism due to some jovial wording in a <em>very</em> early rough draft.</p>\n\n<p>A lot of people, who I know and respect, were being utterly obnoxious about it all on StackOverflow Chat. </p>\n\n<p>Others were diving on us on Twitter.</p>\n\n<p>A great start.</p>\n\n<p>But, fuck em. Let's just write code the best we can. </p>\n\n<p>And we did. For a long time. </p>\n\n<p>We made <a href=\"https://github.com/thephpleague/fractal\">Fractal</a>, <a href=\"https://github.com/thephpleague/flysystem\">Flysystem</a>, <a href=\"https://github.com/thephpleague/plates\">Plates</a> and Alex brought <a href=\"https://github.com/thephpleague/oauth2-server\">OAuth 2 Server</a> over from its old home at the University of Lincoln.</p>\n\n<p>There was some great code here. Really, really useful stuff, and it worked <em>everywhere</em>. Not just in Symfony, or Laravel, or WhoGivesADamn, but everywhere. </p>\n\n<p>Laravel recently implemented Flysystem into the - currently unreleased - Laravel 5.0 branch, which was huge!</p>\n\n<p>Working together with frameworks to reduce the amount of crap they have to do seems like a big win. There are a fair few domain problems that full-stack frameworks have to deal with. Writing a system that abstracts local and cloud-based filesystems does not seem like one.</p>\n\n<p>Kayla Daniels took over maintenance of the incredibly popular <a href=\"https://github.com/thephpleague/omnipay\">Omnipay</a> and brought it to the League, which was huge again! </p>\n\n<h2>Premier League</h2>\n\n<p>Things were flying at the League. Clearly, we were becoming a serious player in the PHP community. </p>\n\n<ol>\n<li>Frank is working on a PSR for Events</li>\n<li>I was handing my position as the PyroCMS voting representative over to the chap who bought PyroCMS LLC off me as soon as PSR-7 got approved</li>\n</ol>\n\n<p>Logical next step? The League should get on the FIG. </p>\n\n<p>Right then Kayla, why don't you go and apply for...</p>\n\n<p>INTERNETSPLOSION!</p>\n\n<p><a href=\"https://groups.google.com/forum/#!topic/php-fig/Toukmt2jkNk%5B1-25-false%5D\">Five pages of this shit</a>, but the tl:dr; is that half the FIG freaked out. I don't need to play-by-play this stuff, but if you want some chuckles then I'd suggest cracking out a bottle of the strong stuff; It will take you quite some time to wade through it. It's bizarre, amazing and... well I don't have any more words for it. I can't even with that thread.</p>\n\n<p>Following their logic, as I bought the domain name for the League and was active in conversations around it, I must be the BDFL. The issue there is that - despite explaining I have <a href=\"https://www.pyrocms.com/blog/2014/08/hard-decisions\">sold PyroCMS</a> and am currently only a Technical Advisor - I must still be the BDFL of that too. This would theoretically give me \"two votes\" on FIG votes, as some folks seem to think that Kayla is just some mindless peon/puppet voter.  </p>\n\n<p>Ignoring the various offensive undertones of those assertions, there was clear confusion around the League.</p>\n\n<h2>League != PHPClasses</h2>\n\n<p>PHPClasses is a package directory. It was built probably about 15 years ago, and has barely changed since then. </p>\n\n<p>At some point last year, people got angry and sad with us that we would not let other packages in. People saw as as a closed group who were saying we were better than everyone else, and kept the common muck out - or something. We never had rules against third-parties bringing their components over to the League. We just never considered it, and didn't think anyone would want to! </p>\n\n<p>We put some simple rules on the site, saying they could come over if they promised to try to make their code excellent. Part of that involved consistent branding, as we're a component vendor after-all. Imagine if <a href=\"http://symfony.com/doc/current/components/\">Symfony</a>, <a href=\"http://framework.zend.com/manual/2.3/en/index.html#zendframeworkreference\">Zend</a>, <a href=\"http://auraphp.com/packages/v2\">Aura</a>, <a href=\"https://github.com/orno\">Orno</a> or <a href=\"https://github.com/hoaproject\">Hoa</a> had random components with other vendor names?</p>\n\n<p>Allowing packages to occasionally join does not make us into a package directory like PHPClasses. Not even slightly!</p>\n\n<p>PHPClasses focuses on getting as many packages and users as it can. This all helps it generate ad-revenue, derived from aggressive email campaigns, and forced sign-ins to download code. </p>\n\n<p>The League is a completely free and open GitHub repository, with no adverts, no newsletter and no logins. We just write code and put it on GitHub, them manage issues and pull requests with the help of our growing community of open-source contributors. You can move your code over to our repo and we can all work together if you like.</p>\n\n<p>The League also recommends approved standards, and suggests the use of established best practices.</p>\n\n<p>I'm not seeing a similarity between the two there at all. </p>\n\n<h2>League != PEAR</h2>\n\n<p>I think people look at the points we define as metrics of quality, as a checklist to apply to our project. We do not want a million packages. The League probably only ever have about 50, max. </p>\n\n<p>PEAR required votes for packages to get in, but with the League the whole \"Apply to join\" thing was just an afterthought. </p>\n\n<p>Keep packages out? Anger about elitism.<br />\nLet packages in but ask they follow our rules? We make people beg and jump through hoops, like forced PSR-2 usage.<br />\nLet any packages in regardless of quality? Angry about poor quality code.</p>\n\n<p>Regardless what we do, somebodies cornflakes are going to taste like piss.</p>\n\n<h2>League Leadership</h2>\n\n<p>Also diffused from that bat-shit FIG thread, is obvious confusion about the leadership of the League. </p>\n\n<p>It's quite simple. We don't have a leader.</p>\n\n<p>Paul Jones suggested the term \"Open-Source Cabal\", which sounds cool but has negative connotations. </p>\n\n<p>I don't know what you'd call it, other than an organisation. </p>\n\n<p>Why would we need leadership? We're all people, with brains, and email addresses. Some of us even have phones. If we're not sure about something, we ask. If we're in disagreement, we work something out. </p>\n\n<p>Not every single open-source project needs a crown and a staff - although Kayla would definitely take them if offered.</p>\n\n<h2>Return of the League</h2>\n\n<p>While I am still co-ordinating <a href=\"https://github.com/php-fig/fig-standards/blob/master/proposed/http-message.md\">PSR-7</a>, I won't be rushed out of the FIG. When I'm done there, I can hand things over to Ryan Thompson. There will be no further issue with the League's imagined \"conflict\" with PyroCMS, and folks can apply again.</p>\n\n<p>In the mean time, The League is still trucking along nicely. The two newest contenders are <a href=\"http://climate.thephpleague.com/\">CLImate</a> and <a href=\"http://period.thephpleague.com/\">Period</a>. The last was only brought over today, but it's looking super smooth already.</p>\n\n<p>My next article will be about when it makes sense to build new packages, versus contributing to existing code, which will cover a lot of points I would have liked to put into here. It seems The League stepped on some toes with a few packages, and it leads to a great discussion on \"When you should start over.\"</p>\n",
    "preview_hash": ""
  },
  {
    "id": "301",
    "created": "2014-10-20 16:20:00",
    "updated": "2014-10-20 16:20:00",
    "created_by": "2",
    "ordering_count": "47",
    "title": "PHP Wars: Attack of the Clones",
    "slug": "php-wars-attack-of-the-clones",
    "category_id": "2",
    "attachment": "",
    "intro": "In the last article I said I wanted to write about when its a good idea to release a component. A lot of this comes down to: is there one out there that does what I want, and if so, can I use it? Should I release a PR or make my own? Why should I maybe avoid writing something that already exists?",
    "body": "In the last article I said I wanted to write about when its a good idea to release a component. A lot of this comes down to: is there one out there that does what I want, and if so, can I use it?\n\nThis blog post is going to touch on a lot of points already made well by Anthony Ferrera. His article [Reinvent The Wheel!](http://blog.ircmaxell.com/2012/08/reinvent-wheel.html) says many of the same things, so if you only have time to read one article right now, go and read that.\n\nI've been talking with various people on Twitter about how I see a lot of people building what I consider to be clones. Common packages like routers, HTTP clients, validation, currency converters, dependency injection containers, etc. \n\nSometimes these are carbon copies of other packages, but often they are feature-weak versions of established packages.\n\nWhile talking about this sort of thing, people seem to jump to some incorrect conclusions. I would like to take this chance to highlight what I am not talking about first:\n\n* Panic that the Internet might run out of space\n* Concern that GitHub will use up all their repos\n* I think I can tell people what code to write\n* I want to stop people building what they want\n* I'm super angry that people are building things I don't like\n* I hate innovation\n\nIt should go without saying that I'm not trying to quash innovation; I just don't think building identical shit over and over again is innovation. I see people wasting their time, and I know that time could go to better use. \n\nJust like with framework dependent code, building out clones forces developers to spin their wheels. It forces developers that should be collaborating, to work in parallel. Splitting users, developer resource, documentation efforts, etc. \n\nThese problems are still found in the community due to NIH. Despite huge leaps forward in framework agnostic code, the same time-wasting is still happening. Instead of laravel-foo and fuelphp-foo, we just have 18 pages of foo with no discernible differences. \n\n## Not Against Innovation\n\nPeople are providing Laravel as an argument against these views. They say that it started its life rather similar to CodeIgniter and FuelPHP. \n\nFolks concern with my \"dont reinvent the wheel\" approach is that it would have stopped Laravel from progressing. I think that frameworks are bad example, and not what I am talking about. Frameworks cover such vast areas that alternatives are much more likely, especially with these factors taken into account:\n\n* Is it convention based or configuration based\n* Does it provide a default application structure or let you freeform\n* Does it focus more on \"developer speed\" or performance?\n* Does the dev team move at a blinding pace adding new features but breaking the API, or does it play it cool and focus more on maintaining BC\n\nMany of these things are mutually exclusive, so you often have two different components or frameworks based on one difference. CodeIgniter might have failed to add anything useful for years, but it was reliable due to its lack of BC breaks. Other similar frameworks broke themselves in half with rewrites, but provided bleeding edge functionality for those not fussed about longevity (RAD types) or those in a position to keep up.\n\nThis overlaps with another article I want to write, on the topic of \"Your software is not better.\" Due to the existence of these factors, its impossible for any one approach to be \"better\" as they are all contradictory.\n\nI would like to remove larger systems like frameworks and CMS' from the conversation at this point, to focus on components. Due to their much smaller size, there is often not such a need for multiples.\n\nDifferent here is key, and in the realm of a component it can often be hard to innovate. I see a lot of insanely similar code thrown on Packagist and Reddit, and get a bunch emailed directly to me for feedback. Maybe they could have worked together with the author of another package if they did a quick look around. Checking out the existing solutions should of course be step 1 for anyone anyway. Sadly, when I ask \"How does this differ from X\", the response is very often \"Oh, I didn't see X!\" or \"Well... I prefer $route->get() over $route->register('GET'...)\", or something else equally trivial.\n\nThe golden rule is: If they are different, then awesome! One example here would be Nikita Popov's [FastRoute], which is quicker than any other router around. It's got a slightly tricky API and is missing a dispatcher, so [Orno\\Route] wraps it and gives it a pretty API. This means we have two routers, but one is super fast and one is just a wrapper.\n\nOther than using a crazy approach to make the router more efficient, there are cannot be many innovations left in routing. Certainly not enough to demand [18 pages worth] of routers on Packagist.\n\n_Since I started writing this yesterday we're now up to 19 pages of routers. Are you kidding me?_\n\nIf I search for [routing] then there are 23 pages. There might be some cross-over from people using \"router\" and \"routing\", but many are different. These too are only the components that brand themselves as a \"router\", and not the \"micro-frameworks\" which are just an autoloader, router, dispatcher and view layer slapped together. \n\n[FastRoute]: https://github.com/nikic/FastRoute\n[Orno\\Route]: https://github.com/orno/route\n[18 pages worth]: https://packagist.org/search/?q=router\n[routing]: https://packagist.org/search/?q=routing\n\n## Learning by Building\n\nIf you are familiar with Anthony's article linked in the intro, you will know he approved of people learning by building.\n\nI fully agree. Some people learn by seeing and some by doing. If you're a do'er then building a router, a dependency container, a geocoder, etc will give you a great understanding of how it all works. His article also explains that you probably should not release those experiments. \n\nRemember, there is a difference between shoving something on GitHub and releasing it. That normally suggests a website, Packagist, even a damn logo in some instances. This also suggests maintenance, and the expectation of others using it. That is a big investment you're making, and you have a responsibility to your users too.\n\nFurther to that, why do you _need_ to know how every moving part works? If you are a beginner, you do not need to know how every moving part inside a router or validation package works. You'd be better invested in building applications and getting your problem solving skills improved, than wasting your time mulling over something that's been done to death already.\n\nAfter you have experience with how things work in general, it might be a great time to investigate things that interest you. At that point, pick apart any package you're interested in to see how it works. I learned how to code by pulling things apart and improving them. It's how I ended up building forum software, content management systems, HTTP clients and much more.\n\n## Use First\n\nPeople suggested that unless people tried building their own components, they'd never get ideas for innovation.\n\nI do not entirely agree with this. Using existing components gives you the ability to see room for improvement much better than just building your own thing and landing in the same pit a month down the road.\n\nBack to frameworks for a quick example; Using CodeIgniter and Kohana is what gave us the ideas for FuelPHP. We knew the system, we know how to improve it, and knew that we could not simply improve the original. If the improvements were trivial we could have PRed, but because they were large and politics was at play, we had to fork. The FuelPHP team built on top of those concepts and learned from their mistakes. The same should be true of components.\n\nI would recommend searching for existing solutions first. Take the most popular on Packagist, or one with a whole load of stars on GitHub. Whatever metric you use, give it a go first.\n\nIf you find yourself coming up with ideas, send them a pull request. If you find you ideas are not welcomed, see if there is another similar component you could contribute to. \n\nIf there is still nothing, it sounds like you have a great new idea, and maybe the PHP world will love your work!\n\nThis approach of trying not to start over gives you a lot of benefits.\n\n* If your new ideas are only minor API tweaks, you might just get used to their API and eventually prefer it anyway.\n* IF you still want to improve the API, send them a pull request and see if the maintainers like it. \n* Contributing to popular open-source projects will get your name out there. That for me has lead to work and some great speaking opportunities.\n* Adding a few features is quicker than building the whole thing.\n* You don't have to write as many unit-tests, because somebody else did that already.\n* If you contribute regularly, you might make a few friends.\n* There are other people around who can help with issues, not just you. \n\nThere is nothing wrong with building your own solution to a problem, but my advice is that you really do try to find a solution first. \n\n## Curation\n\nThe solution to many to solve any of these \"arg there are 10,000 X's, which one do I pick!\" is to provide \"better curation.\" I don't disagree here, but there are concerns. \n\nIf Packagist for example ordered search results by ranking then it would end up being a constant feedback loop for whichever package happened to have the most at the time. In the future, new packages would have a hard time getting their foot in the door against competitors with more installs.\n\nA few people (including Jordi off of Composer) suggested that The PHP League could be a curated list of third-party packages. That's something that might end up happening, just as a way to shepherd people in the general direction of good quality code. That I think would lead to even more [random complaints] than the organisation has already been getting, so I can't be sure.\n\nEither way, hiding the fact that we have a huge chunk of our community wasting their time building out the same stuff over and over, is not the same as trying to suggest that we... just don't do that. These are two different areas that need improving, and it is not one or the other.\n\n[random complaints]: https://philsturgeon.uk/blog/2014/10/what-is-the-league-of-extraordinary-packages\n\n## Other Communities\n\nI've been using Ruby and Python for the last few years now, alongside the PHP work I've been doing. I often found myself porting Rails applications to PHP after their original developer gives up, and the client wants something they feel more at home with.\n\nOne of the most common problems I had was finding equivalent packages to those in the Rails community in PHP. This lead to a lot of what we now have in [The League of Extraordinary Packages].\n\nWe had [Faker], but it wasn't enough. Factory Girl is a great gem, and I ended up finding something called \"Factory Muff.\" Muff is kinda offensive in the UK, and the code was fairly rough. I tried PRing a bunch of things, and in the end it found a new home at The League, with the maintainer moving it over and giving it a new name: [Factory Muffin].\n\n[Faker]: https://github.com/fzaninotto/Faker\n[Factory Muffin]: http://factory-muffin.thephpleague.com/\n\nRails has [ActiveModel Serializers] and Python had a few similar things, but PHP didn't have squat. I ended up making [Fractal] as I needed to fill that gap. \n\n[ActiveModel Serializers]: http://api.rubyonrails.org/classes/ActiveModel/Serialization.html\n[Fractal]: http://fractal.thephpleague.com/\n\nRuby has [Fog], we now thanks to Frank have [Flysystem].\n\n[Fog]: http://fog.io/\n[Flysystem]: http://flysystem.thephpleague.com\n\nBeyond what The League is up to, something the PHP world has been missing is any sort of focus on asynchronous behavior at a component level.\n\nI mean, yes, there is [curl_multi_exec()], but the API for that is rough as a badgers arse, and it's only useful in some cases. Things like pthreads are available as an extension for threading, but thats a bit different.\n\n[Guzzle 5] has shown how promises can create an asynchronous workflow, and this is an example others should follow.\n\n[ReactPHP] has made great strides in this arena too, allowing me to [create a benchmark] showing PHP to be competitive to NodeJS in parsing the DOM of remote sites.\n\nThese are all things that we didn't have until recently, and all while we are still missing a half reasonable bloody Twitter client!\n\nI feel like there are so many amazing things we could be building together as a community, and now instead of siloing our efforts based on framework, we're just building out clones for the sake of it. \n\nI want to see the PHP community focus more on teamwork. \n\nI want to see people merging projects, and sending more PRs to exiting ones.\n\nMaybe even more importantly, I want to see people deprecating awful old code that has no place in our modern ecosystem.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Gonna take <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a>&#39;s advise and ditch my shitty GitHub API client and use an established one so I can get other shit done.</p>&mdash; Kristopher Wilson (@mrkrstphr) <a href=\"https://twitter.com/mrkrstphr/status/523544363713179648\">October 18, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nYou are undoubtedly free to do whatever it is that you want. Experiment with any code you want. Put anything on GitHub that you want. Put anything on Packagist that you want.\n\nThat said, please do not release this stuff just for the sake of it. Releasing the 10,000th version of some basic component will not make you rich and famous. It won't help anyone, and it will probably waste a lot of your time. \n\nWhy build another clone, if you could instead go out and build something truly useful that the PHP community does not yet have?\n\nThat will get you some attention. \n\nI might try and poach you for the League, but regardless, you'll have something great to blog about and to talk about at conferences. Nobody wants to hear another talk about yet another bloody router component, but Frank has been touring Flysystem all over!\n\nBuild new and exciting things, and show the other communities we can build amazing components instead of releasing the same crap over and over again. \n\nPost a comment with anything new you've built which you think is unique. Alternatively let me know if you've deprecated a component because of this post.\n\n[curl_multi_exec()]: https://php.net/curl_multi_exec\n[Guzzle 5]: http://mtdowling.com/blog/2014/09/28/guzzle-ring/\n[ReactPHP]: http://reactphp.org/\n[create a benchmark]: https://philsturgeon.uk/blog/2013/11/benchmarking-codswallop-nodejs-v-php\n[The League of Extraordinary Packages]: http://thephpleague.com/",
    "created_on": "1413822000",
    "updated_on": "1413822000",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "91ae01bf30df739c59eef3ee75cda2b4",
    "type": "markdown",
    "parsed": "<p>In the last article I said I wanted to write about when its a good idea to release a component. A lot of this comes down to: is there one out there that does what I want, and if so, can I use it?</p>\n\n<p>This blog post is going to touch on a lot of points already made well by Anthony Ferrera. His article <a href=\"http://blog.ircmaxell.com/2012/08/reinvent-wheel.html\">Reinvent The Wheel!</a> says many of the same things, so if you only have time to read one article right now, go and read that.</p>\n\n<p>I've been talking with various people on Twitter about how I see a lot of people building what I consider to be clones. Common packages like routers, HTTP clients, validation, currency converters, dependency injection containers, etc. </p>\n\n<p>Sometimes these are carbon copies of other packages, but often they are feature-weak versions of established packages.</p>\n\n<p>While talking about this sort of thing, people seem to jump to some incorrect conclusions. I would like to take this chance to highlight what I am not talking about first:</p>\n\n<ul>\n<li>Panic that the Internet might run out of space</li>\n<li>Concern that GitHub will use up all their repos</li>\n<li>I think I can tell people what code to write</li>\n<li>I want to stop people building what they want</li>\n<li>I'm super angry that people are building things I don't like</li>\n<li>I hate innovation</li>\n</ul>\n\n<p>It should go without saying that I'm not trying to quash innovation; I just don't think building identical shit over and over again is innovation. I see people wasting their time, and I know that time could go to better use. </p>\n\n<p>Just like with framework dependent code, building out clones forces developers to spin their wheels. It forces developers that should be collaborating, to work in parallel. Splitting users, developer resource, documentation efforts, etc. </p>\n\n<p>These problems are still found in the community due to NIH. Despite huge leaps forward in framework agnostic code, the same time-wasting is still happening. Instead of laravel-foo and fuelphp-foo, we just have 18 pages of foo with no discernible differences. </p>\n\n<h2>Not Against Innovation</h2>\n\n<p>People are providing Laravel as an argument against these views. They say that it started its life rather similar to CodeIgniter and FuelPHP. </p>\n\n<p>Folks concern with my \"dont reinvent the wheel\" approach is that it would have stopped Laravel from progressing. I think that frameworks are bad example, and not what I am talking about. Frameworks cover such vast areas that alternatives are much more likely, especially with these factors taken into account:</p>\n\n<ul>\n<li>Is it convention based or configuration based</li>\n<li>Does it provide a default application structure or let you freeform</li>\n<li>Does it focus more on \"developer speed\" or performance?</li>\n<li>Does the dev team move at a blinding pace adding new features but breaking the API, or does it play it cool and focus more on maintaining BC</li>\n</ul>\n\n<p>Many of these things are mutually exclusive, so you often have two different components or frameworks based on one difference. CodeIgniter might have failed to add anything useful for years, but it was reliable due to its lack of BC breaks. Other similar frameworks broke themselves in half with rewrites, but provided bleeding edge functionality for those not fussed about longevity (RAD types) or those in a position to keep up.</p>\n\n<p>This overlaps with another article I want to write, on the topic of \"Your software is not better.\" Due to the existence of these factors, its impossible for any one approach to be \"better\" as they are all contradictory.</p>\n\n<p>I would like to remove larger systems like frameworks and CMS' from the conversation at this point, to focus on components. Due to their much smaller size, there is often not such a need for multiples.</p>\n\n<p>Different here is key, and in the realm of a component it can often be hard to innovate. I see a lot of insanely similar code thrown on Packagist and Reddit, and get a bunch emailed directly to me for feedback. Maybe they could have worked together with the author of another package if they did a quick look around. Checking out the existing solutions should of course be step 1 for anyone anyway. Sadly, when I ask \"How does this differ from X\", the response is very often \"Oh, I didn't see X!\" or \"Well... I prefer $route->get() over $route->register('GET'...)\", or something else equally trivial.</p>\n\n<p>The golden rule is: If they are different, then awesome! One example here would be Nikita Popov's <a href=\"https://github.com/nikic/FastRoute\">FastRoute</a>, which is quicker than any other router around. It's got a slightly tricky API and is missing a dispatcher, so <a href=\"https://github.com/orno/route\">Orno\\Route</a> wraps it and gives it a pretty API. This means we have two routers, but one is super fast and one is just a wrapper.</p>\n\n<p>Other than using a crazy approach to make the router more efficient, there are cannot be many innovations left in routing. Certainly not enough to demand <a href=\"https://packagist.org/search/?q=router\">18 pages worth</a> of routers on Packagist.</p>\n\n<p><em>Since I started writing this yesterday we're now up to 19 pages of routers. Are you kidding me?</em></p>\n\n<p>If I search for <a href=\"https://packagist.org/search/?q=routing\">routing</a> then there are 23 pages. There might be some cross-over from people using \"router\" and \"routing\", but many are different. These too are only the components that brand themselves as a \"router\", and not the \"micro-frameworks\" which are just an autoloader, router, dispatcher and view layer slapped together. </p>\n\n<h2>Learning by Building</h2>\n\n<p>If you are familiar with Anthony's article linked in the intro, you will know he approved of people learning by building.</p>\n\n<p>I fully agree. Some people learn by seeing and some by doing. If you're a do'er then building a router, a dependency container, a geocoder, etc will give you a great understanding of how it all works. His article also explains that you probably should not release those experiments. </p>\n\n<p>Remember, there is a difference between shoving something on GitHub and releasing it. That normally suggests a website, Packagist, even a damn logo in some instances. This also suggests maintenance, and the expectation of others using it. That is a big investment you're making, and you have a responsibility to your users too.</p>\n\n<p>Further to that, why do you <em>need</em> to know how every moving part works? If you are a beginner, you do not need to know how every moving part inside a router or validation package works. You'd be better invested in building applications and getting your problem solving skills improved, than wasting your time mulling over something that's been done to death already.</p>\n\n<p>After you have experience with how things work in general, it might be a great time to investigate things that interest you. At that point, pick apart any package you're interested in to see how it works. I learned how to code by pulling things apart and improving them. It's how I ended up building forum software, content management systems, HTTP clients and much more.</p>\n\n<h2>Use First</h2>\n\n<p>People suggested that unless people tried building their own components, they'd never get ideas for innovation.</p>\n\n<p>I do not entirely agree with this. Using existing components gives you the ability to see room for improvement much better than just building your own thing and landing in the same pit a month down the road.</p>\n\n<p>Back to frameworks for a quick example; Using CodeIgniter and Kohana is what gave us the ideas for FuelPHP. We knew the system, we know how to improve it, and knew that we could not simply improve the original. If the improvements were trivial we could have PRed, but because they were large and politics was at play, we had to fork. The FuelPHP team built on top of those concepts and learned from their mistakes. The same should be true of components.</p>\n\n<p>I would recommend searching for existing solutions first. Take the most popular on Packagist, or one with a whole load of stars on GitHub. Whatever metric you use, give it a go first.</p>\n\n<p>If you find yourself coming up with ideas, send them a pull request. If you find you ideas are not welcomed, see if there is another similar component you could contribute to. </p>\n\n<p>If there is still nothing, it sounds like you have a great new idea, and maybe the PHP world will love your work!</p>\n\n<p>This approach of trying not to start over gives you a lot of benefits.</p>\n\n<ul>\n<li>If your new ideas are only minor API tweaks, you might just get used to their API and eventually prefer it anyway.</li>\n<li>IF you still want to improve the API, send them a pull request and see if the maintainers like it. </li>\n<li>Contributing to popular open-source projects will get your name out there. That for me has lead to work and some great speaking opportunities.</li>\n<li>Adding a few features is quicker than building the whole thing.</li>\n<li>You don't have to write as many unit-tests, because somebody else did that already.</li>\n<li>If you contribute regularly, you might make a few friends.</li>\n<li>There are other people around who can help with issues, not just you. </li>\n</ul>\n\n<p>There is nothing wrong with building your own solution to a problem, but my advice is that you really do try to find a solution first. </p>\n\n<h2>Curation</h2>\n\n<p>The solution to many to solve any of these \"arg there are 10,000 X's, which one do I pick!\" is to provide \"better curation.\" I don't disagree here, but there are concerns. </p>\n\n<p>If Packagist for example ordered search results by ranking then it would end up being a constant feedback loop for whichever package happened to have the most at the time. In the future, new packages would have a hard time getting their foot in the door against competitors with more installs.</p>\n\n<p>A few people (including Jordi off of Composer) suggested that The PHP League could be a curated list of third-party packages. That's something that might end up happening, just as a way to shepherd people in the general direction of good quality code. That I think would lead to even more <a href=\"https://philsturgeon.uk/blog/2014/10/what-is-the-league-of-extraordinary-packages\">random complaints</a> than the organisation has already been getting, so I can't be sure.</p>\n\n<p>Either way, hiding the fact that we have a huge chunk of our community wasting their time building out the same stuff over and over, is not the same as trying to suggest that we... just don't do that. These are two different areas that need improving, and it is not one or the other.</p>\n\n<h2>Other Communities</h2>\n\n<p>I've been using Ruby and Python for the last few years now, alongside the PHP work I've been doing. I often found myself porting Rails applications to PHP after their original developer gives up, and the client wants something they feel more at home with.</p>\n\n<p>One of the most common problems I had was finding equivalent packages to those in the Rails community in PHP. This lead to a lot of what we now have in <a href=\"http://thephpleague.com/\">The League of Extraordinary Packages</a>.</p>\n\n<p>We had <a href=\"https://github.com/fzaninotto/Faker\">Faker</a>, but it wasn't enough. Factory Girl is a great gem, and I ended up finding something called \"Factory Muff.\" Muff is kinda offensive in the UK, and the code was fairly rough. I tried PRing a bunch of things, and in the end it found a new home at The League, with the maintainer moving it over and giving it a new name: <a href=\"http://factory-muffin.thephpleague.com/\">Factory Muffin</a>.</p>\n\n<p>Rails has <a href=\"http://api.rubyonrails.org/classes/ActiveModel/Serialization.html\">ActiveModel Serializers</a> and Python had a few similar things, but PHP didn't have squat. I ended up making <a href=\"http://fractal.thephpleague.com/\">Fractal</a> as I needed to fill that gap. </p>\n\n<p>Ruby has <a href=\"http://fog.io/\">Fog</a>, we now thanks to Frank have <a href=\"http://flysystem.thephpleague.com\">Flysystem</a>.</p>\n\n<p>Beyond what The League is up to, something the PHP world has been missing is any sort of focus on asynchronous behavior at a component level.</p>\n\n<p>I mean, yes, there is <a href=\"https://php.net/curl_multi_exec\">curl<em>multi</em>exec()</a>, but the API for that is rough as a badgers arse, and it's only useful in some cases. Things like pthreads are available as an extension for threading, but thats a bit different.</p>\n\n<p><a href=\"http://mtdowling.com/blog/2014/09/28/guzzle-ring/\">Guzzle 5</a> has shown how promises can create an asynchronous workflow, and this is an example others should follow.</p>\n\n<p><a href=\"http://reactphp.org/\">ReactPHP</a> has made great strides in this arena too, allowing me to <a href=\"https://philsturgeon.uk/blog/2013/11/benchmarking-codswallop-nodejs-v-php\">create a benchmark</a> showing PHP to be competitive to NodeJS in parsing the DOM of remote sites.</p>\n\n<p>These are all things that we didn't have until recently, and all while we are still missing a half reasonable bloody Twitter client!</p>\n\n<p>I feel like there are so many amazing things we could be building together as a community, and now instead of siloing our efforts based on framework, we're just building out clones for the sake of it. </p>\n\n<p>I want to see the PHP community focus more on teamwork. </p>\n\n<p>I want to see people merging projects, and sending more PRs to exiting ones.</p>\n\n<p>Maybe even more importantly, I want to see people deprecating awful old code that has no place in our modern ecosystem.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Gonna take <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a>&#39;s advise and ditch my shitty GitHub API client and use an established one so I can get other shit done.</p>&mdash; Kristopher Wilson (@mrkrstphr) <a href=\"https://twitter.com/mrkrstphr/status/523544363713179648\">October 18, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>You are undoubtedly free to do whatever it is that you want. Experiment with any code you want. Put anything on GitHub that you want. Put anything on Packagist that you want.</p>\n\n<p>That said, please do not release this stuff just for the sake of it. Releasing the 10,000th version of some basic component will not make you rich and famous. It won't help anyone, and it will probably waste a lot of your time. </p>\n\n<p>Why build another clone, if you could instead go out and build something truly useful that the PHP community does not yet have?</p>\n\n<p>That will get you some attention. </p>\n\n<p>I might try and poach you for the League, but regardless, you'll have something great to blog about and to talk about at conferences. Nobody wants to hear another talk about yet another bloody router component, but Frank has been touring Flysystem all over!</p>\n\n<p>Build new and exciting things, and show the other communities we can build amazing components instead of releasing the same crap over and over again. </p>\n\n<p>Post a comment with anything new you've built which you think is unique. Alternatively let me know if you've deprecated a component because of this post.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "311",
    "created": "2014-10-21 12:21:00",
    "updated": "2014-10-21 12:21:00",
    "created_by": "2",
    "ordering_count": "48",
    "title": "Describe Your PHP Component",
    "slug": "describe-your-php-component",
    "category_id": "2",
    "attachment": "",
    "intro": "I&#39;ve been talking recently about what The League of Extraordinary Packages is up to in regards to components, and made a plea to avoid &quot;Not Invented Here&quot; syndrome to help the community focus on quality instead of quantity. Today I noticed a new pet-peeve.",
    "body": "I've been talking recently about what [The League of Extraordinary Packages](https://philsturgeon.uk/blog/2014/10/what-is-the-league-of-extraordinary-packages) is up to, and made a plea to [avoid \"Not Invented Here\" syndrome](https://philsturgeon.uk/blog/2014/10/php-wars-attack-of-the-clones) to help the community focus on quality instead of quantity. Today I came across a new pet-peeve. \n\n<s>Right now, if you</s> Earlier this-morning, if you did a [search for \"pdf\"](https://packagist.org/search/?q=pdf) on Packagist, you <s>will</s> would have seen solid examples of two of my largest issues with the PHP Component eco-system, and even a brand new one.\n\n1. Framework specific code; There is a Yii-only PDF package and a Laravel-only PDF package.\n2. Attack of the Clones; there are so... so many... \n3. The New One - Missing descriptions; One the first page, the third and fourth packages were completely unlabeled. \n\nIn a world where there are (unfortunately) thousands of packages that do exactly the same thing, you'll need to _at least_ add a description if you want to have anyone pick your package over anyone else's. This helps you get more users (and therefore more contributions) but also helps people skip your component if its no good for them.\n\nI [added a description to one](https://github.com/mneuhaus/Famelo.PDF/pull/7), but another [didn't even have a README](https://github.com/kaystrobach/FLOW.Pdf/issues/1) for me to copy one from. The PR was merged and the README was added, meaning that those two now make a little more sense.\n\nPlease send a pull request to any package you see without a description. It goes in the `composer.json`, and simply needs `\"description\" : \"Copy some text from their README.\",` added in. \n\nIf you add a description to a package, please post the pull request up here for props.",
    "created_on": "1413894060",
    "updated_on": "1413894060",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "325de237d7f2b095b515c6b81bcf8eaa",
    "type": "markdown",
    "parsed": "<p>I've been talking recently about what <a href=\"https://philsturgeon.uk/blog/2014/10/what-is-the-league-of-extraordinary-packages\">The League of Extraordinary Packages</a> is up to, and made a plea to <a href=\"https://philsturgeon.uk/blog/2014/10/php-wars-attack-of-the-clones\">avoid \"Not Invented Here\" syndrome</a> to help the community focus on quality instead of quantity. Today I came across a new pet-peeve. </p>\n\n<p><s>Right now, if you</s> Earlier this-morning, if you did a <a href=\"https://packagist.org/search/?q=pdf\">search for \"pdf\"</a> on Packagist, you <s>will</s> would have seen solid examples of two of my largest issues with the PHP Component eco-system, and even a brand new one.</p>\n\n<ol>\n<li>Framework specific code; There is a Yii-only PDF package and a Laravel-only PDF package.</li>\n<li>Attack of the Clones; there are so... so many... </li>\n<li>The New One - Missing descriptions; One the first page, the third and fourth packages were completely unlabeled. </li>\n</ol>\n\n<p>In a world where there are (unfortunately) thousands of packages that do exactly the same thing, you'll need to <em>at least</em> add a description if you want to have anyone pick your package over anyone else's. This helps you get more users (and therefore more contributions) but also helps people skip your component if its no good for them.</p>\n\n<p>I <a href=\"https://github.com/mneuhaus/Famelo.PDF/pull/7\">added a description to one</a>, but another <a href=\"https://github.com/kaystrobach/FLOW.Pdf/issues/1\">didn't even have a README</a> for me to copy one from. The PR was merged and the README was added, meaning that those two now make a little more sense.</p>\n\n<p>Please send a pull request to any package you see without a description. It goes in the <code>composer.json</code>, and simply needs <code>\"description\" : \"Copy some text from their README.\",</code> added in. </p>\n\n<p>If you add a description to a package, please post the pull request up here for props.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "321",
    "created": "2014-11-04 22:14:00",
    "updated": "2014-11-04 22:14:00",
    "created_by": "2",
    "ordering_count": "49",
    "title": "Composer: It's ALMOST Always About the Lock File",
    "slug": "composer-its-almost-always-about-the-lock-file",
    "category_id": "2",
    "attachment": "",
    "intro": "When is it a good idea to commit your composer.lock file, and when should you leave it out?&nbsp;",
    "body": "[Davey Shafik](https://twitter.com/dshafik) wrote a great article for [EngineYard](https://engineyard.com/) called [Composer: It’s All About the Lock File](https://blog.engineyard.com/2014/composer-its-all-about-the-lock-file).\n\nThe point of his article is to try and suggest people get a lot more used to committing their `composer.lock` files. \n\nPlease, do go read his article now and for the love of god please start committing your lock files to applications. If you and your employees are a little vague with your `composer.json` specifications and you don't have a `composer.lock` then you can end up on different versions between you. Theoretically, if component developers are using [SemVer](http://semver.org/) and you're being careful then you should be fine, but keeping your lock in version control will make sure that the same version is on your dev teams computers. This will happen every time you run `$ composer install`. If you are on Heroku or EngineYard then this will be used for the deployment of your production components as a built in hook, which is _awesome_.\n\nSide bonus: It makes composer installs much quicker, and checks your checksums too so you don't have issues where some muppet retagged a version of the component and now BOOM weird change. These things happen. \n\nYou can learn a lot more about careful version selection and other bits of Composer advice from [Rafael Dohms](https://twitter.com/rdohms), who wrote recently about [Installing Composer Packages](http://blog.doh.ms/2014/10/13/installing-composer-packages/).\n\nNow, I had one little bit of feedback to Davey's article:\n\n> Always commit composer.lock for applications.  \n> Never commit composer.lock for components.\n\nWhen asked to explain that, I ended up realizing I was just parroting some Ruby logic I'd had knocking around in the back of my brain since 2010 when I was building out a few projects with Rails. \n\nThe [advice in the Ruby community](http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/) regarding lock files has always been to commit the `Gemfile` for applications, but to ignore the `Gemfile.lock` for building gems. This solves a lot of problems, from dependency hell, to just generally being a bit annoying.\n\nMy realization that I was just parroting this Ruby logic, I thought a bit harder and I've now moved from:\n\n> Never commit composer.lock for components.\n\n...to:\n\n> Maybe commit composer.lock for components.\n\nWhy only sometimes? Well, there are two main problems here. Committing a `composer.lock` will solve one problem, but create another.\n\nSome background.\n\n## Component Development\n\nWhen [developing and contributing to Composer packages](https://philsturgeon.uk/blog/2013/05/testing-contributing-composer-packages), you could be working somewhere like `~/src/some-package`, where you just checked out the repo. You can also do it inside an application that is using Composer components, so if your component lived at `~/src/some-app/vendor/phil/some-package` then you could run `$ composer install` _in there_ and it would install `~/src/some-app/vendor/phil/some-package/vendor/phil/another-package`.\n\nComposer doesn't care about that extra level of nested stuff, as it's just a folder structure. Wherever you are, `$ composer install` will look for a `composer.lock` or a `composer.json` and make a `./vendor/` directory to shove your dependencies in.\n\nIf you have a `composer.lock` file inside the `some-package` codebase and the lock file is demanding `1.1.5`, it doesn't matter at all if your `some-app` is demanding `1.1.5` or `2.0.0` of that same package. At all. \n\nThis means you can have a lock for your component, and it only affects those working directly with that component. It does not force anyone installing that component into their application to in turn use the version of a dependency you have specified in that `composer.lock`. This might be a good idea for the development team working on a component, but it might cause another problem.\n\n## How Strict Is Too Strict?\n\nA component is supposed to work with a reasonable range of it's dependencies. For example, a component using Guzzle should be able to work with `4.0`, `4.1` or `4.2` without any confusion about wether it works. \n\nNow, if I commit a lock file and 4.2.0 happens to contain a breaking change - despite promising SemVer compliance, I'm going to start getting complaints from users that my package does not work with 4.2.0. If I'm traveling for a month thats going to be a right PITA. I wouldn't even know it fails because my component is specifically requiring `4.1.2` to run its tests on Travis-CI, as thats the last version that was out when my `composer.lock` was written to, and it would never have a chance to try and download `4.2.0`. Others depending on my package would get the newer version because their `$ composer install` is not looking deep enough into the folders to see my components `composer.lock` file, so they are ahead of my very strict requirements.\n\nIf I had been a little more loose with my components dependencies, I would have seen it error much sooner. Possibly on the first pull request that a contributor wrote, and who knows - maybe they'd fix that issue for me too as part of their PR. Then I can just click the green button and get on with my day, instead of sifting through changelogs to find out what the package happened to break. \n\nAfter that breaking change is catered for, I'd then need to bump my requirements for Guzzle from `~4.1` to `~4.2` in the `composer.json`, which would force users to upgrade too, which in turn _could_ end up leading to dependency hell.\n\nMy only solution would be to avoid doing `~4.1` in the first place, and stick to `4.1.*` for everything, which sucks for the 99% of cases where minor upgrades _do not_ break the API.\n\nIt is by no means unheard of for popular software projects to break backwards compatibility for components. SemVer is a promise at best. While it's a good promise, it's a promise that is sometimes broken. Sometimes intentionally and you just didn't realize a dependency didn't care about SemVer, or sometimes by a dependency that *does* promise SemVer then accidentally breaks it.\n\n## Summary\n\nI think committing your `composer.lock` file is _always_ an incredibly good idea for **applications**.\n\nBut, I would think really hard about wether you want to be that specific for your components. Maybe you do want to really lock it down, and you like the idea of specifying the *exact* version of a dependency that your component is last known to work with. It could certainly make testing easier, reduces \"works on my machine\", and you could force people to send in the update as part of the PR. All of that said, for me, it is a level of strictness that I am not interested in for my components.\n\nMaybe that'll change for me over time. But for now, I'll keep the `.gitignore` entry for  `composer.lock` in my components.",
    "created_on": "1415139240",
    "updated_on": "1415139240",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "a100b081fddb400a4520195a88a077b0",
    "type": "markdown",
    "parsed": "<p><a href=\"https://twitter.com/dshafik\">Davey Shafik</a> wrote a great article for <a href=\"https://engineyard.com/\">EngineYard</a> called <a href=\"https://blog.engineyard.com/2014/composer-its-all-about-the-lock-file\">Composer: It’s All About the Lock File</a>.</p>\n\n<p>The point of his article is to try and suggest people get a lot more used to committing their <code>composer.lock</code> files. </p>\n\n<p>Please, do go read his article now and for the love of god please start committing your lock files to applications. If you and your employees are a little vague with your <code>composer.json</code> specifications and you don't have a <code>composer.lock</code> then you can end up on different versions between you. Theoretically, if component developers are using <a href=\"http://semver.org/\">SemVer</a> and you're being careful then you should be fine, but keeping your lock in version control will make sure that the same version is on your dev teams computers. This will happen every time you run <code>$ composer install</code>. If you are on Heroku or EngineYard then this will be used for the deployment of your production components as a built in hook, which is <em>awesome</em>.</p>\n\n<p>Side bonus: It makes composer installs much quicker, and checks your checksums too so you don't have issues where some muppet retagged a version of the component and now BOOM weird change. These things happen. </p>\n\n<p>You can learn a lot more about careful version selection and other bits of Composer advice from <a href=\"https://twitter.com/rdohms\">Rafael Dohms</a>, who wrote recently about <a href=\"http://blog.doh.ms/2014/10/13/installing-composer-packages/\">Installing Composer Packages</a>.</p>\n\n<p>Now, I had one little bit of feedback to Davey's article:</p>\n\n<blockquote>\n  <p>Always commit composer.lock for applications.<br />\n  Never commit composer.lock for components.</p>\n</blockquote>\n\n<p>When asked to explain that, I ended up realizing I was just parroting some Ruby logic I'd had knocking around in the back of my brain since 2010 when I was building out a few projects with Rails. </p>\n\n<p>The <a href=\"http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/\">advice in the Ruby community</a> regarding lock files has always been to commit the <code>Gemfile</code> for applications, but to ignore the <code>Gemfile.lock</code> for building gems. This solves a lot of problems, from dependency hell, to just generally being a bit annoying.</p>\n\n<p>My realization that I was just parroting this Ruby logic, I thought a bit harder and I've now moved from:</p>\n\n<blockquote>\n  <p>Never commit composer.lock for components.</p>\n</blockquote>\n\n<p>...to:</p>\n\n<blockquote>\n  <p>Maybe commit composer.lock for components.</p>\n</blockquote>\n\n<p>Why only sometimes? Well, there are two main problems here. Committing a <code>composer.lock</code> will solve one problem, but create another.</p>\n\n<p>Some background.</p>\n\n<h2>Component Development</h2>\n\n<p>When <a href=\"https://philsturgeon.uk/blog/2013/05/testing-contributing-composer-packages\">developing and contributing to Composer packages</a>, you could be working somewhere like <code>~/src/some-package</code>, where you just checked out the repo. You can also do it inside an application that is using Composer components, so if your component lived at <code>~/src/some-app/vendor/phil/some-package</code> then you could run <code>$ composer install</code> <em>in there</em> and it would install <code>~/src/some-app/vendor/phil/some-package/vendor/phil/another-package</code>.</p>\n\n<p>Composer doesn't care about that extra level of nested stuff, as it's just a folder structure. Wherever you are, <code>$ composer install</code> will look for a <code>composer.lock</code> or a <code>composer.json</code> and make a <code>./vendor/</code> directory to shove your dependencies in.</p>\n\n<p>If you have a <code>composer.lock</code> file inside the <code>some-package</code> codebase and the lock file is demanding <code>1.1.5</code>, it doesn't matter at all if your <code>some-app</code> is demanding <code>1.1.5</code> or <code>2.0.0</code> of that same package. At all. </p>\n\n<p>This means you can have a lock for your component, and it only affects those working directly with that component. It does not force anyone installing that component into their application to in turn use the version of a dependency you have specified in that <code>composer.lock</code>. This might be a good idea for the development team working on a component, but it might cause another problem.</p>\n\n<h2>How Strict Is Too Strict?</h2>\n\n<p>A component is supposed to work with a reasonable range of it's dependencies. For example, a component using Guzzle should be able to work with <code>4.0</code>, <code>4.1</code> or <code>4.2</code> without any confusion about wether it works. </p>\n\n<p>Now, if I commit a lock file and 4.2.0 happens to contain a breaking change - despite promising SemVer compliance, I'm going to start getting complaints from users that my package does not work with 4.2.0. If I'm traveling for a month thats going to be a right PITA. I wouldn't even know it fails because my component is specifically requiring <code>4.1.2</code> to run its tests on Travis-CI, as thats the last version that was out when my <code>composer.lock</code> was written to, and it would never have a chance to try and download <code>4.2.0</code>. Others depending on my package would get the newer version because their <code>$ composer install</code> is not looking deep enough into the folders to see my components <code>composer.lock</code> file, so they are ahead of my very strict requirements.</p>\n\n<p>If I had been a little more loose with my components dependencies, I would have seen it error much sooner. Possibly on the first pull request that a contributor wrote, and who knows - maybe they'd fix that issue for me too as part of their PR. Then I can just click the green button and get on with my day, instead of sifting through changelogs to find out what the package happened to break. </p>\n\n<p>After that breaking change is catered for, I'd then need to bump my requirements for Guzzle from <code>~4.1</code> to <code>~4.2</code> in the <code>composer.json</code>, which would force users to upgrade too, which in turn <em>could</em> end up leading to dependency hell.</p>\n\n<p>My only solution would be to avoid doing <code>~4.1</code> in the first place, and stick to <code>4.1.*</code> for everything, which sucks for the 99% of cases where minor upgrades <em>do not</em> break the API.</p>\n\n<p>It is by no means unheard of for popular software projects to break backwards compatibility for components. SemVer is a promise at best. While it's a good promise, it's a promise that is sometimes broken. Sometimes intentionally and you just didn't realize a dependency didn't care about SemVer, or sometimes by a dependency that <em>does</em> promise SemVer then accidentally breaks it.</p>\n\n<h2>Summary</h2>\n\n<p>I think committing your <code>composer.lock</code> file is <em>always</em> an incredibly good idea for <strong>applications</strong>.</p>\n\n<p>But, I would think really hard about wether you want to be that specific for your components. Maybe you do want to really lock it down, and you like the idea of specifying the <em>exact</em> version of a dependency that your component is last known to work with. It could certainly make testing easier, reduces \"works on my machine\", and you could force people to send in the update as part of the PR. All of that said, for me, it is a level of strictness that I am not interested in for my components.</p>\n\n<p>Maybe that'll change for me over time. But for now, I'll keep the <code>.gitignore</code> entry for  <code>composer.lock</code> in my components.</p>\n",
    "preview_hash": ""
  },
  {
    "id": "331",
    "created": "2014-11-15 22:08:00",
    "updated": "2014-11-15 22:08:00",
    "created_by": "2",
    "ordering_count": "50",
    "title": "Alien Status: Extraordinary Again",
    "slug": "alien-status-extraordinary-again",
    "category_id": "1",
    "attachment": "",
    "intro": "A few months ago I wrote a bit of an emotional article about my visa status, and how I was in a bit of a pickle. A few people since have wanted an update, so here it is.",
    "body": "A few months ago I wrote a bit of an [emotional article about my visa status,](/blog/2014/08/i-was-an-extraordinary-alien-for-a-week) and how I was in a bit of a pickle. A few people since have wanted an update, so here it is.\n\nI had lost my job when the startup I worked for imploded shortly after entering the States, which in turn invalidated my work visa. A conference in Spain had me booked to speak the week after, and I never cancel on things like that. Unfortunately it meant I had to return to the US \"on holiday\" to live in the apartment I could not afford. \n\nThe plan was to get rid of the apartment and get out of the country. I ended up having to wait an extra month and a half for the lease to run out, because my landlords were w***ers. Being in the USA on holiday made it illegal for me to work, so with no income other than the book royalties, I struggled to cover rent.\n\nI was broke, and the PHP community supported me. Close friends sent me about $1,000 in \"surprise loans\", but I also got about $2,000 in random donations and book over-payments. Some also payed for consulting time which they still haven't used. One person sent me $500, and I started crying in public. Being British I usually only understand emotions in the \"mild annoyance\" to \"frustration\" range. That was a pretty weird experience for me.\n\nWell, it brings me great pleasure to say... *everything is fixed!*\n\n## New Job\n\nI am working for an amazing company called [Ride](http://ride.com). The product is genius, the team are smart as hell and the culture is perfect. \n\nWe popped down to Colombia for an on-boarding process as some of the team live down that way. We got to planning roadmaps for v1.0 and onwards, and split ourselves up into teams for various services. I taught myself Go one afternoon looking out at the mountains in Bogota; which is not a sentence I would have expected to ever say.\n\nBetter still, a few of the NYC team are cyclists and runners. One of them was even my partner for the [Bike to the Beach 2013](/blog/2013/06/biked-to-the-beach-2013) ride. Finally I can focus on shedding the extra 20lb (1 & 1/2 stone for the Brits) that has jumped onto my face and belly over the last few months.\n\n## New Visa\n\nI spent the weekend in London to get my new visa approved, and it's all golden. They will have it back to me in 10-14 days or so, meaning I should be back in the USA by early December.\n\n## Farefuckingwell Apartment\n\nI sold _everything_ I own - other than my bike - and got rid of the apartment. **Side-note: In the last hour of moving out the \"next guy\" wandered in with his stuff and used _my_ bathroom without even asking. Who does that?!**\n\nAll my furniture is gone and the landlords owe me a massive security deposit cheque. It was huge because a Brit without _any_ security deposit moving into NYC needs to pay about 3 months rent as security. That shit aint cheap.\n\nWhen I get back to NYC I'll start hunting for somewhere a little less expensive. Hopefully that can still be in Williamsburg, but maybe a little further into Brooklyn.\n\n## Getting Even\n\nI am now out of debt and with a nice chunk of money in my account, for the first time since May, which means I need to make things even.\n\nThe people who supported my visa application went through hell to \"make my immigration lawyers happy.\" I bribed those people with various rewards, and they've started to go out.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Thank you <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> happy to have you in the USA. You&#39;re a great guy, no matter what everyone on Twitter says. <a href=\"http://t.co/YNWm2MjvvG\">pic.twitter.com/YNWm2MjvvG</a></p>&mdash; Zachary Ian Blank (@zachianblank) <a href=\"https://twitter.com/zachianblank/status/528190468547678208\">October 31, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThe $1,000 loaned to me by friends is back with them. That was nice and easy.\n\nThe trickier part to resolve was the matter of the \"charity money\" I received. \n\nIt was all sent in good will by people who wanted to help me out. Many said it was repayment for the time or money my articles, released code, contributions or whatever have saved them over the years.\n\nI told some people not to be silly and I would be fine, but to be honest I was fucked and when people were insistent I caved and sent them my payment information. It was tough to accept that, but at the time I didn't have any choice.\n\nI never release stuff as an investment hoping to get gold someday. I release code because it solves a problem for me and I hope it solves a problem for others. In the case of PyroCMS we started charging for it only because it was turning into a full-time job. We wanted to focus on the job instead of squeezing work between other paying work. Nothing wrong with having a business model in that case, but that is different to trying to squeeze money out of other projects. \n\nI have used a shitload of open-source stuff in my career and without it I would still be working in a shitty cinema in Bristol waiting to die. As developers we use, we improve, we share and we make our money from the products and services we build, not each little component.\n\nAnyway, these kind souls don't want the money back, and I can't in good conscience keep it. \n\nThe PHP community supported me, so that of course means I have to give it back to the PHP community. [PHPWomen](http://phpwomen.org) do some great work in the community, and I love how they bring people to conferences who otherwise could not make it to speak or attend.\n\nWell I spoke to [Davey Shafik](https://twitter.com/dshafik) at PHPWomen and they are happy to take the money. They've had their first $500 from me, and they will get another three equal payments to put towards whatever they need. I will post up on here what they do with that money, so those not familiar with their good work will start to understand a bit better.\n\n## Good to be Back\n\nI'm f**king excited. I feel like I have not done much this year. Things started going pear shaped in April, and between then and October I barely wrote any code. I was basically waiting for life to sort itself out, and when you are legally not allowed to work, and are friends with a lot of bartenders... you end up having a few.\n\nThis new job has me doing some awesome things, and is definitely challenging me in a good way. Whilst I have experience with Ruby and Python and a whole bunch of frameworks, I have done far too much PHP for the last 10 years. I cannot wait to grow more as a developer and play around with a whole shitload of new languages and technologies.\n\nExpect me to post more about APIs, Go, Rails (shut up), and whatever Ride has me learning. We are building some exciting services with a wide range of languages, and the tools we use will change over time as our system and requirements grow too.",
    "created_on": "1416089280",
    "updated_on": "1416089280",
    "status": "live",
    "comments_enabled": "3 months",
    "author_id": "2",
    "keywords": "4253a9cb3826cc92909808ac580e3da7",
    "type": "markdown",
    "parsed": "<p>A few months ago I wrote a bit of an <a href=\"/blog/2014/08/i-was-an-extraordinary-alien-for-a-week\">emotional article about my visa status,</a> and how I was in a bit of a pickle. A few people since have wanted an update, so here it is.</p>\n\n<p>I had lost my job when the startup I worked for imploded shortly after entering the States, which in turn invalidated my work visa. A conference in Spain had me booked to speak the week after, and I never cancel on things like that. Unfortunately it meant I had to return to the US \"on holiday\" to live in the apartment I could not afford. </p>\n\n<p>The plan was to get rid of the apartment and get out of the country. I ended up having to wait an extra month and a half for the lease to run out, because my landlords were w***ers. Being in the USA on holiday made it illegal for me to work, so with no income other than the book royalties, I struggled to cover rent.</p>\n\n<p>I was broke, and the PHP community supported me. Close friends sent me about $1,000 in \"surprise loans\", but I also got about $2,000 in random donations and book over-payments. Some also payed for consulting time which they still haven't used. One person sent me $500, and I started crying in public. Being British I usually only understand emotions in the \"mild annoyance\" to \"frustration\" range. That was a pretty weird experience for me.</p>\n\n<p>Well, it brings me great pleasure to say... <em>everything is fixed!</em></p>\n\n<h2>New Job</h2>\n\n<p>I am working for an amazing company called <a href=\"http://ride.com\">Ride</a>. The product is genius, the team are smart as hell and the culture is perfect. </p>\n\n<p>We popped down to Colombia for an on-boarding process as some of the team live down that way. We got to planning roadmaps for v1.0 and onwards, and split ourselves up into teams for various services. I taught myself Go one afternoon looking out at the mountains in Bogota; which is not a sentence I would have expected to ever say.</p>\n\n<p>Better still, a few of the NYC team are cyclists and runners. One of them was even my partner for the <a href=\"/blog/2013/06/biked-to-the-beach-2013\">Bike to the Beach 2013</a> ride. Finally I can focus on shedding the extra 20lb (1 &amp; 1/2 stone for the Brits) that has jumped onto my face and belly over the last few months.</p>\n\n<h2>New Visa</h2>\n\n<p>I spent the weekend in London to get my new visa approved, and it's all golden. They will have it back to me in 10-14 days or so, meaning I should be back in the USA by early December.</p>\n\n<h2>Farefuckingwell Apartment</h2>\n\n<p>I sold <em>everything</em> I own - other than my bike - and got rid of the apartment. <strong>Side-note: In the last hour of moving out the \"next guy\" wandered in with his stuff and used <em>my</em> bathroom without even asking. Who does that?!</strong></p>\n\n<p>All my furniture is gone and the landlords owe me a massive security deposit cheque. It was huge because a Brit without <em>any</em> security deposit moving into NYC needs to pay about 3 months rent as security. That shit aint cheap.</p>\n\n<p>When I get back to NYC I'll start hunting for somewhere a little less expensive. Hopefully that can still be in Williamsburg, but maybe a little further into Brooklyn.</p>\n\n<h2>Getting Even</h2>\n\n<p>I am now out of debt and with a nice chunk of money in my account, for the first time since May, which means I need to make things even.</p>\n\n<p>The people who supported my visa application went through hell to \"make my immigration lawyers happy.\" I bribed those people with various rewards, and they've started to go out.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Thank you <a href=\"https://twitter.com/philsturgeon\">@philsturgeon</a> happy to have you in the USA. You&#39;re a great guy, no matter what everyone on Twitter says. <a href=\"http://t.co/YNWm2MjvvG\">pic.twitter.com/YNWm2MjvvG</a></p>&mdash; Zachary Ian Blank (@zachianblank) <a href=\"https://twitter.com/zachianblank/status/528190468547678208\">October 31, 2014</a></blockquote>\n\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>The $1,000 loaned to me by friends is back with them. That was nice and easy.</p>\n\n<p>The trickier part to resolve was the matter of the \"charity money\" I received. </p>\n\n<p>It was all sent in good will by people who wanted to help me out. Many said it was repayment for the time or money my articles, released code, contributions or whatever have saved them over the years.</p>\n\n<p>I told some people not to be silly and I would be fine, but to be honest I was fucked and when people were insistent I caved and sent them my payment information. It was tough to accept that, but at the time I didn't have any choice.</p>\n\n<p>I never release stuff as an investment hoping to get gold someday. I release code because it solves a problem for me and I hope it solves a problem for others. In the case of PyroCMS we started charging for it only because it was turning into a full-time job. We wanted to focus on the job instead of squeezing work between other paying work. Nothing wrong with having a business model in that case, but that is different to trying to squeeze money out of other projects. </p>\n\n<p>I have used a shitload of open-source stuff in my career and without it I would still be working in a shitty cinema in Bristol waiting to die. As developers we use, we improve, we share and we make our money from the products and services we build, not each little component.</p>\n\n<p>Anyway, these kind souls don't want the money back, and I can't in good conscience keep it. </p>\n\n<p>The PHP community supported me, so that of course means I have to give it back to the PHP community. <a href=\"http://phpwomen.org\">PHPWomen</a> do some great work in the community, and I love how they bring people to conferences who otherwise could not make it to speak or attend.</p>\n\n<p>Well I spoke to <a href=\"https://twitter.com/dshafik\">Davey Shafik</a> at PHPWomen and they are happy to take the money. They've had their first $500 from me, and they will get another three equal payments to put towards whatever they need. I will post up on here what they do with that money, so those not familiar with their good work will start to understand a bit better.</p>\n\n<h2>Good to be Back</h2>\n\n<p>I'm f**king excited. I feel like I have not done much this year. Things started going pear shaped in April, and between then and October I barely wrote any code. I was basically waiting for life to sort itself out, and when you are legally not allowed to work, and are friends with a lot of bartenders... you end up having a few.</p>\n\n<p>This new job has me doing some awesome things, and is definitely challenging me in a good way. Whilst I have experience with Ruby and Python and a whole bunch of frameworks, I have done far too much PHP for the last 10 years. I cannot wait to grow more as a developer and play around with a whole shitload of new languages and technologies.</p>\n\n<p>Expect me to post more about APIs, Go, Rails (shut up), and whatever Ride has me learning. We are building some exciting services with a wide range of languages, and the tools we use will change over time as our system and requirements grow too.</p>\n",
    "preview_hash": ""
  }
]